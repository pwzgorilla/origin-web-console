"use strict";

<<<<<<< 13ac2d832bc56edf6bc5e2fc652da9b188ddae32
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< b4ddc9b550515059b9681d76233c34b7f7b3431c
<<<<<<< 2ce32f87748ff2fe030a6b53ff9490fcb80d856d
<<<<<<< 75fc56b9e42e29e1492befd08624dd0e5dade866
<<<<<<< 247459038ac366429876741dd447ec652f2f5e7d
<<<<<<< 714c4a3ff94bc485f89078ceeb8105e8b94271be
<<<<<<< 0c40bfb0d97d474f70b5801c1312be38074c32cb
<<<<<<< 13bb99b3a012682f72ebab813cdb86be2a15f55e
<<<<<<< 1f5fb674ad14c7e78d2e82e837750bd2747349ab
<<<<<<< a19b22733566f12a68db59a49bc16848fffba594
<<<<<<< d21c662f039266e2dd235fa32bd86d3647c082ae
<<<<<<< 77ce3ebb70d0568ad8fbbb649b8a01f54552ad2c
<<<<<<< 46344541d4f20e3585d6ea01425f784292c0d84a
<<<<<<< 3087d5859f05def6301fced3a013ac9165fd8c7a
<<<<<<< 0ba73cbc37b88f92a6380ccc93fc8e3d978020aa
<<<<<<< 9bc0af8cb56dcc9609307333b9424f396867cab5
<<<<<<< 602d786018a3879a89789b1214b36a15c51b928b
<<<<<<< 33eb37eab8df0c17bc226501a924a2dc2b9b2f41
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
function OverviewController(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, A, B, C, D) {
var E = this, F = b("isIE")(), G = 6e4;
a.projectName = d.project, E.catalogLandingPageEnabled = !k.DISABLE_SERVICE_CATALOG_LANDING_PAGE;
var H, I, J = b("annotation"), K = b("canI"), L = b("buildConfigForBuild"), M = b("deploymentIsInProgress"), N = b("imageObjectRef"), O = b("isJenkinsPipelineStrategy"), P = b("isNewerResource"), Q = b("label"), R = b("podTemplate"), S = f.getPreferredVersion("servicebindings"), T = f.getPreferredVersion("clusterserviceclasses"), U = f.getPreferredVersion("serviceinstances"), V = f.getPreferredVersion("clusterserviceplans"), W = {}, X = {}, Y = {}, Z = E.state = {
=======
function OverviewController(e, t, n, a, r, o, i, s, c, l, u, d, m, p, g, f, h, v, y, b, C, S, w, k, j) {
var P = this, R = t("isIE")() || t("isEdge")();
e.projectName = n.project;
<<<<<<< 9cc4f1b3be7962f38dedf1e6eb381217dccafaae
<<<<<<< 72f2428654a3a28b0425e786505ad4ce7b45f7f6
<<<<<<< 8de63508433dbba58881278365f8313e3c2550fc
<<<<<<< b9f74dc9163281caa65a7366573d340fa288654d
<<<<<<< 7fc0bb75a45e57cf2098d66ed317a3123741a3d2
<<<<<<< 7d5cc388b34d6a87a5e2ae6b26f6b146dae1daa3
<<<<<<< 952b26bc3acaa89a51e4aad5f965e515d3b007ae
<<<<<<< 8ab4f4a09cf53190c7bc08d260e963252c3ba6a5
<<<<<<< 711ef95cfa1533e04a97dcbc40eee8ab13234241
<<<<<<< 9854a04a93530a5cbed260dddc4991d2b65730e5
var E, N, D = t("annotation"), I = t("buildConfigForBuild"), B = t("deploymentIsInProgress"), A = t("imageObjectRef"), L = t("isJenkinsPipelineStrategy"), U = t("isNewerResource"), O = t("label"), x = t("podTemplate"), F = {}, M = {}, V = {}, q = R.state = {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
var E, N, D = t("annotation"), I = t("buildConfigForBuild"), A = t("deploymentIsInProgress"), B = t("imageObjectRef"), L = t("isJenkinsPipelineStrategy"), U = t("isNewerResource"), O = t("label"), x = t("podTemplate"), F = {}, M = {}, V = {}, q = R.state = {
>>>>>>> Improve YAML editor validation and feedback
=======
var E, D, N = t("annotation"), I = t("buildConfigForBuild"), A = t("deploymentIsInProgress"), B = t("imageObjectRef"), L = t("isJenkinsPipelineStrategy"), U = t("isNewerResource"), O = t("label"), x = t("podTemplate"), F = {}, M = {}, V = {}, q = R.state = {
>>>>>>> Label Filter for Kubernetes Deployment History Tab
=======
var E, D, N = t("annotation"), I = t("buildConfigForBuild"), B = t("deploymentIsInProgress"), A = t("imageObjectRef"), L = t("isJenkinsPipelineStrategy"), U = t("isNewerResource"), O = t("label"), x = t("podTemplate"), F = {}, M = {}, V = {}, q = R.state = {
>>>>>>> Upgrade to angular-patternfly v4.1.1 and patternfly v3.25.1
=======
var E, T, I = t("annotation"), D = t("buildConfigForBuild"), N = t("deploymentIsInProgress"), A = t("imageObjectRef"), B = t("isJenkinsPipelineStrategy"), L = t("isNewerResource"), U = t("label"), O = t("podTemplate"), x = {}, F = {}, M = {}, V = R.state = {
>>>>>>> Add bindings list to resource pages
=======
var E, T, I = t("annotation"), D = t("buildConfigForBuild"), N = t("deploymentIsInProgress"), A = t("imageObjectRef"), B = t("isJenkinsPipelineStrategy"), L = t("isNewerResource"), U = t("label"), O = t("podTemplate"), x = {}, F = {}, M = {}, V = P.state = {
>>>>>>> Adding Deploy Image and Import YAML / JSON functionality to catalog
=======
var E, T, I = t("annotation"), N = t("buildConfigForBuild"), D = t("deploymentIsInProgress"), A = t("imageObjectRef"), B = t("isJenkinsPipelineStrategy"), L = t("isNewerResource"), U = t("label"), O = t("podTemplate"), x = {}, F = {}, M = {}, V = P.state = {
>>>>>>> Bug 1481127 - More robust handling of large project lists
=======
var E, T, N = t("annotation"), I = t("buildConfigForBuild"), D = t("deploymentIsInProgress"), A = t("imageObjectRef"), B = t("isJenkinsPipelineStrategy"), L = t("isNewerResource"), U = t("label"), O = t("podTemplate"), x = {}, F = {}, M = {}, V = P.state = {
>>>>>>> Add notification-drawer to show curated list of events to user
=======
var E, T, I = t("annotation"), N = t("buildConfigForBuild"), D = t("deploymentIsInProgress"), A = t("imageObjectRef"), B = t("isJenkinsPipelineStrategy"), L = t("isNewerResource"), U = t("label"), O = t("podTemplate"), x = {}, F = {}, M = {}, V = P.state = {
>>>>>>> bug 1480988. Use project annotation to determine kibana url for ops namespaces
=======
var E, T, N = t("annotation"), I = t("buildConfigForBuild"), D = t("deploymentIsInProgress"), A = t("imageObjectRef"), B = t("isJenkinsPipelineStrategy"), L = t("isNewerResource"), U = t("label"), O = t("podTemplate"), F = {}, x = {}, M = {}, V = P.state = {
>>>>>>> Show provision status of service instances on the overview page.
=======
var E, T, I = t("annotation"), N = t("buildConfigForBuild"), D = t("deploymentIsInProgress"), A = t("imageObjectRef"), B = t("isJenkinsPipelineStrategy"), L = t("isNewerResource"), U = t("label"), O = t("podTemplate"), x = {}, F = {}, M = {}, V = P.state = {
>>>>>>> Adjust events to show in the drawer
=======
function OverviewController(e, t, n, a, r, o, i, s, c, l, u, d, m, p, f, g, h, v, y, b, C, S, w, k, j) {
=======
function OverviewController(e, t, n, a, r, o, i, s, c, l, u, d, p, m, f, g, h, v, y, b, C, S, w, k, j) {
>>>>>>> Updates for Service Instance & Bindings
=======
function OverviewController(e, t, n, a, r, o, i, s, c, l, u, d, m, p, f, g, h, v, y, b, C, S, w, k, j) {
>>>>>>> Support EnvFrom in the Env Editors
var P = this, R = t("isIE")() || t("isEdge")();
<<<<<<< 0666ab16a69f060ee6faef6feade97117cedbd56
e.projectName = n.project;
<<<<<<< 579cbe4ce2e640c919f9687b5c885f661897db96
var E, T, I = t("annotation"), N = t("buildConfigForBuild"), D = t("deploymentIsInProgress"), A = t("imageObjectRef"), B = t("isJenkinsPipelineStrategy"), L = t("isNewerResource"), U = t("label"), O = t("podTemplate"), F = {}, x = {}, M = {}, V = P.state = {
>>>>>>> Patternfly vertical navigation and project bar
=======
var T, E, I = t("annotation"), N = t("buildConfigForBuild"), D = t("deploymentIsInProgress"), A = t("imageObjectRef"), B = t("isJenkinsPipelineStrategy"), L = t("isNewerResource"), U = t("label"), O = t("podTemplate"), F = {}, x = {}, M = {}, V = P.state = {
>>>>>>> Add the ability to add a secret to an application
=======
e.projectName = n.project, P.catalogLandingPageEnabled = !c.DISABLE_SERVICE_CATALOG_LANDING_PAGE;
<<<<<<< 9bc0af8cb56dcc9609307333b9424f396867cab5
<<<<<<< 28651868c34b8ebf846f1da11eea62cc91408c4c
<<<<<<< 602d786018a3879a89789b1214b36a15c51b928b
var T, I, E = t("annotation"), N = t("buildConfigForBuild"), D = t("deploymentIsInProgress"), A = t("imageObjectRef"), B = t("isJenkinsPipelineStrategy"), L = t("isNewerResource"), U = t("label"), O = t("podTemplate"), F = {}, x = {}, M = {}, V = P.state = {
>>>>>>> Enable new landing page experience by default
=======
var I, T, E = t("annotation"), N = t("buildConfigForBuild"), D = t("deploymentIsInProgress"), A = t("imageObjectRef"), B = t("isJenkinsPipelineStrategy"), L = t("isNewerResource"), U = t("label"), O = t("podTemplate"), F = {}, x = {}, M = {}, V = P.state = {
>>>>>>> Updates for Service Instance & Bindings
=======
var I, T, N = t("annotation"), E = t("buildConfigForBuild"), D = t("deploymentIsInProgress"), A = t("imageObjectRef"), B = t("isJenkinsPipelineStrategy"), L = t("isNewerResource"), U = t("label"), O = t("podTemplate"), F = {}, x = {}, M = {}, V = P.state = {
>>>>>>> Quota Notifications
=======
var I, E, T = t("annotation"), N = t("buildConfigForBuild"), D = t("deploymentIsInProgress"), A = t("imageObjectRef"), B = t("isJenkinsPipelineStrategy"), L = t("isNewerResource"), U = t("label"), O = t("podTemplate"), F = {}, x = {}, M = {}, V = P.state = {
>>>>>>> Support EnvFrom in the Env Editors
=======
function OverviewController(e, t, n, a, r, o, i, s, c, l, u, d, m, p, f, g, h, v, y, b, C, S, w, k, j, P) {
=======
function OverviewController(e, t, n, a, r, o, i, s, c, l, u, d, m, p, f, g, v, h, y, b, C, S, w, k, j, P) {
<<<<<<< 5968d52e2c8691c9334d0811cd6fcba946ef1ac7
>>>>>>> Add SVG icons
var R = this, I = t("isIE")() || t("isEdge")();
=======
=======
function OverviewController(e, t, n, a, r, o, i, s, c, l, u, d, m, p, f, g, v, h, y, b, S, C, w, k, P, j) {
>>>>>>> Service instance details configuration and edit
=======
function OverviewController(e, t, n, a, r, o, i, s, c, l, u, d, m, p, f, g, v, h, y, b, S, C, w, k, j, P) {
>>>>>>> Add product icons for service catalog
=======
function OverviewController(e, t, n, a, r, o, i, s, c, l, u, d, m, p, f, g, v, h, y, b, S, C, w, k, P, j) {
>>>>>>> Handle displaying parameters when secrets are not available.
=======
function OverviewController(e, t, n, a, r, o, i, s, c, l, u, d, m, p, f, g, v, h, y, b, C, S, w, k, j, P) {
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
function OverviewController(e, t, n, a, r, o, i, s, c, l, u, d, m, p, f, g, v, h, y, b, C, S, w, k, P, j) {
>>>>>>> Update template service broker flag name
var R = this, I = t("isIE")();
>>>>>>> Allow unlimited websockets on Edge - also fix leaking websockets on monitoring page
e.projectName = n.project, R.catalogLandingPageEnabled = !l.DISABLE_SERVICE_CATALOG_LANDING_PAGE;
<<<<<<< 1f5fb674ad14c7e78d2e82e837750bd2747349ab
<<<<<<< a19b22733566f12a68db59a49bc16848fffba594
<<<<<<< d21c662f039266e2dd235fa32bd86d3647c082ae
<<<<<<< 5ee4e8975cd809cf7a654cbc903e7d305ed5ecb9
<<<<<<< c1147318f73829c1cb8cbc26a6e386eac5cdc733
var E, T, N = t("annotation"), D = t("canI"), A = t("buildConfigForBuild"), B = t("deploymentIsInProgress"), L = t("imageObjectRef"), U = t("isJenkinsPipelineStrategy"), O = t("isNewerResource"), F = t("label"), x = t("podTemplate"), M = r.getPreferredVersion("servicebindings"), V = r.getPreferredVersion("clusterserviceclasses"), q = r.getPreferredVersion("serviceinstances"), z = r.getPreferredVersion("clusterserviceplans"), H = {}, G = {}, K = {}, W = R.state = {
>>>>>>> Adopt service catalog API changes
=======
var E, T, N = t("annotation"), D = t("canI"), A = t("buildConfigForBuild"), B = t("deploymentIsInProgress"), L = t("imageObjectRef"), U = t("isJenkinsPipelineStrategy"), O = t("isNewerResource"), F = t("label"), x = t("podTemplate"), V = r.getPreferredVersion("servicebindings"), M = r.getPreferredVersion("clusterserviceclasses"), q = r.getPreferredVersion("serviceinstances"), z = r.getPreferredVersion("clusterserviceplans"), H = {}, G = {}, K = {}, W = R.state = {
>>>>>>> Adopt more service catalog API changes
=======
var E, T, N = t("annotation"), D = t("canI"), A = t("buildConfigForBuild"), B = t("deploymentIsInProgress"), L = t("imageObjectRef"), U = t("isJenkinsPipelineStrategy"), O = t("isNewerResource"), F = t("label"), x = t("podTemplate"), V = r.getPreferredVersion("servicebindings"), M = r.getPreferredVersion("clusterserviceclasses"), q = r.getPreferredVersion("serviceinstances"), z = r.getPreferredVersion("clusterserviceplans"), H = {}, G = {}, W = {}, K = R.state = {
>>>>>>> Replacing empty tables with empty state message
=======
var E, T, N = t("annotation"), D = t("canI"), A = t("buildConfigForBuild"), B = t("deploymentIsInProgress"), L = t("imageObjectRef"), U = t("isJenkinsPipelineStrategy"), O = t("isNewerResource"), F = t("label"), x = t("podTemplate"), V = r.getPreferredVersion("servicebindings"), M = r.getPreferredVersion("clusterserviceclasses"), q = r.getPreferredVersion("serviceinstances"), z = r.getPreferredVersion("clusterserviceplans"), H = {}, G = {}, K = {}, W = R.state = {
>>>>>>> Handle displaying parameters when secrets are not available.
=======
var E, N, T = t("annotation"), D = t("canI"), A = t("buildConfigForBuild"), B = t("deploymentIsInProgress"), L = t("imageObjectRef"), U = t("isJenkinsPipelineStrategy"), O = t("isNewerResource"), F = t("label"), x = t("podTemplate"), V = r.getPreferredVersion("servicebindings"), M = r.getPreferredVersion("clusterserviceclasses"), q = r.getPreferredVersion("serviceinstances"), z = r.getPreferredVersion("clusterserviceplans"), H = {}, G = {}, K = {}, W = R.state = {
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
var E, T, N = t("annotation"), D = t("canI"), A = t("buildConfigForBuild"), B = t("deploymentIsInProgress"), L = t("imageObjectRef"), U = t("isJenkinsPipelineStrategy"), O = t("isNewerResource"), F = t("label"), x = t("podTemplate"), V = r.getPreferredVersion("servicebindings"), M = r.getPreferredVersion("clusterserviceclasses"), q = r.getPreferredVersion("serviceinstances"), z = r.getPreferredVersion("clusterserviceplans"), H = {}, G = {}, K = {}, W = R.state = {
>>>>>>> Update template service broker flag name
=======
function OverviewController(e, t, n, a, r, o, i, s, c, l, u, d, m, p, f, g, v, h, y, b, C, S, w, k, P, j, R, I) {
=======
function OverviewController(e, t, n, a, r, o, i, s, c, l, u, d, m, p, f, g, v, h, y, b, C, S, w, P, k, j, R, I) {
>>>>>>> Fix for adding non-builder templates to a project
=======
function OverviewController(e, t, n, a, r, o, i, s, c, l, u, d, m, p, f, g, v, h, y, b, C, S, w, k, P, j, R, I) {
>>>>>>> Bug 1505281 - Improve import YAML results message
=======
function OverviewController(e, t, n, a, r, o, i, s, c, l, u, d, m, p, f, g, v, h, y, b, S, C, w, k, P, j, R, I) {
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
=======
function OverviewController(e, t, n, a, r, o, i, s, c, l, u, d, m, p, f, g, v, h, y, b, S, C, w, k, P, j, R, I) {
>>>>>>> Adding label filter to ste secrets page
=======
function OverviewController(e, t, n, a, r, o, i, s, c, l, u, d, m, p, f, g, v, h, y, b, S, C, w, P, k, j, R, I) {
>>>>>>> Update pod controller to use getPreferredVersion
=======
function OverviewController(e, t, n, a, r, o, i, s, c, l, u, d, m, p, f, g, v, h, y, b, S, C, w, P, k, j, I, R) {
>>>>>>> Add search catalog in project context
var E = this, T = t("isIE")();
e.projectName = a.project, E.catalogLandingPageEnabled = !u.DISABLE_SERVICE_CATALOG_LANDING_PAGE;
<<<<<<< 06fbfb52480e8cc20e5a3f4162b2ca9038ca931e
<<<<<<< 7bf7823be61d31cbcc56164e8989102db4019779
<<<<<<< efac32e4a13e2aac92238d69168ae1212cab677f
<<<<<<< 95202452f2b81c9bc8bc144dd2acf1c4e4d42bb8
<<<<<<< 108d45a2ac9babe3c2b0751225807b0260dca3b6
<<<<<<< af20237e01df8756b3fcd23b6115674686c4e420
<<<<<<< 5bd87652785e7e3c71d4b7b194cb0eb0fca57124
<<<<<<< 44f396286c95279739890891eea2b89e4abdde15
<<<<<<< dcc2597a3dba049aabc111ffd8a8e1cd9f390594
var N, D, A = t("annotation"), B = t("canI"), L = t("buildConfigForBuild"), U = t("deploymentIsInProgress"), O = t("imageObjectRef"), F = t("isJenkinsPipelineStrategy"), x = t("isNewerResource"), V = t("label"), M = t("podTemplate"), q = o.getPreferredVersion("servicebindings"), z = o.getPreferredVersion("clusterserviceclasses"), H = o.getPreferredVersion("serviceinstances"), G = o.getPreferredVersion("clusterserviceplans"), K = {}, W = {}, Q = {}, J = E.state = {
>>>>>>> Wait for service classes and plans to load
=======
var N, D, A = t("annotation"), B = t("canI"), L = t("buildConfigForBuild"), U = t("deploymentIsInProgress"), O = t("imageObjectRef"), F = t("isJenkinsPipelineStrategy"), V = t("isNewerResource"), x = t("label"), M = t("podTemplate"), q = o.getPreferredVersion("servicebindings"), z = o.getPreferredVersion("clusterserviceclasses"), H = o.getPreferredVersion("serviceinstances"), G = o.getPreferredVersion("clusterserviceplans"), K = {}, W = {}, Q = {}, J = E.state = {
>>>>>>> Update routes controller to use getPreferredVersion
=======
var N, D, A = t("annotation"), B = t("canI"), L = t("buildConfigForBuild"), U = t("deploymentIsInProgress"), O = t("imageObjectRef"), F = t("isJenkinsPipelineStrategy"), V = t("isNewerResource"), x = t("label"), M = t("podTemplate"), q = o.getPreferredVersion("servicebindings"), z = o.getPreferredVersion("clusterserviceclasses"), H = o.getPreferredVersion("serviceinstances"), G = o.getPreferredVersion("clusterserviceplans"), K = {}, W = {}, Q = {}, J = E.state = {
>>>>>>> Update replicaSets controller to use getPreferredVersion
=======
var N, D, A = t("annotation"), B = t("canI"), L = t("buildConfigForBuild"), U = t("deploymentIsInProgress"), O = t("imageObjectRef"), F = t("isJenkinsPipelineStrategy"), V = t("isNewerResource"), x = t("label"), M = t("podTemplate"), q = o.getPreferredVersion("servicebindings"), z = o.getPreferredVersion("clusterserviceclasses"), H = o.getPreferredVersion("serviceinstances"), G = o.getPreferredVersion("clusterserviceplans"), K = {}, W = {}, Q = {}, J = E.state = {
>>>>>>> Update secret, secrets controllers to use getPreferredVersion
=======
var N, D, A = t("annotation"), B = t("canI"), L = t("buildConfigForBuild"), U = t("deploymentIsInProgress"), O = t("imageObjectRef"), F = t("isJenkinsPipelineStrategy"), V = t("isNewerResource"), x = t("label"), M = t("podTemplate"), q = o.getPreferredVersion("servicebindings"), z = o.getPreferredVersion("clusterserviceclasses"), H = o.getPreferredVersion("serviceinstances"), G = o.getPreferredVersion("clusterserviceplans"), K = {}, W = {}, Q = {}, J = E.state = {
>>>>>>> Update serviceInstance, serviceInstances controllers to use getPreferredVersion
=======
=======
function OverviewController(e, t, n, r, a, o, i, s, c, l, u, d, m, p, f, g, v, h, y, b, S, C, w, P, k, j, I, R) {
var E = this, T = t("isIE")();
e.projectName = r.project, E.catalogLandingPageEnabled = !u.DISABLE_SERVICE_CATALOG_LANDING_PAGE;
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
var N, D, A = t("annotation"), B = t("canI"), L = t("buildConfigForBuild"), U = t("deploymentIsInProgress"), O = t("imageObjectRef"), V = t("isJenkinsPipelineStrategy"), F = t("isNewerResource"), x = t("label"), M = t("podTemplate"), q = o.getPreferredVersion("servicebindings"), z = o.getPreferredVersion("clusterserviceclasses"), H = o.getPreferredVersion("serviceinstances"), G = o.getPreferredVersion("clusterserviceplans"), K = {}, W = {}, Q = {}, J = E.state = {
>>>>>>> Update directives/deployImage to use getPreferredVersion
=======
var N, D, A = t("annotation"), B = t("canI"), L = t("buildConfigForBuild"), U = t("deploymentIsInProgress"), O = t("imageObjectRef"), V = t("isJenkinsPipelineStrategy"), F = t("isNewerResource"), x = t("label"), M = t("podTemplate"), q = o.getPreferredVersion("servicebindings"), z = o.getPreferredVersion("clusterserviceclasses"), H = o.getPreferredVersion("serviceinstances"), G = o.getPreferredVersion("clusterserviceplans"), K = {}, W = {}, Q = {}, J = E.state = {
>>>>>>> Update directives/serviceBinding to use getPreferredVersion
=======
var N, D, A = t("annotation"), B = t("canI"), L = t("buildConfigForBuild"), U = t("deploymentIsInProgress"), O = t("imageObjectRef"), V = t("isJenkinsPipelineStrategy"), F = t("isNewerResource"), x = t("label"), M = t("podTemplate"), q = o.getPreferredVersion("servicebindings"), z = o.getPreferredVersion("clusterserviceclasses"), H = o.getPreferredVersion("serviceinstances"), G = o.getPreferredVersion("clusterserviceplans"), K = {}, W = {}, Q = {}, J = E.state = {
>>>>>>> Update directives/oscPersistentVolumeClaim to use getPreferredVersion
=======
var N, D, A = t("annotation"), B = t("canI"), L = t("buildConfigForBuild"), U = t("deploymentIsInProgress"), O = t("imageObjectRef"), V = t("isJenkinsPipelineStrategy"), F = t("isNewerResource"), x = t("label"), M = t("podTemplate"), q = o.getPreferredVersion("servicebindings"), z = o.getPreferredVersion("clusterserviceclasses"), H = o.getPreferredVersion("serviceinstances"), G = o.getPreferredVersion("clusterserviceplans"), K = {}, W = {}, Q = {}, J = E.state = {
>>>>>>> Update nextSteps controller to use getPreferredVersion
=======
var N, D, A = t("annotation"), B = t("canI"), L = t("buildConfigForBuild"), U = t("deploymentIsInProgress"), O = t("imageObjectRef"), V = t("isJenkinsPipelineStrategy"), F = t("isNewerResource"), x = t("label"), M = t("podTemplate"), q = o.getPreferredVersion("servicebindings"), z = o.getPreferredVersion("clusterserviceclasses"), H = o.getPreferredVersion("serviceinstances"), G = o.getPreferredVersion("clusterserviceplans"), K = {}, W = {}, Q = {}, J = E.state = {
>>>>>>> Update createFromImage controller to use getPreferredVersion
=======
function OverviewController(e, t, n, r, a, o, i, s, c, l, u, d, m, p, f, g, v, h, y, b, S, C, w, P, j, k, I, R, E) {
var T = this, N = t("isIE")();
e.projectName = a.project, T.catalogLandingPageEnabled = !d.DISABLE_SERVICE_CATALOG_LANDING_PAGE;
<<<<<<< 03048c83a11138780b80c1ac333639429e2925cd
<<<<<<< 54fd2fbbc13bc9ca6203880fcea399383443bb5d
<<<<<<< 18c5e54bc88f7af8cfcb949a411aa8b0da3e7e9c
var D, A, B = t("annotation"), L = t("canI"), U = t("buildConfigForBuild"), O = t("deploymentIsInProgress"), V = t("imageObjectRef"), F = t("isJenkinsPipelineStrategy"), x = t("isNewerResource"), M = t("label"), q = t("podTemplate"), z = i.getPreferredVersion("servicebindings"), H = i.getPreferredVersion("clusterserviceclasses"), G = i.getPreferredVersion("serviceinstances"), K = i.getPreferredVersion("clusterserviceplans"), W = {}, Q = {}, J = {}, Y = T.state = {
>>>>>>> Add Browse Catalog to Project context view.
=======
var D = t("annotation"), A = t("canI"), B = t("buildConfigForBuild"), L = t("deploymentIsInProgress"), U = t("imageObjectRef"), O = t("isJenkinsPipelineStrategy"), V = t("isNewerResource"), F = t("label"), x = t("podTemplate"), M = i.getPreferredVersion("deployments"), q = i.getPreferredVersion("horizontalpodautoscalers"), z = i.getPreferredVersion("servicebindings"), H = i.getPreferredVersion("clusterserviceclasses"), G = i.getPreferredVersion("serviceinstances"), K = i.getPreferredVersion("clusterserviceplans"), W = i.getPreferredVersion("statefulsets"), Q = i.getPreferredVersion("replicasets");
=======
var D = t("annotation"), A = t("canI"), B = t("buildConfigForBuild"), L = t("deploymentIsInProgress"), U = t("imageObjectRef"), V = t("isJenkinsPipelineStrategy"), O = t("isNewerResource"), F = t("label"), x = t("podTemplate"), M = i.getPreferredVersion("deployments"), q = i.getPreferredVersion("horizontalpodautoscalers"), z = i.getPreferredVersion("servicebindings"), H = i.getPreferredVersion("clusterserviceclasses"), G = i.getPreferredVersion("serviceinstances"), K = i.getPreferredVersion("clusterserviceplans"), W = i.getPreferredVersion("statefulsets"), Q = i.getPreferredVersion("replicasets");
>>>>>>> Fix start build & deploy via correct instantiateVersions, add $filter to build group/resource string
=======
var D = t("annotation"), A = t("canI"), B = t("buildConfigForBuild"), L = t("deploymentIsInProgress"), V = t("imageObjectRef"), U = t("isJenkinsPipelineStrategy"), O = t("isNewerResource"), F = t("label"), x = t("podTemplate"), M = i.getPreferredVersion("deployments"), q = i.getPreferredVersion("horizontalpodautoscalers"), z = i.getPreferredVersion("servicebindings"), H = i.getPreferredVersion("clusterserviceclasses"), G = i.getPreferredVersion("serviceinstances"), K = i.getPreferredVersion("clusterserviceplans"), W = i.getPreferredVersion("statefulsets"), Q = i.getPreferredVersion("replicasets");
>>>>>>> Update membership to use new rbac endpoints
T.buildConfigsInstantiateVersion = i.getPreferredVersion("buildconfigs/instantiate");
var J, Y, Z = {}, X = {}, ee = {}, te = T.state = {
>>>>>>> Additional getPreferredVersion updates to overview
alerts: {},
builds: {},
clusterQuotas: {},
imageStreamImageRefByDockerReference: {},
imagesByDockerReference: {},
limitRanges: {},
<<<<<<< 13ac2d832bc56edf6bc5e2fc652da9b188ddae32
<<<<<<< 13bb99b3a012682f72ebab813cdb86be2a15f55e
<<<<<<< 0ba73cbc37b88f92a6380ccc93fc8e3d978020aa
<<<<<<< 7d5cc388b34d6a87a5e2ae6b26f6b146dae1daa3
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
limitWatches: F,
=======
limitWatches: P,
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
limitWatches: R,
>>>>>>> Adding Deploy Image and Import YAML / JSON functionality to catalog
=======
limitWatches: I,
>>>>>>> Adopt service catalog API changes
=======
limitWatches: T,
>>>>>>> Wait for service classes and plans to load
=======
limitWatches: N,
>>>>>>> Add Browse Catalog to Project context view.
notificationsByObjectUID: {},
pipelinesByDeploymentConfig: {},
podsByOwnerUID: {},
quotas: {},
recentPipelinesByDeploymentConfig: {},
routesByService: {},
servicesByObjectUID: {},
serviceInstances: {},
<<<<<<< 0ba73cbc37b88f92a6380ccc93fc8e3d978020aa
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
serviceClasses: {},
servicePlans: {},
=======
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
serviceClasses: {},
servicePlans: {},
>>>>>>> Adopt service catalog API changes
bindingsByInstanceRef: {},
bindingsByApplicationUID: {},
applicationsByBinding: {},
showMetrics: !1
};
<<<<<<< 13ac2d832bc56edf6bc5e2fc652da9b188ddae32
<<<<<<< 13bb99b3a012682f72ebab813cdb86be2a15f55e
<<<<<<< 0ba73cbc37b88f92a6380ccc93fc8e3d978020aa
<<<<<<< 9bc0af8cb56dcc9609307333b9424f396867cab5
<<<<<<< 602d786018a3879a89789b1214b36a15c51b928b
<<<<<<< 7d5cc388b34d6a87a5e2ae6b26f6b146dae1daa3
<<<<<<< 952b26bc3acaa89a51e4aad5f965e515d3b007ae
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
E.state.breakpoint = o.getBreakpoint();
var aa = _.throttle(function() {
var b = o.getBreakpoint();
E.state.breakpoint !== b && a.$evalAsync(function() {
E.state.breakpoint = b;
});
}, 50);
$(window).on("resize.overview", aa), E.showGetStarted = !1, E.showLoading = !0, E.filterByOptions = [ {
=======
R.state.breakpoint = d.getBreakpoint();
var z = _.throttle(function() {
var t = d.getBreakpoint();
=======
R.state.breakpoint = m.getBreakpoint();
var q = _.throttle(function() {
var t = m.getBreakpoint();
>>>>>>> Add bindings list to resource pages
R.state.breakpoint !== t && e.$evalAsync(function() {
R.state.breakpoint = t;
});
}, 50);
<<<<<<< 952b26bc3acaa89a51e4aad5f965e515d3b007ae
$(window).on("resize.overview", z), R.showGetStarted = !1, R.showLoading = !0, R.filterByOptions = [ {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
$(window).on("resize.overview", q), R.showGetStarted = !1, R.showLoading = !0, R.filterByOptions = [ {
>>>>>>> Add bindings list to resource pages
=======
P.state.breakpoint = m.getBreakpoint();
=======
P.state.breakpoint = p.getBreakpoint();
>>>>>>> Updates for Service Instance & Bindings
=======
P.state.breakpoint = m.getBreakpoint();
>>>>>>> Support EnvFrom in the Env Editors
var q = _.throttle(function() {
var t = m.getBreakpoint();
P.state.breakpoint !== t && e.$evalAsync(function() {
P.state.breakpoint = t;
});
}, 50);
$(window).on("resize.overview", q), P.showGetStarted = !1, P.showLoading = !0, P.filterByOptions = [ {
>>>>>>> Adding Deploy Image and Import YAML / JSON functionality to catalog
=======
R.state.breakpoint = p.getBreakpoint();
var Q = _.throttle(function() {
var t = p.getBreakpoint();
R.state.breakpoint !== t && e.$evalAsync(function() {
R.state.breakpoint = t;
});
}, 50);
$(window).on("resize.overview", Q), R.showGetStarted = !1, R.showLoading = !0, R.filterByOptions = [ {
>>>>>>> Adopt service catalog API changes
=======
E.state.breakpoint = f.getBreakpoint();
var Y = _.throttle(function() {
var t = f.getBreakpoint();
E.state.breakpoint !== t && e.$evalAsync(function() {
E.state.breakpoint = t;
});
}, 50);
$(window).on("resize.overview", Y), E.showGetStarted = !1, E.showLoading = !0, E.filterByOptions = [ {
>>>>>>> Wait for service classes and plans to load
=======
T.state.breakpoint = g.getBreakpoint();
var ne = _.throttle(function() {
var t = g.getBreakpoint();
T.state.breakpoint !== t && e.$evalAsync(function() {
T.state.breakpoint = t;
});
}, 50);
<<<<<<< 18c5e54bc88f7af8cfcb949a411aa8b0da3e7e9c
$(window).on("resize.overview", Z), T.showGetStarted = !1, T.showLoading = !0, T.filterByOptions = [ {
>>>>>>> Add Browse Catalog to Project context view.
=======
$(window).on("resize.overview", ne), T.showGetStarted = !1, T.showLoading = !0, T.filterByOptions = [ {
>>>>>>> Additional getPreferredVersion updates to overview
id: "name",
label: "Name"
}, {
id: "label",
label: "Label"
<<<<<<< 13ac2d832bc56edf6bc5e2fc652da9b188ddae32
<<<<<<< 13bb99b3a012682f72ebab813cdb86be2a15f55e
<<<<<<< 3087d5859f05def6301fced3a013ac9165fd8c7a
<<<<<<< 0ba73cbc37b88f92a6380ccc93fc8e3d978020aa
<<<<<<< 33eb37eab8df0c17bc226501a924a2dc2b9b2f41
<<<<<<< 7d5cc388b34d6a87a5e2ae6b26f6b146dae1daa3
<<<<<<< 952b26bc3acaa89a51e4aad5f965e515d3b007ae
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
} ], E.filterBy = r.getLabelSelector().isEmpty() ? "name" : "label", E.viewByOptions = [ {
id: "app",
label: C("Application")
}, {
id: "resource",
label: C("Resource Type")
}, {
id: "pipeline",
label: C("Pipeline")
} ];
var ba = function(a) {
return _.get(a, "metadata.name");
}, ca = function(a) {
return _.get(a, "metadata.uid");
}, da = function() {
return _.size(E.deploymentConfigs) + _.size(E.vanillaReplicationControllers) + _.size(E.deployments) + _.size(E.vanillaReplicaSets) + _.size(E.statefulSets) + _.size(E.monopods) + _.size(E.state.serviceInstances);
}, ea = function() {
return _.size(E.filteredDeploymentConfigs) + _.size(E.filteredReplicationControllers) + _.size(E.filteredDeployments) + _.size(E.filteredReplicaSets) + _.size(E.filteredStatefulSets) + _.size(E.filteredMonopods) + _.size(E.filteredServiceInstances);
}, fa = function() {
E.size = da(), E.filteredSize = ea();
var a = 0 === E.size, b = E.deploymentConfigs && E.replicationControllers && E.deployments && E.replicaSets && E.statefulSets && E.pods && E.state.serviceInstances;
Z.expandAll = b && 1 === E.size, E.showGetStarted = b && a, E.showLoading = !b && a, E.everythingFiltered = !a && !E.filteredSize, E.hidePipelineOtherResources = "pipeline" === E.viewBy && (E.filterActive || _.isEmpty(E.pipelineBuildConfigs));
}, ga = function(a) {
return g.groupByApp(a, "metadata.name");
}, ha = function(a) {
var b = null;
return _.each(a, function(a) {
return b ? void (b = A.getPreferredDisplayRoute(b, a)) : void (b = a);
}), b;
}, ia = _.debounce(function() {
a.$evalAsync(function() {
if (E.bestRouteByApp = {}, E.routes) {
var a = [ E.filteredDeploymentConfigsByApp, E.filteredReplicationControllersByApp, E.filteredDeploymentsByApp, E.filteredReplicaSetsByApp, E.filteredStatefulSetsByApp, E.filteredMonopodsByApp ];
_.each(E.apps, function(b) {
var c = {};
_.each(a, function(a) {
var d = _.get(a, b, []);
_.each(d, function(a) {
var b = ca(a), d = _.get(Z, [ "servicesByObjectUID", b ], []);
_.each(d, function(a) {
var b = _.get(Z, [ "routesByService", a.metadata.name ], []);
_.assign(c, _.keyBy(b, "metadata.name"));
});
});
}), E.bestRouteByApp[b] = ha(c);
=======
} ], R.filterBy = g.getLabelSelector().isEmpty() ? "name" : "label", R.viewByOptions = [ {
=======
} ], R.filterBy = f.getLabelSelector().isEmpty() ? "name" : "label", R.viewByOptions = [ {
>>>>>>> Add bindings list to resource pages
=======
} ], P.filterBy = f.getLabelSelector().isEmpty() ? "name" : "label", P.viewByOptions = [ {
>>>>>>> Adding Deploy Image and Import YAML / JSON functionality to catalog
=======
} ], P.filterBy = g.getLabelSelector().isEmpty() ? "name" : "label", P.viewByOptions = [ {
>>>>>>> Patternfly vertical navigation and project bar
=======
} ], R.filterBy = h.getLabelSelector().isEmpty() ? "name" : "label", R.viewByOptions = [ {
>>>>>>> Adopt service catalog API changes
=======
} ], R.filterBy = v.getLabelSelector().isEmpty() ? "name" : "label", R.viewByOptions = [ {
>>>>>>> Add SVG icons
=======
} ], E.filterBy = h.getLabelSelector().isEmpty() ? "name" : "label", E.viewByOptions = [ {
>>>>>>> Wait for service classes and plans to load
=======
} ], T.filterBy = y.getLabelSelector().isEmpty() ? "name" : "label", T.viewByOptions = [ {
>>>>>>> Add Browse Catalog to Project context view.
id: "app",
label: "Application"
}, {
id: "resource",
label: "Resource Type"
}, {
id: "pipeline",
label: "Pipeline"
} ];
var re = function(e) {
return _.get(e, "metadata.name");
}, ae = function(e) {
return _.get(e, "metadata.uid");
}, oe = function() {
return _.size(T.deploymentConfigs) + _.size(T.vanillaReplicationControllers) + _.size(T.deployments) + _.size(T.vanillaReplicaSets) + _.size(T.statefulSets) + _.size(T.monopods) + _.size(T.state.serviceInstances);
}, ie = function() {
return _.size(T.filteredDeploymentConfigs) + _.size(T.filteredReplicationControllers) + _.size(T.filteredDeployments) + _.size(T.filteredReplicaSets) + _.size(T.filteredStatefulSets) + _.size(T.filteredMonopods) + _.size(T.filteredServiceInstances);
}, se = function() {
T.size = oe(), T.filteredSize = ie();
var e = 0 === T.size, t = T.deploymentConfigs && T.replicationControllers && T.deployments && T.replicaSets && T.statefulSets && T.pods && T.state.serviceInstances;
te.expandAll = t && 1 === T.size, T.showGetStarted = t && e, T.showLoading = !t && e, T.everythingFiltered = !e && !T.filteredSize, T.hidePipelineOtherResources = "pipeline" === T.viewBy && (T.filterActive || _.isEmpty(T.pipelineBuildConfigs));
}, ce = function(e) {
return s.groupByApp(e, "metadata.name");
}, le = function(e) {
var t = null;
return _.each(e, function(e) {
t = t ? R.getPreferredDisplayRoute(t, e) : e;
}), t;
}, ue = _.debounce(function() {
e.$evalAsync(function() {
if (T.bestRouteByApp = {}, T.routes) {
var e = [ T.filteredDeploymentConfigsByApp, T.filteredReplicationControllersByApp, T.filteredDeploymentsByApp, T.filteredReplicaSetsByApp, T.filteredStatefulSetsByApp, T.filteredMonopodsByApp ];
_.each(T.apps, function(t) {
var n = {};
_.each(e, function(e) {
var r = _.get(e, t, []);
_.each(r, function(e) {
var t = ae(e), r = _.get(te, [ "servicesByObjectUID", t ], []);
_.each(r, function(e) {
var t = _.get(te, [ "routesByService", e.metadata.name ], []);
_.assign(n, _.keyBy(t, "metadata.name"));
});
});
<<<<<<< 18c5e54bc88f7af8cfcb949a411aa8b0da3e7e9c
<<<<<<< 13ac2d832bc56edf6bc5e2fc652da9b188ddae32
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< 13bb99b3a012682f72ebab813cdb86be2a15f55e
<<<<<<< 0ba73cbc37b88f92a6380ccc93fc8e3d978020aa
<<<<<<< 7d5cc388b34d6a87a5e2ae6b26f6b146dae1daa3
<<<<<<< 952b26bc3acaa89a51e4aad5f965e515d3b007ae
}), R.bestRouteByApp[t] = Y(n);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
}), R.bestRouteByApp[t] = J(n);
>>>>>>> Add bindings list to resource pages
=======
}), P.bestRouteByApp[t] = J(n);
>>>>>>> Adding Deploy Image and Import YAML / JSON functionality to catalog
=======
}), R.bestRouteByApp[t] = ne(n);
>>>>>>> Adopt service catalog API changes
=======
}), E.bestRouteByApp[t] = re(n);
>>>>>>> Wait for service classes and plans to load
=======
}), E.bestRouteByApp[t] = ae(n);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
=======
}), T.bestRouteByApp[t] = oe(n);
>>>>>>> Add Browse Catalog to Project context view.
=======
}), T.bestRouteByApp[t] = le(n);
>>>>>>> Additional getPreferredVersion updates to overview
});
}
});
}, 300, {
maxWait: 1500
<<<<<<< 18c5e54bc88f7af8cfcb949a411aa8b0da3e7e9c
<<<<<<< 13ac2d832bc56edf6bc5e2fc652da9b188ddae32
<<<<<<< 13bb99b3a012682f72ebab813cdb86be2a15f55e
<<<<<<< 0ba73cbc37b88f92a6380ccc93fc8e3d978020aa
<<<<<<< 952b26bc3acaa89a51e4aad5f965e515d3b007ae
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
}), ja = function() {
E.filteredDeploymentConfigsByApp = ga(E.filteredDeploymentConfigs), E.filteredReplicationControllersByApp = ga(E.filteredReplicationControllers), E.filteredDeploymentsByApp = ga(E.filteredDeployments), E.filteredReplicaSetsByApp = ga(E.filteredReplicaSets), E.filteredStatefulSetsByApp = ga(E.filteredStatefulSets), E.filteredMonopodsByApp = ga(E.filteredMonopods), E.apps = _.union(_.keys(E.filteredDeploymentConfigsByApp), _.keys(E.filteredReplicationControllersByApp), _.keys(E.filteredDeploymentsByApp), _.keys(E.filteredReplicaSetsByApp), _.keys(E.filteredStatefulSetsByApp), _.keys(E.filteredMonopodsByApp)), g.sortAppNames(E.apps), ia();
}, ka = function() {
var a = _.filter(E.deploymentConfigs, function(a) {
var b = ba(a);
return _.isEmpty(Z.pipelinesByDeploymentConfig[b]);
});
E.deploymentConfigsNoPipeline = _.sortBy(a, "metadata.name"), E.pipelineViewHasOtherResources = !(_.isEmpty(E.deploymentConfigsNoPipeline) && _.isEmpty(E.vanillaReplicationControllers) && _.isEmpty(E.deployments) && _.isEmpty(E.vanillaReplicaSets) && _.isEmpty(E.statefulSets) && _.isEmpty(E.monopods));
}, la = function() {
E.disableFilter = "pipeline" === E.viewBy && _.isEmpty(E.pipelineBuildConfigs);
}, ma = function(a) {
return r.getLabelSelector().select(a);
}, na = [ "metadata.name", "spec.clusterServiceClassExternalName" ], oa = function(a) {
return q.filterForKeywords(a, na, Z.filterKeywords);
}, pa = function(a) {
switch (E.filterBy) {
case "label":
return ma(a);

case "name":
return oa(a);
}
return a;
}, qa = function() {
switch (E.filterBy) {
case "label":
return !r.getLabelSelector().isEmpty();

case "name":
return !_.isEmpty(Z.filterKeywords);
}
}, ra = function() {
E.filteredDeploymentConfigs = pa(E.deploymentConfigs), E.filteredReplicationControllers = pa(E.vanillaReplicationControllers), E.filteredDeployments = pa(E.deployments), E.filteredReplicaSets = pa(E.vanillaReplicaSets), E.filteredStatefulSets = pa(E.statefulSets), E.filteredMonopods = pa(E.monopods), E.filteredPipelineBuildConfigs = pa(E.pipelineBuildConfigs), E.filteredServiceInstances = pa(Z.orderedServiceInstances), E.filterActive = qa(), ja(), fa();
}, sa = d.project + "/overview/view-by";
E.viewBy = localStorage.getItem(sa) || "app", a.$watch(function() {
return E.viewBy;
}, function(a) {
localStorage.setItem(sa, a), la(), na = "app" === E.viewBy ? [ "metadata.name", "metadata.labels.app" ] : [ "metadata.name" ], ra(), "pipeline" === E.viewBy ? r.setLabelSuggestions(X) : r.setLabelSuggestions(W);
}), k.DISABLE_OVERVIEW_METRICS || (t.isAvailable(!0).then(function(a) {
Z.showMetrics = a;
}), a.$on("metrics-connection-failed", function(a, b) {
var c = e.isAlertPermanentlyHidden("metrics-connection-failed");
c || Z.alerts["metrics-connection-failed"] || (Z.alerts["metrics-connection-failed"] = {
type: "warning",
message: D.getString(C("An error occurred getting metrics.")),
links: [ {
href: b.url,
label: D.getString(C("Open Metrics URL")),
target: "_blank"
}, {
href: "",
label: D.getString(C("Don't Show Me Again")),
onClick: function() {
return e.permanentlyHideAlert("metrics-connection-failed"), !0;
=======
}), X = function() {
R.filteredDeploymentConfigsByApp = J(R.filteredDeploymentConfigs), R.filteredReplicationControllersByApp = J(R.filteredReplicationControllers), R.filteredDeploymentsByApp = J(R.filteredDeployments), R.filteredReplicaSetsByApp = J(R.filteredReplicaSets), R.filteredStatefulSetsByApp = J(R.filteredStatefulSets), R.filteredMonopodsByApp = J(R.filteredMonopods), R.apps = _.union(_.keys(R.filteredDeploymentConfigsByApp), _.keys(R.filteredReplicationControllersByApp), _.keys(R.filteredDeploymentsByApp), _.keys(R.filteredReplicaSetsByApp), _.keys(R.filteredStatefulSetsByApp), _.keys(R.filteredMonopodsByApp)), o.sortAppNames(R.apps), Z();
}, ee = function() {
=======
}), Z = function() {
P.filteredDeploymentConfigsByApp = Q(P.filteredDeploymentConfigs), P.filteredReplicationControllersByApp = Q(P.filteredReplicationControllers), P.filteredDeploymentsByApp = Q(P.filteredDeployments), P.filteredReplicaSetsByApp = Q(P.filteredReplicaSets), P.filteredStatefulSetsByApp = Q(P.filteredStatefulSets), P.filteredMonopodsByApp = Q(P.filteredMonopods), P.apps = _.union(_.keys(P.filteredDeploymentConfigsByApp), _.keys(P.filteredReplicationControllersByApp), _.keys(P.filteredDeploymentsByApp), _.keys(P.filteredReplicaSetsByApp), _.keys(P.filteredStatefulSetsByApp), _.keys(P.filteredMonopodsByApp)), o.sortAppNames(P.apps), Y();
}, X = function() {
<<<<<<< 7d5cc388b34d6a87a5e2ae6b26f6b146dae1daa3
>>>>>>> Add bindings list to resource pages
var e = _.filter(R.deploymentConfigs, function(e) {
=======
var e = _.filter(P.deploymentConfigs, function(e) {
>>>>>>> Adding Deploy Image and Import YAML / JSON functionality to catalog
var t = z(e);
return _.isEmpty(V.pipelinesByDeploymentConfig[t]);
=======
}), re = function() {
R.filteredDeploymentConfigsByApp = te(R.filteredDeploymentConfigs), R.filteredReplicationControllersByApp = te(R.filteredReplicationControllers), R.filteredDeploymentsByApp = te(R.filteredDeployments), R.filteredReplicaSetsByApp = te(R.filteredReplicaSets), R.filteredStatefulSetsByApp = te(R.filteredStatefulSets), R.filteredMonopodsByApp = te(R.filteredMonopods), R.apps = _.union(_.keys(R.filteredDeploymentConfigsByApp), _.keys(R.filteredReplicationControllersByApp), _.keys(R.filteredDeploymentsByApp), _.keys(R.filteredReplicaSetsByApp), _.keys(R.filteredStatefulSetsByApp), _.keys(R.filteredMonopodsByApp)), o.sortAppNames(R.apps), ae();
}, oe = function() {
var e = _.filter(R.deploymentConfigs, function(e) {
var t = J(e);
<<<<<<< d21c662f039266e2dd235fa32bd86d3647c082ae
<<<<<<< 5ee4e8975cd809cf7a654cbc903e7d305ed5ecb9
return _.isEmpty(W.pipelinesByDeploymentConfig[t]);
>>>>>>> Adopt service catalog API changes
=======
return _.isEmpty(K.pipelinesByDeploymentConfig[t]);
>>>>>>> Replacing empty tables with empty state message
=======
return _.isEmpty(W.pipelinesByDeploymentConfig[t]);
>>>>>>> Handle displaying parameters when secrets are not available.
});
R.deploymentConfigsNoPipeline = _.sortBy(e, "metadata.name"), R.pipelineViewHasOtherResources = !(_.isEmpty(R.deploymentConfigsNoPipeline) && _.isEmpty(R.vanillaReplicationControllers) && _.isEmpty(R.deployments) && _.isEmpty(R.vanillaReplicaSets) && _.isEmpty(R.statefulSets) && _.isEmpty(R.monopods));
}, ie = function() {
R.disableFilter = "pipeline" === R.viewBy && _.isEmpty(R.pipelineBuildConfigs);
}, se = function(e) {
return v.getLabelSelector().select(e);
}, ce = [ "metadata.name", "spec.externalClusterServiceClassName" ], le = function(e) {
return g.filterForKeywords(e, ce, W.filterKeywords);
}, ue = function(e) {
switch (R.filterBy) {
=======
}), ie = function() {
E.filteredDeploymentConfigsByApp = re(E.filteredDeploymentConfigs), E.filteredReplicationControllersByApp = re(E.filteredReplicationControllers), E.filteredDeploymentsByApp = re(E.filteredDeployments), E.filteredReplicaSetsByApp = re(E.filteredReplicaSets), E.filteredStatefulSetsByApp = re(E.filteredStatefulSets), E.filteredMonopodsByApp = re(E.filteredMonopods), E.apps = _.union(_.keys(E.filteredDeploymentConfigsByApp), _.keys(E.filteredReplicationControllersByApp), _.keys(E.filteredDeploymentsByApp), _.keys(E.filteredReplicaSetsByApp), _.keys(E.filteredStatefulSetsByApp), _.keys(E.filteredMonopodsByApp)), i.sortAppNames(E.apps), oe();
}, se = function() {
var e = _.filter(E.deploymentConfigs, function(e) {
var t = Z(e);
return _.isEmpty(J.pipelinesByDeploymentConfig[t]);
});
E.deploymentConfigsNoPipeline = _.sortBy(e, "metadata.name"), E.pipelineViewHasOtherResources = !(_.isEmpty(E.deploymentConfigsNoPipeline) && _.isEmpty(E.vanillaReplicationControllers) && _.isEmpty(E.deployments) && _.isEmpty(E.vanillaReplicaSets) && _.isEmpty(E.statefulSets) && _.isEmpty(E.monopods));
}, ce = function() {
E.disableFilter = "pipeline" === E.viewBy && _.isEmpty(E.pipelineBuildConfigs);
}, le = function(e) {
return h.getLabelSelector().select(e);
}, ue = [ "metadata.name", "spec.clusterServiceClassExternalName" ], de = function(e) {
return v.filterForKeywords(e, ue, J.filterKeywords);
}, me = function(e) {
switch (E.filterBy) {
>>>>>>> Wait for service classes and plans to load
=======
}), se = function() {
T.filteredDeploymentConfigsByApp = ae(T.filteredDeploymentConfigs), T.filteredReplicationControllersByApp = ae(T.filteredReplicationControllers), T.filteredDeploymentsByApp = ae(T.filteredDeployments), T.filteredReplicaSetsByApp = ae(T.filteredReplicaSets), T.filteredStatefulSetsByApp = ae(T.filteredStatefulSets), T.filteredMonopodsByApp = ae(T.filteredMonopods), T.apps = _.union(_.keys(T.filteredDeploymentConfigsByApp), _.keys(T.filteredReplicationControllersByApp), _.keys(T.filteredDeploymentsByApp), _.keys(T.filteredReplicaSetsByApp), _.keys(T.filteredStatefulSetsByApp), _.keys(T.filteredMonopodsByApp)), s.sortAppNames(T.apps), ie();
}, ce = function() {
=======
}), de = function() {
T.filteredDeploymentConfigsByApp = ce(T.filteredDeploymentConfigs), T.filteredReplicationControllersByApp = ce(T.filteredReplicationControllers), T.filteredDeploymentsByApp = ce(T.filteredDeployments), T.filteredReplicaSetsByApp = ce(T.filteredReplicaSets), T.filteredStatefulSetsByApp = ce(T.filteredStatefulSets), T.filteredMonopodsByApp = ce(T.filteredMonopods), T.apps = _.union(_.keys(T.filteredDeploymentConfigsByApp), _.keys(T.filteredReplicationControllersByApp), _.keys(T.filteredDeploymentsByApp), _.keys(T.filteredReplicaSetsByApp), _.keys(T.filteredStatefulSetsByApp), _.keys(T.filteredMonopodsByApp)), s.sortAppNames(T.apps), ue();
}, me = function() {
>>>>>>> Additional getPreferredVersion updates to overview
var e = _.filter(T.deploymentConfigs, function(e) {
var t = re(e);
return _.isEmpty(te.pipelinesByDeploymentConfig[t]);
});
T.deploymentConfigsNoPipeline = _.sortBy(e, "metadata.name"), T.pipelineViewHasOtherResources = !(_.isEmpty(T.deploymentConfigsNoPipeline) && _.isEmpty(T.vanillaReplicationControllers) && _.isEmpty(T.deployments) && _.isEmpty(T.vanillaReplicaSets) && _.isEmpty(T.statefulSets) && _.isEmpty(T.monopods));
}, pe = function() {
T.disableFilter = "pipeline" === T.viewBy && _.isEmpty(T.pipelineBuildConfigs);
}, fe = function(e) {
return y.getLabelSelector().select(e);
}, ge = [ "metadata.name", "spec.clusterServiceClassExternalName" ], ve = function(e) {
return h.filterForKeywords(e, ge, te.filterKeywords);
}, he = function(e) {
switch (T.filterBy) {
>>>>>>> Add Browse Catalog to Project context view.
case "label":
return fe(e);

case "name":
return ve(e);
}
return e;
}, ye = function() {
switch (T.filterBy) {
case "label":
return !y.getLabelSelector().isEmpty();

case "name":
return !_.isEmpty(te.filterKeywords);
}
}, be = function() {
T.filteredDeploymentConfigs = he(T.deploymentConfigs), T.filteredReplicationControllers = he(T.vanillaReplicationControllers), T.filteredDeployments = he(T.deployments), T.filteredReplicaSets = he(T.vanillaReplicaSets), T.filteredStatefulSets = he(T.statefulSets), T.filteredMonopods = he(T.monopods), T.filteredPipelineBuildConfigs = he(T.pipelineBuildConfigs), T.filteredServiceInstances = he(te.orderedServiceInstances), T.filterActive = ye(), de(), se();
}, Se = a.project + "/overview/view-by";
T.viewBy = localStorage.getItem(Se) || "app", e.$watch(function() {
return T.viewBy;
}, function(e) {
localStorage.setItem(Se, e), pe(), ge = "app" === T.viewBy ? [ "metadata.name", "metadata.labels.app" ] : [ "metadata.name" ], be(), "pipeline" === T.viewBy ? y.setLabelSuggestions(X) : y.setLabelSuggestions(Z);
}), d.DISABLE_OVERVIEW_METRICS || (S.isAvailable(!0).then(function(e) {
te.showMetrics = e;
}), e.$on("metrics-connection-failed", function(e, t) {
o.isAlertPermanentlyHidden("metrics-connection-failed") || te.alerts["metrics-connection-failed"] || (te.alerts["metrics-connection-failed"] = {
type: "warning",
message: "An error occurred getting metrics.",
links: [ {
href: t.url,
label: "Open Metrics URL",
target: "_blank"
}, {
href: "",
label: "Don't Show Me Again",
onClick: function() {
<<<<<<< 13ac2d832bc56edf6bc5e2fc652da9b188ddae32
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< 13bb99b3a012682f72ebab813cdb86be2a15f55e
return a.permanentlyHideAlert("metrics-connection-failed"), !0;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
return r.permanentlyHideAlert("metrics-connection-failed"), !0;
>>>>>>> Wait for service classes and plans to load
=======
return a.permanentlyHideAlert("metrics-connection-failed"), !0;
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
=======
return o.permanentlyHideAlert("metrics-connection-failed"), !0;
>>>>>>> Add Browse Catalog to Project context view.
}
} ]
});
}));
<<<<<<< 18c5e54bc88f7af8cfcb949a411aa8b0da3e7e9c
<<<<<<< 13ac2d832bc56edf6bc5e2fc652da9b188ddae32
<<<<<<< 13bb99b3a012682f72ebab813cdb86be2a15f55e
<<<<<<< 0ba73cbc37b88f92a6380ccc93fc8e3d978020aa
<<<<<<< 952b26bc3acaa89a51e4aad5f965e515d3b007ae
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
var ta = function(a) {
return a && "Pod" === a.kind;
}, ua = function(a) {
var b = ca(a);
return b ? ta(a) ? [ a ] : _.get(E, [ "state", "podsByOwnerUID", b ], []) : [];
}, va = function(a, b) {
var c = ca(a);
Z.notificationsByObjectUID[c] = b || {};
}, wa = function(a) {
var b = ca(a);
return b ? _.get(Z, [ "notificationsByObjectUID", b ], {}) : {};
}, xa = function(a) {
var b = ca(a);
if (b) {
var c = ua(a), e = z.getPodAlerts(c, d.project);
va(a, e);
}
}, ya = function(a) {
_.each(a, xa);
}, za = function(a) {
var b = ba(a);
return b ? Y[b] : null;
}, Aa = function(a) {
var b = ba(a);
return b ? _.get(E, [ "replicationControllersByDeploymentConfig", b ]) : [];
};
E.getPreviousReplicationController = function(a) {
var b = Aa(a);
return _.size(b) < 2 ? null : b[1];
};
var Ba = function(a) {
var b = {}, c = za(a);
_.assign(b, z.getDeploymentStatusAlerts(a, c), z.getPausedDeploymentAlerts(a));
var d = Aa(a);
_.each(d, function(a) {
var c = wa(a);
_.assign(b, c);
}), va(a, b);
}, Ca = function() {
_.each(E.deploymentConfigs, Ba);
}, Da = function(a) {
var b = ca(a);
return b ? _.get(E, [ "replicaSetsByDeploymentUID", b ]) : {};
}, Ea = function(a) {
var b = z.getPausedDeploymentAlerts(a), c = Da(a);
_.each(c, function(a) {
var c = wa(a);
_.assign(b, c);
}), va(a, b);
}, Fa = function() {
_.each(E.deployments, Ea);
}, Ga = function() {
ya(E.replicationControllers), ya(E.replicaSets), ya(E.statefulSets), ya(E.monopods);
}, Ha = _.debounce(function() {
a.$evalAsync(function() {
Ga(), Ca(), Fa();
});
}, 500), Ia = function(a) {
_.isEmpty(a) || (r.addLabelSuggestionsFromResources(a, W), "pipeline" !== E.viewBy && r.setLabelSuggestions(W));
}, Ja = function(a) {
_.isEmpty(a) || (r.addLabelSuggestionsFromResources(a, X), "pipeline" === E.viewBy && r.setLabelSuggestions(X));
}, Ka = function(a) {
return "Succeeded" !== a.status.phase && "Failed" !== a.status.phase && (!Q(a, "openshift.io/deployer-pod-for.name") && (!J(a, "openshift.io/build.name") && "slave" !== Q(a, "jenkins")));
}, La = function() {
Z.podsByOwnerUID = w.groupByOwnerUID(E.pods), E.monopods = _.filter(Z.podsByOwnerUID[""], Ka);
}, Ma = function(a) {
if (_.get(a, "status.replicas")) return !0;
var b = J(a, "deploymentConfig");
return !b || M(a);
}, Na = function(a) {
return J(a, "deploymentConfig");
}, Oa = function() {
if (E.deploymentConfigs && E.replicationControllers) {
var a = [];
E.replicationControllersByDeploymentConfig = {}, E.currentByDeploymentConfig = {}, Y = {};
var b = {}, c = {};
_.each(E.replicationControllers, function(d) {
var e = Na(d) || "";
(!e || !E.deploymentConfigs[e] && _.get(d, "status.replicas")) && a.push(d);
var f = Y[e];
f && !P(d, f) || (Y[e] = d);
var g;
"Complete" === J(d, "deploymentStatus") && (g = b[e], g && !P(d, g) || (b[e] = d)), Ma(d) && _.set(c, [ e, d.metadata.name ], d);
}), _.each(b, function(a, b) {
_.set(c, [ b, a.metadata.name ], a);
}), _.each(c, function(a, b) {
var c = m.sortByDeploymentVersion(a, !0);
E.replicationControllersByDeploymentConfig[b] = c, E.currentByDeploymentConfig[b] = _.head(c);
}), E.vanillaReplicationControllers = _.sortBy(a, "metadata.name"), Ca();
}
}, Pa = function(a, b) {
if (_.get(a, "status.replicas")) return !0;
var c = m.getRevision(a);
return !c || !!b && m.getRevision(b) === c;
}, Qa = function() {
E.replicaSets && H && (E.replicaSetsByDeploymentUID = v.groupByControllerUID(E.replicaSets), E.currentByDeploymentUID = {}, _.each(E.replicaSetsByDeploymentUID, function(a, b) {
if (b) {
var c = H[b], d = _.filter(a, function(a) {
return Pa(a, c);
}), e = m.sortByRevision(d);
E.replicaSetsByDeploymentUID[b] = e, E.currentByDeploymentUID[b] = _.head(e);
}
}), E.vanillaReplicaSets = _.sortBy(E.replicaSetsByDeploymentUID[""], "metadata.name"), Fa());
}, Ra = {}, Sa = function(a) {
a && Z.allServices && _.each(a, function(a) {
var b = [], c = ca(a), d = R(a);
_.each(Ra, function(a, c) {
a.matches(d) && b.push(Z.allServices[c]);
}), Z.servicesByObjectUID[c] = _.sortBy(b, "metadata.name");
});
}, Ta = function() {
if (Z.allServices) {
Ra = _.mapValues(Z.allServices, function(a) {
return new LabelSelector(a.spec.selector);
});
var a = [ E.deploymentConfigs, E.vanillaReplicationControllers, E.deployments, E.vanillaReplicaSets, E.statefulSets, E.monopods ];
_.each(a, Sa), ia();
}
}, Ua = function() {
var a = A.groupByService(E.routes, !0);
Z.routesByService = _.mapValues(a, A.sortRoutesByScore), ia();
}, Va = function() {
Z.hpaByResource = n.groupHPAs(E.horizontalPodAutoscalers);
}, Wa = function(a) {
var b = L(a), c = E.buildConfigs[b];
if (c) {
E.recentPipelinesByBuildConfig[b] = E.recentPipelinesByBuildConfig[b] || [], E.recentPipelinesByBuildConfig[b].push(a);
var d = i.usesDeploymentConfigs(c);
_.each(d, function(b) {
Z.recentPipelinesByDeploymentConfig[b] = Z.recentPipelinesByDeploymentConfig[b] || [], Z.recentPipelinesByDeploymentConfig[b].push(a);
}), ka();
}
}, Xa = {}, Ya = function() {
Xa = i.groupBuildConfigsByOutputImage(E.buildConfigs);
}, Za = function(a) {
var b = ca(a);
if (b) return _.get(Z, [ "buildConfigsByObjectUID", b ], []);
}, $a = function(a) {
var b = [], c = Za(a);
_.each(c, function(a) {
var c = _.get(Z, [ "recentBuildsByBuildConfig", a.metadata.name ], []);
b = b.concat(c);
});
var d = ba(a);
_.set(Z, [ "recentBuildsByDeploymentConfig", d ], b);
}, _a = function(a, b) {
var c = ca(b);
c && _.set(Z, [ "buildConfigsByObjectUID", c ], a);
}, ab = function() {
var a = [];
E.deploymentConfigsByPipeline = {}, Z.pipelinesByDeploymentConfig = {}, _.each(E.buildConfigs, function(b) {
if (O(b)) {
a.push(b);
var c = i.usesDeploymentConfigs(b), d = ba(b);
_.set(E, [ "deploymentConfigsByPipeline", d ], c), _.each(c, function(a) {
Z.pipelinesByDeploymentConfig[a] = Z.pipelinesByDeploymentConfig[a] || [], Z.pipelinesByDeploymentConfig[a].push(b);
});
}
}), E.pipelineBuildConfigs = _.sortBy(a, "metadata.name"), ka(), Ja(E.pipelineBuildConfigs), la();
}, bb = function() {
Z.buildConfigsByObjectUID = {}, _.each(E.deploymentConfigs, function(a) {
var b = [], c = _.get(a, "spec.triggers");
_.each(c, function(c) {
var d = _.get(c, "imageChangeParams.from");
if (d) {
var e = N(d, a.metadata.namespace), f = Xa[e];
_.isEmpty(f) || (b = b.concat(f));
}
}), b = _.sortBy(b, "metadata.name"), _a(b, a), $a(a);
});
}, cb = function() {
ab(), bb();
}, db = function() {
_.each(E.deploymentConfigs, $a);
}, eb = function() {
if (Z.builds && E.buildConfigs) {
E.recentPipelinesByBuildConfig = {}, Z.recentBuildsByBuildConfig = {}, Z.recentPipelinesByDeploymentConfig = {};
var a = {};
_.each(i.interestingBuilds(Z.builds), function(b) {
var c = L(b);
O(b) ? Wa(b) : (a[c] = a[c] || [], a[c].push(b));
}), E.recentPipelinesByBuildConfig = _.mapValues(E.recentPipelinesByBuildConfig, function(a) {
return i.sortBuilds(a, !0);
}), Z.recentPipelinesByDeploymentConfig = _.mapValues(Z.recentPipelinesByDeploymentConfig, function(a) {
return i.sortBuilds(a, !0);
}), Z.recentBuildsByBuildConfig = _.mapValues(a, function(a) {
return i.sortBuilds(a, !0);
}), db();
}
}, fb = function() {
z.setQuotaNotifications(Z.quotas, Z.clusterQuotas, d.project);
};
E.clearFilter = function() {
r.clear(), E.filterText = "";
}, a.$watch(function() {
return E.filterText;
}, _.debounce(function(b, c) {
b !== c && (Z.filterKeywords = q.generateKeywords(b), a.$evalAsync(ra));
}, 50, {
maxWait: 250
})), a.$watch(function() {
return E.filterBy;
}, function(a, b) {
a !== b && (E.clearFilter(), ra());
}), r.onActiveFiltersChanged(function() {
a.$evalAsync(ra);
}), E.startBuild = i.startBuild;
var gb = function() {
if (Z.bindingsByApplicationUID = {}, Z.applicationsByBinding = {}, Z.deleteableBindingsByApplicationUID = {}, !_.isEmpty(Z.bindings)) {
var a = [ E.deployments, E.deploymentConfigs, E.vanillaReplicationControllers, E.vanillaReplicaSets, E.statefulSets ];
if (!_.some(a, function(a) {
return !a;
})) {
var b = h.getPodPresetSelectorsForBindings(Z.bindings);
_.each(a, function(a) {
_.each(a, function(a) {
var c = ca(a), d = new LabelSelector(_.get(a, "spec.selector"));
Z.bindingsByApplicationUID[c] = [], Z.deleteableBindingsByApplicationUID[c] = [], _.each(b, function(b, e) {
b.covers(d) && (Z.bindingsByApplicationUID[c].push(Z.bindings[e]), _.get(Z.bindings[e], "metadata.deletionTimestamp") || Z.deleteableBindingsByApplicationUID[c].push(Z.bindings[e]), Z.applicationsByBinding[e] = Z.applicationsByBinding[e] || [], Z.applicationsByBinding[e].push(a));
});
});
}), E.bindingsByInstanceRef = _.reduce(E.bindingsByInstanceRef, function(a, b, c) {
return a[c] = _.sortBy(b, function(a) {
var b = _.get(Z.applicationsByBinding, [ a.metadata.name ]), c = _.get(_.head(b), [ "metadata", "name" ]);
return c || a.metadata.name;
}), a;
}, {});
}
}
}, hb = function() {
Z.bindableServiceInstances = h.filterBindableServiceInstances(Z.serviceInstances, Z.serviceClasses, Z.servicePlans), Z.orderedServiceInstances = h.sortServiceInstances(Z.serviceInstances, Z.serviceClasses);
}, ib = [];
x.get(d.project).then(_.spread(function(b, d) {
Z.project = a.project = b, Z.context = d;
var e = function() {
E.pods && p.fetchReferencedImageStreamImages(E.pods, Z.imagesByDockerReference, Z.imageStreamImageRefByDockerReference, d);
};
ib.push(l.watch("pods", d, function(a) {
E.pods = a.by("metadata.name"), La(), e(), Ha(), Sa(E.monopods), ya(E.monopods), Ia(E.monopods), ra(), s.log("pods (subscribe)", E.pods);
})), ib.push(l.watch("replicationcontrollers", d, function(a) {
E.replicationControllers = a.by("metadata.name"), Oa(), Sa(E.vanillaReplicationControllers), Sa(E.monopods), ya(E.vanillaReplicationControllers), Ia(E.vanillaReplicationControllers), gb(), ra(), s.log("replicationcontrollers (subscribe)", E.replicationControllers);
})), ib.push(l.watch("deploymentconfigs", d, function(a) {
E.deploymentConfigs = a.by("metadata.name"), Oa(), Sa(E.deploymentConfigs), Sa(E.vanillaReplicationControllers), Ia(E.deploymentConfigs), Fa(), cb(), db(), gb(), ra(), s.log("deploymentconfigs (subscribe)", E.deploymentConfigs);
})), ib.push(l.watch({
group: "extensions",
resource: "replicasets"
}, d, function(a) {
<<<<<<< 61b7ccebc1be9196354cef218d1e7a812de7a0c6
E.replicaSets = a.by("metadata.name"), Qa(), Sa(E.vanillaReplicaSets), Sa(E.monopods), ya(E.vanillaReplicaSets), Ia(E.vanillaReplicaSets), gb(), ra(), s.log("replicasets (subscribe)", E.replicaSets);
})), ib.push(l.watch({
group: "apps",
resource: "deployments"
=======
z.replicaSets = a.by("metadata.name"), Ha(), Ja(z.vanillaReplicaSets), Ja(z.monopods), pa(z.vanillaReplicaSets), za(z.vanillaReplicaSets), $a(), ia(), p.log("replicasets (subscribe)", z.replicaSets);
})), ab.push(i.watch({
group:"apps",
resource:"deployments"
>>>>>>> Use `apps` API group for deployments
}, d, function(a) {
H = a.by("metadata.uid"), E.deployments = _.sortBy(H, "metadata.name"), Qa(), Sa(E.deployments), Sa(E.vanillaReplicaSets), Ia(E.deployments), gb(), ra(), s.log("deployments (subscribe)", E.deploymentsByUID);
})), ib.push(l.watch("builds", d, function(a) {
Z.builds = a.by("metadata.name"), eb(), s.log("builds (subscribe)", Z.builds);
})), ib.push(l.watch({
group: "apps",
resource: "statefulsets"
}, d, function(a) {
E.statefulSets = a.by("metadata.name"), Sa(E.statefulSets), Sa(E.monopods), ya(E.statefulSets), Ia(E.statefulSets), gb(), ra(), s.log("statefulsets (subscribe)", E.statefulSets);
}, {
poll: F,
pollInterval: G
})), ib.push(l.watch("services", d, function(a) {
Z.allServices = a.by("metadata.name"), Ta(), s.log("services (subscribe)", Z.allServices);
}, {
poll: F,
pollInterval: G
})), ib.push(l.watch("routes", d, function(a) {
E.routes = a.by("metadata.name"), Ua(), s.log("routes (subscribe)", E.routes);
}, {
poll: F,
pollInterval: G
})), ib.push(l.watch("buildConfigs", d, function(a) {
E.buildConfigs = a.by("metadata.name"), Ya(), cb(), eb(), ra(), s.log("buildconfigs (subscribe)", E.buildConfigs);
}, {
poll: F,
pollInterval: G
})), ib.push(l.watch({
group: "autoscaling",
resource: "horizontalpodautoscalers",
version: "v1"
}, d, function(a) {
E.horizontalPodAutoscalers = a.by("metadata.name"), Va(), s.log("autoscalers (subscribe)", E.horizontalPodAutoscalers);
}, {
poll: F,
pollInterval: G
})), ib.push(l.watch("imagestreams", d, function(a) {
I = a.by("metadata.name"), p.buildDockerRefMapForImageStreams(I, Z.imageStreamImageRefByDockerReference), e(), s.log("imagestreams (subscribe)", I);
}, {
poll: F,
pollInterval: G
})), ib.push(l.watch("resourcequotas", d, function(a) {
Z.quotas = a.by("metadata.name"), fb();
}, {
poll: !0,
pollInterval: G
})), ib.push(l.watch("appliedclusterresourcequotas", d, function(a) {
Z.clusterQuotas = a.by("metadata.name"), fb();
}, {
poll: !0,
pollInterval: G
}));
var f, g, h = {}, i = {};
j.SERVICE_CATALOG_ENABLED && K(U, "watch") && (f = function(a) {
var b = B.getServiceClassNameForInstance(a), d = _.get(Z, [ "serviceClasses", b ]);
return d ? c.when(d) : (h[b] || (h[b] = l.get(T, b, {}).then(function(a) {
return Z.serviceClasses[b] = a, a;
})["finally"](function() {
delete i[b];
})), h[b]);
}, g = function(a) {
var b = B.getServicePlanNameForInstance(a), d = _.get(Z, [ "servicePlans", b ]);
return d ? c.when(d) : (i[b] || (i[b] = l.get(V, b, {}).then(function(a) {
return Z.servicePlans[b] = a, a;
})["finally"](function() {
delete i[b];
})), i[b]);
}, ib.push(l.watch(U, d, function(a) {
Z.serviceInstances = a.by("metadata.name");
var b = [];
_.each(Z.serviceInstances, function(a) {
var c = z.getServiceInstanceAlerts(a);
va(a, c), b.push(f(a)), b.push(g(a));
}), y.waitForAll(b)["finally"](function() {
hb(), ra();
}), Ia(Z.serviceInstances);
}, {
poll: F,
pollInterval: G
}))), j.SERVICE_CATALOG_ENABLED && K(S, "watch") && ib.push(l.watch(S, d, function(a) {
Z.bindings = a.by("metadata.name"), E.bindingsByInstanceRef = _.groupBy(Z.bindings, "spec.instanceRef.name"), gb();
}, {
poll: F,
pollInterval: G
})), l.list("limitranges", d, function(a) {
Z.limitRanges = a.by("metadata.name");
});
var m = k.SAMPLE_PIPELINE_TEMPLATE;
m && l.get("templates", m.name, {
namespace: m.namespace
}, {
errorNotification: !1
}).then(function(b) {
E.samplePipelineURL = u.createFromTemplateURL(b, a.projectName);
}), a.$on("$destroy", function() {
l.unwatchAll(ib), $(window).off(".overview");
=======
var le = function(e) {
=======
var ce = function(e) {
>>>>>>> Add bindings list to resource pages
=======
var fe = function(e) {
>>>>>>> Adopt service catalog API changes
=======
var ve = function(e) {
>>>>>>> Wait for service classes and plans to load
=======
var he = function(e) {
>>>>>>> Add Browse Catalog to Project context view.
=======
var Ce = function(e) {
>>>>>>> Additional getPreferredVersion updates to overview
return e && "Pod" === e.kind;
}, _e = function(e) {
var t = ae(e);
return t ? Ce(e) ? [ e ] : _.get(T, [ "state", "podsByOwnerUID", t ], []) : [];
}, we = function(e, t) {
var n = ae(e);
te.notificationsByObjectUID[n] = t || {};
}, Pe = function(e) {
var t = ae(e);
return t ? _.get(te, [ "notificationsByObjectUID", t ], {}) : {};
}, je = function(e) {
if (ae(e)) {
var t = _e(e), n = I.getPodAlerts(t, a.project);
we(e, n);
}
}, ke = function(e) {
_.each(e, je);
}, Ie = function(e) {
var t = re(e);
return t ? ee[t] : null;
}, Re = function(e) {
var t = re(e);
return t ? _.get(T, [ "replicationControllersByDeploymentConfig", t ]) : [];
};
T.getPreviousReplicationController = function(e) {
var t = Re(e);
return _.size(t) < 2 ? null : t[1];
};
var Ee = function(e) {
var t = {}, n = Ie(e);
_.assign(t, I.getDeploymentStatusAlerts(e, n), I.getPausedDeploymentAlerts(e));
var r = Re(e);
_.each(r, function(e) {
var n = Pe(e);
_.assign(t, n);
}), we(e, t);
}, Te = function() {
_.each(T.deploymentConfigs, Ee);
}, Ne = function(e) {
var t = ae(e);
return t ? _.get(T, [ "replicaSetsByDeploymentUID", t ]) : {};
}, De = function(e) {
var t = I.getPausedDeploymentAlerts(e), n = Ne(e);
_.each(n, function(e) {
var n = Pe(e);
_.assign(t, n);
}), we(e, t);
}, Ae = function() {
_.each(T.deployments, De);
}, $e = function() {
ke(T.replicationControllers), ke(T.replicaSets), ke(T.statefulSets), ke(T.monopods);
}, Be = _.debounce(function() {
e.$evalAsync(function() {
$e(), Te(), Ae();
});
}, 500), Le = function(e) {
_.isEmpty(e) || (y.addLabelSuggestionsFromResources(e, Z), "pipeline" !== T.viewBy && y.setLabelSuggestions(Z));
}, Ve = function(e) {
_.isEmpty(e) || (y.addLabelSuggestionsFromResources(e, X), "pipeline" === T.viewBy && y.setLabelSuggestions(X));
}, Ue = function(e) {
return "Succeeded" !== e.status.phase && "Failed" !== e.status.phase && (!F(e, "openshift.io/deployer-pod-for.name") && (!D(e, "openshift.io/build.name") && "slave" !== F(e, "jenkins")));
}, Oe = function() {
te.podsByOwnerUID = P.groupByOwnerUID(T.pods), T.monopods = _.filter(te.podsByOwnerUID[""], Ue);
}, Fe = function(e) {
return !!_.get(e, "status.replicas") || (!D(e, "deploymentConfig") || L(e));
}, xe = function(e) {
return D(e, "deploymentConfig");
}, Me = function() {
if (T.deploymentConfigs && T.replicationControllers) {
var e = [];
T.replicationControllersByDeploymentConfig = {}, T.currentByDeploymentConfig = {}, ee = {};
var t = {}, n = {};
_.each(T.replicationControllers, function(r) {
var a = xe(r) || "";
(!a || !T.deploymentConfigs[a] && _.get(r, "status.replicas")) && e.push(r);
var o = ee[a];
o && !O(r, o) || (ee[a] = r);
var i;
"Complete" === D(r, "deploymentStatus") && ((i = t[a]) && !O(r, i) || (t[a] = r)), Fe(r) && _.set(n, [ a, r.metadata.name ], r);
}), _.each(t, function(e, t) {
_.set(n, [ t, e.metadata.name ], e);
}), _.each(n, function(e, t) {
var n = p.sortByDeploymentVersion(e, !0);
T.replicationControllersByDeploymentConfig[t] = n, T.currentByDeploymentConfig[t] = _.head(n);
}), T.vanillaReplicationControllers = _.sortBy(e, "metadata.name"), Te();
}
}, qe = function(e, t) {
if (_.get(e, "status.replicas")) return !0;
var n = p.getRevision(e);
return !n || !!t && p.getRevision(t) === n;
}, ze = function() {
T.replicaSets && J && (T.replicaSetsByDeploymentUID = w.groupByControllerUID(T.replicaSets), T.currentByDeploymentUID = {}, _.each(T.replicaSetsByDeploymentUID, function(e, t) {
if (t) {
var n = J[t], r = _.filter(e, function(e) {
return qe(e, n);
}), a = p.sortByRevision(r);
T.replicaSetsByDeploymentUID[t] = a, T.currentByDeploymentUID[t] = _.head(a);
}
}), T.vanillaReplicaSets = _.sortBy(T.replicaSetsByDeploymentUID[""], "metadata.name"), Ae());
}, He = {}, Ge = function(e) {
e && te.allServices && _.each(e, function(e) {
var t = [], n = ae(e), r = x(e);
_.each(He, function(e, n) {
e.matches(r) && t.push(te.allServices[n]);
}), te.servicesByObjectUID[n] = _.sortBy(t, "metadata.name");
});
}, Ke = function() {
if (te.allServices) {
He = _.mapValues(te.allServices, function(e) {
return new LabelSelector(e.spec.selector);
});
var e = [ T.deploymentConfigs, T.vanillaReplicationControllers, T.deployments, T.vanillaReplicaSets, T.statefulSets, T.monopods ];
_.each(e, Ge), ue();
}
}, We = function() {
var e = R.groupByService(T.routes, !0);
te.routesByService = _.mapValues(e, R.sortRoutesByScore), ue();
}, Qe = function() {
te.hpaByResource = f.groupHPAs(T.horizontalPodAutoscalers);
}, Je = function(e) {
var t = B(e), n = T.buildConfigs[t];
if (n) {
T.recentPipelinesByBuildConfig[t] = T.recentPipelinesByBuildConfig[t] || [], T.recentPipelinesByBuildConfig[t].push(e);
var r = l.usesDeploymentConfigs(n);
_.each(r, function(t) {
te.recentPipelinesByDeploymentConfig[t] = te.recentPipelinesByDeploymentConfig[t] || [], te.recentPipelinesByDeploymentConfig[t].push(e);
}), me();
}
}, Ye = {}, Ze = function() {
Ye = l.groupBuildConfigsByOutputImage(T.buildConfigs);
}, Xe = function(e) {
var t = ae(e);
if (t) return _.get(te, [ "buildConfigsByObjectUID", t ], []);
}, et = function(e) {
var t = [], n = Xe(e);
_.each(n, function(e) {
var n = _.get(te, [ "recentBuildsByBuildConfig", e.metadata.name ], []);
t = t.concat(n);
});
var r = re(e);
_.set(te, [ "recentBuildsByDeploymentConfig", r ], t);
}, tt = function(e, t) {
var n = ae(t);
n && _.set(te, [ "buildConfigsByObjectUID", n ], e);
}, nt = function() {
var e = [];
T.deploymentConfigsByPipeline = {}, te.pipelinesByDeploymentConfig = {}, _.each(T.buildConfigs, function(t) {
if (U(t)) {
e.push(t);
var n = l.usesDeploymentConfigs(t), r = re(t);
_.set(T, [ "deploymentConfigsByPipeline", r ], n), _.each(n, function(e) {
te.pipelinesByDeploymentConfig[e] = te.pipelinesByDeploymentConfig[e] || [], te.pipelinesByDeploymentConfig[e].push(t);
});
}
}), T.pipelineBuildConfigs = _.sortBy(e, "metadata.name"), me(), Ve(T.pipelineBuildConfigs), pe();
}, rt = function() {
te.buildConfigsByObjectUID = {}, _.each(T.deploymentConfigs, function(e) {
var t = [], n = _.get(e, "spec.triggers");
_.each(n, function(n) {
var r = _.get(n, "imageChangeParams.from");
if (r) {
var a = V(r, e.metadata.namespace), o = Ye[a];
_.isEmpty(o) || (t = t.concat(o));
}
}), t = _.sortBy(t, "metadata.name"), tt(t, e), et(e);
});
}, at = function() {
nt(), rt();
}, ot = function() {
_.each(T.deploymentConfigs, et);
}, it = function() {
if (te.builds && T.buildConfigs) {
T.recentPipelinesByBuildConfig = {}, te.recentBuildsByBuildConfig = {}, te.recentPipelinesByDeploymentConfig = {};
var e = {};
_.each(l.interestingBuilds(te.builds), function(t) {
var n = B(t);
U(t) ? Je(t) : (e[n] = e[n] || [], e[n].push(t));
}), T.recentPipelinesByBuildConfig = _.mapValues(T.recentPipelinesByBuildConfig, function(e) {
return l.sortBuilds(e, !0);
}), te.recentPipelinesByDeploymentConfig = _.mapValues(te.recentPipelinesByDeploymentConfig, function(e) {
return l.sortBuilds(e, !0);
}), te.recentBuildsByBuildConfig = _.mapValues(e, function(e) {
return l.sortBuilds(e, !0);
}), ot();
}
}, st = function() {
I.setQuotaNotifications(te.quotas, te.clusterQuotas, a.project);
};
T.clearFilter = function() {
y.clear(), T.filterText = "";
}, e.$watch(function() {
return T.filterText;
}, _.debounce(function(t, n) {
t !== n && (te.filterKeywords = h.generateKeywords(t), e.$evalAsync(be));
}, 50, {
maxWait: 250
})), e.$watch(function() {
return T.filterBy;
}, function(e, t) {
e !== t && (T.clearFilter(), be());
}), e.browseCatalog = function() {
C.toProjectCatalog(e.projectName);
}, y.onActiveFiltersChanged(function() {
e.$evalAsync(be);
}), T.startBuild = l.startBuild;
var ct = function() {
if (te.bindingsByApplicationUID = {}, te.applicationsByBinding = {}, te.deleteableBindingsByApplicationUID = {}, !_.isEmpty(te.bindings)) {
var e = [ T.deployments, T.deploymentConfigs, T.vanillaReplicationControllers, T.vanillaReplicaSets, T.statefulSets ];
if (!_.some(e, function(e) {
return !e;
})) {
var t = c.getPodPresetSelectorsForBindings(te.bindings);
_.each(e, function(e) {
_.each(e, function(e) {
var n = ae(e), r = new LabelSelector(_.get(e, "spec.selector"));
te.bindingsByApplicationUID[n] = [], te.deleteableBindingsByApplicationUID[n] = [], _.each(t, function(t, a) {
t.covers(r) && (te.bindingsByApplicationUID[n].push(te.bindings[a]), _.get(te.bindings[a], "metadata.deletionTimestamp") || te.deleteableBindingsByApplicationUID[n].push(te.bindings[a]), te.applicationsByBinding[a] = te.applicationsByBinding[a] || [], te.applicationsByBinding[a].push(e));
});
});
}), T.bindingsByInstanceRef = _.reduce(T.bindingsByInstanceRef, function(e, t, n) {
return e[n] = _.sortBy(t, function(e) {
var t = _.get(te.applicationsByBinding, [ e.metadata.name ]);
return _.get(_.head(t), [ "metadata", "name" ]) || e.metadata.name;
}), e;
}, {});
}
}
}, lt = function() {
te.bindableServiceInstances = c.filterBindableServiceInstances(te.serviceInstances, te.serviceClasses, te.servicePlans), te.orderedServiceInstances = c.sortServiceInstances(te.serviceInstances, te.serviceClasses);
}, ut = [];
j.get(a.project).then(_.spread(function(t, r) {
te.project = e.project = t, te.context = r;
var a = function() {
T.pods && v.fetchReferencedImageStreamImages(T.pods, te.imagesByDockerReference, te.imageStreamImageRefByDockerReference, r);
};
ut.push(m.watch("pods", r, function(e) {
T.pods = e.by("metadata.name"), Oe(), a(), Be(), Ge(T.monopods), ke(T.monopods), Le(T.monopods), be(), b.log("pods (subscribe)", T.pods);
})), ut.push(m.watch("replicationcontrollers", r, function(e) {
T.replicationControllers = e.by("metadata.name"), Me(), Ge(T.vanillaReplicationControllers), Ge(T.monopods), ke(T.vanillaReplicationControllers), Le(T.vanillaReplicationControllers), ct(), be(), b.log("replicationcontrollers (subscribe)", T.replicationControllers);
})), ut.push(m.watch("deploymentconfigs", r, function(e) {
T.deploymentConfigs = e.by("metadata.name"), Me(), Ge(T.deploymentConfigs), Ge(T.vanillaReplicationControllers), Le(T.deploymentConfigs), Ae(), at(), ot(), ct(), be(), b.log("deploymentconfigs (subscribe)", T.deploymentConfigs);
})), ut.push(m.watch(Q, r, function(e) {
T.replicaSets = e.by("metadata.name"), ze(), Ge(T.vanillaReplicaSets), Ge(T.monopods), ke(T.vanillaReplicaSets), Le(T.vanillaReplicaSets), ct(), be(), b.log("replicasets (subscribe)", T.replicaSets);
})), ut.push(m.watch(M, r, function(e) {
J = e.by("metadata.uid"), T.deployments = _.sortBy(J, "metadata.name"), ze(), Ge(T.deployments), Ge(T.vanillaReplicaSets), Le(T.deployments), ct(), be(), b.log("deployments (subscribe)", T.deploymentsByUID);
})), ut.push(m.watch("builds", r, function(e) {
te.builds = e.by("metadata.name"), it(), b.log("builds (subscribe)", te.builds);
})), ut.push(m.watch(W, r, function(e) {
T.statefulSets = e.by("metadata.name"), Ge(T.statefulSets), Ge(T.monopods), ke(T.statefulSets), Le(T.statefulSets), ct(), be(), b.log("statefulsets (subscribe)", T.statefulSets);
}, {
poll: N,
pollInterval: 6e4
})), ut.push(m.watch("services", r, function(e) {
te.allServices = e.by("metadata.name"), Ke(), b.log("services (subscribe)", te.allServices);
}, {
poll: N,
pollInterval: 6e4
})), ut.push(m.watch("routes", r, function(e) {
T.routes = e.by("metadata.name"), We(), b.log("routes (subscribe)", T.routes);
}, {
poll: N,
pollInterval: 6e4
})), ut.push(m.watch("buildConfigs", r, function(e) {
T.buildConfigs = e.by("metadata.name"), Ze(), at(), it(), be(), b.log("buildconfigs (subscribe)", T.buildConfigs);
}, {
poll: N,
pollInterval: 6e4
})), ut.push(m.watch(q, r, function(e) {
T.horizontalPodAutoscalers = e.by("metadata.name"), Qe(), b.log("autoscalers (subscribe)", T.horizontalPodAutoscalers);
}, {
poll: N,
pollInterval: 6e4
})), ut.push(m.watch("imagestreams", r, function(e) {
Y = e.by("metadata.name"), v.buildDockerRefMapForImageStreams(Y, te.imageStreamImageRefByDockerReference), a(), b.log("imagestreams (subscribe)", Y);
}, {
poll: N,
pollInterval: 6e4
})), ut.push(m.watch("resourcequotas", r, function(e) {
te.quotas = e.by("metadata.name"), st();
}, {
poll: !0,
pollInterval: 6e4
})), ut.push(m.watch("appliedclusterresourcequotas", r, function(e) {
te.clusterQuotas = e.by("metadata.name"), st();
}, {
poll: !0,
pollInterval: 6e4
}));
var o, i, s = {}, c = {};
u.SERVICE_CATALOG_ENABLED && A(G, "watch") && (o = function(e) {
var t = E.getServiceClassNameForInstance(e);
if (!t) return n.when();
var r = _.get(te, [ "serviceClasses", t ]);
return r ? n.when(r) : (s[t] || (s[t] = m.get(H, t, {}).then(function(e) {
return te.serviceClasses[t] = e, e;
}).finally(function() {
delete c[t];
})), s[t]);
}, i = function(e) {
var t = E.getServicePlanNameForInstance(e);
if (!t) return n.when();
var r = _.get(te, [ "servicePlans", t ]);
return r ? n.when(r) : (c[t] || (c[t] = m.get(K, t, {}).then(function(e) {
return te.servicePlans[t] = e, e;
}).finally(function() {
delete c[t];
})), c[t]);
}, ut.push(m.watch(G, r, function(e) {
te.serviceInstances = e.by("metadata.name");
var t = [];
_.each(te.serviceInstances, function(e) {
var n = I.getServiceInstanceAlerts(e);
we(e, n), t.push(o(e)), t.push(i(e));
}), k.waitForAll(t).finally(function() {
lt(), be();
}), Le(te.serviceInstances);
}, {
poll: N,
pollInterval: 6e4
}))), u.SERVICE_CATALOG_ENABLED && A(z, "watch") && ut.push(m.watch(z, r, function(e) {
te.bindings = e.by("metadata.name"), T.bindingsByInstanceRef = _.groupBy(te.bindings, "spec.instanceRef.name"), ct();
}, {
poll: N,
pollInterval: 6e4
<<<<<<< 13ac2d832bc56edf6bc5e2fc652da9b188ddae32
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< 13bb99b3a012682f72ebab813cdb86be2a15f55e
<<<<<<< 0ba73cbc37b88f92a6380ccc93fc8e3d978020aa
})), l.list("limitranges", a, function(e) {
V.limitRanges = e.by("metadata.name");
}), s.SERVICE_CATALOG_ENABLED && o({
resource: "serviceinstances",
group: "servicecatalog.k8s.io"
}, "watch") && l.list({
group: "servicecatalog.k8s.io",
resource: "serviceclasses"
}, a, function(e) {
V.serviceClasses = e.by("metadata.name"), Je(), ie();
=======
})), u.list("limitranges", n, function(e) {
<<<<<<< d21c662f039266e2dd235fa32bd86d3647c082ae
<<<<<<< 5ee4e8975cd809cf7a654cbc903e7d305ed5ecb9
W.limitRanges = e.by("metadata.name");
>>>>>>> Adopt service catalog API changes
=======
K.limitRanges = e.by("metadata.name");
>>>>>>> Replacing empty tables with empty state message
=======
W.limitRanges = e.by("metadata.name");
>>>>>>> Handle displaying parameters when secrets are not available.
=======
})), d.list("limitranges", a, function(e) {
=======
})), d.list("limitranges", r, function(e) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
J.limitRanges = e.by("metadata.name");
>>>>>>> Wait for service classes and plans to load
=======
})), m.list("limitranges", r, function(e) {
<<<<<<< 18c5e54bc88f7af8cfcb949a411aa8b0da3e7e9c
Y.limitRanges = e.by("metadata.name");
>>>>>>> Add Browse Catalog to Project context view.
=======
te.limitRanges = e.by("metadata.name");
>>>>>>> Additional getPreferredVersion updates to overview
});
var l = d.SAMPLE_PIPELINE_TEMPLATE;
l && m.get("templates", l.name, {
namespace: l.namespace
}, {
errorNotification: !1
}).then(function(t) {
T.samplePipelineURL = C.createFromTemplateURL(t, e.projectName);
}), e.$on("$destroy", function() {
<<<<<<< 18c5e54bc88f7af8cfcb949a411aa8b0da3e7e9c
<<<<<<< 13ac2d832bc56edf6bc5e2fc652da9b188ddae32
<<<<<<< 13bb99b3a012682f72ebab813cdb86be2a15f55e
<<<<<<< 0ba73cbc37b88f92a6380ccc93fc8e3d978020aa
<<<<<<< 33eb37eab8df0c17bc226501a924a2dc2b9b2f41
<<<<<<< 952b26bc3acaa89a51e4aad5f965e515d3b007ae
c.unwatchAll(Xe), $(window).off("resize.overview", z);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
l.unwatchAll(Ye), $(window).off("resize.overview", q);
>>>>>>> Add bindings list to resource pages
=======
l.unwatchAll(Ye), $(window).off(".overview");
>>>>>>> Patternfly vertical navigation and project bar
=======
u.unwatchAll(at), $(window).off(".overview");
>>>>>>> Adopt service catalog API changes
=======
d.unwatchAll(ot), $(window).off(".overview");
>>>>>>> Wait for service classes and plans to load
=======
m.unwatchAll(it), $(window).off(".overview");
>>>>>>> Add Browse Catalog to Project context view.
=======
m.unwatchAll(ut), $(window).off(".overview");
>>>>>>> Additional getPreferredVersion updates to overview
});
}));
}

<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< 0ba73cbc37b88f92a6380ccc93fc8e3d978020aa
<<<<<<< 952b26bc3acaa89a51e4aad5f965e515d3b007ae
function ResourceServiceBindings(a, b, c, d, e) {
var f, g = this, h = a("enableTechPreviewFeature");
g.bindings = [], g.bindableServiceInstances = [], g.serviceClasses = [], g.serviceInstances = [], g.showBindings = d.SERVICE_CATALOG_ENABLED && h("pod_presets");
var i = a("isIE")(), j = 6e4, k = [], l = a("canI"), m = g.serviceBindingsVersion = b.getPreferredVersion("servicebindings"), n = b.getPreferredVersion("clusterserviceclasses"), o = b.getPreferredVersion("serviceinstances"), p = b.getPreferredVersion("clusterserviceplans"), q = function() {
g.apiObject && g.bindings && (g.bindings = c.getBindingsForResource(g.bindings, g.apiObject));
}, r = function() {
g.bindableServiceInstances = c.filterBindableServiceInstances(g.serviceInstances, g.serviceClasses, f), g.orderedServiceInstances = c.sortServiceInstances(g.serviceInstances, g.serviceClasses);
};
g.createBinding = function() {
g.overlayPanelVisible = !0, g.overlayPanelName = "bindService";
}, g.closeOverlayPanel = function() {
g.overlayPanelVisible = !1;
};
var s = function() {
e.unwatchAll(k), k = [], d.SERVICE_CATALOG_ENABLED && l(m, "watch") && k.push(e.watch(m, g.projectContext, function(a) {
g.bindings = a.by("metadata.name"), q();
}, {
poll: i,
pollInterval: j
})), d.SERVICE_CATALOG_ENABLED && l(o, "watch") && (k.push(e.watch(o, g.projectContext, function(a) {
g.serviceInstances = a.by("metadata.name"), r();
}, {
poll: i,
pollInterval: j
})), e.list(n, {}, function(a) {
g.serviceClasses = a.by("metadata.name"), r();
}), e.list(p, {}, function(a) {
f = a.by("metadata.name");
}));
};
g.$onChanges = function(a) {
a.projectContext && g.showBindings && s();
}, g.$onDestroy = function() {
e.unwatchAll(k);
};
}

function ServiceInstanceBindings(a, b, c) {
var d = this, e = a("canI"), f = d.serviceBindingsVersion = b.getPreferredVersion("servicebindings"), g = function() {
d.bindable = e(f, "create") && c.isServiceBindable(d.serviceInstance, d.serviceClass, d.servicePlan);
};
d.createBinding = function() {
d.overlayPanelVisible = !0;
}, d.closeOverlayPanel = function() {
d.overlayPanelVisible = !1;
}, d.$onChanges = function() {
g();
};
}

var gettext = function(a) {
return a;
};

=======
function ResourceServiceBindings(e, t, n, a) {
var r = this, o = e("enableTechPreviewFeature");
r.bindings = [], r.bindableServiceInstances = [], r.serviceClasses = [], r.serviceInstances = [], r.showBindings = a.SERVICE_CATALOG_ENABLED && ("ServiceInstance" === _.get(r, "apiObject.kind") || o("pod_presets"));
var i = e("isIE")() || e("isEdge")(), s = [], c = e("canI"), l = function() {
r.apiObject && r.bindings && (r.bindings = n.getBindingsForResource(r.bindings, r.apiObject));
}, u = function() {
r.bindableServiceInstances = n.filterBindableServiceInstances(r.serviceInstances, r.serviceClasses), r.orderedServiceInstances = n.sortServiceInstances(r.serviceInstances, r.serviceClasses);
=======
function ResourceServiceBindings(e, t, n, a, r) {
=======
function ResourceServiceBindings(e, t, n, r, a) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
var o, i = this, s = e("enableTechPreviewFeature");
i.bindings = [], i.bindableServiceInstances = [], i.serviceClasses = [], i.serviceInstances = [], i.showBindings = r.SERVICE_CATALOG_ENABLED && s("pod_presets");
var c = e("isIE")(), l = [], u = e("canI"), d = i.serviceBindingsVersion = t.getPreferredVersion("servicebindings"), m = t.getPreferredVersion("clusterserviceclasses"), p = t.getPreferredVersion("serviceinstances"), f = t.getPreferredVersion("clusterserviceplans"), g = function() {
i.apiObject && i.bindings && (i.bindings = n.getBindingsForResource(i.bindings, i.apiObject));
}, v = function() {
i.bindableServiceInstances = n.filterBindableServiceInstances(i.serviceInstances, i.serviceClasses, o), i.orderedServiceInstances = n.sortServiceInstances(i.serviceInstances, i.serviceClasses);
>>>>>>> Adopt service catalog API changes
};
i.createBinding = function() {
i.overlayPanelVisible = !0, i.overlayPanelName = "bindService";
}, i.closeOverlayPanel = function() {
i.overlayPanelVisible = !1;
};
var h = function() {
a.unwatchAll(l), l = [], r.SERVICE_CATALOG_ENABLED && u(d, "watch") && l.push(a.watch(d, i.projectContext, function(e) {
i.bindings = e.by("metadata.name"), g();
}, {
poll: c,
pollInterval: 6e4
})), r.SERVICE_CATALOG_ENABLED && u(p, "watch") && (l.push(a.watch(p, i.projectContext, function(e) {
i.serviceInstances = e.by("metadata.name"), v();
}, {
poll: c,
pollInterval: 6e4
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< 0ba73cbc37b88f92a6380ccc93fc8e3d978020aa
})), t.list({
group: "servicecatalog.k8s.io",
resource: "serviceclasses"
}, r.projectContext, function(e) {
r.serviceClasses = e.by("metadata.name"), u();
=======
})), r.list(m, {}, function(e) {
=======
})), a.list(m, {}, function(e) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
i.serviceClasses = e.by("metadata.name"), v();
}), a.list(f, {}, function(e) {
o = e.by("metadata.name");
>>>>>>> Adopt service catalog API changes
}));
};
i.$onChanges = function(e) {
e.projectContext && i.showBindings && h();
}, i.$onDestroy = function() {
a.unwatchAll(l);
};
}

<<<<<<< ed7141d71afeea314ad6d1183c760dedc6ee73fe
>>>>>>> Add bindings list to resource pages
=======
function ServiceInstanceBindings(e, t, n) {
var r = this, a = e("canI"), o = r.serviceBindingsVersion = t.getPreferredVersion("servicebindings"), i = function() {
r.bindable = a(o, "create") && n.isServiceBindable(r.serviceInstance, r.serviceClass, r.servicePlan);
};
r.createBinding = function() {
r.overlayPanelVisible = !0;
}, r.closeOverlayPanel = function() {
r.overlayPanelVisible = !1;
}, r.$onChanges = function() {
i();
};
}

>>>>>>> Fix issues with bindings widget for service instances
angular.isUndefined(window.OPENSHIFT_CONSTANTS) && (window.OPENSHIFT_CONSTANTS = {}), angular.extend(window.OPENSHIFT_CONSTANTS, {
HELP_BASE_URL: "https://docs.openshift.org/latest/",
HELP: {
cli: "cli_reference/index.html",
get_started_cli: "cli_reference/get_started_cli.html",
basic_cli_operations: "cli_reference/basic_cli_operations.html",
"build-triggers": "dev_guide/builds/triggering_builds.html",
webhooks: "dev_guide/builds/triggering_builds.html#webhook-triggers",
new_app: "dev_guide/application_lifecycle/new_app.html",
"start-build": "dev_guide/builds/basic_build_operations.html#starting-a-build",
"deployment-operations": "cli_reference/basic_cli_operations.html#build-and-deployment-cli-operations",
<<<<<<< 11bdf2e442e6d1fb79d0c34d63ccfccee6de82dd
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
"route-types": "architecture/networking/routes.html#route-types",
=======
"route-types": "architecture/core_concepts/routes.html#route-types",
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
"route-types": "architecture/networking/routes.html#route-types",
>>>>>>> Fix broken route links
persistent_volumes: "dev_guide/persistent_volumes.html",
compute_resources: "dev_guide/compute_resources.html",
pod_autoscaling: "dev_guide/pod_autoscaling.html",
application_health: "dev_guide/application_health.html",
source_secrets: "dev_guide/builds/build_inputs.html#using-secrets-during-build",
git_secret: "dev_guide/builds/build_inputs.html#source-clone-secrets",
pull_secret: "dev_guide/managing_images.html#using-image-pull-secrets",
managing_secrets: "dev_guide/service_accounts.html#managing-allowed-secrets",
creating_secrets: "dev_guide/secrets.html#creating-secrets",
storage_classes: "install_config/persistent_storage/dynamically_provisioning_pvs.html",
selector_label: "install_config/persistent_storage/selector_label_binding.html",
rolling_strategy: "dev_guide/deployments/deployment_strategies.html#rolling-strategy",
recreate_strategy: "dev_guide/deployments/deployment_strategies.html#recreate-strategy",
custom_strategy: "dev_guide/deployments/deployment_strategies.html#custom-strategy",
lifecycle_hooks: "dev_guide/deployments/deployment_strategies.html#lifecycle-hooks",
new_pod_exec: "dev_guide/deployments/deployment_strategies.html#pod-based-lifecycle-hook",
authorization: "architecture/additional_concepts/authorization.html",
roles: "architecture/additional_concepts/authorization.html#roles",
service_accounts: "dev_guide/service_accounts.html",
users_and_groups: "architecture/additional_concepts/authentication.html#users-and-groups",
"pipeline-builds": "architecture/core_concepts/builds_and_image_streams.html#pipeline-build",
"pipeline-plugin": "using_images/other_images/jenkins.html#openshift-origin-pipeline-plug-in",
quota: "dev_guide/compute_resources.html",
"config-maps": "dev_guide/configmaps.html",
secrets: "dev_guide/secrets.html",
deployments: "dev_guide/deployments/how_deployments_work.html",
pods: "architecture/core_concepts/pods_and_services.html#pods",
services: "architecture/core_concepts/pods_and_services.html#services",
<<<<<<< 11bdf2e442e6d1fb79d0c34d63ccfccee6de82dd
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
routes: "architecture/networking/routes.html",
=======
routes: "architecture/core_concepts/routes.html",
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
routes: "architecture/networking/routes.html",
>>>>>>> Fix broken route links
builds: "architecture/core_concepts/builds_and_image_streams.html#builds",
"image-streams": "architecture/core_concepts/builds_and_image_streams.html#image-streams",
storage: "architecture/additional_concepts/storage.html",
"build-hooks": "dev_guide/builds/build_hooks.html",
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
"default": "welcome/index.html"
=======
default: "welcome/index.html"
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
},
CLI: {
"Latest Release": "https://github.com/openshift/origin/releases/latest"
},
DEFAULT_HPA_CPU_TARGET_PERCENT: 80,
DISABLE_OVERVIEW_METRICS: !1,
DISABLE_CUSTOM_METRICS: !1,
DISABLE_WILDCARD_ROUTES: !0,
DISABLE_CONFIRM_ON_EXIT: !1,
<<<<<<< 0666ab16a69f060ee6faef6feade97117cedbd56
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
DISABLE_SERVICE_CATALOG_LANDING_PAGE: !1,
AVAILABLE_KINDS_BLACKLIST: [],
DISABLE_GLOBAL_EVENT_WATCH: !1,
DISABLE_COPY_LOGIN_COMMAND: !1,
TEMPLATE_SERVICE_BROKER_ENABLED: !1,
ENABLE_TECH_PREVIEW_FEATURE: {
=======
=======
DISABLE_SERVICE_CATALOG_LANDING_PAGE: !1,
>>>>>>> Enable new landing page experience by default
AVAILABLE_KINDS_BLACKLIST: [],
DISABLE_GLOBAL_EVENT_WATCH: !1,
DISABLE_COPY_LOGIN_COMMAND: !1,
TEMPLATE_SERVICE_BROKER_ENABLED: !1,
ENABLE_TECH_PREVIEW_FEATURE: {
<<<<<<< 1f5fb674ad14c7e78d2e82e837750bd2747349ab
template_service_broker: !1,
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
>>>>>>> Update template service broker flag name
pod_presets: !1
},
SAMPLE_PIPELINE_TEMPLATE: {
name: "jenkins-pipeline-example",
namespace: "openshift"
},
CREATE_FROM_URL_WHITELIST: [ "openshift" ],
SECURITY_CHECK_WHITELIST: [ {
resource: "buildconfigs",
group: ""
}, {
resource: "buildconfigs",
group: "build.openshift.io"
}, {
resource: "builds",
group: ""
}, {
resource: "builds",
group: "build.openshift.io"
}, {
resource: "configmaps",
group: ""
}, {
resource: "daemonsets",
group: "extensions"
}, {
resource: "deployments",
group: "apps"
}, {
resource: "deployments",
group: "extensions"
}, {
resource: "deploymentconfigs",
group: ""
}, {
resource: "deploymentconfigs",
group: "apps.openshift.io"
}, {
resource: "endpoints",
group: ""
}, {
resource: "events",
group: ""
}, {
resource: "horizontalpodautoscalers",
group: "autoscaling"
}, {
resource: "horizontalpodautoscalers",
group: "extensions"
}, {
resource: "imagestreamimages",
group: ""
}, {
resource: "imagestreamimages",
group: "image.openshift.io"
}, {
resource: "imagestreams",
group: ""
}, {
resource: "imagestreams",
group: "image.openshift.io"
}, {
resource: "imagestreamtags",
group: ""
}, {
resource: "imagestreamtags",
group: "image.openshift.io"
}, {
resource: "ingresses",
group: "extensions"
}, {
resource: "jobs",
group: "batch"
}, {
resource: "persistentvolumeclaims",
group: ""
}, {
resource: "pods",
group: ""
}, {
resource: "podtemplates",
group: ""
}, {
resource: "replicasets",
group: "extensions"
}, {
resource: "replicationcontrollers",
group: ""
}, {
resource: "routes",
group: ""
}, {
resource: "routes",
group: "route.openshift.io"
}, {
resource: "secrets",
group: ""
}, {
resource: "serviceaccounts",
group: ""
}, {
resource: "services",
group: ""
}, {
resource: "statefulsets",
group: "apps"
} ],
<<<<<<< 373acb86a812f2eeb568a237dd49fd219af53c6d
<<<<<<< b9f74dc9163281caa65a7366573d340fa288654d
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
MEMBERSHIP_WHITELIST: [ "admin", "basic-user", "edit", "system:deployer", "system:image-builder", "system:image-puller", "system:image-pusher", "view" ],
EVENTS_TO_SHOW: {
FailedCreate: !0,
FailedDelete: !0,
FailedScheduling: !0,
FailedUpdate: !0,
BuildCancelled: !0,
BuildCompleted: !0,
BuildFailed: !0,
BuildStarted: !0,
BuildConfigInstantiateFailed: !0,
Failed: !0,
DeploymentCreated: !0,
DeploymentCreationFailed: !0,
RolloutCancelled: !0,
FailedRescale: !0,
SuccessfulRescale: !0,
BackOff: !0,
FailedSync: !0,
InvalidEnvironmentVariableNames: !0,
Unhealthy: !0,
FailedBinding: !0,
ProvisioningFailed: !0,
VolumeDeleted: !0,
LoadBalancerUpdateFailed: !0,
Deprovisioning: !0,
ErrorCallingProvision: !0,
ErrorInjectingBindResult: !0,
ProvisionCallFailed: !0,
ProvisionedSuccessfully: !0,
<<<<<<< 247459038ac366429876741dd447ec652f2f5e7d
Provisioning: !0,
ReferencesNonexistentServiceClass: !0,
ReferencesNonexistentServicePlan: !0,
UnbindCallFailed: !0
},
PROJECT_NAVIGATION: [ {
label: gettext("Overview"),
iconClass: "fa fa-dashboard",
href: "/overview"
}, {
label: gettext("Applications"),
iconClass: "fa fa-cubes",
secondaryNavSections: [ {
items: [ {
label: gettext("Deployments"),
href: "/browse/deployments",
prefixes: [ "/add-config-volume", "/attach-pvc", "/browse/deployment/", "/browse/dc/", "/browse/rs/", "/browse/rc/", "/edit/autoscaler", "/edit/dc/", "/edit/health-checks", "/set-limits" ]
}, {
label: gettext("Stateful Sets"),
href: "/browse/stateful-sets",
prefixes: [ "/browse/stateful-sets/" ]
}, {
label: gettext("Pods"),
href: "/browse/pods",
prefixes: [ "/browse/pods/" ]
}, {
label: gettext("Services"),
href: "/browse/services",
prefixes: [ "/browse/services/" ]
}, {
label: gettext("Routes"),
href: "/browse/routes",
prefixes: [ "/browse/routes/", "/create-route", "/edit/routes/" ]
}, {
label: "Provisioned Services",
href: "/browse/service-instances",
prefixes: [ "/browse/service-instances/" ],
canI: {
resource: "serviceinstances",
group: "servicecatalog.k8s.io",
verb: "list"
}
} ]
} ]
}, {
label: gettext("Builds"),
iconClass: "pficon pficon-build",
secondaryNavSections: [ {
items: [ {
label: gettext("Builds"),
href: "/browse/builds",
prefixes: [ "/browse/builds/", "/browse/builds-noconfig/", "/edit/builds/" ]
}, {
label: gettext("Pipelines"),
href: "/browse/pipelines",
prefixes: [ "/browse/pipelines/", "/edit/pipelines/" ]
}, {
label: gettext("Images"),
=======
=======
=======
MEMBERSHIP_WHITELIST: [ "admin", "basic-user", "edit", "system:deployer", "system:image-builder", "system:image-puller", "system:image-pusher", "view" ],
>>>>>>> Update membership filter to use MEMBERSHIP_WHITELIST in Constants.js
EVENTS_TO_SHOW: {
FailedCreate: !0,
FailedDelete: !0,
FailedScheduling: !0,
FailedUpdate: !0,
BuildCancelled: !0,
BuildCompleted: !0,
BuildFailed: !0,
BuildStarted: !0,
BuildConfigInstantiateFailed: !0,
DeploymentCancelled: !0,
Failed: !0,
DeploymentCreated: !0,
DeploymentCreationFailed: !0,
FailedRescale: !0,
SuccessfulRescale: !0,
BackOff: !0,
FailedSync: !0,
InvalidEnvironmentVariableNames: !0,
Unhealthy: !0,
FailedBinding: !0,
ProvisioningFailed: !0,
VolumeDeleted: !0,
LoadBalancerUpdateFailed: !0,
Deprovisioning: !0,
ErrorCallingProvision: !0,
ErrorInjectingBindResult: !0,
=======
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
Provisioning: !0,
ReferencesNonexistentServiceClass: !0,
ReferencesNonexistentServicePlan: !0,
UnbindCallFailed: !0
},
>>>>>>> Add notification-drawer to show curated list of events to user
PROJECT_NAVIGATION: [ {
label: "Overview",
iconClass: "fa fa-dashboard",
href: "/overview"
}, {
label: "Applications",
iconClass: "fa fa-cubes",
secondaryNavSections: [ {
items: [ {
label: "Deployments",
href: "/browse/deployments",
prefixes: [ "/add-config-volume", "/attach-pvc", "/browse/deployment/", "/browse/dc/", "/browse/rs/", "/browse/rc/", "/edit/autoscaler", "/edit/dc/", "/edit/health-checks", "/set-limits" ]
}, {
label: "Stateful Sets",
href: "/browse/stateful-sets",
prefixes: [ "/browse/stateful-sets/" ]
}, {
label: "Pods",
href: "/browse/pods",
prefixes: [ "/browse/pods/" ]
}, {
label: "Services",
href: "/browse/services",
prefixes: [ "/browse/services/" ]
}, {
label: "Routes",
href: "/browse/routes",
prefixes: [ "/browse/routes/", "/create-route", "/edit/routes/" ]
}, {
label: "Provisioned Services",
href: "/browse/service-instances",
prefixes: [ "/browse/service-instances/" ],
canI: {
resource: "serviceinstances",
group: "servicecatalog.k8s.io",
verb: "list"
}
} ]
} ]
}, {
label: "Builds",
iconClass: "pficon pficon-build",
secondaryNavSections: [ {
items: [ {
label: "Builds",
href: "/browse/builds",
prefixes: [ "/browse/builds/", "/browse/builds-noconfig/", "/edit/builds/" ]
}, {
label: "Pipelines",
href: "/browse/pipelines",
prefixes: [ "/browse/pipelines/", "/edit/pipelines/" ]
}, {
label: "Images",
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
href: "/browse/images",
prefixes: [ "/browse/images/" ]
} ]
} ]
}, {
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
label: gettext("Resources"),
iconClass: "fa fa-files-o",
secondaryNavSections: [ {
items: [ {
label: gettext("Quota"),
href: "/quota"
}, {
label: gettext("Membership"),
=======
label: "Resources",
iconClass: "fa fa-files-o",
secondaryNavSections: [ {
items: [ {
label: "Quota",
href: "/quota"
}, {
label: "Membership",
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
href: "/membership",
canI: {
resource: "rolebindings",
verb: "list"
}
}, {
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
label: gettext("Config Maps"),
href: "/browse/config-maps",
prefixes: [ "/browse/config-maps/", "/create-config-map", "/edit/config-maps/" ]
}, {
label: gettext("Secrets"),
href: "/browse/secrets",
prefixes: [ "/browse/secrets/", "/create-secret" ],
=======
label: "Config Maps",
href: "/browse/config-maps",
prefixes: [ "/browse/config-maps/", "/create-config-map", "/edit/config-maps/" ]
}, {
label: "Secrets",
href: "/browse/secrets",
<<<<<<< 33eb37eab8df0c17bc226501a924a2dc2b9b2f41
prefixes: [ "/browse/secrets/" ],
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
prefixes: [ "/browse/secrets/", "/create-secret" ],
>>>>>>> Patternfly vertical navigation and project bar
canI: {
resource: "secrets",
verb: "list"
}
}, {
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
label: gettext("Other Resources"),
=======
label: "Other Resources",
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
href: "/browse/other"
} ]
} ]
}, {
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
label: gettext("Storage"),
iconClass: "pficon pficon-container-node",
href: "/browse/storage",
prefixes: [ "/browse/storage/", "/create-pvc" ]
}, {
label: gettext("Monitoring"),
=======
label: "Storage",
iconClass: "pficon pficon-container-node",
href: "/browse/storage",
prefixes: [ "/browse/storage/", "/browse/persistentvolumeclaims/", "/create-pvc" ]
}, {
label: "Monitoring",
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
iconClass: "pficon pficon-screen",
href: "/monitoring",
prefixes: [ "/browse/events" ]
}, {
label: "Catalog",
iconClass: "pficon pficon-service-catalog",
href: "/catalog",
canI: {
addToProject: !0
}
} ],
CATALOG_CATEGORIES: [ {
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
id: "eams",
label: "数人云微服务治理",
items: [ {
id: "octopus",
categoryAliases: [ "octopus" ],
label: "Octopus",
iconClass: "font-icon icon-octopus-m",
description: ""
}, {
id: "squid",
categoryAliases: [ "squid" ],
label: "Squid",
iconClass: "font-icon icon-squid-m",
description: ""
}, {
id: "hawk",
categoryAliases: [ "hawk" ],
label: "Hawk",
iconClass: "font-icon icon-hawk-m",
description: ""
} ]
}, {
id: "dmos",
label: "数人云基础服务",
items: [ {
id: "monitor",
categoryAliases: [ "monitor" ],
label: "Monitor",
iconClass: "font-icon icon-monitor-m",
description: ""
} ]
}, {
id: "languages",
label: gettext("Languages"),
iconClassDefault: "fa fa-code",
items: [ {
id: "java",
label: gettext("Java"),
=======
id: "languages",
label: "Languages",
iconClassDefault: "fa fa-code",
items: [ {
id: "java",
label: "Java",
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
iconClass: "font-icon icon-openjdk",
subcategories: [ {
id: "java-subcategories",
items: [ {
id: "amq",
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
label: gettext("Red Hat JBoss A-MQ")
}, {
id: "processserver",
label: gettext("Red Hat JBoss BPM Suite")
}, {
id: "decisionserver",
label: gettext("Red Hat JBoss BRMS")
}, {
id: "datagrid",
label: gettext("Red Hat JBoss Data Grid")
}, {
id: "eap",
label: gettext("Red Hat JBoss EAP")
}, {
id: "jboss-fuse",
label: gettext("Red Hat JBoss Fuse")
}, {
id: "tomcat",
label: gettext("Red Hat JBoss Web Server (Tomcat)")
}, {
id: "sso",
label: gettext("Red Hat Single Sign-On")
}, {
id: "wildfly",
label: gettext("WildFly")
=======
label: "Red Hat JBoss A-MQ"
}, {
id: "processserver",
label: "Red Hat JBoss BPM Suite"
}, {
id: "decisionserver",
label: "Red Hat JBoss BRMS"
}, {
id: "datagrid",
label: "Red Hat JBoss Data Grid"
}, {
id: "eap",
label: "Red Hat JBoss EAP"
}, {
id: "jboss-fuse",
label: "Red Hat JBoss Fuse"
}, {
id: "tomcat",
label: "Red Hat JBoss Web Server (Tomcat)"
}, {
id: "sso",
label: "Red Hat Single Sign-On"
}, {
id: "wildfly",
label: "WildFly"
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
} ]
} ]
}, {
id: "javascript",
categoryAliases: [ "nodejs", "js" ],
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
label: gettext("JavaScript"),
iconClass: "font-icon icon-js"
}, {
id: "dotnet",
label: gettext(".NET"),
iconClass: "font-icon icon-dotnet"
}, {
id: "perl",
label: gettext("Perl"),
iconClass: "font-icon icon-perl"
}, {
id: "php",
label: gettext("PHP"),
iconClass: "font-icon icon-php"
}, {
id: "python",
label: gettext("Python"),
iconClass: "font-icon icon-python"
}, {
id: "ruby",
label: gettext("Ruby"),
=======
label: "JavaScript",
iconClass: "font-icon icon-js"
}, {
id: "dotnet",
label: ".NET",
iconClass: "font-icon icon-dotnet"
}, {
id: "perl",
label: "Perl",
iconClass: "font-icon icon-perl"
}, {
id: "php",
label: "PHP",
iconClass: "font-icon icon-php"
}, {
id: "python",
label: "Python",
iconClass: "font-icon icon-python"
}, {
id: "ruby",
label: "Ruby",
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
iconClass: "font-icon icon-ruby"
}, {
id: "Golang",
categoryAliases: [ "go" ],
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
label: gettext("Go"),
=======
label: "Go",
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
iconClass: "font-icon icon-go-gopher"
} ]
}, {
id: "technologies",
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
label: gettext("Technologies"),
items: [ {
id: "business-process-services",
categoryAliases: [ "decisionserver", "processserver" ],
label: gettext("Business Process Services"),
description: gettext("Model, automate, and orchestrate business processes across applications, services, and data.")
}, {
id: "ci-cd",
categoryAliases: [ "jenkins" ],
label: gettext("Continuous Integration & Deployment"),
description: gettext("Automate the build, test, and deployment of your application with each new code revision.")
}, {
id: "datastore",
categoryAliases: [ "database", "datagrid" ],
label: gettext("Data Stores"),
description: gettext("Store and manage collections of data.")
}, {
id: "messaging",
label: gettext("Messaging"),
description: gettext("Facilitate communication between applications and distributed processes with a messaging server.")
}, {
id: "integration",
label: gettext("Integration"),
description: gettext("Connect with other applications and data to enhance functionality without duplication.")
}, {
id: "single-sign-on",
categoryAliases: [ "sso" ],
label: gettext("Single Sign-On"),
description: gettext("A centralized authentication server for users to log in, log out, register, and manage user accounts for applications and RESTful web services.")
}, {
id: "",
label: gettext("Uncategorized"),
description: ""
} ]
} ],
SAAS_OFFERINGS: [],
APP_LAUNCHER_NAVIGATION: [],
QUOTA_NOTIFICATION_MESSAGE: {},
LOGO_BASE_URL: "images/logos/",
LOGOS: {
<<<<<<< 77ce3ebb70d0568ad8fbbb649b8a01f54552ad2c
<<<<<<< 3087d5859f05def6301fced3a013ac9165fd8c7a
"icon-3scale": "3scale.svg",
"icon-aerogear": "aerogear.svg",
"icon-amq": "amq.svg",
=======
"icon-aerogear": "aerogear.svg",
>>>>>>> Add SVG icons
=======
"icon-3scale": "3scale.svg",
"icon-aerogear": "aerogear.svg",
"icon-amq": "amq.svg",
>>>>>>> Add product icons for service catalog
"icon-angularjs": "angularjs.svg",
"icon-ansible": "ansible.svg",
"icon-apache": "apache.svg",
"icon-beaker": "beaker.svg",
"icon-capedwarf": "capedwarf.svg",
"icon-cassandra": "cassandra.svg",
"icon-clojure": "clojure.svg",
"icon-codeigniter": "codeigniter.svg",
<<<<<<< 77ce3ebb70d0568ad8fbbb649b8a01f54552ad2c
<<<<<<< 3087d5859f05def6301fced3a013ac9165fd8c7a
"icon-datagrid": "datagrid.svg",
"icon-datavirt": "datavirt.svg",
"icon-decisionserver": "decisionserver.svg",
"icon-django": "django.svg",
"icon-dotnet": "dotnet.svg",
"icon-drupal": "drupal.svg",
"icon-eap": "eap.svg",
=======
"icon-django": "django.svg",
"icon-dotnet": "dotnet.svg",
"icon-drupal": "drupal.svg",
>>>>>>> Add SVG icons
=======
"icon-datagrid": "datagrid.svg",
"icon-datavirt": "datavirt.svg",
"icon-decisionserver": "decisionserver.svg",
"icon-django": "django.svg",
"icon-dotnet": "dotnet.svg",
"icon-drupal": "drupal.svg",
"icon-eap": "eap.svg",
>>>>>>> Add product icons for service catalog
"icon-elastic": "elastic.svg",
"icon-erlang": "erlang.svg",
"icon-git": "git.svg",
"icon-github": "github.svg",
"icon-gitlab": "gitlab.svg",
"icon-glassfish": "glassfish.svg",
"icon-go-gopher": "go-gopher.svg",
"icon-grails": "grails.svg",
"icon-hadoop": "hadoop.svg",
"icon-haproxy": "haproxy.svg",
"icon-infinispan": "infinispan.svg",
"icon-jboss": "jboss.svg",
"icon-jenkins": "jenkins.svg",
"icon-jetty": "jetty.svg",
"icon-joomla": "joomla.svg",
"icon-jruby": "jruby.svg",
"icon-js": "js.svg",
"icon-laravel": "laravel.svg",
"icon-load-balancer": "load-balancer.svg",
"icon-mariadb": "mariadb.svg",
"icon-mediawiki": "mediawiki.svg",
"icon-memcached": "memcached.svg",
"icon-mongodb": "mongodb.svg",
"icon-mysql-database": "mysql-database.svg",
"icon-nginx": "nginx.svg",
"icon-nodejs": "nodejs.svg",
"icon-openjdk": "openjdk.svg",
"icon-openshift": "openshift.svg",
"icon-openstack": "openstack.svg",
"icon-perl": "perl.svg",
"icon-phalcon": "phalcon.svg",
"icon-php": "php.svg",
"icon-play": "play.svg",
"icon-postgresql": "postgresql.svg",
<<<<<<< 77ce3ebb70d0568ad8fbbb649b8a01f54552ad2c
<<<<<<< 3087d5859f05def6301fced3a013ac9165fd8c7a
"icon-processserver": "processserver.svg",
=======
>>>>>>> Add SVG icons
=======
"icon-processserver": "processserver.svg",
>>>>>>> Add product icons for service catalog
"icon-python": "python.svg",
"icon-rabbitmq": "rabbitmq.svg",
"icon-rails": "rails.svg",
"icon-redis": "redis.svg",
<<<<<<< 77ce3ebb70d0568ad8fbbb649b8a01f54552ad2c
<<<<<<< 3087d5859f05def6301fced3a013ac9165fd8c7a
"icon-rh-integration": "rh-integration.svg",
"icon-rh-openjdk": "openjdk.svg",
"icon-rh-tomcat": "rh-tomcat.svg",
=======
>>>>>>> Add SVG icons
=======
"icon-rh-integration": "rh-integration.svg",
"icon-rh-openjdk": "openjdk.svg",
"icon-rh-tomcat": "rh-tomcat.svg",
>>>>>>> Add product icons for service catalog
"icon-ruby": "ruby.svg",
"icon-scala": "scala.svg",
"icon-shadowman": "shadowman.svg",
"icon-spring": "spring.svg",
<<<<<<< 77ce3ebb70d0568ad8fbbb649b8a01f54552ad2c
<<<<<<< 3087d5859f05def6301fced3a013ac9165fd8c7a
"icon-sso": "sso.svg",
=======
>>>>>>> Add SVG icons
=======
"icon-sso": "sso.svg",
>>>>>>> Add product icons for service catalog
"icon-stackoverflow": "stackoverflow.svg",
"icon-symfony": "symfony.svg",
"icon-tomcat": "tomcat.svg",
"icon-wildfly": "wildfly.svg",
"icon-wordpress": "wordpress.svg",
"icon-zend": "zend.svg"
}
<<<<<<< 3087d5859f05def6301fced3a013ac9165fd8c7a
}), angular.module("i18n", [ "gettext", "angularMoment" ]).run([ "$window", "gettextCatalog", "amMoment", function(a, b, c) {
function d() {
if (4 === g.readyState) if (200 === g.status) {
var a = JSON.parse(g.response);
for (var c in a) b.setStrings(c, a[c]);
} else console.error("Problem retrieving language data");
}
function e(a) {
null !== g ? (g.onreadystatechange = d, g.open("GET", a, !1), g.send(null)) : console.error("Your browser does not support XMLHttpRequest.");
}
b.debug = !1;
var f = a.OPENSHIFT_LANG, g = new XMLHttpRequest();
"en" !== f && (e("languages/" + f + ".json"), b.setCurrentLanguage(f), c.changeLocale(f.toLowerCase()));
} ]), angular.module("openshiftConsole", [ "ngAnimate", "ngCookies", "ngResource", "ngRoute", "ngSanitize", "kubernetesUI", "registryUI.images", "ui.bootstrap", "patternfly.charts", "patternfly.navigation", "patternfly.sort", "patternfly.notification", "openshiftConsoleTemplates", "ui.ace", "extension-registry", "as.sortable", "ui.select", "angular-inview", "angularMoment", "ab-base64", "gettext", "i18n", "openshiftCommonServices", "openshiftCommonUI", "webCatalog", "gettext" ]).config([ "$routeProvider", function(a) {
var b, c = {
=======
}), angular.module("openshiftConsole", [ "ngAnimate", "ngCookies", "ngResource", "ngRoute", "ngSanitize", "kubernetesUI", "registryUI.images", "ui.bootstrap", "patternfly.charts", "patternfly.navigation", "patternfly.sort", "patternfly.notification", "openshiftConsoleTemplates", "ui.ace", "extension-registry", "as.sortable", "ui.select", "angular-inview", "angularMoment", "ab-base64", "openshiftCommonServices", "openshiftCommonUI", "webCatalog" ]).config([ "$routeProvider", function(e) {
var t, n = {
>>>>>>> Add SVG icons
templateUrl: "views/projects.html",
controller: "ProjectsController"
};
_.get(window, "OPENSHIFT_CONSTANTS.DISABLE_SERVICE_CATALOG_LANDING_PAGE") ? (b = c, a.when("/projects", {
redirectTo: "/"
})) : (b = {
templateUrl: "views/landing-page.html",
controller: "LandingPageController",
reloadOnSearch: !1
}, a.when("/projects", c)), a.when("/", b).when("/create-project", {
templateUrl: "views/create-project.html",
controller: "CreateProjectController"
}).when("/project/:project", {
redirectTo: function(a) {
return "/project/" + encodeURIComponent(a.project) + "/overview";
=======
label: "Technologies",
items: [ {
id: "business-process-services",
categoryAliases: [ "decisionserver", "processserver" ],
label: "Business Process Services",
description: "Model, automate, and orchestrate business processes across applications, services, and data."
}, {
id: "ci-cd",
categoryAliases: [ "jenkins" ],
label: "Continuous Integration & Deployment",
description: "Automate the build, test, and deployment of your application with each new code revision."
}, {
id: "datastore",
categoryAliases: [ "database", "datagrid" ],
label: "Data Stores",
description: "Store and manage collections of data."
}, {
id: "messaging",
label: "Messaging",
description: "Facilitate communication between applications and distributed processes with a messaging server."
}, {
id: "integration",
label: "Integration",
description: "Connect with other applications and data to enhance functionality without duplication."
}, {
id: "single-sign-on",
categoryAliases: [ "sso" ],
label: "Single Sign-On",
description: "A centralized authentication server for users to log in, log out, register, and manage user accounts for applications and RESTful web services."
}, {
id: "",
label: "Uncategorized",
description: ""
} ]
} ],
<<<<<<< b9f74dc9163281caa65a7366573d340fa288654d
SAAS_OFFERINGS: []
}), angular.module("openshiftConsole", [ "ngAnimate", "ngCookies", "ngResource", "ngRoute", "ngSanitize", "kubernetesUI", "registryUI.images", "ui.bootstrap", "patternfly.charts", "patternfly.navigation", "patternfly.sort", "openshiftConsoleTemplates", "ui.ace", "extension-registry", "as.sortable", "ui.select", "angular-inview", "angularMoment", "ab-base64", "openshiftCommonServices", "openshiftCommonUI", "webCatalog" ]).config([ "$routeProvider", function(e) {
=======
SAAS_OFFERINGS: [],
APP_LAUNCHER_NAVIGATION: [],
QUOTA_NOTIFICATION_MESSAGE: {}
}), angular.module("openshiftConsole", [ "ngAnimate", "ngCookies", "ngResource", "ngRoute", "ngSanitize", "kubernetesUI", "registryUI.images", "ui.bootstrap", "patternfly.charts", "patternfly.navigation", "patternfly.sort", "patternfly.notification", "openshiftConsoleTemplates", "ui.ace", "extension-registry", "as.sortable", "ui.select", "angular-inview", "angularMoment", "ab-base64", "openshiftCommonServices", "openshiftCommonUI", "webCatalog" ]).config([ "$routeProvider", function(e) {
>>>>>>> Add notification-drawer to show curated list of events to user
var t, n = {
templateUrl: "views/projects.html",
controller: "ProjectsController"
};
_.get(window, "OPENSHIFT_CONSTANTS.DISABLE_SERVICE_CATALOG_LANDING_PAGE") ? (t = n, e.when("/projects", {
redirectTo: "/"
})) : (t = {
templateUrl: "views/landing-page.html",
controller: "LandingPageController",
reloadOnSearch: !1
}, e.when("/projects", n)), e.when("/", t).when("/create-project", {
templateUrl: "views/create-project.html",
controller: "CreateProjectController"
}).when("/project/:project/catalog", {
templateUrl: "views/project-browse-catalog.html",
controller: "ProjectBrowseCatalogController"
}).when("/project/:project", {
redirectTo: function(e) {
return "/project/" + encodeURIComponent(e.project) + "/overview";
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
}
}).when("/project/:project/overview", {
templateUrl: "views/overview.html",
controller: "OverviewController",
controllerAs: "overview",
reloadOnSearch: !1
}).when("/project/:project/quota", {
templateUrl: "views/quota.html",
controller: "QuotaController"
}).when("/project/:project/monitoring", {
templateUrl: "views/monitoring.html",
controller: "MonitoringController",
reloadOnSearch: !1
}).when("/project/:project/membership", {
templateUrl: "views/membership.html",
controller: "MembershipController",
reloadOnSearch: !1
}).when("/project/:project/browse", {
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
redirectTo: function(a) {
return "/project/" + encodeURIComponent(a.project) + "/browse/pods";
=======
redirectTo: function(e) {
return "/project/" + encodeURIComponent(e.project) + "/browse/pods";
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
}
}).when("/project/:project/browse/builds", {
templateUrl: "views/builds.html",
controller: "BuildsController",
reloadOnSearch: !1
}).when("/project/:project/browse/pipelines", {
templateUrl: "views/pipelines.html",
controller: "PipelinesController"
}).when("/project/:project/browse/builds/:buildconfig", {
templateUrl: "views/browse/build-config.html",
controller: "BuildConfigController",
reloadOnSearch: !1
}).when("/project/:project/browse/pipelines/:buildconfig", {
templateUrl: "views/browse/build-config.html",
controller: "BuildConfigController",
resolve: {
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
isPipeline: [ "$route", function(a) {
a.current.params.isPipeline = !0;
=======
isPipeline: [ "$route", function(e) {
e.current.params.isPipeline = !0;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
} ]
},
reloadOnSearch: !1
}).when("/project/:project/edit/yaml", {
templateUrl: "views/edit/yaml.html",
controller: "EditYAMLController"
}).when("/project/:project/edit/builds/:buildconfig", {
templateUrl: "views/edit/build-config.html",
controller: "EditBuildConfigController"
}).when("/project/:project/edit/pipelines/:buildconfig", {
templateUrl: "views/edit/build-config.html",
controller: "EditBuildConfigController",
resolve: {
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
isPipeline: [ "$route", function(a) {
a.current.params.isPipeline = !0;
=======
isPipeline: [ "$route", function(e) {
e.current.params.isPipeline = !0;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
} ]
},
reloadOnSearch: !1
}).when("/project/:project/browse/builds/:buildconfig/:build", {
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
templateUrl: function(a) {
return "chromeless" === a.view ? "views/logs/chromeless-build-log.html" : "views/browse/build.html";
=======
templateUrl: function(e) {
return "chromeless" === e.view ? "views/logs/chromeless-build-log.html" : "views/browse/build.html";
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
},
controller: "BuildController",
reloadOnSearch: !1
}).when("/project/:project/browse/pipelines/:buildconfig/:build", {
templateUrl: "views/browse/build.html",
controller: "BuildController",
resolve: {
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
isPipeline: [ "$route", function(a) {
a.current.params.isPipeline = !0;
=======
isPipeline: [ "$route", function(e) {
e.current.params.isPipeline = !0;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
} ]
},
reloadOnSearch: !1
}).when("/project/:project/browse/builds-noconfig/:build", {
templateUrl: "views/browse/build.html",
controller: "BuildController",
reloadOnSearch: !1
}).when("/project/:project/browse/pipelines-noconfig/:build", {
templateUrl: "views/browse/build.html",
controller: "BuildController",
resolve: {
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
isPipeline: [ "$route", function(a) {
a.current.params.isPipeline = !0;
=======
isPipeline: [ "$route", function(e) {
e.current.params.isPipeline = !0;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
} ]
},
reloadOnSearch: !1
}).when("/project/:project/browse/deployments", {
templateUrl: "views/deployments.html",
controller: "DeploymentsController",
reloadOnSearch: !1
}).when("/project/:project/browse/deployment/:deployment", {
templateUrl: "views/browse/deployment.html",
controller: "DeploymentController",
reloadOnSearch: !1
}).when("/project/:project/browse/dc/:deploymentconfig", {
templateUrl: "views/browse/deployment-config.html",
controller: "DeploymentConfigController",
reloadOnSearch: !1
}).when("/project/:project/edit/dc/:deploymentconfig", {
templateUrl: "views/edit/deployment-config.html",
controller: "EditDeploymentConfigController"
}).when("/project/:project/browse/stateful-sets/", {
templateUrl: "views/browse/stateful-sets.html",
controller: "StatefulSetsController",
reloadOnSearch: !1
}).when("/project/:project/browse/stateful-sets/:statefulset", {
templateUrl: "views/browse/stateful-set.html",
controller: "StatefulSetController",
reloadOnSearch: !1
}).when("/project/:project/browse/rs/:replicaSet", {
templateUrl: "views/browse/replica-set.html",
resolve: {
kind: function() {
return "ReplicaSet";
}
},
controller: "ReplicaSetController",
reloadOnSearch: !1
}).when("/project/:project/browse/rc/:replicaSet", {
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
templateUrl: function(a) {
return "chromeless" === a.view ? "views/logs/chromeless-deployment-log.html" : "views/browse/replica-set.html";
=======
templateUrl: function(e) {
return "chromeless" === e.view ? "views/logs/chromeless-deployment-log.html" : "views/browse/replica-set.html";
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
},
resolve: {
kind: function() {
return "ReplicationController";
}
},
controller: "ReplicaSetController",
reloadOnSearch: !1
}).when("/project/:project/browse/events", {
templateUrl: "views/events.html",
controller: "EventsController"
}).when("/project/:project/browse/images", {
templateUrl: "views/images.html",
controller: "ImagesController",
reloadOnSearch: !1
}).when("/project/:project/browse/images/:imagestream", {
templateUrl: "views/browse/imagestream.html",
controller: "ImageStreamController"
}).when("/project/:project/browse/images/:imagestream/:tag", {
templateUrl: "views/browse/image.html",
controller: "ImageController",
reloadOnSearch: !1
}).when("/project/:project/browse/pods", {
templateUrl: "views/pods.html",
controller: "PodsController",
reloadOnSearch: !1
}).when("/project/:project/browse/pods/:pod", {
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
templateUrl: function(a) {
return "chromeless" === a.view ? "views/logs/chromeless-pod-log.html" : "views/browse/pod.html";
=======
templateUrl: function(e) {
return "chromeless" === e.view ? "views/logs/chromeless-pod-log.html" : "views/browse/pod.html";
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
},
controller: "PodController",
reloadOnSearch: !1
}).when("/project/:project/browse/services", {
templateUrl: "views/services.html",
controller: "ServicesController",
reloadOnSearch: !1
}).when("/project/:project/browse/services/:service", {
templateUrl: "views/browse/service.html",
controller: "ServiceController",
reloadOnSearch: !1
<<<<<<< 602d786018a3879a89789b1214b36a15c51b928b
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
=======
>>>>>>> Updates for Service Instance & Bindings
}).when("/project/:project/browse/service-instances", {
templateUrl: "views/service-instances.html",
controller: "ServiceInstancesController",
reloadOnSearch: !1
}).when("/project/:project/browse/service-instances/:instance", {
templateUrl: "views/browse/service-instance.html",
controller: "ServiceInstanceController",
reloadOnSearch: !1
<<<<<<< 602d786018a3879a89789b1214b36a15c51b928b
=======
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
>>>>>>> Updates for Service Instance & Bindings
}).when("/project/:project/browse/storage", {
templateUrl: "views/storage.html",
controller: "StorageController",
reloadOnSearch: !1
}).when("/project/:project/browse/secrets/:secret", {
templateUrl: "views/browse/secret.html",
controller: "SecretController",
reloadOnSearch: !1
}).when("/project/:project/browse/secrets", {
templateUrl: "views/secrets.html",
controller: "SecretsController",
reloadOnSearch: !1
}).when("/project/:project/create-secret", {
templateUrl: "views/create-secret.html",
controller: "CreateSecretController"
}).when("/project/:project/browse/config-maps", {
templateUrl: "views/browse/config-maps.html",
controller: "ConfigMapsController",
reloadOnSearch: !1
}).when("/project/:project/browse/config-maps/:configMap", {
templateUrl: "views/browse/config-map.html",
controller: "ConfigMapController"
}).when("/project/:project/create-config-map", {
templateUrl: "views/create-config-map.html",
controller: "CreateConfigMapController"
}).when("/project/:project/edit/config-maps/:configMap", {
templateUrl: "views/edit/config-map.html",
controller: "EditConfigMapController"
}).when("/project/:project/browse/other", {
templateUrl: "views/other-resources.html",
controller: "OtherResourcesController",
reloadOnSearch: !1
}).when("/project/:project/browse/persistentvolumeclaims/:pvc", {
templateUrl: "views/browse/persistent-volume-claim.html",
controller: "PersistentVolumeClaimController"
}).when("/project/:project/browse/routes", {
templateUrl: "views/browse/routes.html",
controller: "RoutesController",
reloadOnSearch: !1
}).when("/project/:project/edit/routes/:route", {
templateUrl: "views/edit/route.html",
controller: "EditRouteController"
}).when("/project/:project/browse/routes/:route", {
templateUrl: "views/browse/route.html",
controller: "RouteController"
}).when("/project/:project/create-route", {
templateUrl: "views/create-route.html",
controller: "CreateRouteController"
}).when("/project/:project/edit", {
templateUrl: "views/edit/project.html",
controller: "EditProjectController"
}).when("/project/:project/create-pvc", {
templateUrl: "views/create-persistent-volume-claim.html",
controller: "CreatePersistentVolumeClaimController"
}).when("/project/:project/attach-pvc", {
templateUrl: "views/attach-pvc.html",
controller: "AttachPVCController"
}).when("/project/:project/add-config-volume", {
templateUrl: "views/add-config-volume.html",
controller: "AddConfigVolumeController"
}).when("/project/:project/create", {
templateUrl: "views/create.html",
controller: "CreateController",
reloadOnSearch: !1
}).when("/project/:project/create/category/:category", {
templateUrl: "views/create/category.html",
controller: "BrowseCategoryController"
}).when("/project/:project/create/category/:category/:subcategory", {
templateUrl: "views/create/category.html",
controller: "BrowseCategoryController"
}).when("/project/:project/create/fromtemplate", {
templateUrl: "views/newfromtemplate.html",
controller: "NewFromTemplateController"
}).when("/project/:project/create/fromimage", {
templateUrl: "views/create/fromimage.html",
controller: "CreateFromImageController"
}).when("/project/:project/create/next", {
templateUrl: "views/create/next-steps.html",
controller: "NextStepsController"
}).when("/project/:project/set-limits", {
templateUrl: "views/set-limits.html",
controller: "SetLimitsController"
}).when("/project/:project/edit/autoscaler", {
templateUrl: "views/edit/autoscaler.html",
controller: "EditAutoscalerController"
}).when("/project/:project/edit/health-checks", {
templateUrl: "views/edit/health-checks.html",
controller: "EditHealthChecksController"
}).when("/about", {
templateUrl: "views/about.html",
controller: "AboutController"
}).when("/command-line", {
templateUrl: "views/command-line.html",
controller: "CommandLineController"
}).when("/oauth", {
templateUrl: "views/util/oauth.html",
controller: "OAuthController"
}).when("/error", {
templateUrl: "views/util/error.html",
controller: "ErrorController"
}).when("/logout", {
templateUrl: "views/util/logout.html",
controller: "LogoutController"
}).when("/create", {
templateUrl: "views/create-from-url.html",
controller: "CreateFromURLController"
}).when("/createProject", {
redirectTo: "/create-project"
}).when("/project/:project/createRoute", {
redirectTo: "/project/:project/create-route"
}).when("/project/:project/attachPVC", {
redirectTo: "/project/:project/attach-pvc"
}).when("/project/:project/browse/deployments/:deploymentconfig", {
redirectTo: "/project/:project/browse/dc/:deploymentconfig"
}).when("/project/:project/browse/deployments/:deploymentconfig/:rc", {
redirectTo: "/project/:project/browse/rc/:rc"
}).when("/project/:project/browse/deployments-replicationcontrollers/:rc", {
redirectTo: "/project/:project/browse/rc/:rc"
}).otherwise({
redirectTo: "/"
});
} ]).constant("LOGGING_URL", _.get(window.OPENSHIFT_CONFIG, "loggingURL")).constant("METRICS_URL", _.get(window.OPENSHIFT_CONFIG, "metricsURL")).constant("LIMIT_REQUEST_OVERRIDES", _.get(window.OPENSHIFT_CONFIG, "limitRequestOverrides")).constant("SOURCE_URL_PATTERN", /^[a-z][a-z0-9+.-@]*:(\/\/)?[0-9a-z_-]+/i).constant("RELATIVE_PATH_PATTERN", /^(?!\/)(?!\.\.(\/|$))(?!.*\/\.\.(\/|$)).*$/).constant("IS_SAFARI", /Version\/[\d\.]+.*Safari/.test(navigator.userAgent)).constant("amTimeAgoConfig", {
titleFormat: "LLL"
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
}).config([ "kubernetesContainerSocketProvider", function(a) {
a.WebSocketFactory = "ContainerWebSocket";
} ]).config([ "$compileProvider", function(a) {
a.aHrefSanitizationWhitelist(/^\s*(https?|mailto|git):/i);
} ]).run([ "$rootScope", "LabelFilter", function(a, b) {
b.persistFilterState(!0), a.$on("$routeChangeSuccess", function() {
b.readPersistedState();
});
} ]).run([ "durationFilter", "timeOnlyDurationFromTimestampsFilter", function(a, b) {
setInterval(function() {
$(".duration[data-timestamp]").text(function(c, d) {
var e = $(this).data("timestamp"), f = $(this).data("omit-single"), g = $(this).data("precision"), h = $(this).data("time-only");
return h ? b(e, null) || d : a(e, null, f, g) || d;
});
}, 1e3);
} ]).run([ "IS_IOS", function(a) {
a && $("body").addClass("ios");
} ]).run([ "$window", "gettextCatalog", "amMoment", function(a, b, c) {
b.debug = !1;
var d = a.OPENSHIFT_LANG;
"en" !== d && (b.loadRemote("languages/" + d + ".json"), b.setCurrentLanguage(d), c.changeLocale(d.toLowerCase()));
} ]), hawtioPluginLoader.addModule("openshiftConsole"), angular.module("openshiftConsole").factory("BrowserStore", [ function() {
var a = "openshift/", b = {
local: window.localStorage,
session: window.sessionStorage
};
return {
saveJSON: function(c, d, e) {
return b[c].setItem(a + d, JSON.stringify(e));
},
loadJSON: function(c, d) {
return JSON.parse(b[c].getItem(a + d) || "{}");
}
};
} ]), angular.module("openshiftConsole").factory("APIDiscovery", [ "LOGGING_URL", "METRICS_URL", "$q", "$filter", function(a, b, c, d) {
return {
getLoggingURL: function(b) {
var e = a, f = d("annotation")(b, "loggingUIHostname");
return f && (e = "https://" + f), c.when(e);
},
getMetricsURL: function() {
return c.when(b);
}
};
} ]), angular.module("openshiftConsole").service("ApplicationGenerator", [ "DataService", "APIService", "Logger", "$parse", "$q", function(a, b, c, d, e) {
var f = {}, g = function(a) {
return _.isArray(a) ? a : _.map(a, function(a, b) {
return {
name: b,
value: a
=======
}).config([ "kubernetesContainerSocketProvider", function(e) {
e.WebSocketFactory = "ContainerWebSocket";
} ]).config([ "$compileProvider", function(e) {
e.aHrefSanitizationWhitelist(/^\s*(https?|mailto|git):/i);
} ]).run([ "$rootScope", "LabelFilter", function(e, t) {
t.persistFilterState(!0), e.$on("$routeChangeSuccess", function() {
t.readPersistedState();
});
} ]).run([ "durationFilter", "timeOnlyDurationFromTimestampsFilter", function(e, t) {
setInterval(function() {
$(".duration[data-timestamp]").text(function(n, r) {
var a = $(this).data("timestamp"), o = $(this).data("omit-single"), i = $(this).data("precision");
return $(this).data("time-only") ? t(a, null) || r : e(a, null, o, i) || r;
});
}, 1e3);
} ]).run([ "IS_IOS", function(e) {
e && $("body").addClass("ios");
} ]), hawtioPluginLoader.addModule("openshiftConsole"), angular.module("openshiftConsole").factory("BrowserStore", [ function() {
var e = {
local: window.localStorage,
session: window.sessionStorage
};
return {
saveJSON: function(t, n, r) {
return e[t].setItem("openshift/" + n, JSON.stringify(r));
},
loadJSON: function(t, n) {
return JSON.parse(e[t].getItem("openshift/" + n) || "{}");
}
};
} ]), angular.module("openshiftConsole").factory("APIDiscovery", [ "LOGGING_URL", "METRICS_URL", "$q", "$filter", function(e, t, n, r) {
return {
getLoggingURL: function(t) {
var a = e, o = r("annotation")(t, "loggingUIHostname");
return o && (a = "https://" + o), n.when(a);
},
getMetricsURL: function() {
return n.when(t);
}
};
} ]), angular.module("openshiftConsole").service("ApplicationGenerator", [ "DataService", "APIService", "Logger", "$parse", "$q", function(e, t, n, r, a) {
var o = {}, i = function(e) {
return _.isArray(e) ? e : _.map(e, function(e, t) {
return {
name: t,
value: e
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
};
});
};
return o._generateSecret = function() {
function e() {
return Math.floor(65536 * (1 + Math.random())).toString(16).substring(1);
}
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
return a() + a() + a() + a();
}, f.parsePorts = function(a) {
var b = function(b) {
var e = [];
return angular.forEach(b, function(b, f) {
var g = f.split("/");
1 === g.length && g.push("tcp");
var h = parseInt(g[0], 10);
isNaN(h) ? c.warn("Container port " + g[0] + " is not a number for image " + d("metadata.name")(a)) : e.push({
containerPort: h,
protocol: g[1].toUpperCase()
});
}), e.sort(function(a, b) {
return a.containerPort - b.containerPort;
}), e;
}, e = d("dockerImageMetadata.Config.ExposedPorts")(a) || d("dockerImageMetadata.ContainerConfig.ExposedPorts")(a) || [];
return b(e);
}, f.generate = function(a) {
var b = f.parsePorts(a.image);
a.annotations["openshift.io/generated-by"] = "OpenShiftWebConsole";
var c;
null !== a.buildConfig.sourceUrl && (c = {
name: a.name,
=======
return e() + e() + e() + e();
}, o.parsePorts = function(e) {
return function(t) {
var a = [];
return angular.forEach(t, function(t, o) {
var i = o.split("/");
1 === i.length && i.push("tcp");
var s = parseInt(i[0], 10);
isNaN(s) ? n.warn("Container port " + i[0] + " is not a number for image " + r("metadata.name")(e)) : a.push({
containerPort: s,
protocol: i[1].toUpperCase()
});
}), a.sort(function(e, t) {
return e.containerPort - t.containerPort;
}), a;
}(r("dockerImageMetadata.Config.ExposedPorts")(e) || r("dockerImageMetadata.ContainerConfig.ExposedPorts")(e) || []);
}, o.generate = function(e) {
var t = o.parsePorts(e.image);
e.annotations["openshift.io/generated-by"] = "OpenShiftWebConsole";
var n;
null !== e.buildConfig.sourceUrl && (n = {
name: e.name,
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
tag: "latest",
kind: "ImageStreamTag",
toString: function() {
return this.name + ":" + this.tag;
}
});
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
var d = {
imageStream: f._generateImageStream(a),
buildConfig: f._generateBuildConfig(a, c, a.labels),
deploymentConfig: f._generateDeploymentConfig(a, c, b, a.labels)
};
a.scaling.autoscale && (d.hpa = f._generateHPA(a, d.deploymentConfig));
var e = f._generateService(a, a.name, b);
return e && (d.service = e, d.route = f._generateRoute(a, a.name, d.service.metadata.name)), d;
}, f.createRoute = function(a, b, c) {
return f._generateRoute({
labels: c || {},
routing: angular.extend({
include: !0
}, a)
}, a.name, b);
}, f._generateRoute = function(a, b, c) {
if (!a.routing.include) return null;
var d = {
kind: "Route",
apiVersion: "v1",
metadata: {
name: b,
labels: a.labels,
annotations: a.annotations
=======
var a = {
=======
var r = {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
imageStream: o._generateImageStream(e),
buildConfig: o._generateBuildConfig(e, n, e.labels),
deploymentConfig: o._generateDeploymentConfig(e, n, t, e.labels)
};
e.scaling.autoscale && (r.hpa = o._generateHPA(e, r.deploymentConfig));
var a = o._generateService(e, e.name, t);
return a && (r.service = a, r.route = o._generateRoute(e, e.name, r.service.metadata.name)), r;
}, o.createRoute = function(e, t, n) {
return o._generateRoute({
labels: n || {},
routing: angular.extend({
include: !0
}, e)
}, e.name, t);
}, o._generateRoute = function(e, t, n) {
if (!e.routing.include) return null;
var r = {
kind: "Route",
apiVersion: "v1",
metadata: {
name: t,
labels: e.labels,
annotations: e.annotations
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
},
spec: {
to: {
kind: "Service",
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
name: c
},
wildcardPolicy: "None"
}
}, e = a.routing.host;
e && (e.startsWith("*.") ? (d.spec.wildcardPolicy = "Subdomain", d.spec.host = "wildcard" + e.substring(1)) : d.spec.host = e), a.routing.path && (d.spec.path = a.routing.path), a.routing.targetPort && (d.spec.port = {
targetPort: a.routing.targetPort
});
var f = a.routing.tls;
return f && f.termination && (d.spec.tls = {
termination: f.termination
}, f.insecureEdgeTerminationPolicy && (d.spec.tls.insecureEdgeTerminationPolicy = f.insecureEdgeTerminationPolicy), "passthrough" !== f.termination && (f.certificate && (d.spec.tls.certificate = f.certificate), f.key && (d.spec.tls.key = f.key), f.caCertificate && (d.spec.tls.caCertificate = f.caCertificate), f.destinationCACertificate && "reencrypt" === f.termination && (d.spec.tls.destinationCACertificate = f.destinationCACertificate))), d;
}, f._generateDeploymentConfig = function(a, b, c) {
var d = g(a.deploymentConfig.envVars), e = angular.copy(a.labels);
e.deploymentconfig = a.name;
var f, h = {
image: b.toString(),
name: a.name,
ports: c,
env: d,
resources: _.get(a, "container.resources")
};
f = a.scaling.autoscaling ? a.scaling.minReplicas || 1 : a.scaling.replicas;
var i = {
apiVersion: "v1",
kind: "DeploymentConfig",
metadata: {
name: a.name,
labels: a.labels,
annotations: a.annotations
},
spec: {
replicas: f,
selector: {
deploymentconfig: a.name
=======
name: n
},
wildcardPolicy: "None"
}
}, a = e.routing.host;
a && (a.startsWith("*.") ? (r.spec.wildcardPolicy = "Subdomain", r.spec.host = "wildcard" + a.substring(1)) : r.spec.host = a), e.routing.path && (r.spec.path = e.routing.path), e.routing.targetPort && (r.spec.port = {
targetPort: e.routing.targetPort
});
var o = e.routing.tls;
return o && o.termination && (r.spec.tls = {
termination: o.termination
}, o.insecureEdgeTerminationPolicy && (r.spec.tls.insecureEdgeTerminationPolicy = o.insecureEdgeTerminationPolicy), "passthrough" !== o.termination && (o.certificate && (r.spec.tls.certificate = o.certificate), o.key && (r.spec.tls.key = o.key), o.caCertificate && (r.spec.tls.caCertificate = o.caCertificate), o.destinationCACertificate && "reencrypt" === o.termination && (r.spec.tls.destinationCACertificate = o.destinationCACertificate))), r;
}, o._generateDeploymentConfig = function(e, t, n) {
var r = i(e.deploymentConfig.envVars), a = angular.copy(e.labels);
a.deploymentconfig = e.name;
var o, s = {
image: t.toString(),
name: e.name,
ports: n,
env: r,
resources: _.get(e, "container.resources")
};
o = e.scaling.autoscaling ? e.scaling.minReplicas || 1 : e.scaling.replicas;
var c = {
apiVersion: "v1",
kind: "DeploymentConfig",
metadata: {
name: e.name,
labels: e.labels,
annotations: e.annotations
},
spec: {
replicas: o,
selector: {
deploymentconfig: e.name
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
},
triggers: [],
template: {
metadata: {
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
labels: e
},
spec: {
containers: [ h ]
=======
labels: r
=======
labels: a
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
},
spec: {
containers: [ s ]
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
}
}
}
};
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
return i.spec.triggers.push({
type: "ImageChange",
imageChangeParams: {
automatic: !!a.deploymentConfig.deployOnNewImage,
containerNames: [ a.name ],
from: {
kind: b.kind,
name: b.toString()
}
}
}), a.deploymentConfig.deployOnConfigChange && i.spec.triggers.push({
type: "ConfigChange"
}), i;
}, f._generateHPA = function(a, b) {
var c = {
apiVersion: "autoscaling/v1",
kind: "HorizontalPodAutoscaler",
metadata: {
name: a.name,
labels: a.labels,
annotations: a.annotations
},
spec: {
scaleTargetRef: {
kind: "DeploymentConfig",
name: b.metadata.name,
apiVersion: "extensions/v1beta1",
subresource: "scale"
},
minReplicas: a.scaling.minReplicas,
maxReplicas: a.scaling.maxReplicas,
targetCPUUtilizationPercentage: a.scaling.targetCPU || a.scaling.defaultTargetCPU || null
}
};
return c;
}, f._generateBuildConfig = function(a, b) {
var c = g(a.buildConfig.envVars), d = [ {
generic: {
secret: f._generateSecret()
},
type: "Generic"
} ];
a.buildConfig.buildOnSourceChange && d.push({
github: {
secret: f._generateSecret()
},
type: "GitHub"
}), a.buildConfig.buildOnImageChange && d.push({
imageChange: {},
type: "ImageChange"
}), a.buildConfig.buildOnConfigChange && d.push({
type: "ConfigChange"
});
var e = new URI(a.buildConfig.sourceUrl), h = e.fragment();
h || (h = "master"), e.fragment("");
var i = e.href(), j = {
apiVersion: "v1",
kind: "BuildConfig",
metadata: {
name: a.name,
labels: a.labels,
annotations: a.annotations
},
spec: {
output: {
to: {
name: b.toString(),
kind: b.kind
}
},
source: {
git: {
ref: a.buildConfig.gitRef || h,
uri: i
},
type: "Git"
},
strategy: {
type: "Source",
sourceStrategy: {
from: {
kind: "ImageStreamTag",
name: a.imageName + ":" + a.imageTag,
namespace: a.namespace
},
env: c
}
},
triggers: d
}
};
return _.get(a, "buildConfig.secrets.gitSecret[0].name") && (j.spec.source.sourceSecret = _.head(a.buildConfig.secrets.gitSecret)), a.buildConfig.contextDir && (j.spec.source.contextDir = a.buildConfig.contextDir), j;
}, f._generateImageStream = function(a) {
return {
apiVersion: "v1",
kind: "ImageStream",
metadata: {
name: a.name,
labels: a.labels,
annotations: a.annotations
=======
return c.spec.triggers.push({
type: "ImageChange",
imageChangeParams: {
automatic: !!e.deploymentConfig.deployOnNewImage,
containerNames: [ e.name ],
from: {
kind: t.kind,
name: t.toString()
}
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
}
}), e.deploymentConfig.deployOnConfigChange && c.spec.triggers.push({
type: "ConfigChange"
}), c;
}, o._generateHPA = function(e, t) {
return {
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
port: a.containerPort,
targetPort: a.containerPort,
protocol: a.protocol,
name: (a.containerPort + "-" + a.protocol).toLowerCase()
};
}, f._generateService = function(a, b, c) {
if (!c || !c.length) return null;
var d = {
kind: "Service",
apiVersion: "v1",
metadata: {
name: b,
labels: a.labels,
annotations: a.annotations
},
spec: {
selector: {
deploymentconfig: a.name
},
ports: _.map(c, f.getServicePort)
}
};
return d;
}, f.ifResourcesDontExist = function(c, d) {
function f() {
0 === j && (h.length > 0 ? g.reject({
nameTaken: !0
}) : g.resolve({
nameTaken: !1
}));
}
var g = e.defer(), h = [], i = [], j = c.length;
return c.forEach(function(c) {
var e = b.objectToResourceGroupVersion(c);
return e ? b.apiInfo(e) ? void a.get(e, c.metadata.name, {
namespace: d
}, {
errorNotification: !1
}).then(function(a) {
h.push(a), j--, f();
}, function(a) {
i.push(a), j--, f();
}) : (i.push({
data: {
message: b.unsupportedObjectKindOrVersion(c)
}
}), j--, void f()) : (i.push({
data: {
message: b.invalidObjectKindOrVersion(c)
}
}), j--, void f());
}), g.promise;
}, f;
} ]), angular.module("openshiftConsole").service("Navigate", [ "$location", "$window", "$timeout", "annotationFilter", "LabelFilter", "$filter", "APIService", function(a, b, c, d, e, f, g) {
var h = f("annotation"), i = f("buildConfigForBuild"), j = f("isJenkinsPipelineStrategy"), k = f("displayName"), l = function(a, b) {
return _.get(b, "isPipeline") ? "pipelines" : _.isObject(a) && j(a) ? "pipelines" : "builds";
};
return {
toErrorPage: function(c, d, e) {
var f = URI("error").query({
error_description: c,
error: d
}).toString();
e ? b.location.href = f : a.url(f).replace();
},
toProjectOverview: function(b) {
a.path(this.projectOverviewURL(b));
},
projectOverviewURL: function(a) {
return "project/" + encodeURIComponent(a) + "/overview";
},
toProjectList: function() {
a.path("projects");
},
membershipURL: function(a) {
return "project/" + encodeURIComponent(a) + "/membership";
},
toProjectMembership: function(b) {
a.path(this.membershipURL(b));
},
quotaURL: function(a) {
return "project/" + encodeURIComponent(a) + "/quota";
},
createFromImageURL: function(a, b, c, d) {
var e = URI.expand("project/{project}/create/fromimage{?q*}", {
project: c,
q: angular.extend({
imageStream: a.metadata.name,
imageTag: b,
namespace: a.metadata.namespace,
displayName: k(a)
}, d || {})
});
return e.toString();
},
createFromTemplateURL: function(a, b, c) {
var d = URI.expand("project/{project}/create/fromtemplate{?q*}", {
project: b,
q: angular.extend({
template: a.metadata.name,
namespace: a.metadata.namespace
}, c || {})
});
return d.toString();
},
toNextSteps: function(b, c, d) {
var e = {
name: b
=======
apiVersion: "autoscaling/v1",
kind: "HorizontalPodAutoscaler",
metadata: {
name: e.name,
labels: e.labels,
annotations: e.annotations
},
spec: {
scaleTargetRef: {
kind: "DeploymentConfig",
name: t.metadata.name,
apiVersion: "extensions/v1beta1",
subresource: "scale"
},
minReplicas: e.scaling.minReplicas,
maxReplicas: e.scaling.maxReplicas,
targetCPUUtilizationPercentage: e.scaling.targetCPU || e.scaling.defaultTargetCPU || null
}
};
}, o._generateBuildConfig = function(e, t) {
var n = i(e.buildConfig.envVars), r = [ {
generic: {
secret: o._generateSecret()
},
type: "Generic"
} ];
e.buildConfig.buildOnSourceChange && r.push({
github: {
secret: o._generateSecret()
},
type: "GitHub"
}), e.buildConfig.buildOnImageChange && r.push({
imageChange: {},
type: "ImageChange"
}), e.buildConfig.buildOnConfigChange && r.push({
type: "ConfigChange"
});
var a = new URI(e.buildConfig.sourceUrl), s = a.fragment();
s || (s = "master"), a.fragment("");
var c = a.href(), l = {
apiVersion: "v1",
kind: "BuildConfig",
metadata: {
name: e.name,
labels: e.labels,
annotations: e.annotations
},
spec: {
output: {
to: {
name: t.toString(),
kind: t.kind
}
},
source: {
git: {
ref: e.buildConfig.gitRef || s,
uri: c
},
type: "Git"
},
strategy: {
type: "Source",
sourceStrategy: {
from: {
kind: "ImageStreamTag",
name: e.imageName + ":" + e.imageTag
},
env: n
}
},
triggers: r
}
};
return e.namespace && (l.spec.strategy.namespace = e.namespace), _.get(e, "buildConfig.secrets.gitSecret[0].name") && (l.spec.source.sourceSecret = _.head(e.buildConfig.secrets.gitSecret)), e.buildConfig.contextDir && (l.spec.source.contextDir = e.buildConfig.contextDir), l;
}, o._generateImageStream = function(e) {
return {
apiVersion: "v1",
kind: "ImageStream",
metadata: {
name: e.name,
labels: e.labels,
annotations: e.annotations
}
};
}, o.getServicePort = function(e) {
return {
port: e.containerPort,
targetPort: e.containerPort,
protocol: e.protocol,
name: (e.containerPort + "-" + e.protocol).toLowerCase()
};
}, o._generateService = function(e, t, n) {
return n && n.length ? {
kind: "Service",
apiVersion: "v1",
metadata: {
name: t,
labels: e.labels,
annotations: e.annotations
},
spec: {
selector: {
deploymentconfig: e.name
},
ports: _.map(n, o.getServicePort)
}
} : null;
}, o.ifResourcesDontExist = function(n, r) {
function o() {
0 === l && (s.length > 0 ? i.reject({
nameTaken: !0
}) : i.resolve({
nameTaken: !1
}));
}
var i = a.defer(), s = [], c = [], l = n.length;
return n.forEach(function(n) {
var a = t.objectToResourceGroupVersion(n);
return a ? t.apiInfo(a) ? void e.get(a, n.metadata.name, {
namespace: r
}, {
errorNotification: !1
}).then(function(e) {
s.push(e), l--, o();
}, function(e) {
c.push(e), l--, o();
}) : (c.push({
data: {
message: t.unsupportedObjectKindOrVersion(n)
}
}), l--, void o()) : (c.push({
data: {
message: t.invalidObjectKindOrVersion(n)
}
}), l--, void o());
}), i.promise;
}, o;
} ]), angular.module("openshiftConsole").service("Navigate", [ "$location", "$window", "$timeout", "annotationFilter", "LabelFilter", "$filter", "APIService", function(e, t, n, r, a, o, i) {
var s = o("annotation"), c = o("buildConfigForBuild"), l = o("isJenkinsPipelineStrategy"), u = o("displayName"), d = function(e, t) {
return _.get(t, "isPipeline") ? "pipelines" : _.isObject(e) && l(e) ? "pipelines" : "builds";
};
return {
toErrorPage: function(n, r, a) {
var o = URI("error").query({
error_description: n,
error: r
}).toString();
a ? t.location.href = o : e.url(o).replace();
},
toProjectOverview: function(t) {
e.path(this.projectOverviewURL(t));
},
projectOverviewURL: function(e) {
return "project/" + encodeURIComponent(e) + "/overview";
},
toProjectList: function() {
e.path("projects");
},
membershipURL: function(e) {
return "project/" + encodeURIComponent(e) + "/membership";
},
toProjectMembership: function(t) {
e.path(this.membershipURL(t));
},
catalogURL: function(e) {
var t = angular.isString(e) ? e : _.get(e, "metadata.name");
return t ? "project/" + encodeURIComponent(t) + "/catalog" : "./";
},
toProjectCatalog: function(t, n) {
var r = e.path(this.catalogURL(t));
n && r.search(n);
},
quotaURL: function(e) {
return "project/" + encodeURIComponent(e) + "/quota";
},
createFromImageURL: function(e, t, n, r) {
return URI.expand("project/{project}/create/fromimage{?q*}", {
project: n,
q: angular.extend({
imageStream: e.metadata.name,
imageTag: t,
namespace: e.metadata.namespace,
displayName: u(e)
}, r || {})
}).toString();
},
createFromTemplateURL: function(e, t, n) {
return URI.expand("project/{project}/create/fromtemplate{?q*}", {
project: t,
q: angular.extend({
template: e.metadata.name,
namespace: e.metadata.namespace
}, n || {})
}).toString();
},
toNextSteps: function(t, n, r) {
var a = {
name: t
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
};
_.isObject(r) && _.extend(a, r), e.path("project/" + encodeURIComponent(n) + "/create/next").search(a);
},
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
toPodsForDeployment: function(b, d) {
return 1 === _.size(d) ? void this.toResourceURL(_.sample(d)) : (a.url("/project/" + b.metadata.namespace + "/browse/pods"), void c(function() {
e.setLabelSelector(new LabelSelector(b.spec.selector, (!0)));
}, 1));
},
resourceURL: function(a, b, c, d, e) {
if (d = d || "browse", !(a && (a.metadata || b && c))) return null;
b || (b = a.kind), c || (c = a.metadata.namespace);
var h = a;
a.metadata && (h = a.metadata.name);
var i = URI("").segment("project").segmentCoded(c).segment(d);
switch (b) {
case "Build":
var j = f("buildConfigForBuild")(a), k = l(a, e);
j ? i.segment(k).segmentCoded(j).segmentCoded(h) : i.segment(k + "-noconfig").segmentCoded(h);
=======
toPodsForDeployment: function(t, a) {
1 !== _.size(a) ? (e.url("/project/" + t.metadata.namespace + "/browse/pods"), n(function() {
r.setLabelSelector(new LabelSelector(t.spec.selector, !0));
}, 1)) : this.toResourceURL(_.sample(a));
=======
toPodsForDeployment: function(t, r) {
1 !== _.size(r) ? (e.url("/project/" + t.metadata.namespace + "/browse/pods"), n(function() {
a.setLabelSelector(new LabelSelector(t.spec.selector, !0));
}, 1)) : this.toResourceURL(_.sample(r));
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
},
resourceURL: function(e, t, n, r, a) {
if (r = r || "browse", !(e && (e.metadata || t && n))) return null;
t || (t = e.kind), n || (n = e.metadata.namespace);
var s = e;
e.metadata && (s = e.metadata.name);
var c = URI("").segment("project").segmentCoded(n).segment(r);
switch (t) {
case "Build":
var l = o("buildConfigForBuild")(e), u = d(e, a);
l ? c.segment(u).segmentCoded(l).segmentCoded(s) : c.segment(u + "-noconfig").segmentCoded(s);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
break;

case "BuildConfig":
c.segment(d(e, a)).segmentCoded(s);
break;

case "ConfigMap":
c.segment("config-maps").segmentCoded(s);
break;

case "Deployment":
c.segment("deployment").segmentCoded(s);
break;

case "DeploymentConfig":
c.segment("dc").segmentCoded(s);
break;

case "ReplicaSet":
c.segment("rs").segmentCoded(s);
break;

case "ReplicationController":
c.segment("rc").segmentCoded(s);
break;

case "ImageStream":
c.segment("images").segmentCoded(s);
break;

case "ImageStreamTag":
var m = s.indexOf(":");
c.segment("images").segmentCoded(s.substring(0, m)).segmentCoded(s.substring(m + 1));
break;

case "ServiceInstance":
c.segment("service-instances").segmentCoded(s);
break;

case "ServiceInstance":
i.segment("service-instances").segmentCoded(h);
break;

case "StatefulSet":
c.segment("stateful-sets").segmentCoded(s);
break;

case "PersistentVolumeClaim":
case "Pod":
case "Route":
case "Secret":
case "Service":
c.segment(i.kindToResource(t)).segmentCoded(s);
break;

default:
<<<<<<< 9bc0af8cb56dcc9609307333b9424f396867cab5
<<<<<<< 602d786018a3879a89789b1214b36a15c51b928b
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
var n;
if (a.metadata) n = g.objectToResourceGroupVersion(a); else if (_.get(e, "apiVersion")) {
var o = g.kindToResource(b), p = g.parseGroupVersion(e.apiVersion);
p.resource = o, n = g.toResourceGroupVersion(p);
} else n = g.toResourceGroupVersion(g.kindToResource(b));
var q = g.apiInfo(n);
if (!q) return null;
i.segment("other").search({
kind: b,
group: n.group
});
}
return _.get(e, "tab") && i.setSearch("tab", e.tab), i.toString();
},
toResourceURL: function(b) {
a.url(this.resourceURL(b));
},
configURLForResource: function(a, b) {
var c, d, e = _.get(a, "kind"), f = _.get(a, "metadata.namespace");
if (!e || !f) return null;
switch (e) {
case "Build":
return c = i(a), c ? this.resourceURL(c, "BuildConfig", f, b, {
isPipeline: j(a)
}) : null;

case "ReplicationController":
return d = h(a, "deploymentConfig"), d ? this.resourceURL(d, "DeploymentConfig", f, b) : null;
}
return null;
},
resourceListURL: function(a, b) {
var c = {
=======
var p;
if (e.metadata) p = i.objectToResourceGroupVersion(e); else if (_.get(r, "apiVersion")) {
=======
var m;
if (e.metadata) m = i.objectToResourceGroupVersion(e); else if (_.get(r, "apiVersion")) {
>>>>>>> Updates for Service Instance & Bindings
=======
var p;
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
if (e.metadata) p = i.objectToResourceGroupVersion(e); else if (_.get(r, "apiVersion")) {
>>>>>>> Support EnvFrom in the Env Editors
var f = i.kindToResource(t), g = i.parseGroupVersion(r.apiVersion);
=======
if (e.metadata) p = i.objectToResourceGroupVersion(e); else if (_.get(a, "apiVersion")) {
var f = i.kindToResource(t), g = i.parseGroupVersion(a.apiVersion);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
g.resource = f, p = i.toResourceGroupVersion(g);
} else p = i.toResourceGroupVersion(i.kindToResource(t));
if (!i.apiInfo(p)) return null;
c.segment("other").search({
kind: t,
group: p.group
});
}
return _.get(a, "tab") && c.setSearch("tab", a.tab), c.toString();
},
toResourceURL: function(t) {
e.url(this.resourceURL(t));
},
configURLForResource: function(e, t) {
var n, r, a = _.get(e, "kind"), o = _.get(e, "metadata.namespace");
if (!a || !o) return null;
switch (a) {
case "Build":
return (n = c(e)) ? this.resourceURL(n, "BuildConfig", o, t, {
isPipeline: l(e)
}) : null;

case "ReplicationController":
return (r = s(e, "deploymentConfig")) ? this.resourceURL(r, "DeploymentConfig", o, t) : null;
}
return null;
},
resourceListURL: function(e, t) {
var n = {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
builds: "builds",
buildconfigs: "builds",
configmaps: "config-maps",
deployments: "deployments",
deploymentconfigs: "deployments",
imagestreams: "images",
pods: "pods",
replicasets: "deployments",
replicationcontrollers: "deployments",
routes: "routes",
secrets: "secrets",
services: "services",
<<<<<<< 602d786018a3879a89789b1214b36a15c51b928b
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
serviceinstances: "service-instances",
=======
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
serviceinstances: "service-instances",
>>>>>>> Updates for Service Instance & Bindings
persistentvolumeclaims: "storage",
statefulsets: "stateful-sets"
};
return URI.expand("project/{projectName}/browse/{browsePath}", {
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
projectName: b,
browsePath: c[a]
}).toString();
},
toResourceList: function(b, c) {
a.url(this.resourceListURL(b, c));
},
yamlURL: function(a, b) {
if (!a) return "";
var c = g.parseGroupVersion(a.apiVersion);
return URI.expand("project/{projectName}/edit/yaml?kind={kind}&name={name}&group={group}&returnURL={returnURL}", {
projectName: a.metadata.namespace,
kind: a.kind,
name: a.metadata.name,
group: c.group || "",
returnURL: b || ""
}).toString();
},
healthCheckURL: function(a, b, c, d) {
return URI.expand("project/{projectName}/edit/health-checks?kind={kind}&name={name}&group={group}", {
projectName: a,
kind: b,
name: c,
group: d || ""
=======
projectName: t,
browsePath: n[e]
}).toString();
},
toResourceList: function(t, n) {
e.url(this.resourceListURL(t, n));
},
yamlURL: function(e, t) {
if (!e) return "";
var n = i.parseGroupVersion(e.apiVersion);
return URI.expand("project/{projectName}/edit/yaml?kind={kind}&name={name}&group={group}&returnURL={returnURL}", {
projectName: e.metadata.namespace,
kind: e.kind,
name: e.metadata.name,
group: n.group || "",
returnURL: t || ""
}).toString();
},
healthCheckURL: function(e, t, n, r) {
return URI.expand("project/{projectName}/edit/health-checks?kind={kind}&name={name}&group={group}", {
projectName: e,
kind: t,
name: n,
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
group: a || ""
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
group: r || ""
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}).toString();
}
};
} ]), angular.module("openshiftConsole").service("NameGenerator", function() {
return {
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
suggestFromSourceUrl: function(a) {
var b = a.substr(a.lastIndexOf("/") + 1, a.length), c = b.indexOf(".");
return c !== -1 && (b = b.substr(0, c)), b.split("#")[0];
=======
suggestFromSourceUrl: function(e) {
var t = e.substr(e.lastIndexOf("/") + 1, e.length), n = t.indexOf(".");
return -1 !== n && (t = t.substr(0, n)), t.split("#")[0];
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
}
};
}), angular.module("openshiftConsole").factory("TaskList", [ "$timeout", function(e) {
function t() {
this.tasks = [];
}
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
var c = 6e4, d = new b();
return b.prototype.add = function(b, e, f, g) {
var h = {
status: "started",
titles: b,
helpLinks: e,
namespace: f
=======
var n = new t();
return t.prototype.add = function(t, r, a, o) {
var i = {
status: "started",
titles: t,
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
helpLinks: a,
namespace: r
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
helpLinks: r,
namespace: a
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
};
this.tasks.push(i), o().then(function(t) {
i.status = "completed", i.hasErrors = t.hasErrors || !1, i.alerts = t.alerts || [], i.hasErrors || e(function() {
n.deleteTask(i);
}, 6e4);
});
}, t.prototype.taskList = function() {
return this.tasks;
}, t.prototype.deleteTask = function(e) {
var t = n.tasks.indexOf(e);
t >= 0 && this.tasks.splice(t, 1);
}, t.prototype.clear = function() {
n.tasks = [];
}, n;
} ]), angular.module("openshiftConsole").factory("ImageStreamResolver", [ "$q", "APIService", "DataService", function(e, t, n) {
function r() {}
var a = t.getPreferredVersion("imagestreamimages");
return r.prototype.fetchReferencedImageStreamImages = function(t, r, o, i) {
var s = {};
return angular.forEach(t, function(e) {
angular.forEach(e.spec.containers, function(e) {
var t = e.image;
if (t && !r[t] && !s[t]) {
var c = o[t];
if (c) {
var l = c.split("@"), u = n.get(a, c, i);
u.then(function(e) {
if (e && e.image) {
var n = angular.copy(e.image);
n.imageStreamName = l[0], n.imageStreamNamespace = i.project.metadata.name, r[t] = n;
}
}), s[t] = u;
}
}
});
}), e.all(s);
}, r.prototype.buildDockerRefMapForImageStreams = function(e, t) {
angular.forEach(e, function(e) {
angular.forEach(e.status.tags, function(n) {
angular.forEach(n.items, function(n) {
n.image && (t[n.dockerImageReference] = e.metadata.name + "@" + n.image);
});
});
});
}, new r();
} ]), angular.module("openshiftConsole").factory("ContainerWebSocket", [ "API_CFG", "$ws", function(e, t) {
return function(n, r) {
return 0 === n.indexOf("/") && (n = ("http:" === window.location.protocol ? "ws://" : "wss://") + e.openshift.hostPort + n), t({
url: n,
method: "WATCH",
protocols: r,
auth: {}
});
};
} ]), angular.module("openshiftConsole").factory("BaseHref", [ "$document", function(e) {
return e.find("base").attr("href") || "/";
} ]), angular.module("openshiftConsole").factory("BuildsService", [ "$filter", "$q", "APIService", "DataService", "Navigate", "NotificationsService", function(e, t, n, r, a, o) {
var i = n.getPreferredVersion("builds"), s = n.getPreferredVersion("buildconfigs/instantiate"), c = n.getPreferredVersion("builds/clone"), l = e("annotation"), u = e("buildConfigForBuild"), d = e("getErrorDetails"), m = e("isIncompleteBuild"), p = e("isJenkinsPipelineStrategy"), f = e("isNewerResource"), g = function(e) {
var t = l(e, "buildNumber") || parseInt(e.metadata.name.match(/(\d+)$/), 10);
return isNaN(t) ? null : t;
}, v = function(e, t) {
var n = g(e);
return t && n ? t + " #" + n : e.metadata.name;
}, h = function(e) {
return "true" === l(e, "openshift.io/build-config.paused");
}, y = function(e) {
return e.status.startTimestamp || e.metadata.creationTimestamp;
}, b = function(e) {
return _.round(e / 1e3 / 1e3);
}, S = e("imageObjectRef"), C = function(e) {
var t = l(e, "jenkinsStatus");
if (!t) return null;
try {
return JSON.parse(t);
} catch (e) {
return Logger.error("Could not parse Jenkins status as JSON", t), null;
}
};
return {
startBuild: function(e) {
var i = p(e) ? "pipeline" : "build", c = {
kind: "BuildRequest",
apiVersion: n.toAPIVersion(s),
metadata: {
name: e.metadata.name
}
<<<<<<< 54fd2fbbc13bc9ca6203880fcea399383443bb5d
<<<<<<< 9bc0af8cb56dcc9609307333b9424f396867cab5
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
});
}), a.all(g);
}, c.prototype.buildDockerRefMapForImageStreams = function(a, b) {
angular.forEach(a, function(a) {
angular.forEach(a.status.tags, function(c) {
angular.forEach(c.items, function(c) {
c.image && (b[c.dockerImageReference] = a.metadata.name + "@" + c.image);
});
});
});
}, new c();
} ]), angular.module("openshiftConsole").factory("ContainerWebSocket", [ "API_CFG", "$ws", function(a, b) {
return function(c, d) {
var e;
return 0 === c.indexOf("/") && (e = "http:" === window.location.protocol ? "ws://" : "wss://", c = e + a.openshift.hostPort + c), b({
url: c,
method: "WATCH",
protocols: d,
auth: {}
});
};
<<<<<<< 602d786018a3879a89789b1214b36a15c51b928b
} ]), angular.module("openshiftConsole").factory("BaseHref", [ "$document", function(a) {
return a.find("base").attr("href") || "/";
} ]), angular.module("openshiftConsole").factory("BuildsService", [ "$filter", "$q", "DataService", "Navigate", "NotificationsService", function(a, b, c, d, e) {
var f = a("annotation"), g = a("buildConfigForBuild"), h = a("getErrorDetails"), i = a("isIncompleteBuild"), j = a("isJenkinsPipelineStrategy"), k = a("isNewerResource"), l = function(a) {
var b = f(a, "buildNumber") || parseInt(a.metadata.name.match(/(\d+)$/), 10);
return isNaN(b) ? null : b;
}, m = function(a, b) {
var c = l(a);
return b && c ? b + " #" + c : a.metadata.name;
}, n = function(a) {
var f = j(a) ? "pipeline" : "build", g = {
kind: "BuildRequest",
apiVersion: "v1",
metadata: {
name: a.metadata.name
}
}, i = {
namespace: a.metadata.namespace
};
return c.create("buildconfigs/instantiate", a.metadata.name, g, i).then(function(b) {
var c, g, h = m(b, a.metadata.name), i = _.get(a, "spec.runPolicy");
"Serial" === i || "SerialLatestOnly" === i ? (c = _.capitalize(f) + " " + h + " successfully queued.", g = "Builds for " + a.metadata.name + " are configured to run one at a time.") : c = _.capitalize(f) + " " + h + " successfully created.", e.addNotification({
=======
return n.create("buildconfigs/instantiate", e.metadata.name, i, c).then(function(t) {
var n, i, s = p(t, e.metadata.name), c = _.get(e, "spec.runPolicy");
"Serial" === c || "SerialLatestOnly" === c ? (n = _.capitalize(o) + " " + s + " successfully queued.", i = "Builds for " + e.metadata.name + " are configured to run one at a time.") : n = _.capitalize(o) + " " + s + " successfully created.", r.addNotification({
>>>>>>> Updates for Service Instance & Bindings
type: "success",
message: c,
details: g,
links: [ {
href: d.resourceURL(b),
label: "View Build"
} ]
});
}, function(a) {
return e.addNotification({
type: "error",
message: "An error occurred while starting the " + f + ".",
details: h(a)
}), b.reject(a);
});
<<<<<<< 602d786018a3879a89789b1214b36a15c51b928b
}, o = function(a, d) {
var f = j(a) ? "pipeline" : "build", g = m(a, d), i = {
namespace: a.metadata.namespace
}, k = angular.copy(a);
return k.status.cancelled = !0, c.update("builds", k.metadata.name, k, i).then(function() {
e.addNotification({
=======
},
cancelBuild: function(e, a) {
var o = l(e) ? "pipeline" : "build", i = p(e, a), c = {
namespace: e.metadata.namespace
}, u = angular.copy(e);
return u.status.cancelled = !0, n.update("builds", u.metadata.name, u, c).then(function() {
r.addNotification({
>>>>>>> Updates for Service Instance & Bindings
type: "success",
message: _.capitalize(f) + " " + g + " successfully cancelled."
});
}), function(a) {
return e.addNotification({
type: "error",
message: "An error occurred cancelling " + f + " " + g + ".",
details: h(a)
}), b.reject(a);
};
<<<<<<< 602d786018a3879a89789b1214b36a15c51b928b
}, p = function(a, f) {
var g = j(a) ? "pipeline" : "build", i = m(a, f), k = {
=======
},
cloneBuild: function(e, o) {
var i = l(e) ? "pipeline" : "build", c = p(e, o), u = {
>>>>>>> Updates for Service Instance & Bindings
kind: "BuildRequest",
apiVersion: "v1",
metadata: {
name: a.metadata.name
}
}, l = {
namespace: a.metadata.namespace
};
<<<<<<< 602d786018a3879a89789b1214b36a15c51b928b
return c.create("builds/clone", a.metadata.name, k, l).then(function(a) {
var b = m(a, f);
e.addNotification({
=======
return n.create("builds/clone", e.metadata.name, u, d).then(function(e) {
var t = p(e, o);
r.addNotification({
>>>>>>> Updates for Service Instance & Bindings
type: "success",
message: _.capitalize(g) + " " + i + " is being rebuilt as " + b + ".",
links: [ {
href: d.resourceURL(a),
label: "View Build"
} ]
});
}, function(a) {
return e.addNotification({
type: "error",
<<<<<<< 602d786018a3879a89789b1214b36a15c51b928b
message: "An error occurred while rerunning " + g + " " + i + ".",
details: h(a)
}), b.reject();
});
}, q = function(a) {
return "true" === f(a, "openshift.io/build-config.paused");
}, r = function(a) {
return !!a && (!a.metadata.deletionTimestamp && !q(a));
}, s = function(a) {
var b = f(a, "pipeline.alpha.openshift.io/uses");
if (!b) return [];
=======
message: "An error occurred while rerunning " + i + " " + c + ".",
details: s(e)
}), t.reject();
});
},
isPaused: m,
canBuild: function(e) {
return !!e && !e.metadata.deletionTimestamp && !m(e);
},
usesDeploymentConfigs: function(e) {
var t = o(e, "pipeline.alpha.openshift.io/uses");
if (!t) return [];
>>>>>>> Updates for Service Instance & Bindings
try {
b = JSON.parse(b);
} catch (c) {
return void Logger.warn('Could not parse "pipeline.alpha.openshift.io/uses" annotation', c);
}
var d = [];
return _.each(b, function(b) {
b.name && (b.namespace && b.namespace !== _.get(a, "metadata.namespace") || "DeploymentConfig" === b.kind && d.push(b.name));
}), d;
}, t = function(a, b) {
return _.pickBy(b, function(b) {
var c = f(b, "buildConfig");
return !c || c === a;
});
}, u = function(a, b) {
var c = {};
return _.each(a, function(a) {
var d = g(a) || "";
b && !b(a) || k(a, c[d]) && (c[d] = a);
}), c;
}, v = function(a) {
return a.status.startTimestamp || a.metadata.creationTimestamp;
}, w = function(a) {
return _.round(a / 1e3 / 1e3);
}, x = function(a) {
var b = _.get(a, "status.duration");
if (b) return w(b);
var c = v(a), d = a.status.completionTimestamp;
return c && d ? moment(d).diff(moment(c)) : 0;
}, y = function(a) {
return _.map(a, function(a) {
return i(a);
});
}, z = function(a) {
return _.map(a, function(a) {
return !i(a);
});
}, A = function(b) {
return _.reduce(b, function(b, c) {
if (i(c)) return b;
var d = a("annotation")(c, "buildConfig");
return k(c, b[d]) && (b[d] = c), b;
}, {});
}, B = function(b) {
var c = {}, d = _.filter(b, function(b) {
if (i(b)) return !0;
var d = a("annotation")(b, "buildConfig");
k(b, c[d]) && (c[d] = b);
});
return d.concat(_.map(c, function(a) {
return a;
}));
}, C = a("imageObjectRef"), D = function(a) {
var b = {};
return _.each(a, function(a) {
var c = _.get(a, "spec.output.to"), d = C(c, a.metadata.namespace);
d && (b[d] = b[d] || [], b[d].push(a));
}), b;
}, E = function(a, b) {
var c = function(a, c) {
var d, e, f = l(a), g = l(c);
return f || g ? f ? g ? b ? g - f : f - g : b ? -1 : 1 : b ? 1 : -1 : (d = _.get(a, "metadata.name", ""), e = _.get(c, "metadata.name", ""), b ? e.localeCompare(d) : d.localeCompare(e));
}, d = function(a, d) {
var e = _.get(a, "metadata.creationTimestamp", ""), f = _.get(d, "metadata.creationTimestamp", "");
return e === f ? c(a, d) : b ? f.localeCompare(e) : e.localeCompare(f);
};
return _.toArray(a).sort(d);
}, F = function(a) {
var b = f(a, "jenkinsStatus");
if (!b) return null;
try {
return JSON.parse(b);
} catch (c) {
return Logger.error("Could not parse Jenkins status as JSON", b), null;
}
}, G = function(a) {
var b = F(a), c = _.get(b, "stages", []);
return _.last(c);
};
return {
startBuild: n,
cancelBuild: o,
cloneBuild: p,
isPaused: q,
canBuild: r,
usesDeploymentConfigs: s,
validatedBuildsForBuildConfig: t,
latestBuildByConfig: u,
getBuildNumber: l,
getBuildDisplayName: m,
getStartTimestsamp: v,
getDuration: x,
incompleteBuilds: y,
completeBuilds: z,
lastCompleteByBuildConfig: A,
interestingBuilds: B,
groupBuildConfigsByOutputImage: D,
sortBuilds: E,
getJenkinsStatus: F,
getCurrentStage: G
};
} ]), angular.module("openshiftConsole").factory("DeploymentsService", [ "APIService", "NotificationsService", "DataService", "$filter", "$q", "LabelFilter", function(a, b, c, d, e, f) {
function g() {}
var h = d("annotation");
g.prototype.startLatestDeployment = function(a, e) {
var f = {
kind: "DeploymentRequest",
apiVersion: "v1",
name: a.metadata.name,
latest: !0,
force: !0
};
c.create("deploymentconfigs/instantiate", a.metadata.name, f, e).then(function(c) {
b.addNotification({
type: "success",
message: "Deployment #" + c.status.latestVersion + " of " + a.metadata.name + " has started."
});
}, function(a) {
b.addNotification({
type: "error",
message: "An error occurred while starting the deployment.",
details: d("getErrorDetails")(a)
});
});
}, g.prototype.retryFailedDeployment = function(a, e, f) {
var g = angular.copy(a), i = a.metadata.name, j = h(a, "deploymentConfig");
c.list("pods", e, function(a) {
var b = a.by("metadata.name"), e = function(a) {
var b = d("annotationName")("deployerPodFor");
a.metadata.labels[b] === i && c["delete"]("pods", a.metadata.name, f).then(function() {
Logger.info("Deployer pod " + a.metadata.name + " deleted");
}, function(a) {
f.alerts = f.alerts || {}, f.alerts.retrydeployer = {
type: "error",
message: "An error occurred while deleting the deployer pod.",
details: d("getErrorDetails")(a)
};
});
};
angular.forEach(b, e);
});
var k = d("annotationName")("deploymentStatus"), l = d("annotationName")("deploymentStatusReason"), m = d("annotationName")("deploymentCancelled");
g.metadata.annotations[k] = "New", delete g.metadata.annotations[l], delete g.metadata.annotations[m], c.update("replicationcontrollers", i, g, e).then(function() {
b.addNotification({
type: "success",
message: "Retrying deployment " + i + " of " + j + "."
});
}, function(a) {
b.addNotification({
type: "error",
message: "An error occurred while retrying the deployment.",
details: d("getErrorDetails")(a)
});
});
}, g.prototype.rollbackToDeployment = function(e, f, g, i, j) {
var k = e.metadata.name, l = h(e, "deploymentConfig"), m = {
apiVersion: "apps.openshift.io/v1",
kind: "DeploymentConfigRollback",
name: l,
spec: {
from: {
name: k
},
includeTemplate: !0,
includeReplicationMeta: f,
includeStrategy: g,
includeTriggers: i
}
};
c.create({
group: "apps.openshift.io",
resource: "deploymentconfigs/rollback"
}, l, m, j).then(function(e) {
var f = a.objectToResourceGroupVersion(e);
c.update(f, l, e, j).then(function(a) {
b.addNotification({
type: "success",
message: "Deployment #" + a.status.latestVersion + " is rolling back " + l + " to " + k + "."
});
}, function(a) {
b.addNotification({
id: "rollback-deployment-error",
type: "error",
message: "An error occurred while rolling back the deployment.",
details: d("getErrorDetails")(a)
});
});
}, function(a) {
b.addNotification({
id: "rollback-deployment-error",
type: "error",
message: "An error occurred while rolling back the deployment.",
details: d("getErrorDetails")(a)
});
});
}, g.prototype.cancelRunningDeployment = function(a, e) {
var f = a.metadata.name, g = d("annotation")(a, "deploymentConfig"), h = angular.copy(a), i = d("annotationName")("deploymentCancelled"), j = d("annotationName")("deploymentStatusReason");
h.metadata.annotations[i] = "true", h.metadata.annotations[j] = "The deployment was cancelled by the user", c.update("replicationcontrollers", f, h, e).then(function() {
b.addNotification({
type: "success",
message: "Cancelled deployment " + f + " of " + g + "."
});
}, function(a) {
b.addNotification({
id: "cancel-deployment-error",
type: "error",
message: "An error occurred while cancelling the deployment.",
details: d("getErrorDetails")(a)
});
});
}, g.prototype.associateDeploymentsToDeploymentConfig = function(a, b, c) {
var e = {}, g = f.getLabelSelector();
return angular.forEach(a, function(a, f) {
var h = d("annotation")(a, "deploymentConfig");
(!c || b && b[h] || g.matches(a)) && (h = h || "", e[h] = e[h] || {}, e[h][f] = a);
}), angular.forEach(b, function(a, b) {
e[b] = e[b] || {};
}), e;
}, g.prototype.deploymentBelongsToConfig = function(a, b) {
return !(!a || !b) && b === d("annotation")(a, "deploymentConfig");
}, g.prototype.associateRunningDeploymentToDeploymentConfig = function(a) {
var b = {};
return angular.forEach(a, function(a, c) {
b[c] = {}, angular.forEach(a, function(a, e) {
var f = d("deploymentStatus")(a);
"New" !== f && "Pending" !== f && "Running" !== f || (b[c][e] = a);
});
}), b;
}, g.prototype.getActiveDeployment = function(a) {
var b = d("deploymentIsInProgress"), c = d("annotation"), e = null;
return _.each(a, function(a) {
return b(a) ? (e = null, !1) : void ("Complete" === c(a, "deploymentStatus") && (!e || e.metadata.creationTimestamp < a.metadata.creationTimestamp) && (e = a));
}), e;
}, g.prototype.getRevision = function(a) {
return h(a, "deployment.kubernetes.io/revision");
}, g.prototype.isActiveReplicaSet = function(a, b) {
var c = this.getRevision(a), d = this.getRevision(b);
return !(!c || !d) && c === d;
}, g.prototype.getActiveReplicaSet = function(a, b) {
var c = this.getRevision(b);
if (!c) return null;
var d = this;
return _.find(a, function(a) {
return d.getRevision(a) === c;
});
}, g.prototype.getScaleResource = function(b) {
var c = {
resource: a.kindToResource(b.kind) + "/scale"
};
switch (b.kind) {
=======
=======
>>>>>>> Support EnvFrom in the Env Editors
}, c = {
namespace: e.metadata.namespace
};
return r.create(s, e.metadata.name, i, c).then(function(t) {
var r, i, s = v(t, e.metadata.name), c = _.get(e, "spec.runPolicy");
"Serial" === c || "SerialLatestOnly" === c ? (r = _.capitalize(n) + " " + s + " successfully queued.", i = "Builds for " + e.metadata.name + " are configured to run one at a time.") : r = _.capitalize(n) + " " + s + " successfully created.", o.addNotification({
=======
}, l = {
namespace: e.metadata.namespace
};
return r.create(s, e.metadata.name, c, l).then(function(t) {
var n, r, s = v(t, e.metadata.name), c = _.get(e, "spec.runPolicy");
"Serial" === c || "SerialLatestOnly" === c ? (n = _.capitalize(i) + " " + s + " successfully queued.", r = "Builds for " + e.metadata.name + " are configured to run one at a time.") : n = _.capitalize(i) + " " + s + " successfully created.", o.addNotification({
>>>>>>> Fix start build & deploy via correct instantiateVersions, add $filter to build group/resource string
type: "success",
message: n,
details: r,
links: [ {
href: a.resourceURL(t),
label: "View Build"
} ]
});
}, function(e) {
return o.addNotification({
type: "error",
message: "An error occurred while starting the " + i + ".",
details: d(e)
}), t.reject(e);
});
},
cancelBuild: function(e, n) {
var a = p(e) ? "pipeline" : "build", s = v(e, n), c = {
namespace: e.metadata.namespace
}, l = angular.copy(e);
return l.status.cancelled = !0, r.update(i, l.metadata.name, l, c).then(function() {
o.addNotification({
type: "success",
message: _.capitalize(a) + " " + s + " successfully cancelled."
});
}), function(e) {
return o.addNotification({
type: "error",
message: "An error occurred cancelling " + a + " " + s + ".",
details: d(e)
}), t.reject(e);
};
},
cloneBuild: function(e, n) {
var i = p(e) ? "pipeline" : "build", s = v(e, n), l = {
kind: "BuildRequest",
apiVersion: "v1",
metadata: {
name: e.metadata.name
}
}, u = {
namespace: e.metadata.namespace
};
return r.create(c, e.metadata.name, l, u).then(function(e) {
var t = v(e, n);
o.addNotification({
type: "success",
message: _.capitalize(i) + " " + s + " is being rebuilt as " + t + ".",
links: [ {
href: a.resourceURL(e),
label: "View Build"
} ]
});
}, function(e) {
return o.addNotification({
type: "error",
message: "An error occurred while rerunning " + i + " " + s + ".",
details: d(e)
}), t.reject();
});
},
isPaused: h,
canBuild: function(e) {
return !!e && !e.metadata.deletionTimestamp && !h(e);
},
usesDeploymentConfigs: function(e) {
var t = l(e, "pipeline.alpha.openshift.io/uses");
if (!t) return [];
try {
t = JSON.parse(t);
} catch (e) {
return void Logger.warn('Could not parse "pipeline.alpha.openshift.io/uses" annotation', e);
}
var n = [];
return _.each(t, function(t) {
t.name && (t.namespace && t.namespace !== _.get(e, "metadata.namespace") || "DeploymentConfig" === t.kind && n.push(t.name));
}), n;
},
validatedBuildsForBuildConfig: function(e, t) {
return _.pickBy(t, function(t) {
var n = l(t, "buildConfig");
return !n || n === e;
});
},
latestBuildByConfig: function(e, t) {
var n = {};
return _.each(e, function(e) {
var r = u(e) || "";
t && !t(e) || f(e, n[r]) && (n[r] = e);
}), n;
},
getBuildNumber: g,
getBuildDisplayName: v,
getStartTimestsamp: y,
getDuration: function(e) {
var t = _.get(e, "status.duration");
if (t) return b(t);
var n = y(e), r = e.status.completionTimestamp;
return n && r ? moment(r).diff(moment(n)) : 0;
},
incompleteBuilds: function(e) {
return _.map(e, function(e) {
return m(e);
});
},
completeBuilds: function(e) {
return _.map(e, function(e) {
return !m(e);
});
},
lastCompleteByBuildConfig: function(t) {
return _.reduce(t, function(t, n) {
if (m(n)) return t;
var r = e("annotation")(n, "buildConfig");
return f(n, t[r]) && (t[r] = n), t;
}, {});
},
interestingBuilds: function(t) {
var n = {};
return _.filter(t, function(t) {
if (m(t)) return !0;
var r = e("annotation")(t, "buildConfig");
f(t, n[r]) && (n[r] = t);
}).concat(_.map(n, function(e) {
return e;
}));
},
groupBuildConfigsByOutputImage: function(e) {
var t = {};
return _.each(e, function(e) {
var n = _.get(e, "spec.output.to"), r = S(n, e.metadata.namespace);
r && (t[r] = t[r] || [], t[r].push(e));
}), t;
},
sortBuilds: function(e, t) {
var n = function(e, n) {
var r, a, o = g(e), i = g(n);
return o || i ? o ? i ? t ? i - o : o - i : t ? -1 : 1 : t ? 1 : -1 : (r = _.get(e, "metadata.name", ""), a = _.get(n, "metadata.name", ""), t ? a.localeCompare(r) : r.localeCompare(a));
};
return _.toArray(e).sort(function(e, r) {
var a = _.get(e, "metadata.creationTimestamp", ""), o = _.get(r, "metadata.creationTimestamp", "");
return a === o ? n(e, r) : t ? o.localeCompare(a) : a.localeCompare(o);
});
},
getJenkinsStatus: C,
getCurrentStage: function(e) {
var t = C(e), n = _.get(t, "stages", []);
return _.last(n);
}
};
} ]), angular.module("openshiftConsole").factory("DeploymentsService", [ "$filter", "$q", "APIService", "DataService", "LabelFilter", "NotificationsService", function(e, t, n, r, a, o) {
function i() {}
var s = n.getPreferredVersion("deploymentconfigs/instantiate"), c = n.getPreferredVersion("deploymentconfigs/rollback"), l = n.getPreferredVersion("pods"), u = n.getPreferredVersion("replicationcontrollers"), d = e("annotation");
i.prototype.startLatestDeployment = function(t, a) {
var i = {
kind: "DeploymentRequest",
apiVersion: n.toAPIVersion(s),
name: t.metadata.name,
latest: !0,
force: !0
};
r.create(s, t.metadata.name, i, a).then(function(e) {
o.addNotification({
type: "success",
message: "Deployment #" + e.status.latestVersion + " of " + t.metadata.name + " has started."
});
}, function(t) {
o.addNotification({
type: "error",
message: "An error occurred while starting the deployment.",
details: e("getErrorDetails")(t)
});
});
}, i.prototype.retryFailedDeployment = function(t, a, i) {
var s = angular.copy(t), c = n.objectToResourceGroupVersion(t), u = t.metadata.name, m = d(t, "deploymentConfig");
r.list(l, a, function(t) {
var n = t.by("metadata.name");
angular.forEach(n, function(t) {
var n = e("annotationName")("deployerPodFor");
t.metadata.labels[n] === u && r.delete(l, t.metadata.name, i).then(function() {
Logger.info("Deployer pod " + t.metadata.name + " deleted");
}, function(t) {
i.alerts = i.alerts || {}, i.alerts.retrydeployer = {
type: "error",
message: "An error occurred while deleting the deployer pod.",
details: e("getErrorDetails")(t)
};
});
});
});
var p = e("annotationName")("deploymentStatus"), f = e("annotationName")("deploymentStatusReason"), g = e("annotationName")("deploymentCancelled");
s.metadata.annotations[p] = "New", delete s.metadata.annotations[f], delete s.metadata.annotations[g], r.update(c, u, s, a).then(function() {
o.addNotification({
type: "success",
message: "Retrying deployment " + u + " of " + m + "."
});
}, function(t) {
o.addNotification({
type: "error",
message: "An error occurred while retrying the deployment.",
details: e("getErrorDetails")(t)
});
});
}, i.prototype.rollbackToDeployment = function(t, a, i, s, l) {
var u = t.metadata.name, m = d(t, "deploymentConfig"), p = {
apiVersion: n.toAPIVersion(c),
kind: "DeploymentConfigRollback",
name: m,
spec: {
from: {
name: u
},
includeTemplate: !0,
includeReplicationMeta: a,
includeStrategy: i,
includeTriggers: s
}
};
r.create(c, m, p, l).then(function(t) {
var a = n.objectToResourceGroupVersion(t);
r.update(a, m, t, l).then(function(e) {
o.addNotification({
type: "success",
message: "Deployment #" + e.status.latestVersion + " is rolling back " + m + " to " + u + "."
});
}, function(t) {
o.addNotification({
id: "rollback-deployment-error",
type: "error",
message: "An error occurred while rolling back the deployment.",
details: e("getErrorDetails")(t)
});
});
}, function(t) {
o.addNotification({
id: "rollback-deployment-error",
type: "error",
message: "An error occurred while rolling back the deployment.",
details: e("getErrorDetails")(t)
});
});
}, i.prototype.cancelRunningDeployment = function(t, n) {
var a = t.metadata.name, i = e("annotation")(t, "deploymentConfig"), s = angular.copy(t), c = e("annotationName")("deploymentCancelled"), l = e("annotationName")("deploymentStatusReason");
s.metadata.annotations[c] = "true", s.metadata.annotations[l] = "The deployment was cancelled by the user", r.update(u, a, s, n).then(function() {
o.addNotification({
type: "success",
message: "Cancelled deployment " + a + " of " + i + "."
});
}, function(t) {
o.addNotification({
id: "cancel-deployment-error",
type: "error",
message: "An error occurred while cancelling the deployment.",
details: e("getErrorDetails")(t)
});
});
}, i.prototype.associateDeploymentsToDeploymentConfig = function(t, n, r) {
var o = {}, i = a.getLabelSelector();
return angular.forEach(t, function(t, a) {
var s = e("annotation")(t, "deploymentConfig");
(!r || n && n[s] || i.matches(t)) && (o[s = s || ""] = o[s] || {}, o[s][a] = t);
}), angular.forEach(n, function(e, t) {
o[t] = o[t] || {};
}), o;
}, i.prototype.deploymentBelongsToConfig = function(t, n) {
return !(!t || !n) && n === e("annotation")(t, "deploymentConfig");
}, i.prototype.associateRunningDeploymentToDeploymentConfig = function(t) {
var n = {};
return angular.forEach(t, function(t, r) {
n[r] = {}, angular.forEach(t, function(t, a) {
var o = e("deploymentStatus")(t);
"New" !== o && "Pending" !== o && "Running" !== o || (n[r][a] = t);
});
}), n;
}, i.prototype.getActiveDeployment = function(t) {
var n = e("deploymentIsInProgress"), r = e("annotation"), a = null;
return _.each(t, function(e) {
if (n(e)) return a = null, !1;
"Complete" === r(e, "deploymentStatus") && (!a || a.metadata.creationTimestamp < e.metadata.creationTimestamp) && (a = e);
}), a;
}, i.prototype.getRevision = function(e) {
return d(e, "deployment.kubernetes.io/revision");
}, i.prototype.isActiveReplicaSet = function(e, t) {
var n = this.getRevision(e), r = this.getRevision(t);
return !(!n || !r) && n === r;
}, i.prototype.getActiveReplicaSet = function(e, t) {
var n = this.getRevision(t);
if (!n) return null;
var r = this;
return _.find(e, function(e) {
return r.getRevision(e) === n;
});
}, i.prototype.getScaleResource = function(e) {
var t = {
resource: n.kindToResource(e.kind) + "/scale"
};
<<<<<<< 6098bb001c99c18f9a7d26aa95819c67144ec8b6
switch (t.kind) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
switch (e.kind) {
>>>>>>> update deployments service to use getPreferredVersion
case "DeploymentConfig":
break;

case "Deployment":
case "ReplicaSet":
case "ReplicationController":
t.group = "extensions";
break;

default:
return null;
}
<<<<<<< 6098bb001c99c18f9a7d26aa95819c67144ec8b6
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
return c;
}, g.prototype.scale = function(a, b) {
var d = this.getScaleResource(a);
if (!d) return e.reject({
data: {
message: "Cannot scale kind " + a.kind + "."
}
});
var f = {
apiVersion: "extensions/v1beta1",
kind: "Scale",
metadata: {
name: a.metadata.name,
namespace: a.metadata.namespace,
creationTimestamp: a.metadata.creationTimestamp
},
spec: {
replicas: b
}
};
return c.update(d, a.metadata.name, f, {
namespace: a.metadata.namespace
});
};
var i = function(a, b) {
var c = _.get(b, [ a ]);
return !_.isEmpty(c);
}, j = function(a, b) {
var c = _.get(b, [ a ]);
return !_.isEmpty(c);
};
return g.prototype.isScalable = function(a, b, c, d, e) {
if (j(a.metadata.name, d)) return !1;
var f = h(a, "deploymentConfig");
if (!f) return !0;
if (!b) return !1;
if (!b[f]) return !0;
if (i(f, c)) return !1;
var g = _.get(e, [ f, "metadata", "name" ]);
return g === a.metadata.name;
}, g.prototype.groupByDeploymentConfig = function(a) {
var b = {};
return _.each(a, function(a) {
var c = d("annotation")(a, "deploymentConfig") || "";
_.set(b, [ c, a.metadata.name ], a);
}), b;
}, g.prototype.sortByDeploymentVersion = function(a, b) {
var c = function(a, c) {
var d, e, f = parseInt(h(a, "deploymentVersion"), 10), g = parseInt(h(c, "deploymentVersion"), 10);
return _.isFinite(f) || _.isFinite(g) ? f ? g ? b ? g - f : f - g : b ? -1 : 1 : b ? 1 : -1 : (d = _.get(a, "metadata.name", ""), e = _.get(c, "metadata.name", ""), b ? e.localeCompare(d) : d.localeCompare(e));
};
return _.toArray(a).sort(c);
}, g.prototype.sortByRevision = function(a) {
var b = this, c = function(a) {
var c = b.getRevision(a);
if (!c) return null;
var d = parseInt(c, 10);
return isNaN(d) ? null : d;
}, d = function(a, b) {
var d = c(a), e = c(b);
return d || e ? d ? e ? e - d : -1 : 1 : a.metadata.name.localeCompare(b.metadata.name);
};
return _.toArray(a).sort(d);
}, g.prototype.setPaused = function(b, d, e) {
var f = angular.copy(b), g = a.objectToResourceGroupVersion(b);
return _.set(f, "spec.paused", d), c.update(g, b.metadata.name, f, e);
}, new g();
} ]), angular.module("openshiftConsole").factory("ImageStreamsService", function() {
return {
tagsByName: function(a) {
var b = {};
return angular.forEach(a.spec.tags, function(c) {
b[c.name] = b[c.name] || {}, b[c.name].name = c.name, b[c.name].spec = angular.copy(c);
var d = b[c.name].spec.from;
if (d) {
var e;
if ("ImageStreamImage" === d.kind ? e = "@" : "ImageStreamTag" === d.kind && (e = ":"), e) {
d._nameConnector = e;
var f = d.name.split(e);
1 === f.length ? (d._imageStreamName = a.metadata.name, d._idOrTag = f[0], d._completeName = d._imageStreamName + e + d._idOrTag) : (d._imageStreamName = f.shift(), d._idOrTag = f.join(e), d._completeName = d._imageStreamName + e + d._idOrTag);
=======
return n;
}, i.prototype.scale = function(e, t) {
var r = this.getScaleResource(e);
if (!r) return a.reject({
=======
return t;
}, i.prototype.scale = function(e, n) {
var a = this.getScaleResource(e);
if (!a) return t.reject({
>>>>>>> update deployments service to use getPreferredVersion
data: {
message: "Cannot scale kind " + e.kind + "."
}
});
var o = {
apiVersion: "extensions/v1beta1",
kind: "Scale",
metadata: {
name: e.metadata.name,
namespace: e.metadata.namespace,
creationTimestamp: e.metadata.creationTimestamp
},
spec: {
replicas: n
}
};
return r.update(a, e.metadata.name, o, {
namespace: e.metadata.namespace
});
};
var m = function(e, t) {
var n = _.get(t, [ e ]);
return !_.isEmpty(n);
}, p = function(e, t) {
var n = _.get(t, [ e ]);
return !_.isEmpty(n);
};
return i.prototype.isScalable = function(e, t, n, r, a) {
if (p(e.metadata.name, r)) return !1;
var o = d(e, "deploymentConfig");
return !o || !!t && (!t[o] || !m(o, n) && _.get(a, [ o, "metadata", "name" ]) === e.metadata.name);
}, i.prototype.groupByDeploymentConfig = function(t) {
var n = {};
return _.each(t, function(t) {
var r = e("annotation")(t, "deploymentConfig") || "";
_.set(n, [ r, t.metadata.name ], t);
}), n;
}, i.prototype.sortByDeploymentVersion = function(e, t) {
return _.toArray(e).sort(function(e, n) {
var r, a, o = parseInt(d(e, "deploymentVersion"), 10), i = parseInt(d(n, "deploymentVersion"), 10);
return _.isFinite(o) || _.isFinite(i) ? o ? i ? t ? i - o : o - i : t ? -1 : 1 : t ? 1 : -1 : (r = _.get(e, "metadata.name", ""), a = _.get(n, "metadata.name", ""), t ? a.localeCompare(r) : r.localeCompare(a));
});
}, i.prototype.sortByRevision = function(e) {
var t = this, n = function(e) {
var n = t.getRevision(e);
if (!n) return null;
var r = parseInt(n, 10);
return isNaN(r) ? null : r;
};
return _.toArray(e).sort(function(e, t) {
var r = n(e), a = n(t);
return r || a ? r ? a ? a - r : -1 : 1 : e.metadata.name.localeCompare(t.metadata.name);
});
}, i.prototype.setPaused = function(e, t, a) {
var o = angular.copy(e), i = n.objectToResourceGroupVersion(e);
return _.set(o, "spec.paused", t), r.update(i, e.metadata.name, o, a);
}, new i();
} ]), angular.module("openshiftConsole").factory("ImageStreamsService", function() {
return {
tagsByName: function(e) {
var t = {};
return angular.forEach(e.spec.tags, function(n) {
t[n.name] = t[n.name] || {}, t[n.name].name = n.name, t[n.name].spec = angular.copy(n);
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
var a = t[n.name].spec.from;
if (a) {
var r;
if ("ImageStreamImage" === a.kind ? r = "@" : "ImageStreamTag" === a.kind && (r = ":"), r) {
a._nameConnector = r;
var o = a.name.split(r);
1 === o.length ? (a._imageStreamName = e.metadata.name, a._idOrTag = o[0], a._completeName = a._imageStreamName + r + a._idOrTag) : (a._imageStreamName = o.shift(), a._idOrTag = o.join(r), a._completeName = a._imageStreamName + r + a._idOrTag);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
var r = t[n.name].spec.from;
if (r) {
var a;
if ("ImageStreamImage" === r.kind ? a = "@" : "ImageStreamTag" === r.kind && (a = ":"), a) {
r._nameConnector = a;
var o = r.name.split(a);
1 === o.length ? (r._imageStreamName = e.metadata.name, r._idOrTag = o[0], r._completeName = r._imageStreamName + a + r._idOrTag) : (r._imageStreamName = o.shift(), r._idOrTag = o.join(a), r._completeName = r._imageStreamName + a + r._idOrTag);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}
}
}), angular.forEach(e.status.tags, function(e) {
t[e.tag] = t[e.tag] || {}, t[e.tag].name = e.tag, t[e.tag].status = angular.copy(e);
}), t;
}
};
<<<<<<< 373acb86a812f2eeb568a237dd49fd219af53c6d
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
}), angular.module("openshiftConsole").factory("MembershipService", [ "$filter", "Constants", "gettext", "gettextCatalog", function(a, b, c, d) {
var e = (a("annotation"), function(a, b) {
return 1 === _.filter(b, function(b) {
return _.some(b.subjects, {
name: a
});
}).length;
}), f = function() {
return _.reduce(_.slice(arguments), function(a, b, c) {
return b ? _.isEqual(c, 0) ? b : a + "-" + b : a;
}, "");
}, g = function() {
=======
}), angular.module("openshiftConsole").factory("MembershipService", [ "$filter", function(e) {
var t = e("annotation"), n = function() {
=======
}), angular.module("openshiftConsole").factory("MembershipService", [ "$filter", "Constants", function(e, t) {
e("annotation");
var n = function() {
>>>>>>> Update membership filter to use MEMBERSHIP_WHITELIST in Constants.js
return _.reduce(_.slice(arguments), function(e, t, n) {
return t ? _.isEqual(n, 0) ? t : e + "-" + t : e;
}, "");
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
}, a = function() {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
}, r = function() {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
return {
User: {
kind: "User",
sortOrder: 1,
name: "User",
subjects: {}
},
Group: {
kind: "Group",
sortOrder: 2,
name: "Group",
subjects: {}
},
ServiceAccount: {
kind: "ServiceAccount",
sortOrder: 3,
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
description: d.getString(c("Service accounts provide a flexible way to control API access without sharing a regular user’s credentials.")),
=======
description: "Service accounts provide a flexible way to control API access without sharing a regular user’s credentials.",
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
helpLinkKey: "service_accounts",
name: "ServiceAccount",
subjects: {}
},
SystemUser: {
kind: "SystemUser",
sortOrder: 4,
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
description: d.getString(c("System users are virtual users automatically provisioned by the system.")),
=======
description: "System users are virtual users automatically provisioned by the system.",
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
helpLinkKey: "users_and_groups",
name: "SystemUser",
subjects: {}
},
SystemGroup: {
kind: "SystemGroup",
sortOrder: 5,
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
description: d.getString(c("System groups are virtual groups automatically provisioned by the system.")),
=======
description: "System groups are virtual groups automatically provisioned by the system.",
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
helpLinkKey: "users_and_groups",
name: "SystemGroup",
subjects: {}
}
};
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
}, h = function(a, b) {
var c = _.reduce(a, function(a, c) {
var d = f(c.roleRef.namespace ? "Role" : "ClusterRole", c.roleRef.name);
return _.each(c.subjects, function(c) {
var e = f(c.namespace, c.name);
a[c.kind].subjects[e] || (a[c.kind].subjects[e] = {
name: c.name,
roles: {}
}, c.namespace && (a[c.kind].subjects[e].namespace = c.namespace)), _.includes(a[c.kind].subjects[e].roles, d) || b[d] && (a[c.kind].subjects[e].roles[d] = b[d]);
}), a;
}, g());
return _.sortBy(c, "sortOrder");
}, i = function(a) {
return _.sortBy(a, "metadata.name");
}, j = function(a) {
return _.filter(a, function(a) {
return _.includes(b.MEMBERSHIP_WHITELIST, a.metadata.name);
});
}, k = function(a) {
return _.reduce(a, function(a, b) {
return a[f(b.kind, b.metadata.name)] = b, a;
}, {});
}, l = function(a, b) {
return _.merge(k(a), k(b));
};
return {
sortRoles: i,
filterRoles: j,
mapRolesForUI: l,
isLastRole: e,
getSubjectKinds: g,
mapRolebindingsForUI: h
};
} ]), angular.module("openshiftConsole").factory("RolesService", [ "$q", "DataService", function(a, b) {
var c = function(c) {
return a.all([ b.list("roles", c, null), b.list("clusterroles", {}, null) ]);
};
return {
listAllRoles: c
};
} ]), angular.module("openshiftConsole").factory("RoleBindingsService", [ "$q", "DataService", function(a, b) {
var c = {}, d = function(a, b) {
var e = b ? a + b : a;
return _.some(c, _.matchesProperty("metadata.name", e)) ? d(a, _.uniqueId()) : e;
}, e = function(a, b) {
var c = _.get(a, "metadata.name"), e = c ? d(c) : null;
return {
kind: "RoleBinding",
apiVersion: "v1",
metadata: {
name: e,
namespace: b
},
roleRef: {
name: _.get(a, "metadata.name"),
namespace: _.get(a, "metadata.namespace")
},
subjects: []
};
}, f = function(a, b) {
return _.isEqual(a.kind, "ServiceAccount") ? a.namespace = a.namespace || b : (_.isEqual(a.kind, "SystemUser") || _.isEqual(a.kind, "SystemGroup")) && (_.startsWith(a.name, "system:") || (a.name = "system:" + a.name)), a;
}, g = function(a) {
a.userNames = null, a.groupNames = null;
}, h = function(a, c, d, g) {
var h = e(a, d);
return c = f(c, d), h.subjects.push(angular.copy(c)), b.create("rolebindings", null, h, g);
}, i = function(a, c, d, h) {
var i = e(), j = _.extend(i, a);
if (!c) return j;
if (c = f(c, d), _.isArray(j.subjects)) {
if (_.includes(j.subjects, c)) return;
j.subjects.push(c);
} else j.subjects = [ c ];
return g(j), b.update("rolebindings", j.metadata.name, j, h);
}, j = function(c, d, f, h, i) {
var j = _.filter(h, {
roleRef: {
name: d
}
});
return a.all(_.map(j, function(a) {
var d = e();
a = _.extend(d, a), g(a);
var h = {
name: c
};
return f && (h.namespace = f), a.subjects = _.reject(a.subjects, h), a.subjects.length ? b.update("rolebindings", a.metadata.name, a, i) : b["delete"]("rolebindings", a.metadata.name, i).then(function() {
return a;
});
}));
}, k = function(a, d, e) {
return b.list("rolebindings", a, function(a) {
c = a.by("metadata.name"), d(a);
}, e);
};
return {
list: k,
create: h,
addSubject: i,
removeSubject: j
};
} ]), angular.module("openshiftConsole").factory("MetricsService", [ "$filter", "$http", "$q", "$rootScope", "APIDiscovery", function(a, b, c, d, e) {
function f() {
return angular.isDefined(k) ? c.when(k) : e.getMetricsURL().then(function(a) {
return k = (a || "").replace(/\/$/, "");
});
}
function g(a) {
if (a.length) return _.each(a, function(a) {
a.empty || !_.isNumber(a.avg) ? a.value = null : a.value = a.avg;
}), a;
=======
}, r = function(e) {
=======
}, a = function(e) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
return _.reduce(e, function(e, t) {
return e[n(t.kind, t.metadata.name)] = t, e;
}, {});
};
return {
sortRoles: function(e) {
return _.sortBy(e, "metadata.name");
},
filterRoles: function(e) {
return _.filter(e, function(e) {
return _.includes(t.MEMBERSHIP_WHITELIST, e.metadata.name);
});
},
mapRolesForUI: function(e, t) {
return _.merge(a(e), a(t));
},
isLastRole: function(e, t) {
return 1 === _.filter(t, function(t) {
return _.some(t.subjects, {
name: e
});
}).length;
},
getSubjectKinds: r,
mapRolebindingsForUI: function(e, t) {
var r = _.reduce(e, function(e, r) {
var a = n(r.roleRef.namespace ? "Role" : "ClusterRole", r.roleRef.name);
return _.each(r.subjects, function(r) {
var o = n(r.namespace, r.name);
e[r.kind].subjects[o] || (e[r.kind].subjects[o] = {
name: r.name,
roles: {}
}, r.namespace && (e[r.kind].subjects[o].namespace = r.namespace)), _.includes(e[r.kind].subjects[o].roles, a) || t[a] && (e[r.kind].subjects[o].roles[a] = t[a]);
}), e;
}, {
User: {
kind: "User",
sortOrder: 1,
name: "User",
subjects: {}
},
Group: {
kind: "Group",
sortOrder: 2,
name: "Group",
subjects: {}
},
ServiceAccount: {
kind: "ServiceAccount",
sortOrder: 3,
description: "Service accounts provide a flexible way to control API access without sharing a regular user’s credentials.",
helpLinkKey: "service_accounts",
name: "ServiceAccount",
subjects: {}
},
SystemUser: {
kind: "SystemUser",
sortOrder: 4,
description: "System users are virtual users automatically provisioned by the system.",
helpLinkKey: "users_and_groups",
name: "SystemUser",
subjects: {}
},
SystemGroup: {
kind: "SystemGroup",
sortOrder: 5,
description: "System groups are virtual groups automatically provisioned by the system.",
helpLinkKey: "users_and_groups",
name: "SystemGroup",
subjects: {}
}
});
return _.sortBy(r, "sortOrder");
}
};
} ]), angular.module("openshiftConsole").factory("RolesService", [ "$q", "APIService", "DataService", function(e, t, n) {
var r = t.getPreferredVersion("roles"), a = t.getPreferredVersion("clusterroles");
return {
listAllRoles: function(t) {
return e.all([ n.list(r, t, null), n.list(a, {}, null) ]);
}
};
} ]), angular.module("openshiftConsole").factory("RoleBindingsService", [ "$q", "APIService", "DataService", function(e, t, n) {
var r = t.getPreferredVersion("rolebindings"), a = {}, o = function(e, t) {
var n = t ? e + t : e;
return _.some(a, _.matchesProperty("metadata.name", n)) ? o(e, _.uniqueId()) : n;
}, i = function(e, t) {
var n = _.get(e, "metadata.name");
return {
kind: "RoleBinding",
apiVersion: "v1",
metadata: {
name: n ? o(n) : null,
namespace: t
},
roleRef: {
name: _.get(e, "metadata.name"),
namespace: _.get(e, "metadata.namespace")
},
subjects: []
};
}, s = function(e, t) {
return _.isEqual(e.kind, "ServiceAccount") ? e.namespace = e.namespace || t : (_.isEqual(e.kind, "SystemUser") || _.isEqual(e.kind, "SystemGroup")) && (_.startsWith(e.name, "system:") || (e.name = "system:" + e.name)), e;
}, c = function(e) {
e.userNames = null, e.groupNames = null;
};
return {
list: function(e, t, o) {
return n.list(r, e, function(e) {
a = e.by("metadata.name"), t(e);
}, o);
},
create: function(e, r, a, o) {
var c = i(e, a), l = t.objectToResourceGroupVersion(c);
return r = s(r, a), c.subjects.push(angular.copy(r)), n.create(l, null, c, o);
},
addSubject: function(e, r, a, o) {
var l = i(), u = _.extend(l, e), d = t.objectToResourceGroupVersion(u);
if (!r) return u;
if (r = s(r, a), _.isArray(u.subjects)) {
if (_.includes(u.subjects, r)) return;
u.subjects.push(r);
} else u.subjects = [ r ];
return c(u), n.update(d, u.metadata.name, u, o);
},
<<<<<<< 03048c83a11138780b80c1ac333639429e2925cd
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
removeSubject: function(n, a, o, s) {
var c = _.filter(o, {
=======
removeSubject: function(n, r, o, s, c) {
var l = _.filter(s, {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
=======
removeSubject: function(t, a, o, s, l) {
var u = _.filter(s, {
>>>>>>> Update membership to use new rbac endpoints
roleRef: {
name: a
}
});
<<<<<<< 03048c83a11138780b80c1ac333639429e2925cd
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
return e.all(_.map(c, function(e) {
var a = r();
return e = _.extend(a, e), i(e), e.subjects = _.reject(e.subjects, {
=======
return e.all(_.map(l, function(e) {
var r = a();
e = _.extend(r, e), i(e);
var s = {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
name: n
}), e.subjects.length ? t.update("rolebindings", e.metadata.name, e, s) : t.delete("rolebindings", e.metadata.name, s).then(function() {
=======
return e.all(_.map(u, function(e) {
var a = i();
e = _.extend(a, e), c(e);
var s = {
name: t
};
return o && (s.namespace = o), e.subjects = _.reject(e.subjects, s), e.subjects.length ? n.update(r, e.metadata.name, e, l) : n.delete(r, e.metadata.name, l).then(function() {
>>>>>>> Update membership to use new rbac endpoints
return e;
});
}));
}
};
} ]), angular.module("openshiftConsole").factory("MetricsService", [ "$filter", "$http", "$q", "$rootScope", "APIDiscovery", function(e, t, n, r, a) {
function o() {
return angular.isDefined(u) ? n.when(u) : a.getMetricsURL().then(function(e) {
return u = (e || "").replace(/\/$/, "");
});
}
function i(e) {
if (e.length) return _.each(e, function(e) {
e.empty || !_.isNumber(e.avg) ? e.value = null : e.value = e.avg;
}), e;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
}
function s(e) {
return e.join("|");
}
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
function i() {
return f().then(function(a) {
return a ? a + "/m/stats/query" : a;
});
}
function j(a) {
return f().then(function(b) {
var c;
return c = "counter" === a.type ? b + o : b + n, URI.expand(c, {
podUID: a.pod.metadata.uid,
containerName: a.containerName,
metric: a.metric
}).toString();
});
}
var k, l, m, n = "/gauges/{containerName}%2F{podUID}%2F{metric}/data", o = "/counters/{containerName}%2F{podUID}%2F{metric}/data", p = function(a) {
return f().then(function(c) {
return !!c && (!a || (!!l || !m && b.get(c).then(function() {
return l = !0, !0;
}, function(a) {
return m = !0, d.$broadcast("metrics-connection-failed", {
url: c,
response: a
}), !1;
})));
});
}, q = function(a) {
var b = a.split("/");
return {
podUID: b[1],
descriptor: b[2] + "/" + b[3]
};
}, r = function(a, c, d) {
var e = _.keyBy(d.pods, "metadata.uid");
return b.post(a, c, {
=======
function c() {
return o().then(function(e) {
return e ? e + "/m/stats/query" : e;
});
}
function l(e) {
return o().then(function(t) {
var n;
return n = "counter" === e.type ? t + f : t + p, URI.expand(n, {
podUID: e.pod.metadata.uid,
containerName: e.containerName,
metric: e.metric
}).toString();
});
}
var u, d, m, p = "/gauges/{containerName}%2F{podUID}%2F{metric}/data", f = "/counters/{containerName}%2F{podUID}%2F{metric}/data", g = function(e) {
var t = e.split("/");
return {
podUID: t[1],
descriptor: t[2] + "/" + t[3]
};
}, v = function(e, n, r) {
var a = _.keyBy(r.pods, "metadata.uid");
return t.post(e, n, {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
auth: {},
headers: {
Accept: "application/json",
"Content-Type": "application/json",
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
"Hawkular-Tenant": d.namespace
}
}).then(function(a) {
var b = {}, c = function(a, c) {
var d = q(c), f = _.get(e, [ d.podUID, "metadata", "name" ]), h = g(a);
_.set(b, [ d.descriptor, f ], h);
};
return _.each(a.data.counter, c), _.each(a.data.gauge, c), b;
});
}, s = _.template("descriptor_name:network/tx_rate|network/rx_rate,type:pod,pod_id:<%= uid %>"), t = _.template("descriptor_name:memory/usage|cpu/usage_rate,type:pod_container,pod_id:<%= uid %>,container_name:<%= containerName %>"), u = _.template("descriptor_name:network/tx_rate|network/rx_rate|memory/usage|cpu/usage_rate,type:pod,pod_id:<%= uid %>"), v = function(a) {
return i().then(function(b) {
var d = {
bucketDuration: a.bucketDuration,
start: a.start
};
a.end && (d.end = a.end);
var e = [], f = [], g = h(_.map(a.pods, "metadata.uid"));
return a.containerName ? (e.push(_.assign({
tags: t({
uid: g,
containerName: a.containerName
})
}, d)), e.push(_.assign({
tags: s({
uid: g
})
}, d))) : e.push(_.assign({
tags: u({
uid: g
})
}, d)), _.each(e, function(c) {
var d = r(b, c, a);
f.push(d);
}), c.all(f).then(function(a) {
var b = {};
return _.each(a, function(a) {
_.assign(b, a);
}), b;
});
});
}, w = function(a) {
var c = a.metadata.namespace, d = a.metadata.uid;
return f().then(function(a) {
if (!a) return null;
var e = a + "/m", f = {
tags: "custom_metric:true,pod_id:" + d
};
return b.get(e, {
auth: {},
headers: {
Accept: "application/json",
"Hawkular-Tenant": c
},
params: f
}).then(function(a) {
return _.map(a.data, function(a) {
return {
id: a.id,
name: a.tags.metric_name,
unit: a.tags.units,
description: a.tags.description,
type: a.type
=======
"Hawkular-Tenant": a.namespace
=======
"Hawkular-Tenant": r.namespace
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}
}).then(function(e) {
var t = {}, n = function(e, n) {
var r = g(n), o = _.get(a, [ r.podUID, "metadata", "name" ]), s = i(e);
_.set(t, [ r.descriptor, o ], s);
};
return _.each(e.data.counter, n), _.each(e.data.gauge, n), t;
});
}, h = _.template("descriptor_name:network/tx_rate|network/rx_rate,type:pod,pod_id:<%= uid %>"), y = _.template("descriptor_name:memory/usage|cpu/usage_rate,type:pod_container,pod_id:<%= uid %>,container_name:<%= containerName %>"), b = _.template("descriptor_name:network/tx_rate|network/rx_rate|memory/usage|cpu/usage_rate,type:pod,pod_id:<%= uid %>");
return {
isAvailable: function(e) {
return o().then(function(n) {
return !!n && (!e || !!d || !m && t.get(n).then(function() {
return d = !0, !0;
}, function(e) {
return m = !0, r.$broadcast("metrics-connection-failed", {
url: n,
response: e
}), !1;
}));
});
},
getMetricsURL: o,
get: function(e) {
return l(e).then(function(n) {
if (!n) return null;
var r = {
bucketDuration: e.bucketDuration,
start: e.start
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
};
return e.end && (r.end = e.end), t.get(n, {
auth: {},
headers: {
Accept: "application/json",
"Hawkular-Tenant": e.namespace
},
params: r
}).then(function(t) {
return _.assign(t, {
metricID: e.metric,
data: i(t.data)
});
});
});
},
getCurrentUsage: function(e) {
return l(e).then(function(n) {
if (!n) return null;
var r = {
bucketDuration: "1mn",
start: "-1mn"
};
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
return {
isAvailable: p,
getMetricsURL: f,
get: function(a) {
return j(a).then(function(c) {
if (!c) return null;
var d = {
bucketDuration: a.bucketDuration,
start: a.start
};
return a.end && (d.end = a.end), b.get(c, {
auth: {},
headers: {
Accept: "application/json",
"Hawkular-Tenant": a.namespace
},
params: d
}).then(function(b) {
return _.assign(b, {
metricID: a.metric,
data: g(b.data)
=======
return t.get(n, {
auth: {},
headers: {
Accept: "application/json",
"Hawkular-Tenant": e.namespace
},
params: r
}).then(function(t) {
return _.assign(t, {
metricID: e.metric,
usage: _.head(i(t.data))
});
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
});
});
},
getPodMetrics: function(e) {
return c().then(function(t) {
var r = {
bucketDuration: e.bucketDuration,
start: e.start
};
e.end && (r.end = e.end);
var a = [], o = [], i = s(_.map(e.pods, "metadata.uid"));
return e.containerName ? (a.push(_.assign({
tags: y({
uid: i,
containerName: e.containerName
})
}, r)), a.push(_.assign({
tags: h({
uid: i
})
}, r))) : a.push(_.assign({
tags: b({
uid: i
})
}, r)), _.each(a, function(n) {
var r = v(t, n, e);
o.push(r);
}), n.all(o).then(function(e) {
var t = {};
return _.each(e, function(e) {
_.assign(t, e);
}), t;
});
});
},
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
getCurrentUsage: function(a) {
return j(a).then(function(c) {
if (!c) return null;
var d = {
bucketDuration: "1mn",
start: "-1mn"
};
return b.get(c, {
auth: {},
headers: {
Accept: "application/json",
"Hawkular-Tenant": a.namespace
},
params: d
}).then(function(b) {
return _.assign(b, {
metricID: a.metric,
usage: _.head(g(b.data))
});
});
});
},
getPodMetrics: v,
getCustomMetrics: w
};
} ]), angular.module("openshiftConsole").factory("MetricsCharts", [ "$timeout", "ConversionService", "gettext", "gettextCatalog", function(a, b, c, d) {
var e = function(a, c) {
if (void 0 === a.value || null === a.value) return null;
switch (c) {
=======
getCustomMetrics: function(e) {
var n = e.metadata.namespace, r = e.metadata.uid;
return o().then(function(e) {
if (!e) return null;
var a = e + "/m", o = {
tags: "custom_metric:true,pod_id:" + r
};
return t.get(a, {
auth: {},
headers: {
Accept: "application/json",
"Hawkular-Tenant": n
},
params: o
}).then(function(e) {
return _.map(e.data, function(e) {
return {
id: e.id,
name: e.tags.metric_name,
unit: e.tags.units,
description: e.tags.description,
type: e.type
};
});
});
});
}
};
} ]), angular.module("openshiftConsole").factory("MetricsCharts", [ "$timeout", "ConversionService", function(e, t) {
var n = function(e, n) {
if (void 0 === e.value || null === e.value) return null;
switch (n) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
case "memory/usage":
return _.round(t.bytesToMiB(e.value), 2);

case "cpu/usage_rate":
return t.millicoresToCores(e.value);

case "network/rx_rate":
case "network/tx_rate":
return _.round(t.bytesToKiB(e.value), 2);

default:
return _.round(e.value);
}
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
}, f = {
"memory/usage": d.getString(c("Memory")),
"cpu/usage_rate": "CPU",
"network/tx_rate": d.getString(c("Sent")),
"network/rx_rate": d.getString(c("Received"))
=======
}, a = {
=======
}, r = {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
"memory/usage": "Memory",
"cpu/usage_rate": "CPU",
"network/tx_rate": "Sent",
"network/rx_rate": "Received"
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
};
return {
uniqueID: function() {
return _.uniqueId("metrics-");
},
getDefaultUpdateInterval: function() {
return 6e4;
},
getTimeRangeOptions: function() {
return [ {
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
label: c("Last hour"),
value: 60
}, {
label: c("Last 4 hours"),
value: 240
}, {
label: c("Last 12 hours"),
value: 720
}, {
label: c("Last day"),
value: 1440
}, {
label: c("Last 3 days"),
value: 4320
}, {
label: c("Last week"),
value: 10080
} ];
},
getDefaultSparklineConfig: function(a, b, c) {
return {
bindto: "#" + a,
axis: {
x: {
show: !c,
=======
label: "Last hour",
value: 60
}, {
label: "Last 4 hours",
value: 240
}, {
label: "Last 12 hours",
value: 720
}, {
label: "Last day",
value: 1440
}, {
label: "Last 3 days",
value: 4320
}, {
label: "Last week",
value: 10080
} ];
},
getDefaultSparklineConfig: function(e, t, n) {
return {
bindto: "#" + e,
axis: {
x: {
show: !n,
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
type: "timeseries",
padding: {
left: 0,
bottom: 0
},
tick: {
type: "timeseries",
format: "%a %H:%M"
}
},
y: {
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
show: !c,
label: b,
=======
show: !n,
label: t,
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
min: 0,
padding: {
left: 0,
top: 20,
bottom: 0
}
}
},
point: {
show: !1
},
size: {
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
height: c ? 35 : 175
},
tooltip: {
format: {
value: function(a) {
var c = "cores" === b ? 3 : 2;
return d3.round(a, c) + " " + b;
=======
height: n ? 35 : 175
},
tooltip: {
format: {
value: function(e) {
var n = "cores" === t ? 3 : 2;
return d3.round(e, n) + " " + t;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
}
}
}
};
},
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
getSparklineData: function(a) {
var b, c = {
type: "spline",
x: "dates",
names: f
}, d = {};
return _.each(a, function(a, c) {
b = [ "dates" ], d[c] = [ c ], _.each(a, function(a) {
var f = e(a, c);
b.push(a.start), d[c].push(f);
});
}), c.columns = [ b ].concat(_.values(d)), c;
},
formatUsage: function(a) {
return a < .001 ? "0" : a < 1 ? d3.format(".1r")(a) : d3.format(".2r")(a);
},
redraw: function(b) {
a(function() {
_.each(b, function(a) {
a.flush();
=======
getSparklineData: function(e) {
var t, a = {
type: "spline",
x: "dates",
names: r
}, o = {};
return _.each(e, function(e, r) {
t = [ "dates" ], o[r] = [ r ], _.each(e, function(e) {
var a = n(e, r);
t.push(e.start), o[r].push(a);
});
}), a.columns = [ t ].concat(_.values(o)), a;
},
formatUsage: function(e) {
return e < .001 ? "0" : e < 1 ? d3.format(".1r")(e) : d3.format(".2r")(e);
},
redraw: function(t) {
e(function() {
_.each(t, function(e) {
e.flush();
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
});
}, 0);
}
};
} ]), angular.module("openshiftConsole").factory("StorageService", [ "$filter", "APIService", "DataService", "NotificationsService", function(e, t, n, r) {
var a = e("getErrorDetails"), o = e("humanizeKind");
return {
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
createVolume: function(a, b) {
return {
name: a,
persistentVolumeClaim: {
claimName: b.metadata.name
}
};
},
createVolumeMount: function(a, b, c, d) {
var e = {
name: a,
mountPath: b,
readOnly: !!d
=======
createVolume: function(e, t) {
return {
name: e,
persistentVolumeClaim: {
claimName: t.metadata.name
}
};
},
createVolumeMount: function(e, t, n, r) {
var a = {
name: e,
mountPath: t,
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
readOnly: !!a
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
readOnly: !!r
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
};
return n && (a.subPath = n), a;
},
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
getVolumeNames: function(a) {
var b = _.get(a, "spec.volumes", []);
return _.map(b, "name");
},
getMountPaths: function(a, b) {
var c = [], d = _.get(a, "spec.containers", []);
return _.each(d, function(a) {
if (!b || b(a)) {
var d = _.get(a, "volumeMounts", []);
_.each(d, function(a) {
c.push(a.mountPath);
=======
getVolumeNames: function(e) {
var t = _.get(e, "spec.volumes", []);
return _.map(t, "name");
},
getMountPaths: function(e, t) {
var n = [], r = _.get(e, "spec.containers", []);
return _.each(r, function(e) {
if (!t || t(e)) {
var r = _.get(e, "volumeMounts", []);
_.each(r, function(e) {
n.push(e.mountPath);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
});
}
}), n;
},
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
removeVolume: function(a, g, h) {
var i = angular.copy(a), j = _.get(i, "spec.template.spec.volumes");
_.remove(j, {
name: g.name
});
var k = _.get(i, "spec.template.spec.containers");
_.each(k, function(a) {
_.remove(a.volumeMounts, {
name: g.name
});
});
var l = b.objectToResourceGroupVersion(i);
return c.update(l, i.metadata.name, i, h).then(function() {
d.addNotification({
type: "success",
message: "Volume " + g.name + " removed from " + f(a.kind) + " " + a.metadata.name + "."
});
}, function(b) {
d.addNotification({
type: "error",
message: "An error occurred removing volume " + g.name + " from " + f(a.kind) + " " + a.metadata.name + ".",
details: e(b)
=======
removeVolume: function(e, i, s) {
var c = angular.copy(e), l = _.get(c, "spec.template.spec.volumes");
_.remove(l, {
name: i.name
});
var u = _.get(c, "spec.template.spec.containers");
_.each(u, function(e) {
_.remove(e.volumeMounts, {
name: i.name
});
});
var d = t.objectToResourceGroupVersion(c);
return n.update(d, c.metadata.name, c, s).then(function() {
r.addNotification({
type: "success",
message: "Volume " + i.name + " removed from " + o(e.kind) + " " + e.metadata.name + "."
});
}, function(t) {
r.addNotification({
type: "error",
message: "An error occurred removing volume " + i.name + " from " + o(e.kind) + " " + e.metadata.name + ".",
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
details: r(t)
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
details: a(t)
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
});
});
}
};
} ]), angular.module("openshiftConsole").factory("LimitRangesService", [ "$filter", "LIMIT_REQUEST_OVERRIDES", function(e, t) {
var n = e("usageValue"), r = e("usageWithUnits"), a = e("amountAndUnit"), o = function(e, t) {
return !!e && (!t || n(e) < n(t));
}, i = function(e, t) {
return !!e && (!t || n(e) > n(t));
}, s = function(n) {
if (!t) return !1;
var r = e("annotation")(n, "quota.openshift.io/cluster-resource-override-enabled");
return !r || "true" === r;
}, c = function(e, n) {
if (!s(n)) return null;
switch (e) {
case "cpu":
return t.cpuRequestToLimitPercent;

case "memory":
return t.memoryRequestToLimitPercent;

default:
return null;
}
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
}, j = function(a, b) {
return !!i(a, b);
}, k = function(a, c) {
return h(c) && "cpu" === a && !!b.limitCPUToMemoryPercent;
}, l = function(a, b, c, d) {
var h = {};
angular.forEach(a, function(a) {
angular.forEach(a.spec.limits, function(a) {
if (a.type === c) {
a.min && g(a.min[b], h.min) && (h.min = a.min[b]), a.max && f(a.max[b], h.max) && (h.max = a.max[b]), a["default"] && (h.defaultLimit = a["default"][b] || h.defaultLimit), a.defaultRequest && (h.defaultRequest = a.defaultRequest[b] || h.defaultRequest);
var d;
a.maxLimitRequestRatio && (d = a.maxLimitRequestRatio[b], d && (!h.maxLimitRequestRatio || d < h.maxLimitRequestRatio) && (h.maxLimitRequestRatio = d));
}
});
});
var j, k, l, m;
return h.min && (j = i(b, d), j && (k = e(h.min), l = Math.ceil(k[0] / (j / 100)), m = k[1] || "", h.min = "" + l + m)), h;
}, m = function(b, e, f, g) {
if (!f || !f.length) return [];
var h = l(b, e, "Pod", g), i = l(b, e, "Container", g), m = 0, n = 0, o = h.min && c(h.min), p = h.max && c(h.max), q = [], r = a("computeResourceLabel")(e, !0);
return angular.forEach(f, function(a) {
var b = a.resources || {}, d = b.requests && b.requests[e] || i.defaultRequest;
d && (m += c(d));
var f = b.limits && b.limits[e] || i.defaultLimit;
f && (n += c(f));
}), j(e, g) || (o && m < o && q.push(r + " request total for all containers is less than pod minimum (" + d(h.min, e) + ")."), p && m > p && q.push(r + " request total for all containers is greater than pod maximum (" + d(h.max, e) + ").")), k(e, g) || (o && n < o && q.push(r + " limit total for all containers is less than pod minimum (" + d(h.min, e) + ")."), p && n > p && q.push(r + " limit total for all containers is greater than pod maximum (" + d(h.max, e) + ").")), q;
};
return {
getEffectiveLimitRange: l,
getRequestToLimitPercent: i,
isRequestCalculated: j,
isLimitCalculated: k,
validatePodLimits: m
};
} ]), angular.module("openshiftConsole").factory("RoutesService", [ "$filter", "gettext", "gettextCatalog", function(a, b, c) {
var d = function(a) {
return angular.isString(a);
}, e = function(a, b) {
return _.find(b.spec.ports, function(b) {
return d(a) ? b.name === a : b.targetPort === a;
});
}, f = function(a, f, g, h) {
if ("Service" === f.kind) {
var i = _.get(g, [ f.name ]);
if (!i) return void h.push('Routes to service "' + f.name + '", but service does not exist.');
var j = a.spec.port ? a.spec.port.targetPort : null;
if (!j) return void (_.size(i.spec.ports) > 1 && h.push('Route has no target port, but service "' + i.metadata.name + '" has multiple ports. The route will round robin traffic across all exposed ports on the service.'));
var k = e(j, i);
k || (d(j) ? h.push(c.getString(b('Route target port is set to "')) + j + c.getString(b('", but service "')) + i.metadata.name + c.getString(b('" has no port with that name.'))) : h.push(c.getString(b('Route target port is set to "')) + j + c.getString(b('", but service "')) + i.metadata.name + c.getString(b('" does not expose that port.'))));
}
}, g = function(a, b) {
a.spec.tls && (a.spec.tls.termination || b.push("Route has a TLS configuration, but no TLS termination type is specified. TLS will not be enabled until a termination type is set."), "passthrough" === a.spec.tls.termination && a.spec.path && b.push('Route path "' + a.spec.path + '" will be ignored since the route uses passthrough termination.'));
}, h = function(a, b) {
var c = _.get(a, "spec.wildcardPolicy");
angular.forEach(a.status.ingress, function(a) {
var d = _.find(a.conditions, {
type: "Admitted",
status: "False"
});
if (d) {
var e = "Requested host " + (a.host || "<unknown host>") + " was rejected by the router.";
(d.message || d.reason) && (e += " Reason: " + (d.message || d.reason) + "."), b.push(e);
}
d || "Subdomain" !== c || a.wildcardPolicy === c || b.push('Router "' + a.routerName + '" does not support wildcard subdomains. Your route will only be available at host ' + a.host + ".");
});
}, i = function(a) {
return _.some(a.status.ingress, function(a) {
return _.some(a.conditions, {
=======
}, l = function(e, t) {
return !!c(e, t);
}, u = function(e, n) {
return s(n) && "cpu" === e && !!t.limitCPUToMemoryPercent;
}, d = function(e, t, n, r) {
var s = {};
angular.forEach(e, function(e) {
angular.forEach(e.spec.limits, function(e) {
if (e.type === n) {
e.min && i(e.min[t], s.min) && (s.min = e.min[t]), e.max && o(e.max[t], s.max) && (s.max = e.max[t]), e.default && (s.defaultLimit = e.default[t] || s.defaultLimit), e.defaultRequest && (s.defaultRequest = e.defaultRequest[t] || s.defaultRequest);
var r;
e.maxLimitRequestRatio && (r = e.maxLimitRequestRatio[t]) && (!s.maxLimitRequestRatio || r < s.maxLimitRequestRatio) && (s.maxLimitRequestRatio = r);
}
});
});
var l, u, d, m;
return s.min && (l = c(t, r)) && (u = a(s.min), d = Math.ceil(u[0] / (l / 100)), m = u[1] || "", s.min = "" + d + m), s;
};
return {
getEffectiveLimitRange: d,
getRequestToLimitPercent: c,
isRequestCalculated: l,
isLimitCalculated: u,
validatePodLimits: function(t, a, o, i) {
if (!o || !o.length) return [];
var s = d(t, a, "Pod", i), c = d(t, a, "Container", i), m = 0, p = 0, f = s.min && n(s.min), g = s.max && n(s.max), v = [], h = e("computeResourceLabel")(a, !0);
return angular.forEach(o, function(e) {
var t = e.resources || {}, r = t.requests && t.requests[a] || c.defaultRequest;
r && (m += n(r));
var o = t.limits && t.limits[a] || c.defaultLimit;
o && (p += n(o));
}), l(a, i) || (f && m < f && v.push(h + " request total for all containers is less than pod minimum (" + r(s.min, a) + ")."), g && m > g && v.push(h + " request total for all containers is greater than pod maximum (" + r(s.max, a) + ").")), u(a, i) || (f && p < f && v.push(h + " limit total for all containers is less than pod minimum (" + r(s.min, a) + ")."), g && p > g && v.push(h + " limit total for all containers is greater than pod maximum (" + r(s.max, a) + ").")), v;
}
};
} ]), angular.module("openshiftConsole").factory("RoutesService", [ "$filter", function(e) {
var t = function(e) {
return angular.isString(e);
}, n = function(e, n) {
return _.find(n.spec.ports, function(n) {
return t(e) ? n.name === e : n.targetPort === e;
});
}, r = function(e, r, a, o) {
if ("Service" === r.kind) {
var i = _.get(a, [ r.name ]);
if (i) {
var s = e.spec.port ? e.spec.port.targetPort : null;
s ? n(s, i) || (t(s) ? o.push('Route target port is set to "' + s + '", but service "' + i.metadata.name + '" has no port with that name.') : o.push('Route target port is set to "' + s + '", but service "' + i.metadata.name + '" does not expose that port.')) : _.size(i.spec.ports) > 1 && o.push('Route has no target port, but service "' + i.metadata.name + '" has multiple ports. The route will round robin traffic across all exposed ports on the service.');
} else o.push('Routes to service "' + r.name + '", but service does not exist.');
}
}, a = function(e, t) {
e.spec.tls && (e.spec.tls.termination || t.push("Route has a TLS configuration, but no TLS termination type is specified. TLS will not be enabled until a termination type is set."), "passthrough" === e.spec.tls.termination && e.spec.path && t.push('Route path "' + e.spec.path + '" will be ignored since the route uses passthrough termination.'));
}, o = function(e, t) {
var n = _.get(e, "spec.wildcardPolicy");
angular.forEach(e.status.ingress, function(e) {
var r = _.find(e.conditions, {
type: "Admitted",
status: "False"
});
if (r) {
var a = "Requested host " + (e.host || "<unknown host>") + " was rejected by the router.";
(r.message || r.reason) && (a += " Reason: " + (r.message || r.reason) + "."), t.push(a);
}
r || "Subdomain" !== n || e.wildcardPolicy === n || t.push('Router "' + e.routerName + '" does not support wildcard subdomains. Your route will only be available at host ' + e.host + ".");
});
}, i = function(e) {
return _.some(e.status.ingress, function(e) {
return _.some(e.conditions, {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
type: "Admitted",
status: "True"
});
});
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
}, j = a("annotation"), k = function(a) {
return "true" !== j(a, "openshift.io/host.generated");
}, l = function(a) {
var b = 0;
i(a) && (b += 11);
var c = _.get(a, "spec.alternateBackends");
return _.isEmpty(c) || (b += 5), k(a) && (b += 3), a.spec.tls && (b += 1), b;
}, m = function(a) {
return _.orderBy(a, [ l ], [ "desc" ]);
}, n = function(a, b) {
var c = l(a), d = l(b);
return d > c ? b : a;
}, o = function(a) {
var b = {}, c = function(a, c) {
b[c] = b[c] || [], b[c].push(a);
};
return _.each(a, function(a) {
c(a, a.spec.to.name);
var b = _.get(a, "spec.alternateBackends", []);
_.each(b, function(b) {
"Service" === b.kind && c(a, b.name);
});
}), b;
}, p = function(a, b) {
return b ? o(a) : _.groupBy(a, "spec.to.name");
}, q = function(a) {
var b = _.get(a, "spec.host", "");
return b.replace(/^[a-z0-9]([-a-z0-9]*[a-z0-9])\./, "");
};
return {
getRouteWarnings: function(a, b) {
var c = [];
return a ? (f(a, a.spec.to, b, c), _.each(a.spec.alternateBackends, function(d) {
f(a, d, b, c);
}), g(a, c), h(a, c), c) : c;
},
getServicePortForRoute: e,
getPreferredDisplayRoute: n,
groupByService: p,
getSubdomain: q,
isCustomHost: k,
sortRoutesByScore: m
};
} ]), angular.module("openshiftConsole").factory("ChartsService", [ "Logger", function(a) {
return {
updateDonutCenterText: function(b, c, d) {
var e = d3.select(b).select("text.c3-chart-arcs-title");
return e ? (e.selectAll("*").remove(), e.insert("tspan").text(c).classed(d ? "donut-title-big-pf" : "donut-title-med-pf", !0).attr("dy", d ? 0 : 5).attr("x", 0), void (d && e.insert("tspan").text(d).classed("donut-title-small-pf", !0).attr("dy", 20).attr("x", 0))) : void a.warn("Can't select donut title element");
}
};
} ]), angular.module("openshiftConsole").factory("HPAService", [ "$filter", "$q", "LimitRangesService", "MetricsService", "Logger", "gettext", "gettextCatalog", function(a, b, c, d, e, f, g) {
var h = function(a) {
return c.getRequestToLimitPercent("cpu", a);
}, i = function(a, b) {
var c = h(b);
if (!c) return e.warn("convertRequestPercentToLimit called, but no request/limit ratio defined."), NaN;
if (!a) return a;
var d = c / 100 * a;
return Math.round(d);
}, j = function(a, b) {
var c = h(b);
if (!c) return e.warn("convertLimitPercentToRequest called, but no request/limit ratio defined."), NaN;
if (!a) return a;
var d = a / (c / 100);
return Math.round(d);
}, k = function(a, b, c) {
return _.every(c, function(c) {
return _.get(c, [ "resources", b, a ]);
});
}, l = function(a, b) {
return k(a, "requests", b);
}, m = function(a, b) {
return k(a, "limits", b);
}, n = function(a, b, d, e) {
var f = c.getEffectiveLimitRange(d, a, "Container", e);
return !!f[b];
}, o = function(a, b, c) {
return n(a, "defaultRequest", b, c);
}, p = function(a, b, c) {
return n(a, "defaultLimit", b, c);
}, q = function(a, b, d) {
return !(!l("cpu", a) && !o("cpu", b, d)) || (!(!m("cpu", a) && !p("cpu", b, a)) || !!c.isLimitCalculated("cpu", d) && (m("memory", a) || p("memory", b, d)));
}, r = function(a, b, c) {
return _.filter(a, function(a) {
return a.spec.scaleTargetRef.kind === b && a.spec.scaleTargetRef.name === c;
});
}, s = a("humanizeKind"), t = a("hasDeploymentConfig"), u = function(a, e, h, i) {
return !a || _.isEmpty(e) ? b.when([]) : d.isAvailable().then(function(b) {
var d = [];
b || d.push({
message: "Metrics might not be configured by your cluster administrator. Metrics are required for autoscaling.",
reason: "MetricsNotAvailable"
});
var j, k, l = _.get(a, "spec.template.spec.containers", []);
q(l, h, i) || (j = s(a.kind), c.isRequestCalculated("cpu", i) ? (k = g.getString(f("This ")) + g.getString(j) + g.getString(f(" does not have any containers with a CPU limit set. ")) + g.getString(f("Autoscaling will not work without a CPU limit.")), c.isLimitCalculated("cpu", i) && (k += g.getString(f(" The CPU limit will be automatically calculated from the container memory limit.")))) : k = g.getString(f("This ")) + g.getString(j) + g.getString(f(" does not have any containers with a CPU request set. ")) + g.getString(f("Autoscaling will not work without a CPU request.")), d.push({
message: k,
reason: "NoCPURequest"
})), _.size(e) > 1 && d.push({
message: g.getString(f("More than one autoscaler is scaling this resource. ")) + g.getString(f("This is not recommended because they might compete with each other. ")) + g.getString(f("Consider removing all but one autoscaler.")),
reason: "MultipleHPA"
});
var m = function() {
return _.some(e, function(a) {
return "ReplicationController" === _.get(a, "spec.scaleTargetRef.kind");
});
};
return "ReplicationController" === a.kind && t(a) && _.some(e, m) && d.push({
message: g.getString(f("This deployment is scaled by both a deployment configuration and an autoscaler. ")) + g.getString(f("This is not recommended because they might compete with each other.")),
reason: "DeploymentHasHPA"
}), d;
});
}, v = function(a) {
var b = {};
return _.each(a, function(a) {
var c = a.spec.scaleTargetRef.name, d = a.spec.scaleTargetRef.kind;
c && d && (_.has(b, [ d, c ]) || _.set(b, [ d, c ], []), b[d][c].push(a));
}), b;
};
return {
convertRequestPercentToLimit: i,
convertLimitPercentToRequest: j,
hasCPURequest: q,
filterHPA: r,
getHPAWarnings: u,
groupHPAs: v
};
} ]), angular.module("openshiftConsole").factory("PodsService", [ "OwnerReferencesService", function(a) {
return {
getImageIDs: function(a, b) {
var c = {}, d = /^.*sha256:/;
return _.each(a, function(a) {
var e, f = _.get(a, "status.containerStatuses", []), g = _.find(f, {
name: b
}), h = _.get(g, "imageID", "");
d.test(h) && (e = h.replace(d, ""), c[e] = !0);
}), _.keys(c);
},
generateDebugPod: function(a, b) {
var c = angular.copy(a), d = _.find(c.spec.containers, {
name: b
});
return d ? (c.metadata = {
name: a.metadata.name + "-debug",
annotations: {
"debug.openshift.io/source-container": b,
"debug.openshift.io/source-resource": "pods/" + a.metadata.name
},
labels: {}
}, c.spec.restartPolicy = "Never", delete c.spec.host, delete c.spec.nodeName, c.status = {}, delete d.readinessProbe, delete d.livenessProbe, d.command = [ "sleep" ], d.args = [ "3600" ], c.spec.containers = [ d ], c) : null;
},
groupByOwnerUID: function(b) {
return a.groupByControllerUID(b);
},
filterForOwner: function(b, c) {
return a.filterForController(b, c);
=======
}, s = e("annotation"), c = function(e) {
return "true" !== s(e, "openshift.io/host.generated");
}, l = function(e) {
var t = 0;
i(e) && (t += 11);
var n = _.get(e, "spec.alternateBackends");
return _.isEmpty(n) || (t += 5), c(e) && (t += 3), e.spec.tls && (t += 1), t;
}, u = function(e) {
var t = {}, n = function(e, n) {
t[n] = t[n] || [], t[n].push(e);
};
return _.each(e, function(e) {
n(e, e.spec.to.name);
var t = _.get(e, "spec.alternateBackends", []);
_.each(t, function(t) {
"Service" === t.kind && n(e, t.name);
});
}), t;
};
return {
getRouteWarnings: function(e, t) {
var n = [];
return e ? (r(e, e.spec.to, t, n), _.each(e.spec.alternateBackends, function(a) {
r(e, a, t, n);
}), a(e, n), o(e, n), n) : n;
},
getServicePortForRoute: n,
getPreferredDisplayRoute: function(e, t) {
var n = l(e);
return l(t) > n ? t : e;
},
groupByService: function(e, t) {
return t ? u(e) : _.groupBy(e, "spec.to.name");
},
getSubdomain: function(e) {
return _.get(e, "spec.host", "").replace(/^[a-z0-9]([-a-z0-9]*[a-z0-9])\./, "");
},
isCustomHost: c,
sortRoutesByScore: function(e) {
return _.orderBy(e, [ l ], [ "desc" ]);
}
};
} ]), angular.module("openshiftConsole").factory("ChartsService", [ "Logger", function(e) {
return {
updateDonutCenterText: function(t, n, r) {
var a = d3.select(t).select("text.c3-chart-arcs-title");
a ? (a.selectAll("*").remove(), a.insert("tspan").text(n).classed(r ? "donut-title-big-pf" : "donut-title-med-pf", !0).attr("dy", r ? 0 : 5).attr("x", 0), r && a.insert("tspan").text(r).classed("donut-title-small-pf", !0).attr("dy", 20).attr("x", 0)) : e.warn("Can't select donut title element");
}
};
} ]), angular.module("openshiftConsole").factory("HPAService", [ "$filter", "$q", "LimitRangesService", "MetricsService", "Logger", function(e, t, n, r, a) {
var o = function(e) {
return n.getRequestToLimitPercent("cpu", e);
}, i = function(e, t, n) {
return _.every(n, function(n) {
return _.get(n, [ "resources", t, e ]);
});
}, s = function(e, t) {
return i(e, "requests", t);
}, c = function(e, t) {
return i(e, "limits", t);
}, l = function(e, t, r, a) {
return !!n.getEffectiveLimitRange(r, e, "Container", a)[t];
}, u = function(e, t, n) {
return l(e, "defaultRequest", t, n);
}, d = function(e, t, n) {
return l(e, "defaultLimit", t, n);
}, m = function(e, t, r) {
return !(!s("cpu", e) && !u("cpu", t, r)) || (!(!c("cpu", e) && !d("cpu", t, e)) || !!n.isLimitCalculated("cpu", r) && (c("memory", e) || d("memory", t, r)));
}, p = e("humanizeKind"), f = e("hasDeploymentConfig");
return {
convertRequestPercentToLimit: function(e, t) {
var n = o(t);
if (!n) return a.warn("convertRequestPercentToLimit called, but no request/limit ratio defined."), NaN;
if (!e) return e;
var r = n / 100 * e;
return Math.round(r);
},
convertLimitPercentToRequest: function(e, t) {
var n = o(t);
if (!n) return a.warn("convertLimitPercentToRequest called, but no request/limit ratio defined."), NaN;
if (!e) return e;
var r = e / (n / 100);
return Math.round(r);
},
hasCPURequest: m,
filterHPA: function(e, t, n) {
return _.filter(e, function(e) {
return e.spec.scaleTargetRef.kind === t && e.spec.scaleTargetRef.name === n;
});
},
getHPAWarnings: function(e, a, o, i) {
return !e || _.isEmpty(a) ? t.when([]) : r.isAvailable().then(function(t) {
var r = [];
t || r.push({
message: "Metrics might not be configured by your cluster administrator. Metrics are required for autoscaling.",
reason: "MetricsNotAvailable"
});
var s, c, l = _.get(e, "spec.template.spec.containers", []);
return m(l, o, i) || (s = p(e.kind), n.isRequestCalculated("cpu", i) ? (c = "This " + s + " does not have any containers with a CPU limit set. Autoscaling will not work without a CPU limit.", n.isLimitCalculated("cpu", i) && (c += " The CPU limit will be automatically calculated from the container memory limit.")) : c = "This " + s + " does not have any containers with a CPU request set. Autoscaling will not work without a CPU request.", r.push({
message: c,
reason: "NoCPURequest"
})), _.size(a) > 1 && r.push({
message: "More than one autoscaler is scaling this resource. This is not recommended because they might compete with each other. Consider removing all but one autoscaler.",
reason: "MultipleHPA"
}), "ReplicationController" === e.kind && f(e) && _.some(a, function() {
return _.some(a, function(e) {
return "ReplicationController" === _.get(e, "spec.scaleTargetRef.kind");
});
}) && r.push({
message: "This deployment is scaled by both a deployment configuration and an autoscaler. This is not recommended because they might compete with each other.",
reason: "DeploymentHasHPA"
}), r;
});
},
groupHPAs: function(e) {
var t = {};
return _.each(e, function(e) {
var n = e.spec.scaleTargetRef.name, r = e.spec.scaleTargetRef.kind;
n && r && (_.has(t, [ r, n ]) || _.set(t, [ r, n ], []), t[r][n].push(e));
}), t;
}
};
} ]), angular.module("openshiftConsole").factory("PodsService", [ "OwnerReferencesService", function(e) {
return {
getImageIDs: function(e, t) {
var n = {}, r = /^.*sha256:/;
return _.each(e, function(e) {
var a, o = _.get(e, "status.containerStatuses", []), i = _.find(o, {
name: t
}), s = _.get(i, "imageID", "");
r.test(s) && (a = s.replace(r, ""), n[a] = !0);
}), _.keys(n);
},
generateDebugPod: function(e, t) {
var n = angular.copy(e), r = _.find(n.spec.containers, {
name: t
});
return r ? (n.metadata = {
name: e.metadata.name + "-debug",
annotations: {
"debug.openshift.io/source-container": t,
"debug.openshift.io/source-resource": "pods/" + e.metadata.name
},
labels: {}
}, n.spec.restartPolicy = "Never", delete n.spec.host, delete n.spec.nodeName, n.status = {}, delete r.readinessProbe, delete r.livenessProbe, r.command = [ "sleep" ], r.args = [ "3600" ], n.spec.containers = [ r ], n) : null;
},
groupByOwnerUID: function(t) {
return e.groupByControllerUID(t);
},
filterForOwner: function(t, n) {
return e.filterForController(t, n);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
}
};
} ]), angular.module("openshiftConsole").service("CachedTemplateService", function() {
var e = null;
return {
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
setTemplate: function(b) {
a = b;
},
getTemplate: function() {
return a;
},
clearTemplate: function() {
a = null;
}
};
}).service("ProcessedTemplateService", function() {
var a = function() {
return {
=======
setTemplate: function(t) {
e = t;
},
getTemplate: function() {
return e;
},
clearTemplate: function() {
e = null;
}
};
}).service("ProcessedTemplateService", function() {
var e = {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
params: {
all: [],
generated: []
},
message: null
};
return {
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
setTemplateData: function(a, c, d) {
_.each(a, function(a) {
b.params.all.push({
name: a.name,
value: a.value
=======
setTemplateData: function(t, n, a) {
=======
setTemplateData: function(t, n, r) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
_.each(t, function(t) {
e.params.all.push({
name: t.name,
value: t.value
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
});
}), _.each(n, function(t) {
t.value || e.params.generated.push(t.name);
}), r && (e.message = r);
},
getTemplateData: function() {
return e;
},
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
getTemplateData: function() {
return b;
},
clearTemplateData: function() {
b = a();
}
};
}), angular.module("openshiftConsole").factory("SecretsService", [ "$filter", "Logger", "NotificationsService", function(a, b, c) {
var d = function(a) {
var b = {
=======
clearTemplateData: function() {
e = {
params: {
all: [],
generated: []
},
message: null
};
}
};
}), angular.module("openshiftConsole").factory("SecretsService", [ "$filter", "Logger", "NotificationsService", function(e, t, n) {
var r = function(r, a) {
n.addNotification({
type: "error",
message: "Base64-encoded " + a + " string could not be decoded.",
details: e("getErrorDetails")(r)
}), t.error("Base64-encoded " + a + " string could not be decoded.", r);
}, a = function(e) {
var t = _.pick(e, [ "email", "username", "password" ]);
if (e.auth) try {
_.spread(function(e, n) {
t.username = e, t.password = n;
})(_.split(window.atob(e.auth), ":", 2));
} catch (e) {
return void r(e, "username:password");
}
return t;
}, o = function(e, t) {
var n, o = {
auths: {}
};
try {
n = JSON.parse(window.atob(e));
} catch (e) {
r(e, t);
}
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
return ".dockercfg" === t ? _.each(n, function(e, t) {
o.auths[t] = r(e);
}) : (_.each(n.auths, function(e, t) {
e.auth ? o.auths[t] = r(e) : o.auths[t] = e;
}), n.credsStore && (o.credsStore = n.credsStore)), o;
=======
return n.auths ? (_.each(n.auths, function(e, t) {
e.auth ? o.auths[t] = a(e) : o.auths[t] = e;
}), n.credsStore && (o.credsStore = n.credsStore)) : _.each(n, function(e, t) {
o.auths[t] = a(e);
}), o;
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
};
return {
groupSecretsByType: function(e) {
var t = {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
source: [],
image: [],
other: []
};
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
return _.each(a.by("metadata.name"), function(a) {
switch (a.type) {
=======
return _.each(e.by("metadata.name"), function(e) {
switch (e.type) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
case "kubernetes.io/basic-auth":
case "kubernetes.io/ssh-auth":
case "Opaque":
t.source.push(e);
break;

case "kubernetes.io/dockercfg":
case "kubernetes.io/dockerconfigjson":
t.image.push(e);
break;

default:
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
b.other.push(a);
}
}), b;
}, e = function(d, e) {
c.addNotification({
type: "error",
message: "Base64-encoded " + e + " string could not be decoded.",
details: a("getErrorDetails")(d)
}), b.error("Base64-encoded " + e + " string could not be decoded.", d);
}, f = function(a) {
var b = _.pick(a, [ "email", "username", "password" ]);
if (a.auth) try {
var c = _.spread(function(a, c) {
b.username = a, b.password = c;
});
c(_.split(window.atob(a.auth), ":", 2));
} catch (d) {
return void e(d, "username:password");
=======
t.other.push(e);
}
}), t;
},
<<<<<<< 3feadb96e1f26e5236eb7acb15135e7d262bce59
decodeSecretData: function(n) {
var a = {}, r = _.mapValues(n, function(n, r) {
var o;
switch (r) {
case ".dockercfg":
return e(n);

case ".dockerconfigjson":
return t(n);

default:
return o = window.atob(n), /[\x00-\x09\x0E-\x1F]/.test(o) ? (a[r] = !0, n) : o;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
}
return b;
}, g = function(a, b) {
var c, d = {
auths: {}
};
try {
c = JSON.parse(window.atob(a));
} catch (g) {
e(g, b);
}
return c.auths ? (_.each(c.auths, function(a, b) {
return a.auth ? void (d.auths[b] = f(a)) : void (d.auths[b] = a);
}), c.credsStore && (d.credsStore = c.credsStore)) : _.each(c, function(a, b) {
d.auths[b] = f(a);
}), d;
}, h = function(a) {
var b = {}, c = _.mapValues(a, function(a, c) {
if (!a) return "";
var d, e;
return ".dockercfg" === c || ".dockerconfigjson" === c ? g(a, c) : (d = window.atob(a), e = /[\x00-\x09\x0E-\x1F]/.test(d), e ? (b[c] = !0, a) : d);
});
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
return c.$$nonprintable = b, c;
};
return {
groupSecretsByType: d,
decodeSecretData: h
};
} ]), angular.module("openshiftConsole").factory("ServicesService", [ "$filter", "$q", "DataService", function(a, b, c) {
var d = "service.alpha.openshift.io/dependencies", e = "service.openshift.io/infrastructure", f = a("annotation"), g = function(a) {
var b = f(a, d);
if (!b) return null;
try {
return JSON.parse(b);
} catch (c) {
return Logger.warn('Could not parse "service.alpha.openshift.io/dependencies" annotation', c), null;
}
}, h = function(a) {
var b, c = g(a);
if (!c) return [];
b = _.get(a, "metadata.namespace");
var d = function(a) {
return !!a.name && ((!a.kind || "Service" === a.kind) && (!a.namespace || a.namespace === b));
};
return _.chain(c).filter(d).map(function(a) {
return a.name;
}).value();
}, i = function(a, b) {
return b.length ? void _.set(a, [ "metadata", "annotations", d ], JSON.stringify(b)) : void (_.has(a, [ "metadata", "annotations", d ]) && delete a.metadata.annotations[d]);
}, j = function(a, b) {
var d = angular.copy(a), e = g(d) || [];
return e.push({
name: b.metadata.name,
namespace: a.metadata.namespace === b.metadata.namespace ? "" : b.metadata.namespace,
kind: b.kind
}), i(d, e), c.update("services", d.metadata.name, d, {
namespace: d.metadata.namespace
});
}, k = function(a, d) {
var e = angular.copy(a), f = g(e) || [], h = _.reject(f, function(b) {
if (b.kind !== d.kind) return !1;
var c = b.namespace || a.metadata.namespace;
return c === d.metadata.namespace && b.name === d.metadata.name;
});
return h.length === f.length ? b.when(!0) : (i(e, h), c.update("services", e.metadata.name, e, {
namespace: e.metadata.namespace
}));
}, l = function(a) {
return "true" === f(a, e);
};
return {
getDependentServices: h,
linkService: j,
removeServiceLink: k,
isInfrastructure: l
};
} ]), angular.module("openshiftConsole").factory("ImagesService", [ "$filter", "ApplicationGenerator", "DataService", function(a, b, c) {
var d = function(a) {
return _.isArray(a) ? a : _.map(a, function(a, b) {
return {
name: b,
value: a
};
});
}, e = function(a, b) {
var d = {
=======
return r.$$nonprintable = a, r;
=======
decodeSecretData: function(e) {
var t = {}, n = _.mapValues(e, function(e, n) {
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
var a;
return ".dockercfg" === n || ".dockerconfigjson" === n ? o(e, n) : (a = window.atob(e), /[\x00-\x09\x0E-\x1F]/.test(a) ? (t[n] = !0, e) : a);
=======
if (!e) return "";
var r;
return ".dockercfg" === n || ".dockerconfigjson" === n ? o(e, n) : (r = window.atob(e), /[\x00-\x09\x0E-\x1F]/.test(r) ? (t[n] = !0, e) : r);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
});
return n.$$nonprintable = t, n;
>>>>>>> Check 'auth' field when displaying .dockercfg config
}
};
} ]), angular.module("openshiftConsole").factory("ServicesService", [ "$filter", "$q", "APIService", "DataService", function(e, t, n, r) {
var a = n.getPreferredVersion("services"), o = "service.alpha.openshift.io/dependencies", i = e("annotation"), s = function(e) {
var t = i(e, o);
if (!t) return null;
try {
return JSON.parse(t);
} catch (e) {
return Logger.warn('Could not parse "service.alpha.openshift.io/dependencies" annotation', e), null;
}
}, c = function(e, t) {
t.length ? _.set(e, [ "metadata", "annotations", o ], JSON.stringify(t)) : _.has(e, [ "metadata", "annotations", o ]) && delete e.metadata.annotations[o];
};
return {
getDependentServices: function(e) {
var t, n = s(e);
if (!n) return [];
t = _.get(e, "metadata.namespace");
return _.chain(n).filter(function(e) {
return !(!e.name || e.kind && "Service" !== e.kind || e.namespace && e.namespace !== t);
}).map(function(e) {
return e.name;
}).value();
},
linkService: function(e, t) {
var n = angular.copy(e), o = s(n) || [];
return o.push({
name: t.metadata.name,
namespace: e.metadata.namespace === t.metadata.namespace ? "" : t.metadata.namespace,
kind: t.kind
}), c(n, o), r.update(a, n.metadata.name, n, {
namespace: n.metadata.namespace
});
},
removeServiceLink: function(e, n) {
var o = angular.copy(e), i = s(o) || [], l = _.reject(i, function(t) {
return t.kind === n.kind && (t.namespace || e.metadata.namespace) === n.metadata.namespace && t.name === n.metadata.name;
});
return l.length === i.length ? t.when(!0) : (c(o, l), r.update(a, o.metadata.name, o, {
namespace: o.metadata.namespace
}));
},
isInfrastructure: function(e) {
return "true" === i(e, "service.openshift.io/infrastructure");
}
};
} ]), angular.module("openshiftConsole").factory("ImagesService", [ "$filter", "APIService", "ApplicationGenerator", "DataService", function(e, t, n, r) {
var a = t.getPreferredVersion("imagestreamimports"), o = function(e) {
return _.isArray(e) ? e : _.map(e, function(e, t) {
return {
name: t,
value: e
};
});
};
return {
findImage: function(e, t) {
<<<<<<< e46791bc1f68bb9e4bfaa876f6d237b8fa0aebd8
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
var a = {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
var r = {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
=======
var n = {
>>>>>>> Update images service to use getPreferredVersion
kind: "ImageStreamImport",
apiVersion: "v1",
metadata: {
name: "newapp",
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
namespace: b.namespace
},
spec: {
"import": !1,
images: [ {
from: {
kind: "DockerImage",
name: a
=======
namespace: t.namespace
},
spec: {
import: !1,
images: [ {
from: {
kind: "DockerImage",
name: e
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
}
} ]
},
status: {}
};
<<<<<<< e46791bc1f68bb9e4bfaa876f6d237b8fa0aebd8
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
return c.create("imagestreamimports", null, d, b).then(function(a) {
return {
name: _.get(a, "spec.images[0].from.name"),
image: _.get(a, "status.images[0].image"),
tag: _.get(a, "status.images[0].tag"),
result: _.get(a, "status.images[0].status")
};
});
}, f = function(a) {
var b = _.get(a, "dockerImageMetadata.Config.User");
return !b || "0" === b || "root" === b;
}, g = function(a) {
return _.get(a, "dockerImageMetadata.Config.Volumes");
}, h = function(a) {
var c = [], e = {
"openshift.io/generated-by": "OpenShiftWebConsole"
}, f = d(a.env), g = [], h = [], i = 0;
if (_.forEach(a.volumes, function(b, c) {
i++;
var d = a.name + "-" + i;
g.push({
name: d,
emptyDir: {}
}), h.push({
name: d,
mountPath: c
});
}), !a.namespace) {
var j = {
kind: "ImageStream",
apiVersion: "v1",
metadata: {
name: a.name,
labels: a.labels
},
spec: {
tags: [ {
name: a.tag,
annotations: _.assign({
"openshift.io/imported-from": a.image
}, e),
from: {
kind: "DockerImage",
name: a.image
=======
return n.create("imagestreamimports", null, a, t).then(function(e) {
=======
return n.create("imagestreamimports", null, r, t).then(function(e) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
=======
return r.create(a, null, n, t).then(function(e) {
>>>>>>> Update images service to use getPreferredVersion
return {
name: _.get(e, "spec.images[0].from.name"),
image: _.get(e, "status.images[0].image"),
tag: _.get(e, "status.images[0].tag"),
result: _.get(e, "status.images[0].status")
};
});
},
getVolumes: function(e) {
return _.get(e, "dockerImageMetadata.Config.Volumes");
},
runsAsRoot: function(e) {
var t = _.get(e, "dockerImageMetadata.Config.User");
return !t || "0" === t || "root" === t;
},
getResources: function(e) {
var t = [], r = {
"openshift.io/generated-by": "OpenShiftWebConsole"
}, a = o(e.env), i = [], s = [], c = 0;
if (_.forEach(e.volumes, function(t, n) {
c++;
var r = e.name + "-" + c;
i.push({
name: r,
emptyDir: {}
}), s.push({
name: r,
mountPath: n
});
}), !e.namespace) {
var l = {
kind: "ImageStream",
apiVersion: "v1",
metadata: {
name: e.name,
labels: e.labels
},
spec: {
tags: [ {
name: e.tag,
annotations: _.assign({
"openshift.io/imported-from": e.image
}, r),
from: {
kind: "DockerImage",
name: e.image
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
},
importPolicy: {}
} ]
}
};
t.push(l);
}
<<<<<<< 0b6e0c0321bd8895dd0292e7e94a096ab205c99e
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
var k = _.assign({
deploymentconfig: a.name
}, a.labels), l = {
kind: "DeploymentConfig",
apiVersion: "v1",
metadata: {
name: a.name,
labels: a.labels,
annotations: e
=======
var u = {
=======
var u = _.assign({
deploymentconfig: e.name
}, e.labels), d = {
>>>>>>> Let users edit app label directly for "add to project"
kind: "DeploymentConfig",
apiVersion: "v1",
metadata: {
name: e.name,
labels: e.labels,
<<<<<<< e46791bc1f68bb9e4bfaa876f6d237b8fa0aebd8
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
annotations: r
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
annotations: a
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
=======
annotations: r
>>>>>>> Update images service to use getPreferredVersion
},
spec: {
strategy: {
resources: {}
},
triggers: [ {
type: "ConfigChange"
}, {
type: "ImageChange",
imageChangeParams: {
automatic: !0,
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
containerNames: [ a.name ],
from: {
kind: "ImageStreamTag",
name: (a.namespace ? a.image : a.name) + ":" + a.tag,
namespace: a.namespace
=======
containerNames: [ e.name ],
from: {
kind: "ImageStreamTag",
name: (e.namespace ? e.image : e.name) + ":" + e.tag,
namespace: e.namespace
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
}
}
} ],
replicas: 1,
test: !1,
<<<<<<< 0b6e0c0321bd8895dd0292e7e94a096ab205c99e
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
selector: k,
template: {
metadata: {
labels: k,
annotations: e
},
spec: {
volumes: g,
containers: [ {
name: a.name,
image: a.image,
ports: a.ports,
env: f,
volumeMounts: h
=======
selector: {
app: e.name,
deploymentconfig: e.name
},
=======
selector: u,
>>>>>>> Let users edit app label directly for "add to project"
template: {
metadata: {
labels: u,
annotations: r
},
spec: {
volumes: i,
containers: [ {
name: e.name,
image: e.image,
ports: e.ports,
env: a,
volumeMounts: s
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
} ],
resources: {}
}
}
},
status: {}
};
<<<<<<< e46791bc1f68bb9e4bfaa876f6d237b8fa0aebd8
<<<<<<< 7d5cc388b34d6a87a5e2ae6b26f6b146dae1daa3
<<<<<<< 8ab4f4a09cf53190c7bc08d260e963252c3ba6a5
<<<<<<< 0b6e0c0321bd8895dd0292e7e94a096ab205c99e
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
c.push(l);
=======
n.push(d);
<<<<<<< 9bc0af8cb56dcc9609307333b9424f396867cab5
<<<<<<< 602d786018a3879a89789b1214b36a15c51b928b
>>>>>>> Adding Deploy Image and Import YAML / JSON functionality to catalog
var m;
return _.isEmpty(a.ports) || (m = {
kind: "Service",
apiVersion: "v1",
metadata: {
name: a.name,
labels: a.labels,
annotations: e
},
spec: {
selector: {
deploymentconfig: a.name
},
ports: _.map(a.ports, function(a) {
return b.getServicePort(a);
})
}
}, c.push(m)), c;
}, i = function(a) {
return _.map(_.get(a, "image.dockerImageMetadata.Config.Env"), function(a) {
var b = a.indexOf("="), c = "", d = "";
return b > 0 ? (c = a.substring(0, b), b + 1 < _.size(a) && (d = a.substring(b + 1))) : c = a, {
name: c,
value: d
};
});
};
return {
findImage: e,
getVolumes: g,
runsAsRoot: f,
getResources: h,
getEnvironment: i
};
} ]), angular.module("openshiftConsole").factory("ConversionService", function() {
var a = function(a) {
return a ? a / 1048576 : a;
}, b = function(a) {
return a ? a / 1024 : a;
}, c = function(a) {
return a ? a / 1e3 : a;
};
return {
bytesToMiB: a,
bytesToKiB: b,
millicoresToCores: c
=======
_.first(e.pullSecrets).name && (u.spec.template.spec.imagePullSecrets = e.pullSecrets), n.push(u);
var d;
return _.isEmpty(e.ports) || (d = {
=======
_.first(e.pullSecrets).name && (d.spec.template.spec.imagePullSecrets = e.pullSecrets), n.push(d);
=======
_.head(e.pullSecrets).name && (d.spec.template.spec.imagePullSecrets = e.pullSecrets), n.push(d);
>>>>>>> Upgrade to angular-patternfly v4.1.1 and patternfly v3.25.1
var m;
return _.isEmpty(e.ports) || (m = {
>>>>>>> Let users edit app label directly for "add to project"
=======
var p;
return _.isEmpty(e.ports) || (p = {
>>>>>>> Updates for Service Instance & Bindings
=======
=======
t.push(d);
>>>>>>> Update images service to use getPreferredVersion
var m;
return _.isEmpty(e.ports) || (m = {
>>>>>>> Support EnvFrom in the Env Editors
kind: "Service",
apiVersion: "v1",
metadata: {
name: e.name,
labels: e.labels,
annotations: r
},
spec: {
selector: {
deploymentconfig: e.name
},
ports: _.map(e.ports, function(e) {
return n.getServicePort(e);
})
}
}, t.push(m)), t;
},
getEnvironment: function(e) {
return _.map(_.get(e, "image.dockerImageMetadata.Config.Env"), function(e) {
var t = e.indexOf("="), n = "", r = "";
return t > 0 ? (n = e.substring(0, t), t + 1 < _.size(e) && (r = e.substring(t + 1))) : n = e, {
name: n,
value: r
};
});
}
};
} ]), angular.module("openshiftConsole").factory("ConversionService", function() {
return {
bytesToMiB: function(e) {
return e ? e / 1048576 : e;
},
bytesToKiB: function(e) {
return e ? e / 1024 : e;
},
millicoresToCores: function(e) {
return e ? e / 1e3 : e;
}
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
};
}), angular.module("openshiftConsole").service("BreadcrumbsService", [ "$filter", "APIService", "Navigate", function(e, t, n) {
var r = e("annotation"), a = e("displayName"), o = function(e) {
switch (e) {
case "DeploymentConfig":
return "Deployments";

default:
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
return _.startCase(b.kindToResource(a, !0));
}
}, g = function(a, d, g, h) {
var i, j = [], k = h.humanizedKind || f(d);
return h.includeProject && (i = h.project ? e(h.project) : g, j.push({
title: i,
link: c.projectOverviewURL(g)
})), j.push({
title: k,
link: c.resourceListURL(b.kindToResource(d), g)
}), h.parent && j.push(h.parent), h.subpage ? (j.push({
title: h.displayName || a,
link: c.resourceURL(a, d, g)
}), j.push({
title: h.subpage
})) : j.push({
title: h.displayName || a
}), j;
}, h = function(b, e) {
e = e || {};
var f, h = d(b, "deploymentConfig");
return h && (e.humanizedKind = "Deployments", e.parent = {
title: h,
link: c.configURLForResource(b)
}, f = a("annotation")(b, "deploymentVersion"), f && (e.displayName = "#" + f)), g(b.metadata.name, b.kind, b.metadata.namespace, e);
}, i = function(a, b) {
switch (a.kind) {
=======
return _.startCase(t.kindToResource(e, !0));
}
}, i = function(e, r, i, s) {
var c, l = [], u = s.humanizedKind || o(r);
return s.includeProject && (c = s.project ? a(s.project) : i, l.push({
title: c,
link: n.projectOverviewURL(i)
})), l.push({
title: u,
link: n.resourceListURL(t.kindToResource(r), i)
}), s.parent && l.push(s.parent), s.subpage ? (l.push({
title: s.displayName || e,
link: n.resourceURL(e, r, i)
}), l.push({
title: s.subpage
})) : l.push({
title: s.displayName || e
}), l;
}, s = function(t, a) {
a = a || {};
var o, s = r(t, "deploymentConfig");
return s && (a.humanizedKind = "Deployments", a.parent = {
title: s,
link: n.configURLForResource(t)
}, (o = e("annotation")(t, "deploymentVersion")) && (a.displayName = "#" + o)), i(t.metadata.name, t.kind, t.metadata.namespace, a);
}, c = function(e, t) {
switch (e.kind) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
case "ReplicationController":
return s(e, t);

default:
return i(e.metadata.name, e.kind, e.metadata.namespace, t);
}
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
}, j = function(a) {
return a = a || {}, a.object ? i(a.object, a) : a.kind && a.name && a.namespace ? g(a.name, a.kind, a.namespace, a) : [];
};
return {
getBreadcrumbs: j
};
} ]), angular.module("openshiftConsole").factory("QuotaService", [ "APIService", "$filter", "$location", "$rootScope", "$routeParams", "$q", "Constants", "DataService", "EventsService", "Logger", "NotificationsService", function(a, b, c, d, e, f, g, h, i, j, k) {
var l = b("isNil"), m = b("usageValue"), n = b("usageWithUnits"), o = b("percent"), p = function(a) {
return _.every(a.spec.containers, function(a) {
var b = _.some(_.get(a, "resources.requests"), function(a) {
return !l(a) && 0 !== m(a);
}), c = _.some(_.get(a, "resources.limits"), function(a) {
return !l(a) && 0 !== m(a);
=======
};
return {
getBreadcrumbs: function(e) {
return (e = e || {}).object ? c(e.object, e) : e.kind && e.name && e.namespace ? i(e.name, e.kind, e.namespace, e) : [];
}
};
} ]), angular.module("openshiftConsole").factory("QuotaService", [ "$filter", "$location", "$rootScope", "$routeParams", "$q", "APIService", "Constants", "DataService", "EventsService", "Logger", "NotificationsService", function(e, t, n, r, a, o, i, s, c, l, u) {
var d = o.getPreferredVersion("resourcequotas"), m = o.getPreferredVersion("appliedclusterresourcequotas"), p = e("isNil"), f = e("usageValue"), g = e("usageWithUnits"), v = e("percent"), h = function(e) {
return _.every(e.spec.containers, function(e) {
var t = _.some(_.get(e, "resources.requests"), function(e) {
return !p(e) && 0 !== f(e);
}), n = _.some(_.get(e, "resources.limits"), function(e) {
<<<<<<< 54d07edeb980fe42ac0162b39ff99df9638b7f33
<<<<<<< 9bc0af8cb56dcc9609307333b9424f396867cab5
<<<<<<< 28651868c34b8ebf846f1da11eea62cc91408c4c
return !o(e) && 0 !== i(e);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
});
return !t && !n;
});
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
}, q = function(a) {
return _.has(a, "spec.activeDeadlineSeconds");
}, r = function(a, b) {
var c = p(a), d = q(a);
return _.filter(b, function(a) {
var b = function(a) {
switch (a) {
=======
}, c = function(e) {
=======
return !d(e) && 0 !== p(e);
=======
return !d(e) && 0 !== m(e);
>>>>>>> Support EnvFrom in the Env Editors
});
return !t && !n;
});
<<<<<<< 3087d5859f05def6301fced3a013ac9165fd8c7a
}, h = function(e) {
>>>>>>> Quota Notifications
=======
}, v = function(e) {
>>>>>>> Add SVG icons
=======
return !p(e) && 0 !== f(e);
});
return !t && !n;
});
}, y = function(e) {
>>>>>>> Update quota service to use getPreferredVersion
return _.has(e, "spec.activeDeadlineSeconds");
}, b = function(e, t) {
var n = h(e), r = y(e);
return _.filter(t, function(e) {
var t = e.spec.quota ? e.spec.quota.scopes : e.spec.scopes;
return _.every(t, function(e) {
switch (e) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
case "Terminating":
return r;

case "NotTerminating":
return !r;

case "BestEffort":
return n;

case "NotBestEffort":
return !n;
}
return !0;
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
}, e = a.spec.quota ? a.spec.quota.scopes : a.spec.scopes;
return _.every(e, b);
});
}, s = function(a, b) {
return a ? "Pod" === a.kind ? r(a, b) : _.has(a, "spec.template") ? r(a.spec.template, b) : b : b;
}, t = b("humanizeQuotaResource"), u = b("humanizeKind"), v = function(a, b, c) {
var d = a.status.total || a.status;
if (m(d.hard[c]) <= m(d.used[c])) {
var e, f;
return e = "Pod" === b.kind ? "You will not be able to create the " + u(b.kind) + " '" + b.metadata.name + "'." : "You can still create " + u(b.kind) + " '" + b.metadata.name + "' but no pods will be created until resources are freed.", f = "pods" === c ? "You are at your quota for pods." : "You are at your quota for " + t(c) + " on pods.", {
type: "Pod" === b.kind ? "error" : "warning",
message: f,
details: e,
links: [ {
href: "project/" + a.metadata.namespace + "/quota",
=======
});
});
}, S = function(e, t) {
return e ? "Pod" === e.kind ? b(e, t) : _.has(e, "spec.template") ? b(e.spec.template, t) : t : t;
}, C = e("humanizeQuotaResource"), w = e("humanizeKind"), P = function(e, t, n) {
var r = e.status.total || e.status;
if (f(r.hard[n]) <= f(r.used[n])) {
var a, o;
return a = "Pod" === t.kind ? "You will not be able to create the " + w(t.kind) + " '" + t.metadata.name + "'." : "You can still create " + w(t.kind) + " '" + t.metadata.name + "' but no pods will be created until resources are freed.", o = "pods" === n ? "You are at your quota for pods." : "You are at your quota for " + C(n) + " on pods.", {
type: "Pod" === t.kind ? "error" : "warning",
message: o,
details: a,
links: [ {
href: "project/" + e.metadata.namespace + "/quota",
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
label: "View Quota",
target: "_blank"
} ]
};
}
return null;
<<<<<<< 13ac2d832bc56edf6bc5e2fc652da9b188ddae32
<<<<<<< 54d07edeb980fe42ac0162b39ff99df9638b7f33
<<<<<<< 28651868c34b8ebf846f1da11eea62cc91408c4c
<<<<<<< 33eb37eab8df0c17bc226501a924a2dc2b9b2f41
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
}, w = {
=======
}, g = {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
}, f = {
>>>>>>> Patternfly vertical navigation and project bar
=======
}, w = {
>>>>>>> Quota Notifications
=======
}, k = {
>>>>>>> Update quota service to use getPreferredVersion
=======
}, j = {
>>>>>>> Add Browse Catalog to Project context view.
cpu: "resources.requests.cpu",
"requests.cpu": "resources.requests.cpu",
"limits.cpu": "resources.limits.cpu",
memory: "resources.requests.memory",
"requests.memory": "resources.requests.memory",
"limits.memory": "resources.limits.memory",
persistentvolumeclaims: "resources.limits.persistentvolumeclaims",
"requests.storage": "resources.request.storage"
<<<<<<< 13ac2d832bc56edf6bc5e2fc652da9b188ddae32
<<<<<<< 54d07edeb980fe42ac0162b39ff99df9638b7f33
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< 2ce32f87748ff2fe030a6b53ff9490fcb80d856d
<<<<<<< 714c4a3ff94bc485f89078ceeb8105e8b94271be
<<<<<<< 0c40bfb0d97d474f70b5801c1312be38074c32cb
<<<<<<< 28651868c34b8ebf846f1da11eea62cc91408c4c
<<<<<<< 33eb37eab8df0c17bc226501a924a2dc2b9b2f41
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
}, x = function(a, b, c, d) {
var e = a.status.total || a.status, f = w[d], g = 0;
if (_.each(c.spec.containers, function(a) {
var b = _.get(a, f);
b && (g += m(b));
}), m(e.hard[d]) < m(e.used[d]) + g) {
var h;
return h = "Pod" === b.kind ? "You may not be able to create the " + u(b.kind) + " '" + b.metadata.name + "'." : "You can still create " + u(b.kind) + " '" + b.metadata.name + "' but you may not have pods created until resources are freed.", {
type: "warning",
message: "You are close to your quota for " + t(d) + " on pods.",
details: h,
links: [ {
href: "project/" + a.metadata.namespace + "/quota",
=======
}, f = function(e, t, n, a) {
var r = e.status.total || e.status, o = g[a], s = 0;
=======
}, g = function(e, t, n, a) {
var r = e.status.total || e.status, o = f[a], s = 0;
>>>>>>> Patternfly vertical navigation and project bar
=======
}, k = function(e, t, n, a) {
=======
}, P = function(e, t, n, a) {
>>>>>>> Fix for adding non-builder templates to a project
=======
}, k = function(e, t, n, a) {
>>>>>>> Bug 1505281 - Improve import YAML results message
=======
}, P = function(e, t, n, a) {
>>>>>>> Update pod controller to use getPreferredVersion
var r = e.status.total || e.status, o = w[a], i = 0;
>>>>>>> Quota Notifications
=======
}, P = function(e, t, n, r) {
var a = e.status.total || e.status, o = w[r], i = 0;
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
=======
}, j = function(e, t, n, r) {
var a = e.status.total || e.status, o = k[r], i = 0;
>>>>>>> Update quota service to use getPreferredVersion
=======
}, k = function(e, t, n, r) {
var a = e.status.total || e.status, o = j[r], i = 0;
>>>>>>> Add Browse Catalog to Project context view.
if (_.each(n.spec.containers, function(e) {
var t = _.get(e, o);
t && (i += f(t));
}), f(a.hard[r]) < f(a.used[r]) + i) {
var s;
return s = "Pod" === t.kind ? "You may not be able to create the " + w(t.kind) + " '" + t.metadata.name + "'." : "You can still create " + w(t.kind) + " '" + t.metadata.name + "' but you may not have pods created until resources are freed.", {
type: "warning",
message: "You are close to your quota for " + C(r) + " on pods.",
details: s,
links: [ {
href: "project/" + e.metadata.namespace + "/quota",
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
label: "View Quota",
target: "_blank"
} ]
};
}
<<<<<<< 54d07edeb980fe42ac0162b39ff99df9638b7f33
<<<<<<< 2ce32f87748ff2fe030a6b53ff9490fcb80d856d
<<<<<<< 714c4a3ff94bc485f89078ceeb8105e8b94271be
<<<<<<< 0c40bfb0d97d474f70b5801c1312be38074c32cb
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
}, y = function(a, b) {
var c = [], d = "Pod" === a.kind ? a : _.get(a, "spec.template");
return d ? (_.each([ "cpu", "memory", "requests.cpu", "requests.memory", "limits.cpu", "limits.memory", "pods" ], function(e) {
var f = b.status.total || b.status;
if (("Pod" !== a.kind || "pods" !== e) && _.has(f, [ "hard", e ]) && _.has(f, [ "used", e ])) {
var g = v(b, a, e);
if (g) c.push(g); else if ("pods" !== e) {
var h = x(b, a, d, e);
h && c.push(h);
}
}
}), c) : c;
}, z = function(b, c, d) {
var e = [];
return b && c ? (_.each(b, function(b) {
var f = s(b, c), g = s(b, d), h = a.objectToResourceGroupVersion(b);
if (h) {
var i = a.kindToResource(b.kind, !0), j = u(b.kind), k = "";
h.group && (k = h.group + "/"), k += h.resource;
var n = function(a) {
var c = a.status.total || a.status;
!l(c.hard[k]) && m(c.hard[k]) <= m(c.used[k]) && e.push({
type: "error",
message: "You are at your quota of " + c.hard[k] + " " + ("1" === c.hard[k] ? j : i) + " in this project.",
details: "You will not be able to create the " + j + " '" + b.metadata.name + "'.",
links: [ {
href: "project/" + a.metadata.namespace + "/quota",
label: "View Quota",
target: "_blank"
} ]
}), e = e.concat(y(b, a));
};
_.each(f, n), _.each(g, n);
}
}), e) : e;
}, A = function(a, b) {
var c, d, e = [];
return e.push(h.list("resourcequotas", b).then(function(a) {
c = a.by("metadata.name"), j.log("quotas", c);
})), e.push(h.list("appliedclusterresourcequotas", b).then(function(a) {
d = a.by("metadata.name"), j.log("cluster quotas", d);
})), f.all(e).then(function() {
var b = z(a, c, d);
return {
quotaAlerts: b
};
});
}, B = [ "cpu", "requests.cpu", "memory", "requests.memory", "limits.cpu", "limits.memory" ], C = function(a, b, c, d, e) {
var f, h = "Your project is " + (d < b ? "over" : "at") + " quota. ";
return f = _.includes(B, e) ? h + "It is using " + o(b / d, 0) + " of " + n(c, e) + " " + t(e) + "." : h + "It is using " + b + " of " + d + " " + t(e) + ".", f = _.escape(f), g.QUOTA_NOTIFICATION_MESSAGE && g.QUOTA_NOTIFICATION_MESSAGE[e] && (f += " " + g.QUOTA_NOTIFICATION_MESSAGE[e]), f;
}, D = function(a, b, f) {
var g = [], h = function(a) {
var b = a.status.total || a.status;
_.each(b.hard, function(a, h) {
var i = m(a), j = _.get(b, [ "used", h ]), l = m(j);
"resourcequotas" !== h && i && l && i <= l && g.push({
id: f + "/quota-limit-reached-" + h,
namespace: f,
type: i < l ? "warning" : "info",
message: C(j, l, a, i, h),
isHTML: !0,
skipToast: !0,
showInDrawer: !0,
actions: [ {
name: "View Quotas",
title: "View project quotas",
onClick: function() {
c.url("/project/" + e.project + "/quota"), d.$emit("NotificationDrawerWrapper.hide");
}
}, {
name: "Don't Show Me Again",
title: "Permenantly hide this notificaiton until quota limit changes",
onClick: function(a) {
k.permanentlyHideNotification(a.uid, a.namespace), d.$emit("NotificationDrawerWrapper.clear", a);
}
}, {
name: "Clear",
title: "Clear this notificaiton",
onClick: function(a) {
d.$emit("NotificationDrawerWrapper.clear", a);
}
} ]
});
});
};
return _.each(a, h), _.each(b, h), g;
}, E = function(a, b, c) {
var d = function(a) {
var b = a.status.total || a.status;
return _.some(b.hard, function(a, d) {
if ("resourcequotas" === d) return !1;
if (!c || _.includes(c, d)) {
if (a = m(a), !a) return !1;
var e = m(_.get(b, [ "used", d ]));
return !!e && a <= e;
}
<<<<<<< 1f5fb674ad14c7e78d2e82e837750bd2747349ab
<<<<<<< a19b22733566f12a68db59a49bc16848fffba594
<<<<<<< d21c662f039266e2dd235fa32bd86d3647c082ae
<<<<<<< 77ce3ebb70d0568ad8fbbb649b8a01f54552ad2c
<<<<<<< 46344541d4f20e3585d6ea01425f784292c0d84a
<<<<<<< 28651868c34b8ebf846f1da11eea62cc91408c4c
});
};
return _.some(a, d) || _.some(b, d);
}, F = function(a, b) {
return E(a, b, [ "requests.storage", "persistentvolumeclaims" ]);
}, G = function(a, b, c, d) {
var e = function(a) {
var b = a.status.total || a.status, e = m(d);
if (!c) return !1;
var f = _.get(b.hard, c);
if (f = m(f), !f) return !1;
var g = m(_.get(b, [ "used", c ]));
return g ? f < g + e : f < e;
};
return _.some(a, e) || _.some(b, e);
};
return {
filterQuotasForResource: s,
isBestEffortPod: p,
isTerminatingPod: q,
getResourceLimitAlerts: y,
getQuotaAlerts: z,
getLatestQuotaAlerts: A,
isAnyQuotaExceeded: E,
isAnyStorageQuotaExceeded: F,
willRequestExceedQuota: G,
getQuotaNotifications: D
};
} ]), angular.module("openshiftConsole").factory("SecurityCheckService", [ "APIService", "$filter", "Constants", function(a, b, c) {
var d = b("humanizeKind"), e = function(b, e) {
var f = [], g = [], h = [], i = [], j = [], k = [];
if (_.each(b, function(b) {
if (_.get(b, "kind")) {
var d = a.objectToResourceGroupVersion(b), e = a.apiInfo(d);
if (!e) return void g.push(b);
if (e.namespaced) if ("rolebindings" !== d.resource || "" !== d.group && "rbac.authorization.k8s.io" !== d.group) "roles" !== d.resource || "" !== d.group && "rbac.authorization.k8s.io" !== d.group ? _.find(c.SECURITY_CHECK_WHITELIST, {
resource: d.resource,
group: d.group
}) || k.push(b) : j.push(b); else {
var f = _.get(b, "roleRef.name");
"view" !== f && "system:image-puller" !== f && i.push(b);
} else h.push(b);
}
}), g.length) {
var l = _.uniq(_.map(g, function(a) {
var b = _.get(a, "apiVersion", "<none>");
return "API version " + b + " for kind " + d(a.kind);
}));
f.push({
type: "warning",
message: "Some resources will not be created.",
details: "The following resource versions are not supported by the server: " + l.join(", ")
=======
}, h = function(e, t) {
=======
}, j = function(e, t) {
>>>>>>> Quota Notifications
var n = [], a = "Pod" === e.kind ? e : _.get(e, "spec.template");
return a ? (_.each([ "cpu", "memory", "requests.cpu", "requests.memory", "limits.cpu", "limits.memory", "pods" ], function(r) {
var o = t.status.total || t.status;
if (("Pod" !== e.kind || "pods" !== r) && !d(o.hard[r])) {
var i = S(t, e, r);
=======
}, P = function(e, t) {
=======
}, j = function(e, t) {
>>>>>>> Add product icons for service catalog
=======
}, P = function(e, t) {
>>>>>>> Handle displaying parameters when secrets are not available.
=======
}, j = function(e, t) {
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
}, P = function(e, t) {
>>>>>>> Update template service broker flag name
=======
}, k = function(e, t) {
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
>>>>>>> Fix for adding non-builder templates to a project
=======
}, P = function(e, t) {
>>>>>>> Bug 1505281 - Improve import YAML results message
=======
}, k = function(e, t) {
>>>>>>> Update pod controller to use getPreferredVersion
var n = [], a = "Pod" === e.kind ? e : _.get(e, "spec.template");
return a ? (_.each([ "cpu", "memory", "requests.cpu", "requests.memory", "limits.cpu", "limits.memory", "pods" ], function(r) {
var o = t.status.total || t.status;
if (("Pod" !== e.kind || "pods" !== r) && _.has(o, [ "hard", r ]) && _.has(o, [ "used", r ])) {
<<<<<<< 75fc56b9e42e29e1492befd08624dd0e5dade866
<<<<<<< 247459038ac366429876741dd447ec652f2f5e7d
<<<<<<< a19b22733566f12a68db59a49bc16848fffba594
var i = C(t, e, r);
>>>>>>> Service instance details configuration and edit
=======
var i = S(t, e, r);
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
var i = C(t, e, r);
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
=======
var i = C(t, e, r);
>>>>>>> Adding label filter to ste secrets page
if (i) n.push(i); else if ("pods" !== r) {
var s = P(t, e, a, r);
=======
=======
}, I = function(e, t) {
>>>>>>> Update quota service to use getPreferredVersion
var n = [], r = "Pod" === e.kind ? e : _.get(e, "spec.template");
return r ? (_.each([ "cpu", "memory", "requests.cpu", "requests.memory", "limits.cpu", "limits.memory", "pods" ], function(a) {
var o = t.status.total || t.status;
if (("Pod" !== e.kind || "pods" !== a) && _.has(o, [ "hard", a ]) && _.has(o, [ "used", a ])) {
var i = P(t, e, a);
if (i) n.push(i); else if ("pods" !== a) {
<<<<<<< 13ac2d832bc56edf6bc5e2fc652da9b188ddae32
<<<<<<< 54d07edeb980fe42ac0162b39ff99df9638b7f33
var s = P(t, e, r, a);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
=======
var s = j(t, e, r, a);
>>>>>>> Update quota service to use getPreferredVersion
=======
var s = k(t, e, r, a);
>>>>>>> Add Browse Catalog to Project context view.
s && n.push(s);
}
}
}), n) : n;
}, R = function(e, t, n) {
var r = [];
return e && t ? (_.each(e, function(e) {
var a = S(e, t), i = S(e, n), s = o.objectToResourceGroupVersion(e);
if (s) {
var c = o.kindToResource(e.kind, !0), l = w(e.kind), u = "";
s.group && (u = s.group + "/"), u += s.resource;
var d = function(t) {
var n = t.status.total || t.status;
!p(n.hard[u]) && f(n.hard[u]) <= f(n.used[u]) && r.push({
type: "error",
message: "You are at your quota of " + n.hard[u] + " " + ("1" === n.hard[u] ? l : c) + " in this project.",
details: "You will not be able to create the " + l + " '" + e.metadata.name + "'.",
links: [ {
href: "project/" + t.metadata.namespace + "/quota",
label: "View Quota",
target: "_blank"
} ]
}), r = r.concat(I(e, t));
};
_.each(a, d), _.each(i, d);
}
}), r) : r;
}, E = [ "cpu", "requests.cpu", "memory", "requests.memory", "limits.cpu", "limits.memory" ], T = function(e, t, n, r, a) {
var o, s = "Your project is " + (r < t ? "over" : "at") + " quota. ";
return o = _.includes(E, a) ? s + "It is using " + v(t / r, 0) + " of " + g(n, a) + " " + C(a) + "." : s + "It is using " + t + " of " + r + " " + C(a) + ".", o = _.escape(o), i.QUOTA_NOTIFICATION_MESSAGE && i.QUOTA_NOTIFICATION_MESSAGE[a] && (o += " " + i.QUOTA_NOTIFICATION_MESSAGE[a]), o;
}, N = function(e, t, n) {
var r = function(e) {
var t = e.status.total || e.status;
return _.some(t.hard, function(e, r) {
if ("resourcequotas" === r) return !1;
if (!n || _.includes(n, r)) {
if (!(e = f(e))) return !1;
var a = f(_.get(t, [ "used", r ]));
return !!a && e <= a;
}
});
};
return _.some(e, r) || _.some(t, r);
};
return {
filterQuotasForResource: S,
isBestEffortPod: h,
isTerminatingPod: y,
getResourceLimitAlerts: I,
getQuotaAlerts: R,
getLatestQuotaAlerts: function(e, t) {
var n, r, o = [];
return o.push(s.list(d, t).then(function(e) {
n = e.by("metadata.name"), l.log("quotas", n);
})), o.push(s.list(m, t).then(function(e) {
r = e.by("metadata.name"), l.log("cluster quotas", r);
})), a.all(o).then(function() {
return {
quotaAlerts: R(e, n, r)
};
});
},
isAnyQuotaExceeded: N,
isAnyStorageQuotaExceeded: function(e, t) {
return N(e, t, [ "requests.storage", "persistentvolumeclaims" ]);
},
willRequestExceedQuota: function(e, t, n, r) {
var a = function(e) {
var t = e.status.total || e.status, a = f(r);
if (!n) return !1;
var o = _.get(t.hard, n);
if (!(o = f(o))) return !1;
var i = f(_.get(t, [ "used", n ]));
return i ? o < i + a : o < a;
};
return _.some(e, a) || _.some(t, a);
},
getQuotaNotifications: function(e, a, o) {
var i = [], s = function(e) {
var a = e.status.total || e.status;
_.each(a.hard, function(e, s) {
var c = f(e), l = _.get(a, [ "used", s ]), d = f(l);
"resourcequotas" !== s && c && d && c <= d && i.push({
id: "quota-limit-reached-" + s,
namespace: o,
type: c < d ? "warning" : "info",
message: T(0, d, e, c, s),
isHTML: !0,
skipToast: !0,
showInDrawer: !0,
actions: [ {
name: "View Quotas",
title: "View project quotas",
onClick: function() {
t.url("/project/" + r.project + "/quota"), n.$emit("NotificationDrawerWrapper.hide");
}
}, {
name: "Don't Show Me Again",
title: "Permenantly hide this notificaiton until quota limit changes",
onClick: function(e) {
u.permanentlyHideNotification(e.uid, e.namespace), n.$emit("NotificationDrawerWrapper.clear", e);
}
}, {
name: "Clear",
title: "Clear this notificaiton",
onClick: function(e) {
n.$emit("NotificationDrawerWrapper.clear", e);
}
} ]
});
});
};
return _.each(e, s), _.each(a, s), i;
}
};
} ]), angular.module("openshiftConsole").factory("SecurityCheckService", [ "APIService", "$filter", "Constants", function(e, t, n) {
var r = t("humanizeKind");
return {
getSecurityAlerts: function(t, a) {
var o = [], i = [], s = [], c = [], l = [], u = [];
if (_.each(t, function(t) {
if (_.get(t, "kind")) {
var r = e.objectToResourceGroupVersion(t), a = e.apiInfo(r);
if (a) if (a.namespaced) if ("rolebindings" !== r.resource || "" !== r.group && "rbac.authorization.k8s.io" !== r.group) "roles" !== r.resource || "" !== r.group && "rbac.authorization.k8s.io" !== r.group ? _.find(n.SECURITY_CHECK_WHITELIST, {
resource: r.resource,
group: r.group
}) || u.push(t) : l.push(t); else {
var o = _.get(t, "roleRef.name");
"view" !== o && "system:image-puller" !== o && c.push(t);
} else s.push(t); else i.push(t);
}
}), i.length) {
var d = _.uniq(_.map(i, function(e) {
return "API version " + _.get(e, "apiVersion", "<none>") + " for kind " + r(e.kind);
}));
o.push({
type: "warning",
message: "Some resources will not be created.",
details: "The following resource versions are not supported by the server: " + d.join(", ")
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
});
}
if (s.length) {
var m = _.uniq(_.map(s, function(e) {
return r(e.kind);
}));
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
f.push({
=======
o.push({
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
type: "warning",
message: "This will create resources outside of the project, which might impact all users of the cluster.",
details: "Typically only cluster administrators can create these resources. The cluster-level resources being created are: " + m.join(", ")
});
}
<<<<<<< 9bc0af8cb56dcc9609307333b9424f396867cab5
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
if (i.length) {
var n = [];
_.each(i, function(a) {
_.each(a.subjects, function(a) {
var b = d(a.kind) + " ";
"ServiceAccount" === a.kind && (b += (a.namespace || e) + "/"), b += a.name, n.push(b);
});
}), n = _.uniq(n), f.push({
type: "warning",
message: "This will grant permissions to your project.",
details: "Permissions are being granted to: " + n.join(", ")
=======
if (c.length) {
var p = [];
_.each(c, function(e) {
_.each(e.subjects, function(e) {
var t = r(e.kind) + " ";
"ServiceAccount" === e.kind && (t += (e.namespace || a) + "/"), t += e.name, p.push(t);
});
}), p = _.uniq(p), o.push({
type: "warning",
message: "This will grant permissions to your project.",
details: "Permissions are being granted to: " + p.join(", ")
>>>>>>> Support EnvFrom in the Env Editors
});
}
if (j.length && f.push({
type: "info",
message: "This will create additional membership roles within the project.",
details: "Admins will be able to grant these custom roles to users, groups, and service accounts."
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
}), k.length) {
var o = _.uniq(_.map(k, function(a) {
return d(a.kind);
=======
}), u.length) {
var f = _.uniq(_.map(u, function(e) {
return r(e.kind);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}));
f.push({
type: "warning",
message: "This will create resources that may have security or project behavior implications.",
details: "Make sure you understand what they do before creating them. The resources being created are: " + o.join(", ")
});
}
return f;
};
return {
getSecurityAlerts: e
};
} ]), angular.module("openshiftConsole").factory("LabelsService", function() {
var a = function(a) {
return _.get(a, "spec.template", {
=======
if (c.length) {
var m = [];
_.each(c, function(e) {
_.each(e.subjects, function(e) {
var t = a(e.kind) + " ";
"ServiceAccount" === e.kind && (t += (e.namespace || r) + "/"), t += e.name, m.push(t);
});
}), m = _.uniq(m), o.push({
type: "warning",
message: "This will grant permissions to your project.",
details: "Permissions are being granted to: " + m.join(", ")
});
}
if (l.length && o.push({
type: "info",
message: "This will create additional membership roles within the project.",
details: "Admins will be able to grant these custom roles to users, groups, and service accounts."
}), u.length) {
var f = _.uniq(_.map(u, function(e) {
return a(e.kind);
}));
o.push({
type: "warning",
message: "This will create resources that may have security or project behavior implications.",
details: "Make sure you understand what they do before creating them. The resources being created are: " + f.join(", ")
});
}
return o;
}
};
} ]), angular.module("openshiftConsole").factory("LabelsService", function() {
var e = function(e) {
return _.get(e, "spec.template", {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
metadata: {
labels: {}
}
});
};
return {
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
groupBySelector: function(b, c, d) {
var e = {}, f = {};
return d = d || {}, _.each(c, function(a) {
f[a.metadata.uid] = new LabelSelector(a.spec.selector);
}), _.each(b, function(b) {
if (!d.include || d.include(b)) {
var g = _.filter(c, function(c) {
var e = f[c.metadata.uid];
return d.matchTemplate ? e.matches(a(b)) : d.matchSelector ? e.covers(new LabelSelector(b.spec.selector)) : e.matches(b);
=======
groupBySelector: function(t, n, a) {
var r = {}, o = {};
return a = a || {}, _.each(n, function(e) {
=======
groupBySelector: function(t, n, r) {
var a = {}, o = {};
return r = r || {}, _.each(n, function(e) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
o[e.metadata.uid] = new LabelSelector(e.spec.selector);
}), _.each(t, function(t) {
if (!r.include || r.include(t)) {
var i = _.filter(n, function(n) {
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
var r = o[n.metadata.uid];
return a.matchTemplate ? r.matches(e(t)) : a.matchSelector ? r.covers(new LabelSelector(t.spec.selector)) : r.matches(t);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
var a = o[n.metadata.uid];
return r.matchTemplate ? a.matches(e(t)) : r.matchSelector ? a.covers(new LabelSelector(t.spec.selector)) : a.matches(t);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
});
i.length || _.set(a, [ "", t.metadata.name ], t), _.each(i, function(e) {
var n = _.get(e, r.key || "metadata.name", "");
_.set(a, [ n, t.metadata.name ], t);
});
}
}), a;
}
};
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< b4ddc9b550515059b9681d76233c34b7f7b3431c
<<<<<<< 952b26bc3acaa89a51e4aad5f965e515d3b007ae
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
}), angular.module("openshiftConsole").factory("CatalogService", [ "$filter", "APIService", "Constants", "KeywordService", function(a, b, c, d) {
var e = a("tags"), f = b.getPreferredVersion("servicebindings"), g = b.getPreferredVersion("clusterserviceclasses"), h = b.getPreferredVersion("serviceinstances"), i = b.getPreferredVersion("clusterserviceplans"), j = !c.DISABLE_SERVICE_CATALOG_LANDING_PAGE && b.apiInfo(f) && b.apiInfo(g) && b.apiInfo(h) && b.apiInfo(i), k = function() {
return !!c.TEMPLATE_SERVICE_BROKER_ENABLED;
}, l = {};
_.each(c.CATALOG_CATEGORIES, function(a) {
_.each(a.items, function(a) {
l[a.id] = a;
var b = _.get(a, "subcategories", []);
_.each(b, function(a) {
_.each(a.items, function(a) {
l[a.id] = a;
=======
}), angular.module("openshiftConsole").factory("CatalogService", [ "$filter", "Constants", "KeywordService", function(e, t, n) {
var a = e("tags"), r = {};
_.each(t.CATALOG_CATEGORIES, function(e) {
=======
}), angular.module("openshiftConsole").factory("CatalogService", [ "$filter", "APIService", "Constants", "KeywordService", function(e, t, n, a) {
var r = e("tags"), o = t.getPreferredVersion("servicebindings"), i = t.getPreferredVersion("clusterserviceclasses"), s = t.getPreferredVersion("serviceinstances"), c = t.getPreferredVersion("clusterserviceplans"), l = !n.DISABLE_SERVICE_CATALOG_LANDING_PAGE && t.apiInfo(o) && t.apiInfo(i) && t.apiInfo(s) && t.apiInfo(c), u = {};
_.each(n.CATALOG_CATEGORIES, function(e) {
>>>>>>> Add bindings list to resource pages
=======
}), angular.module("openshiftConsole").factory("CatalogService", [ "$filter", "$q", "APIService", "AuthService", "Catalog", "Constants", "KeywordService", "Logger", "NotificationsService", function(e, t, n, a, r, o, i, s, c) {
=======
}), angular.module("openshiftConsole").factory("CatalogService", [ "$filter", "$q", "APIService", "AuthService", "Catalog", "Constants", "KeywordService", "Logger", "NotificationsService", function(e, t, n, r, a, o, i, s, c) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
var l, u = e("tags"), d = n.getPreferredVersion("servicebindings"), m = n.getPreferredVersion("clusterserviceclasses"), p = n.getPreferredVersion("serviceinstances"), f = n.getPreferredVersion("clusterserviceplans"), g = !o.DISABLE_SERVICE_CATALOG_LANDING_PAGE && n.apiInfo(d) && n.apiInfo(m) && n.apiInfo(p) && n.apiInfo(f), v = function() {
s.debug("ProjectsService: clearing catalog items cache"), l = null;
};
r.onUserChanged(v), r.onLogout(v);
var h = function() {
return !!o.TEMPLATE_SERVICE_BROKER_ENABLED;
}, y = {};
_.each(o.CATALOG_CATEGORIES, function(e) {
>>>>>>> Add search catalog in project context
_.each(e.items, function(e) {
y[e.id] = e;
var t = _.get(e, "subcategories", []);
_.each(t, function(e) {
_.each(e.items, function(e) {
<<<<<<< b4ddc9b550515059b9681d76233c34b7f7b3431c
<<<<<<< 0ba73cbc37b88f92a6380ccc93fc8e3d978020aa
<<<<<<< 952b26bc3acaa89a51e4aad5f965e515d3b007ae
r[e.id] = e;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
});
=======
i[e.id] = e;
>>>>>>> Add bindings list to resource pages
=======
u[e.id] = e;
>>>>>>> Adopt service catalog API changes
=======
y[e.id] = e;
>>>>>>> Add search catalog in project context
});
});
});
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
var m = function(a) {
return l[a];
}, n = function(a, b) {
a = a.toLowerCase();
var c;
for (c = 0; c < b.length; c++) {
var d = b[c].toLowerCase();
if (a === d) return !0;
}
return !1;
}, o = function(a, b) {
var c = _.get(a, "categoryAliases", []), d = [ a.id ].concat(c);
return _.some(d, function(a) {
return n(a, b);
});
}, p = function(a) {
var b = {};
return _.each(a, function(a) {
if (a.status) {
var c = {};
a.spec && a.spec.tags && _.each(a.spec.tags, function(a) {
var b = _.get(a, "annotations.tags");
b && (c[a.name] = b.split(/\s*,\s*/));
});
var d = !1;
_.each(l, function(e) {
var f = function(a) {
return _.some(a.status.tags, function(a) {
var b = c[a.tag] || [];
return o(e, b) && n("builder", b) && !n("hidden", b);
});
};
f(a) && (b[e.id] = b[e.id] || [], b[e.id].push(a), d = !0);
});
<<<<<<< 952b26bc3acaa89a51e4aad5f965e515d3b007ae
var e;
d || (e = _.some(a.status.tags, function(a) {
var b = c[a.tag] || [];
return n("builder", b) && !n("hidden", b);
}), e && (b[""] = b[""] || [], b[""].push(a)));
}
}), b;
}, q = function(a) {
var b = {};
return _.each(a, function(a) {
var c = e(a), d = !1;
_.each(l, function(e) {
o(e, c) && (b[e.id] = b[e.id] || [], b[e.id].push(a), d = !0);
}), d || (b[""] = b[""] || [], b[""].push(a));
}), b;
}, r = function(a) {
return a.from && "ImageStreamTag" === a.from.kind && a.from.name.indexOf(":") === -1 && !a.from.namespace;
}, s = a("displayName"), t = function(a, b) {
if (!b.length) return a;
var c = [];
return _.each(a, function(a) {
var d = _.get(a, "metadata.name", ""), e = s(a, !0), f = [], g = {}, h = {};
_.each(a.spec.tags, function(a) {
return r(a) ? (g[a.name] = a.from.name, h[a.from.name] = h[a.from.name] || [], void h[a.from.name].push(a.name)) : void f.push(a);
});
<<<<<<< 0ba73cbc37b88f92a6380ccc93fc8e3d978020aa
var i = _.keyBy(f, "name");
_.each(b, function(a) {
a.test(d) || e && a.test(e) || _.each(f, function(b) {
var c = _.get(b, "annotations.tags", "");
if (!/\bbuilder\b/.test(c) || /\bhidden\b/.test(c)) return void delete i[b.name];
if (!a.test(b.name)) {
var d = function(b) {
return a.test(b);
};
if (!_.some(h[b.name], d)) {
var e = _.get(b, "annotations.description");
e && a.test(e) || delete i[b.name];
}
}
});
});
<<<<<<< b4ddc9b550515059b9681d76233c34b7f7b3431c
var j;
_.isEmpty(i) || (j = angular.copy(a), j.status.tags = _.filter(j.status.tags, function(a) {
var b = g[a.tag];
return b ? i[b] : i[a.tag];
}), c.push(j));
}), c;
}, u = [ "metadata.name", 'metadata.annotations["openshift.io/display-name"]', "metadata.annotations.description" ], v = function(a, b) {
return d.filterForKeywords(a, u, b);
};
return {
SERVICE_CATALOG_ENABLED: j,
isTemplateServiceBrokerEnabled: k,
getCategoryItem: m,
categorizeImageStreams: p,
categorizeTemplates: q,
referencesSameImageStream: r,
filterImageStreams: t,
filterTemplates: v
=======
var o = function(e, t) {
=======
var s = function(e, t) {
>>>>>>> Add bindings list to resource pages
=======
var d = function(e, t) {
>>>>>>> Adopt service catalog API changes
=======
var b = function(e, t) {
>>>>>>> Add search catalog in project context
e = e.toLowerCase();
var n;
for (n = 0; n < t.length; n++) if (e === t[n].toLowerCase()) return !0;
return !1;
}, S = function(e, t) {
var n = _.get(e, "categoryAliases", []), r = [ e.id ].concat(n);
return _.some(r, function(e) {
return b(e, t);
});
}, C = function(e) {
return e.from && "ImageStreamTag" === e.from.kind && -1 === e.from.name.indexOf(":") && !e.from.namespace;
}, w = e("displayName"), P = [ "metadata.name", 'metadata.annotations["openshift.io/display-name"]', "metadata.annotations.description" ];
return {
SERVICE_CATALOG_ENABLED: g,
isTemplateServiceBrokerEnabled: h,
getCatalogItems: function(e) {
if (l && !e) return s.debug("CatalogService: returning cached catalog items"), t.when(l);
s.debug("CatalogService: getCatalogItems, force refresh", e);
var n = !h();
return a.getCatalogItems(n).then(_.spread(function(e, t) {
if (t) {
var n = {
type: "error",
message: t
};
c.addNotification(n);
}
return l = e, e;
}));
},
getCategoryItem: function(e) {
return y[e];
},
categorizeImageStreams: function(e) {
var t = {};
return _.each(e, function(e) {
if (e.status) {
var n = {};
e.spec && e.spec.tags && _.each(e.spec.tags, function(e) {
var t = _.get(e, "annotations.tags");
t && (n[e.name] = t.split(/\s*,\s*/));
});
var r = !1;
_.each(y, function(a) {
(function(e) {
return _.some(e.status.tags, function(e) {
var t = n[e.tag] || [];
return S(a, t) && b("builder", t) && !b("hidden", t);
});
})(e) && (t[a.id] = t[a.id] || [], t[a.id].push(e), r = !0);
}), r || _.some(e.status.tags, function(e) {
var t = n[e.tag] || [];
return b("builder", t) && !b("hidden", t);
}) && (t[""] = t[""] || [], t[""].push(e));
}
}), t;
},
categorizeTemplates: function(e) {
var t = {};
return _.each(e, function(e) {
var n = u(e), r = !1;
_.each(y, function(a) {
S(a, n) && (t[a.id] = t[a.id] || [], t[a.id].push(e), r = !0);
}), r || (t[""] = t[""] || [], t[""].push(e));
}), t;
},
referencesSameImageStream: C,
filterImageStreams: function(e, t) {
if (!t.length) return e;
var n = [];
return _.each(e, function(e) {
var r = _.get(e, "metadata.name", ""), a = w(e, !0), o = [], i = {}, s = {};
_.each(e.spec.tags, function(e) {
if (C(e)) return i[e.name] = e.from.name, s[e.from.name] = s[e.from.name] || [], void s[e.from.name].push(e.name);
o.push(e);
});
var c = _.keyBy(o, "name");
_.each(t, function(e) {
e.test(r) || a && e.test(a) || _.each(o, function(t) {
var n = _.get(t, "annotations.tags", "");
if (/\bbuilder\b/.test(n) && !/\bhidden\b/.test(n)) {
if (!e.test(t.name) && !_.some(s[t.name], function(t) {
return e.test(t);
})) {
var r = _.get(t, "annotations.description");
r && e.test(r) || delete c[t.name];
}
} else delete c[t.name];
});
});
var l;
_.isEmpty(c) || ((l = angular.copy(e)).status.tags = _.filter(l.status.tags, function(e) {
var t = i[e.tag];
return t ? c[t] : c[e.tag];
}), n.push(l));
}), n;
},
filterTemplates: function(e, t) {
return i.filterForKeywords(e, P, t);
}
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
};
} ]), angular.module("openshiftConsole").factory("ModalsService", [ "$uibModal", function(e) {
return {
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
confirm: function(b) {
var c = a.open({
=======
confirm: function(t) {
return e.open({
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
animation: !0,
templateUrl: "views/modals/confirm.html",
controller: "ConfirmModalController",
resolve: {
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
modalConfig: b
=======
modalConfig: t
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
}
}).result;
},
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
confirmSaveLog: function(b) {
var c = a.open({
=======
confirmSaveLog: function(t) {
return e.open({
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
animation: !0,
templateUrl: "views/modals/confirm-save-log.html",
controller: "ConfirmSaveLogController",
resolve: {
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
object: b
=======
object: t
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
}
}).result;
},
showJenkinsfileExamples: function() {
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
a.open({
=======
e.open({
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
animation: !0,
templateUrl: "views/modals/jenkinsfile-examples-modal.html",
controller: "JenkinsfileExamplesModalController",
size: "lg"
});
},
showComputeUnitsHelp: function() {
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
a.open({
=======
e.open({
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
animation: !0,
templateUrl: "views/modals/about-compute-units-modal.html",
controller: "AboutComputeUnitsModalController"
});
}
};
} ]), angular.module("openshiftConsole").factory("CLIHelp", [ "$filter", function(e) {
var t = e("annotation");
return {
getLogsCommand: function(e, n) {
if (!e) return null;
var r, a, o;
switch (e.kind) {
case "Pod":
r = "oc logs " + e.metadata.name, n && (r += " -c " + n);
break;

case "DeploymentConfig":
r = "oc logs dc/" + e.metadata.name;
break;

case "ReplicationController":
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
e = b(a, "deploymentConfig"), f = b(a, "deploymentVersion"), d = e && f ? "oc logs --version " + f + " dc/" + e : "oc logs rc/" + a.metadata.name;
=======
r = t(e, "deploymentConfig"), o = t(e, "deploymentVersion"), a = r && o ? "oc logs --version " + o + " dc/" + r : "oc logs rc/" + e.metadata.name;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
a = t(e, "deploymentConfig"), o = t(e, "deploymentVersion"), r = a && o ? "oc logs --version " + o + " dc/" + a : "oc logs rc/" + e.metadata.name;
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
break;

case "BuildConfig":
r = "oc logs bc/" + e.metadata.name;
break;

case "Build":
a = t(e, "buildConfig"), r = "oc logs --version " + (o = t(e, "buildNumber")) + " bc/" + a;
break;

default:
return null;
}
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
return d += " -n " + a.metadata.namespace;
};
return {
getLogsCommand: c
};
} ]), angular.module("openshiftConsole").factory("EnvironmentService", [ "$filter", "keyValueEditorUtils", function(a, b) {
var c = function(a) {
<<<<<<< f56378c1e748449074be8738ae159f02ed953303
return "Pod" === a.kind ? _.get(a, "spec.containers", []) : _.get(a, "spec.template.spec.containers", []);
};
return {
getContainers: c,
normalize: function(a) {
=======
return "Pod" === a.kind ? _.get(a, "spec.containers", []) :_.get(a, "spec.template.spec.containers", []);
};
return {
getContainers:c,
normalize:function(a) {
>>>>>>> Create reusable edit-environment-variables component
var b = c(a);
_.each(b, function(a) {
a.env = a.env || [], a.envFrom = a.envFrom || [];
});
},
compact: function(a) {
var d = c(a);
_.each(d, function(a) {
a.env = b.compactEntries(a.env), a.envFrom = _.reject(a.envFrom, function(a) {
return !_.get(a, "configMapRef.name") && !_.get(a, "secretRef.name");
});
});
},
copyAndNormalize: function(a) {
var b = angular.copy(a);
return this.normalize(b), b;
},
isEnvironmentEqual: function(a, b) {
var d = c(a), e = c(b);
if (d.length !== e.length) return !1;
var f, g, h, i, j;
for (f = 0; f < d.length; f++) {
if (d[f].name !== e[f].name) return !1;
if (g = d[f].env || [], h = e[f].env || [], i = d[f].envFrom || [], j = e[f].envFrom || [], !_.isEqual(g, h) || !_.isEqual(i, j)) return !1;
}
return !0;
},
mergeEdits: function(a, b) {
var d, e = angular.copy(b), f = c(a), g = c(e);
for (d = 0; d < g.length; d++) g[d].env = _.get(f, [ d, "env" ], []), g[d].envFrom = _.get(f, [ d, "envFrom" ], []);
return e;
}
};
} ]), function() {
angular.module("openshiftConsole").provider("keyValueEditorConfig", [ function() {
var a = {
=======
return a += " -n " + e.metadata.namespace;
=======
return r += " -n " + e.metadata.namespace;
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}
};
} ]), angular.module("openshiftConsole").factory("EnvironmentService", [ "$filter", "keyValueEditorUtils", function(e, t) {
var n = function(e) {
return "Pod" === e.kind ? _.get(e, "spec.containers", []) : _.get(e, "spec.template.spec.containers", []);
};
return {
getContainers: n,
normalize: function(e) {
var t = n(e);
_.each(t, function(e) {
e.env = e.env || [], e.envFrom = e.envFrom || [];
});
},
compact: function(e) {
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
var a = n(e);
_.each(a, function(e) {
e.env = t.compactEntries(e.env);
=======
var r = n(e);
_.each(r, function(e) {
e.env = t.compactEntries(e.env), e.envFrom = _.reject(e.envFrom, function(e) {
return !_.get(e, "configMapRef.name") && !_.get(e, "secretRef.name");
});
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
});
},
copyAndNormalize: function(e) {
var t = angular.copy(e);
return this.normalize(t), t;
},
isEnvironmentEqual: function(e, t) {
var r = n(e), a = n(t);
if (r.length !== a.length) return !1;
var o, i, s, c, l;
for (o = 0; o < r.length; o++) {
if (r[o].name !== a[o].name) return !1;
if (i = r[o].env || [], s = a[o].env || [], c = r[o].envFrom || [], l = a[o].envFrom || [], !_.isEqual(i, s) || !_.isEqual(c, l)) return !1;
}
return !0;
},
mergeEdits: function(e, t) {
var r, a = angular.copy(t), o = n(e), i = n(a);
for (r = 0; r < i.length; r++) i[r].env = _.get(o, [ r, "env" ], []), i[r].envFrom = _.get(o, [ r, "envFrom" ], []);
return a;
}
};
} ]), angular.module("openshiftConsole").provider("keyValueEditorConfig", [ function() {
var e = {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
keyMinlength: "",
keyMaxlength: "",
valueMinlength: "",
valueMaxlength: "",
keyValidator: "[a-zA-Z0-9-_]+",
valueValidator: "",
keyValidatorError: "Validation error",
keyValidatorErrorTooltip: void 0,
keyValidatorErrorTooltipIcon: "pficon pficon-help",
valueValidatorError: "Validation error",
valueValidatorErrorTooltip: void 0,
valueValidatorErrorTooltipIcon: "pficon pficon-help",
keyPlaceholder: "",
valuePlaceholder: "",
keyRequiredError: "Key is required"
};
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
this.set = function(b, c) {
angular.isObject(b) ? angular.extend(a, b) : a[b] = c;
=======
this.set = function(t, n) {
angular.isObject(t) ? angular.extend(e, t) : e[t] = n;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
}, this.$get = [ function() {
return e;
} ];
} ]), angular.module("openshiftConsole").factory("keyValueEditorUtils", [ "$timeout", "$window", function(e, t) {
var n = function() {
return {
name: "",
value: ""
};
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
}, d = function(a, b) {
a && a.push(b || c());
}, e = function(a) {
a && a.push({
name: "",
selectedValueFrom: null,
selectedValueFromKey: null,
valueFrom: {}
});
}, f = function(a, b) {
if (!a.value && a.valueFrom) {
a.valueIcon = "pficon pficon-help", a.valueIconTooltip = "This is a referenced value that will be generated when a container is created.  On running pods you can check the resolved values by going to the Terminal tab and echoing the environment variable.";
var c = {
config: "configMapKeyRef",
secret: "secretKeyRef",
field: "fieldRef"
};
a.valueFrom[c.config] ? (a.apiObj = {
kind: "ConfigMap",
metadata: {
name: a.valueFrom[c.config].name,
namespace: b
}
}, a.refType = c.config) : a.valueFrom[c.secret] ? (a.apiObj = {
kind: "Secret",
metadata: {
name: a.valueFrom[c.secret].name,
namespace: b
}
}, a.refType = c.secret, a.valueIcon = "fa fa-user-secret") : a.valueFrom[c.field] ? (a.isReadonlyValue = !0, a.refType = c.field, a.valueAlt = "Set to the field " + a.valueFrom.fieldRef.fieldPath + " in current object") : (a.isReadonlyValue = !0, a.valueAlt = "Set to a reference on a " + _.head(_.keys(a.valueFrom)));
}
}, g = function(a, b, c) {
a.valueFrom && (a.valueFrom.configMapKeyRef && (c || (a.isReadonlyValue = !0)), a.valueFrom.secretKeyRef && (b || (a.isReadonlyValue = !0)));
}, h = [ "apiObj", "cannotDelete", "isReadonly", "isReadonlyKey", "isReadonlyValue", "keyValidator", "keyValidatorError", "keyValidatorErrorTooltip", "keyValidatorErrorTooltipIcon", "refType", "selected", "selectedValueFrom", "selectedValueFromKey", "valueValidatorError", "valueIcon", "valueIconTooltip", "valueAlt", "valueValidator", "valueValidatorErrorTooltip", "valueValidatorErrorTooltipIcon" ], i = function(a) {
return _.each(h, function(b) {
a[b] = void 0, delete a[b];
}), a;
}, j = function(a) {
return _.map(a, i);
}, k = function(a) {
return _.compact(_.map(a, function(a) {
return a = i(a), a.name || a.value || a.valueFrom ? a : void 0;
}));
}, l = function(a) {
return Logger.log("DEPRECATED: mapEntries() drops valueFrom from the entry."), _.reduce(k(a), function(a, b) {
return a[b.name] = b.value, a;
}, {});
}, m = function(c, d) {
a(function() {
var a = _.head(b.document.querySelectorAll(c));
a && (a.focus(), d && (a.value = "", a.value = d));
}, 25);
}, n = function(a, b) {
return "key-value-editor-key-" + a + "-" + b;
}, o = function(a, b) {
return "key-value-editor-value-" + a + "-" + b;
}, p = function(a, b) {
return {
object: _.find(b, function(b) {
return "ConfigMap" === b.kind && b.metadata.name === a.valueFrom.configMapKeyRef.name;
}),
key: a.valueFrom.configMapKeyRef.key
=======
}, a = [ "apiObj", "cannotDelete", "isReadonly", "isReadonlyKey", "isReadonlyValue", "keyValidator", "keyValidatorError", "keyValidatorErrorTooltip", "keyValidatorErrorTooltipIcon", "refType", "selected", "selectedValueFrom", "selectedValueFromKey", "valueValidatorError", "valueIcon", "valueIconTooltip", "valueAlt", "valueValidator", "valueValidatorErrorTooltip", "valueValidatorErrorTooltipIcon" ], r = function(e) {
return _.each(a, function(t) {
=======
}, r = [ "apiObj", "cannotDelete", "isReadonly", "isReadonlyKey", "isReadonlyValue", "keyValidator", "keyValidatorError", "keyValidatorErrorTooltip", "keyValidatorErrorTooltipIcon", "refType", "selected", "selectedValueFrom", "selectedValueFromKey", "valueValidatorError", "valueIcon", "valueIconTooltip", "valueAlt", "valueValidator", "valueValidatorErrorTooltip", "valueValidatorErrorTooltipIcon" ], a = function(e) {
return _.each(r, function(t) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
e[t] = void 0, delete e[t];
}), e;
}, o = function(e) {
return _.compact(_.map(e, function(e) {
return (e = a(e)).name || e.value || e.valueFrom ? e : void 0;
}));
}, i = function(e, t) {
return {
object: _.find(t, function(t) {
return "ConfigMap" === t.kind && t.metadata.name === e.valueFrom.configMapKeyRef.name;
}),
key: e.valueFrom.configMapKeyRef.key
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
};
}, s = function(e, t) {
return {
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
object: _.find(b, function(b) {
return "Secret" === b.kind && b.metadata.name === a.valueFrom.secretKeyRef.name;
}),
key: a.valueFrom.secretKeyRef.key
};
}, r = function(a, b) {
var c = null;
return a.valueFrom.configMapKeyRef ? c = p(a, b) : a.valueFrom.secretKeyRef && (c = q(a, b)), c;
}, s = function(a, b) {
_.each(a, function(a) {
var c;
a.valueFrom && (c = r(a, b), c && (_.set(a, "selectedValueFrom", c.object), _.set(a, "selectedValueFromKey", c.key)));
});
};
return {
newEntry: c,
addEntry: d,
addEntryWithSelectors: e,
altTextForValueFrom: f,
setEntryPerms: g,
cleanEntry: i,
cleanEntries: j,
compactEntries: k,
mapEntries: l,
setFocusOn: m,
uniqueForKey: n,
uniqueForValue: o,
findReferenceValue: r,
findReferenceValueForEntries: s
};
} ]);
}(), angular.module("openshiftConsole").factory("FullscreenService", [ "IS_SAFARI", function(a) {
var b = document.documentElement.requestFullScreen || document.documentElement.webkitRequestFullScreen || document.documentElement.mozRequestFullScreen || document.documentElement.msRequestFullscreen, c = function(a) {
if (!a || !_.isString(a)) return a;
var b = $(a);
return b.length ? b[0] : null;
};
return {
hasFullscreen: function(c) {
return (!c || !a) && !!b;
},
requestFullscreen: function(a) {
b && (a = c(a), a && b.call(a));
=======
object: _.find(t, function(t) {
return "Secret" === t.kind && t.metadata.name === e.valueFrom.secretKeyRef.name;
}),
key: e.valueFrom.secretKeyRef.key
};
}, c = function(e, t) {
var n = null;
return e.valueFrom.configMapKeyRef ? n = i(e, t) : e.valueFrom.secretKeyRef && (n = s(e, t)), n;
};
return {
newEntry: n,
addEntry: function(e, t) {
e && e.push(t || {
name: "",
value: ""
});
},
addEntryWithSelectors: function(e) {
e && e.push({
name: "",
selectedValueFrom: null,
selectedValueFromKey: null,
valueFrom: {}
});
},
altTextForValueFrom: function(e, t) {
if (!e.value && e.valueFrom) {
e.valueIcon = "pficon pficon-help", e.valueIconTooltip = "This is a referenced value that will be generated when a container is created.  On running pods you can check the resolved values by going to the Terminal tab and echoing the environment variable.";
var n = {
config: "configMapKeyRef",
secret: "secretKeyRef",
field: "fieldRef"
};
e.valueFrom[n.config] ? (e.apiObj = {
kind: "ConfigMap",
metadata: {
name: e.valueFrom[n.config].name,
namespace: t
}
}, e.refType = n.config) : e.valueFrom[n.secret] ? (e.apiObj = {
kind: "Secret",
metadata: {
name: e.valueFrom[n.secret].name,
namespace: t
}
}, e.refType = n.secret, e.valueIcon = "fa fa-user-secret") : e.valueFrom[n.field] ? (e.isReadonlyValue = !0, e.refType = n.field, e.valueAlt = "Set to the field " + e.valueFrom.fieldRef.fieldPath + " in current object") : (e.isReadonlyValue = !0, e.valueAlt = "Set to a reference on a " + _.head(_.keys(e.valueFrom)));
}
},
setEntryPerms: function(e, t, n) {
e.valueFrom && (e.valueFrom.configMapKeyRef && (n || (e.isReadonlyValue = !0)), e.valueFrom.secretKeyRef && (t || (e.isReadonlyValue = !0)));
},
cleanEntry: a,
cleanEntries: function(e) {
return _.map(e, a);
},
compactEntries: o,
mapEntries: function(e) {
return Logger.log("DEPRECATED: mapEntries() drops valueFrom from the entry."), _.reduce(o(e), function(e, t) {
return e[t.name] = t.value, e;
}, {});
},
setFocusOn: function(n, r) {
e(function() {
var e = _.head(t.document.querySelectorAll(n));
e && (e.focus(), r && (e.value = "", e.value = r));
}, 25);
},
uniqueForKey: function(e, t) {
return "key-value-editor-key-" + e + "-" + t;
},
uniqueForValue: function(e, t) {
return "key-value-editor-value-" + e + "-" + t;
},
findReferenceValue: c,
findReferenceValueForEntries: function(e, t) {
_.each(e, function(e) {
var n;
e.valueFrom && (n = c(e, t)) && (_.set(e, "selectedValueFrom", n.object), _.set(e, "selectedValueFromKey", n.key));
});
}
};
} ]), angular.module("openshiftConsole").factory("FullscreenService", [ "IS_SAFARI", function(e) {
var t = document.documentElement.requestFullScreen || document.documentElement.webkitRequestFullScreen || document.documentElement.mozRequestFullScreen || document.documentElement.msRequestFullscreen, n = function(e) {
if (!e || !_.isString(e)) return e;
var t = $(e);
return t.length ? t[0] : null;
};
return {
hasFullscreen: function(n) {
return (!n || !e) && !!t;
},
requestFullscreen: function(e) {
t && (e = n(e)) && t.call(e);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
},
exitFullscreen: function() {
document.exitFullscreen ? document.exitFullscreen() : document.mozCancelFullScreen ? document.mozCancelFullScreen() : document.webkitExitFullscreen ? document.webkitExitFullscreen() : document.msExitFullscreen && document.msExitFullscreen();
}
};
} ]), angular.module("openshiftConsole").factory("AppsService", function() {
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
var a = function(a) {
return _.get(a, "metadata.labels.app", "");
}, b = function(a, b) {
return a || b ? a ? b ? a.toLowerCase().localeCompare(b.toLowerCase()) : -1 : 1 : 0;
};
return {
groupByApp: function(b, c) {
var d = _.groupBy(b, a);
return c && _.mapValues(d, function(a) {
return _.sortBy(a, c);
}), d;
},
sortAppNames: function(a) {
a.sort(b);
}
};
}), angular.module("openshiftConsole").factory("ResourceAlertsService", [ "$filter", "AlertMessageService", "DeploymentsService", "Navigate", "NotificationsService", "QuotaService", "gettextCatalog", "gettext", function(a, b, c, d, e, f, g, h) {
var i = a("annotation"), j = a("humanizeKind"), k = a("deploymentStatus"), l = a("groupedPodWarnings"), m = function(a, c) {
if (_.isEmpty(a)) return {};
var e = {}, f = l(a);
return _.each(f, function(a, f) {
var i = _.head(a);
if (i) {
var j = "pod_warning" + f, k = {
=======
var e = function(e) {
return _.get(e, "metadata.labels.app", "");
}, t = function(e, t) {
return e || t ? e ? t ? e.toLowerCase().localeCompare(t.toLowerCase()) : -1 : 1 : 0;
};
return {
groupByApp: function(t, n) {
var r = _.groupBy(t, e);
return n && _.mapValues(r, function(e) {
return _.sortBy(e, n);
}), r;
},
sortAppNames: function(e) {
e.sort(t);
}
};
}), angular.module("openshiftConsole").factory("ResourceAlertsService", [ "$filter", "AlertMessageService", "DeploymentsService", "Navigate", "NotificationsService", "QuotaService", function(e, t, n, r, a, o) {
var i = e("annotation"), s = e("humanizeKind"), c = e("deploymentStatus"), l = e("groupedPodWarnings"), u = function(e, t, n, r) {
e[t + "-" + n.reason] = {
type: r,
message: n.message
};
};
return {
getPodAlerts: function(e, n) {
if (_.isEmpty(e)) return {};
var a = {}, o = l(e);
return _.each(o, function(e, o) {
var i = _.head(e);
if (i) {
var s = "pod_warning" + o, c = {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
type: i.severity || "warning",
message: i.message
};
switch (i.reason) {
case "Looping":
case "NonZeroExit":
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
var l = d.resourceURL(i.pod, "Pod", c), m = URI(l).addSearch({
tab: "logs",
container: i.container
}).toString();
k.links = [ {
href: m,
label: g.getString(h("View Log"))
=======
var l = a.resourceURL(i.pod, "Pod", n), u = URI(l).addSearch({
=======
var l = r.resourceURL(i.pod, "Pod", n), u = URI(l).addSearch({
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
tab: "logs",
container: i.container
}).toString();
c.links = [ {
href: u,
label: "View Log"
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
} ];
break;

case "NonZeroExitTerminatingPod":
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
if (b.isAlertPermanentlyHidden(j, c)) return;
k.links = [ {
href: "",
label: g.getString(h("Don't Show Me Again")),
onClick: function() {
return b.permanentlyHideAlert(j, c), !0;
}
} ];
}
e[j] = k;
}
}), e;
}, n = function(a, b, c) {
var d = f.getQuotaNotifications(a, b, c);
_.each(d, function(a) {
e.isNotificationPermanentlyHidden(a) || e.addNotification(a);
});
}, o = function(b) {
var d = {};
return _.get(b, "spec.paused") && (d[b.metadata.uid + "-paused"] = {
type: "info",
message: b.metadata.name + " is paused.",
details: "This will stop any new rollouts or triggers from running until resumed.",
links: [ {
href: "",
label: "Resume Rollouts",
onClick: function() {
return c.setPaused(b, !1, {
namespace: b.metadata.namespace
}).then(_.noop, function(c) {
d[b.metadata.uid + "-pause-error"] = {
type: "error",
message: "An error occurred resuming the " + j(b.kind) + ".",
details: a("getErrorDetails")(c)
};
}), !0;
}
} ]
}), d;
}, p = function(a, b) {
if (!a || !b) return {};
var c, e = {}, f = _.get(a, "metadata.name"), j = k(b), l = i(b, "deploymentVersion"), m = l ? f + " #" + l : b.metadata.name, n = d.resourceURL(b);
switch (j) {
case "Cancelled":
e[b.metadata.uid + "-cancelled"] = {
type: "info",
message: g.getString(h("Deployment")) + " " + m + " " + g.getString(h("was cancelled.")),
links: [ {
href: n,
label: g.getString(h("View Deployment"))
=======
if (t.isAlertPermanentlyHidden(s, n)) return;
c.links = [ {
href: "",
label: "Don't Show Me Again",
onClick: function() {
return t.permanentlyHideAlert(s, n), !0;
}
} ];
}
a[s] = c;
}
}), a;
},
getDeploymentStatusAlerts: function(e, t) {
if (!e || !t) return {};
var n, a = {}, o = _.get(e, "metadata.name"), s = c(t), l = i(t, "deploymentVersion"), u = l ? o + " #" + l : t.metadata.name, d = r.resourceURL(t);
switch (s) {
case "Cancelled":
a[t.metadata.uid + "-cancelled"] = {
type: "info",
message: "Deployment " + u + " was cancelled.",
links: [ {
href: d,
label: "View Deployment"
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
} ]
};
break;

case "Failed":
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
c = URI(n).addSearch({
tab: "logs"
}).toString(), e[b.metadata.uid + "-failed"] = {
type: "error",
message: g.getString(h("Deployment")) + " " + m + " " + g.getString(h("failed.")),
reason: i(b, "openshift.io/deployment.status-reason"),
links: [ {
href: c,
label: g.getString(h("View Log"))
}, {
href: "project/" + b.metadata.namespace + "/browse/events",
label: g.getString(h("View Events"))
} ]
};
}
return e;
}, q = function(a, b, c, d) {
a[b + "-" + c.reason] = {
type: d,
message: c.message
};
}, r = function(a) {
var b = {};
if (!a) return b;
var c = a.metadata.uid, d = _.find(a.status.conditions, {
reason: "ErrorFindingNamespaceForInstance"
}), e = _.find(a.status.conditions, {
reason: "ProvisionFailed"
}), f = _.find(a.status.conditions, {
reason: "DeprovisioningFailed"
});
return d && q(b, c, d, "warning"), e && q(b, c, e, "error"), f && q(b, c, f, "error"), b;
};
return {
getPodAlerts: m,
getDeploymentStatusAlerts: p,
getPausedDeploymentAlerts: o,
getServiceInstanceAlerts: r,
setQuotaNotifications: n
};
} ]), angular.module("openshiftConsole").factory("ListRowUtils", function() {
var a = function(a) {
var b = _.get(a, "metadata.uid");
return b ? "overview/expand/" + b : null;
}, b = function(b) {
var c = a(b.apiObject);
if (!c) return void (b.expanded = !1);
var d = sessionStorage.getItem(c);
return !d && b.state.expandAll ? void (b.expanded = !0) : void (b.expanded = "true" === d);
};
return {
getNotifications: function(a, b) {
var c = _.get(a, "metadata.uid");
return c ? _.get(b, [ "notificationsByObjectUID", c ]) : null;
},
ui: {
toggleExpand: function(b, c) {
if (c || !($(b.target).closest("a").length > 0)) {
var d = a(this.apiObject);
d && (this.expanded = !this.expanded, sessionStorage.setItem(d, this.expanded ? "true" : "false"));
}
},
$onInit: function() {
_.set(this, "selectedTab.networking", !0), b(this);
=======
n = URI(d).addSearch({
tab: "logs"
}).toString(), a[t.metadata.uid + "-failed"] = {
type: "error",
message: "Deployment " + u + " failed.",
reason: i(t, "openshift.io/deployment.status-reason"),
links: [ {
href: n,
label: "View Log"
}, {
href: "project/" + t.metadata.namespace + "/browse/events",
label: "View Events"
} ]
};
}
return a;
},
getPausedDeploymentAlerts: function(t) {
var r = {};
return _.get(t, "spec.paused") && (r[t.metadata.uid + "-paused"] = {
type: "info",
message: t.metadata.name + " is paused.",
details: "This will stop any new rollouts or triggers from running until resumed.",
links: [ {
href: "",
label: "Resume Rollouts",
onClick: function() {
return n.setPaused(t, !1, {
namespace: t.metadata.namespace
}).then(_.noop, function(n) {
r[t.metadata.uid + "-pause-error"] = {
type: "error",
message: "An error occurred resuming the " + s(t.kind) + ".",
details: e("getErrorDetails")(n)
};
}), !0;
}
} ]
}), r;
},
getServiceInstanceAlerts: function(e) {
var t = {};
if (!e) return t;
var n = e.metadata.uid, r = _.find(e.status.conditions, {
reason: "ErrorFindingNamespaceForInstance"
}), a = _.find(e.status.conditions, {
reason: "ProvisionFailed"
}), o = _.find(e.status.conditions, {
reason: "DeprovisioningFailed"
});
return r && u(t, n, r, "warning"), a && u(t, n, a, "error"), o && u(t, n, o, "error"), t;
},
setQuotaNotifications: function(e, t, n) {
var r = o.getQuotaNotifications(e, t, n);
_.each(r, function(e) {
a.isNotificationPermanentlyHidden(e) || a.addNotification(e);
});
}
};
} ]), angular.module("openshiftConsole").factory("ListRowUtils", function() {
var e = function(e) {
var t = _.get(e, "metadata.uid");
return t ? "overview/expand/" + t : null;
}, t = function(t) {
var n = e(t.apiObject);
if (n) {
var r = sessionStorage.getItem(n);
r || !t.state.expandAll ? t.expanded = "true" === r : t.expanded = !0;
} else t.expanded = !1;
};
return {
getNotifications: function(e, t) {
var n = _.get(e, "metadata.uid");
return n ? _.get(t, [ "notificationsByObjectUID", n ]) : null;
},
ui: {
toggleExpand: function(t, n) {
if (n || !($(t.target).closest("a").length > 0 || $(t.target).closest("button").length > 0)) {
var r = e(this.apiObject);
r && (this.expanded = !this.expanded, sessionStorage.setItem(r, this.expanded ? "true" : "false"));
}
},
$onInit: function() {
_.set(this, "selectedTab.networking", !0), t(this);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
}
}
};
}), angular.module("openshiftConsole").factory("OwnerReferencesService", function() {
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
var a = function(a) {
return _.get(a, "metadata.ownerReferences");
}, b = function(b) {
var c = a(b);
return _.filter(c, "controller");
};
return {
getOwnerReferences: a,
getControllerReferences: b,
groupByControllerUID: function(b) {
var c = {};
return _.each(b, function(b) {
var d = !1;
_.each(a(b), function(a) {
a.controller && (d = !0, c[a.uid] = c[a.uid] || [], c[a.uid].push(b));
}), d || (c[""] = c[""] || [], c[""].push(b));
}), c;
},
filterForController: function(b, c) {
var d = _.get(c, "metadata.uid");
return _.filter(b, function(b) {
return _.some(a(b), {
uid: d,
=======
var e = function(e) {
return _.get(e, "metadata.ownerReferences");
};
return {
getOwnerReferences: e,
getControllerReferences: function(t) {
var n = e(t);
return _.filter(n, "controller");
},
groupByControllerUID: function(t) {
var n = {};
return _.each(t, function(t) {
var r = !1;
_.each(e(t), function(e) {
e.controller && (r = !0, n[e.uid] = n[e.uid] || [], n[e.uid].push(t));
}), r || (n[""] = n[""] || [], n[""].push(t));
}), n;
},
filterForController: function(t, n) {
var r = _.get(n, "metadata.uid");
return _.filter(t, function(t) {
return _.some(e(t), {
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
uid: a,
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
uid: r,
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
controller: !0
});
});
}
};
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< 5cd156712e95103dd73694bd0ac71c85e2c6cdcb
<<<<<<< 602d786018a3879a89789b1214b36a15c51b928b
<<<<<<< 33eb37eab8df0c17bc226501a924a2dc2b9b2f41
<<<<<<< a044a915ec97ccf53d4ca1b478e9ba6eea281385
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
}), angular.module("openshiftConsole").factory("ServiceInstancesService", [ "$filter", "$q", "$uibModal", "APIService", "BindingService", "CatalogService", "DataService", "Logger", "NotificationsService", function(a, b, c, d, e, f, g, h, i) {
var j = d.getPreferredVersion("clusterserviceclasses"), k = d.getPreferredVersion("clusterserviceplans"), l = function(a) {
return _.get(a, "spec.clusterServiceClassRef.name");
}, m = function(a) {
var b = l(a);
return g.get(j, b, {});
}, n = function(a) {
return _.get(a, "spec.clusterServicePlanRef.name");
}, o = function(a) {
var b = n(a);
return g.get(k, b, {});
}, p = function(a, b) {
var c = n(a);
return c === _.get(b, "metadata.name");
}, q = function(a, c) {
if (angular.isDefined(c)) return b.when(c);
var f = {
namespace: a.metadata.namespace
}, h = d.getPreferredVersion("servicebindings");
return g.list(h, f).then(function(b) {
return c = b.by("metadata.name"), e.getBindingsForResource(c, a);
});
}, r = function(b) {
var c = {
namespace: b.metadata.namespace
}, e = d.getPreferredVersion("serviceinstances");
i.hideNotification("deprovision-service-error");
var f = {
propagationPolicy: null
};
return g["delete"](e, b.metadata.name, c, f).then(function() {
i.addNotification({
type: "success",
message: "Provisioned service '" + b.metadata.name + "' was marked for deletion."
});
}, function(c) {
i.addNotification({
id: "deprovision-service-error",
=======
}), angular.module("openshiftConsole").controller("LandingPageController", [ "$scope", "$rootScope", "AuthService", "Catalog", "Constants", "DataService", "Navigate", "NotificationsService", "RecentlyViewedServiceItems", "GuidedTourService", "HTMLService", "$timeout", "$q", "$routeParams", "$location", function(e, t, n, a, r, o, i, s, c, l, u, d, m, p, g) {
function f() {
=======
}), angular.module("openshiftConsole").controller("LandingPageController", [ "$scope", "$rootScope", "AuthService", "Catalog", "Constants", "DataService", "Navigate", "NotificationsService", "RecentlyViewedServiceItems", "GuidedTourService", "HTMLService", "$timeout", "$q", "$routeParams", "$location", function(e, t, n, a, r, o, i, s, c, l, u, d, m, p, f) {
function g() {
>>>>>>> Patternfly vertical navigation and project bar
if (v) if (p.startTour) d(function() {
=======
}), angular.module("openshiftConsole").factory("ServiceInstancesService", [ "$filter", "$uibModal", "DataService", "NotificationsService", function(e, t, n, a) {
return {
deprovision: function(r) {
var o = e("getErrorDetails"), i = {
alerts: {
deprovision: {
=======
}), angular.module("openshiftConsole").factory("ServiceInstancesService", [ "$filter", "$q", "$uibModal", "APIService", "BindingService", "CatalogService", "DataService", "Logger", "NotificationsService", function(e, t, n, a, r, o, i, s, c) {
var l = a.getPreferredVersion("clusterserviceclasses"), u = a.getPreferredVersion("clusterserviceplans"), d = function(e) {
=======
}), angular.module("openshiftConsole").factory("ServiceInstancesService", [ "$filter", "$q", "$uibModal", "APIService", "BindingService", "CatalogService", "DataService", "Logger", "NotificationsService", function(e, t, n, r, a, o, i, s, c) {
var l = r.getPreferredVersion("clusterserviceclasses"), u = r.getPreferredVersion("clusterserviceplans"), d = function(e) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
return _.get(e, "spec.clusterServiceClassRef.name");
}, m = function(e) {
return _.get(e, "spec.clusterServicePlanRef.name");
}, p = function(e, n) {
if (angular.isDefined(n)) return t.when(n);
var o = {
namespace: e.metadata.namespace
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
}, s = a.getPreferredVersion("serviceinstancecredentials");
=======
}, s = r.getPreferredVersion("servicebindings");
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
return i.list(s, o).then(function(t) {
return n = t.by("metadata.name"), a.getBindingsForResource(n, e);
});
}, f = function(t) {
var n = {
namespace: t.metadata.namespace
}, a = r.getPreferredVersion("serviceinstances");
c.hideNotification("deprovision-service-error");
var o = {
propagationPolicy: null
};
return i.delete(a, t.metadata.name, n, o).then(function() {
c.addNotification({
type: "success",
message: "Provisioned service '" + t.metadata.name + "' was marked for deletion."
});
}, function(n) {
c.addNotification({
id: "deprovision-service-error",
type: "error",
message: "An error occurred while deleting provisioned service " + t.metadata.name + ".",
details: e("getErrorDetails")(n)
}), s("An error occurred while deleting provisioned service " + t.metadata.name + ".", n);
});
}, g = function(t, n) {
if (o.SERVICE_CATALOG_ENABLED) {
var a = {
namespace: t.metadata.namespace
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
}, l = a.getPreferredVersion("serviceinstancecredentials");
p(t, n).then(function(t) {
_.each(t, function(t) {
<<<<<<< 0ba73cbc37b88f92a6380ccc93fc8e3d978020aa
t.metadata.deletionTimestamp && i.delete(u, t.metadata.name, r).then(function() {
=======
t.metadata.deletionTimestamp || i.delete(l, t.metadata.name, r).then(function() {
>>>>>>> Adopt service catalog API changes
=======
}, l = r.getPreferredVersion("servicebindings");
p(t, n).then(function(t) {
_.each(t, function(t) {
if (!t.metadata.deletionTimestamp) {
var n = {
propagationPolicy: null
};
i.delete(l, t.metadata.name, a, n).then(function() {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
c.addNotification({
type: "success",
message: "Binding " + t.metadata.name + "' was marked for deletion."
});
}).catch(function(n) {
c.addNotification({
>>>>>>> Delete bindings when deleting a service instance
type: "error",
message: "Binding " + t.metadata.name + "' could not be deleted.",
details: e("getErrorDetails")(n)
}), s.error("Binding " + t.metadata.name + "' could not be deleted.", n);
});
});
});
}
};
return {
getServiceClassNameForInstance: d,
fetchServiceClassForInstance: function(e) {
var t = d(e);
return i.get(l, t, {});
},
getServicePlanNameForInstance: m,
fetchServicePlanForInstance: function(e) {
var t = m(e);
return i.get(u, t, {});
},
isCurrentPlan: function(e, t) {
return m(e) === _.get(t, "metadata.name");
},
deprovision: function(e, t) {
var r, a = {
kind: e.kind,
displayName: e.metadata.name,
okButtonText: "Delete",
okButtonClass: "btn-danger",
cancelButtonText: "Cancel",
delete: function() {
r.close("delete");
}
};
return (r = n.open({
animation: !0,
templateUrl: "views/modals/delete-resource.html",
controller: "ConfirmModalController",
resolve: {
modalConfig: function() {
return a;
}
}
})).result.then(function() {
g(e, t), f(e);
});
}
};
} ]), angular.module("openshiftConsole").controller("LandingPageController", [ "$scope", "$rootScope", "AuthService", "CatalogService", "Constants", "DataService", "Navigate", "NotificationsService", "RecentlyViewedServiceItems", "GuidedTourService", "HTMLService", "$timeout", "$q", "$routeParams", "$location", function(e, t, n, r, a, o, i, s, c, l, u, d, m, p, f) {
function g() {
var t = f.search();
return t.serviceExternalName ? _.find(e.catalogItems, {
resource: {
spec: {
externalName: t.serviceExternalName
}
}
}) : null;
}
<<<<<<< b4ddc9b550515059b9681d76233c34b7f7b3431c
<<<<<<< 1f5fb674ad14c7e78d2e82e837750bd2747349ab
<<<<<<< de0845fceb47415eaef183d16e09b8bb832e483c
<<<<<<< 3087d5859f05def6301fced3a013ac9165fd8c7a
<<<<<<< 9bc0af8cb56dcc9609307333b9424f396867cab5
if (v) if (m.startTour) d(function() {
>>>>>>> Updates for Service Instance & Bindings
=======
if (v) if (p.startTour) d(function() {
>>>>>>> Support EnvFrom in the Env Editors
f.replace(), f.search("startTour", null), e.startGuidedTour();
}, 500); else if (_.get(h, "auto_launch")) {
var n = "openshift/viewedHomePage/" + t.user.metadata.name;
"true" !== localStorage.getItem(n) && d(function() {
e.startGuidedTour() && localStorage.setItem(n, "true");
=======
if (h) if (p.startTour) d(function() {
f.replace(), f.search("startTour", null), e.startGuidedTour();
}, 500); else if (_.get(v, "auto_launch")) {
var r = "openshift/viewedHomePage/" + t.user.metadata.name;
"true" !== localStorage.getItem(r) && d(function() {
e.startGuidedTour() && localStorage.setItem(r, "true");
>>>>>>> Add SVG icons
=======
=======
>>>>>>> Add search catalog in project context
function v() {
var n = g();
if (n) e.$broadcast("open-overlay-panel", n); else if (y) if (p.startTour) d(function() {
f.replace(), f.search("startTour", null), e.startGuidedTour();
}, 500); else if (_.get(h, "auto_launch")) {
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< b4ddc9b550515059b9681d76233c34b7f7b3431c
=======
function h() {
var n = v();
if (n) e.$broadcast("open-overlay-panel", n); else if (b) if (f.startTour) m(function() {
g.replace(), g.search("startTour", null), e.startGuidedTour();
}, 500); else if (_.get(y, "auto_launch")) {
>>>>>>> Update template service broker flag name
=======
>>>>>>> Add search catalog in project context
var a = "openshift/viewedHomePage/" + t.user.metadata.name;
"true" !== localStorage.getItem(a) && d(function() {
e.startGuidedTour() && localStorage.setItem(a, "true");
>>>>>>> Bug 1506153 - Use query param serviceExternalName
=======
var r = "openshift/viewedHomePage/" + t.user.metadata.name;
"true" !== localStorage.getItem(r) && d(function() {
e.startGuidedTour() && localStorage.setItem(r, "true");
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}, 500);
}
}
var h = _.get(a, "GUIDED_TOURS.landing_page_tour"), y = h && h.enabled && h.steps;
e.saasOfferings = a.SAAS_OFFERINGS, e.viewMembership = function(e) {
i.toProjectMembership(e.metadata.name);
}, y && (e.startGuidedTour = function() {
return !u.isWindowBelowBreakpoint(u.WINDOW_SIZE_SM) && (l.startTour(h.steps), !0);
}), s.clearNotifications();
var b = function() {
var t = _.get(e, "template.metadata.uid");
t && c.addItem(t);
}, S = function(e) {
return "PartialObjectMetadata" === e.kind;
}, C = function(e) {
return S(e) ? o.get("templates", e.metadata.name, {
namespace: e.metadata.namespace
}) : m.when(e);
};
e.templateSelected = function(t) {
C(t).then(function(t) {
_.set(e, "ordering.panelName", "template"), e.template = t;
});
}, e.closeOrderingPanel = function() {
e.template && (b(), e.template = null), _.set(e, "ordering.panelName", "");
}, e.deployImageSelected = function() {
_.set(e, "ordering.panelName", "deployImage");
}, e.fromFileSelected = function() {
_.set(e, "ordering.panelName", "fromFile");
}, e.fromProjectSelected = function() {
_.set(e, "ordering.panelName", "fromProject");
}, n.withUser().then(function() {
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< b4ddc9b550515059b9681d76233c34b7f7b3431c
var t = !r.isTemplateServiceBrokerEnabled();
a.getCatalogItems(t).then(_.spread(function(t, n) {
if (n) {
var a = {
>>>>>>> Bug 1471033 - Only request template metadata
type: "error",
message: "An error occurred while deleting provisioned service " + b.metadata.name + ".",
details: a("getErrorDetails")(c)
}), h("An error occurred while deleting provisioned service " + b.metadata.name + ".", c);
});
}, s = function(b, c) {
if (f.SERVICE_CATALOG_ENABLED) {
var e = {
namespace: b.metadata.namespace
}, j = d.getPreferredVersion("servicebindings");
q(b, c).then(function(b) {
_.each(b, function(b) {
if (!b.metadata.deletionTimestamp) {
var c = {
propagationPolicy: null
};
<<<<<<< 1f5fb674ad14c7e78d2e82e837750bd2747349ab
<<<<<<< a044a915ec97ccf53d4ca1b478e9ba6eea281385
g["delete"](j, b.metadata.name, e, c).then(function() {
i.addNotification({
type: "success",
message: "Binding " + b.metadata.name + "' was marked for deletion."
});
})["catch"](function(c) {
i.addNotification({
type: "error",
message: "Binding " + b.metadata.name + "' could not be deleted.",
details: a("getErrorDetails")(c)
}), h.error("Binding " + b.metadata.name + "' could not be deleted.", c);
});
}
<<<<<<< de0845fceb47415eaef183d16e09b8bb832e483c
<<<<<<< 33eb37eab8df0c17bc226501a924a2dc2b9b2f41
=======
e.catalogItems = t, g();
=======
e.catalogItems = t, v();
>>>>>>> Bug 1506153 - Use query param serviceExternalName
}));
}), e.$on("$destroy", function() {
b();
}), y && e.$on("$locationChangeStart", function(t) {
f.search().startTour && (e.startGuidedTour(), t.preventDefault());
>>>>>>> Patternfly vertical navigation and project bar
});
<<<<<<< b9f74dc9163281caa65a7366573d340fa288654d
<<<<<<< 7fc0bb75a45e57cf2098d66ed317a3123741a3d2
=======
c.addNotification(a);
}
e.catalogItems = t, h();
}));
}), e.$on("$destroy", function() {
S();
}), b && e.$on("$locationChangeStart", function(t) {
g.search().startTour && (e.startGuidedTour(), t.preventDefault());
>>>>>>> Update template service broker flag name
=======
a.getCatalogItems().then(function(t) {
=======
r.getCatalogItems().then(function(t) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
e.catalogItems = t, v();
});
}), e.$on("$destroy", function() {
b();
}), y && e.$on("$locationChangeStart", function(t) {
f.search().startTour && (e.startGuidedTour(), t.preventDefault());
>>>>>>> Add search catalog in project context
});
<<<<<<< 13ac2d832bc56edf6bc5e2fc652da9b188ddae32
=======
=======
} ]), angular.module("openshiftConsole").controller("ProjectBrowseCatalogController", [ "$scope", "$q", "$routeParams", "DataService", "AuthorizationService", "Catalog", "CatalogService", "Navigate", "NotificationsService", "ProjectsService", function(e, t, n, r, a, o, i, s, c, l) {
var u = n.project;
l.get(u).then(function() {
a.getProjectRules(u).then(function() {
if (a.canIAddToProject(u)) {
var r, l, d = i.getCatalogItems().then(function(e) {
r = e;
}), m = o.getProjectCatalogItems(u).then(_.spread(function(e, t) {
l = e, t && c.addNotification({
type: "error",
message: t
});
}));
t.all([ d, m ]).then(function() {
e.catalogItems = o.sortCatalogItems(_.concat(r, l)), n.filter && (e.keywordFilter = n.filter);
});
} else s.toProjectOverview(u);
});
});
>>>>>>> Add Browse Catalog to Project context view.
} ]), angular.module("openshiftConsole").factory("EventsService", [ "BrowserStore", function(e) {
var t = e.loadJSON("session", "events") || {}, n = _.get(window, "OPENSHIFT_CONSTANTS.EVENTS_TO_SHOW");
return {
isImportantEvent: function(e) {
var t = e.reason;
return n[t];
},
markRead: function(n) {
_.set(t, [ n.metadata.uid, "read" ], !0), e.saveJSON("session", "events", t);
},
isRead: function(e) {
return _.get(t, [ e.metadata.uid, "read" ]);
},
markCleared: function(n) {
_.set(t, [ n.metadata.uid, "cleared" ], !0), e.saveJSON("session", "events", t);
},
isCleared: function(e) {
return _.get(t, [ e.metadata.uid, "cleared" ]);
}
};
} ]), angular.module("openshiftConsole").controller("ProjectsController", [ "$scope", "$filter", "$location", "$route", "$timeout", "AuthService", "DataService", "KeywordService", "Navigate", "Logger", "ProjectsService", function(e, t, n, r, a, o, i, s, c, l, u) {
var d, m, p = [], f = [], g = !1;
e.alerts = e.alerts || {}, e.loading = !0, e.showGetStarted = !1, e.canCreate = void 0, e.search = {
text: ""
}, e.limitListTo = 250;
var v, h = [ "metadata.name", 'metadata.annotations["openshift.io/display-name"]', 'metadata.annotations["openshift.io/description"]', 'metadata.annotations["openshift.io/requester"]' ], y = function() {
e.projects = s.filterForKeywords(m, h, f);
}, b = t("displayName"), S = function() {
var t = _.get(e, "sortConfig.currentField.id");
v !== t && (e.sortConfig.isAscending = "metadata.creationTimestamp" !== t);
var n = function(e) {
return b(e).toLowerCase();
}, r = e.sortConfig.isAscending ? "asc" : "desc";
switch (t) {
case 'metadata.annotations["openshift.io/display-name"]':
m = _.orderBy(d, [ n, "metadata.name" ], [ r ]);
break;

case 'metadata.annotations["openshift.io/requester"]':
m = _.orderBy(d, [ t, n ], [ r, "asc" ]);
break;

default:
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< 9bc0af8cb56dcc9609307333b9424f396867cab5
<<<<<<< 602d786018a3879a89789b1214b36a15c51b928b
m = _.orderBy(d, [ t ], [ a ]);
>>>>>>> Add notification-drawer to show curated list of events to user
}
}, t = function(a, b) {
var d, e = {
kind: a.kind,
displayName: a.metadata.name,
okButtonText: "Delete",
okButtonClass: "btn-danger",
cancelButtonText: "Cancel",
"delete": function() {
d.close("delete");
=======
m = _.orderBy(d, [ t ], [ a ]);
>>>>>>> Support EnvFrom in the Env Editors
=======
m = _.orderBy(d, [ t ], [ r ]);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}
<<<<<<< 3087d5859f05def6301fced3a013ac9165fd8c7a
=======
v = t;
<<<<<<< 75fc56b9e42e29e1492befd08624dd0e5dade866
<<<<<<< 247459038ac366429876741dd447ec652f2f5e7d
<<<<<<< a19b22733566f12a68db59a49bc16848fffba594
<<<<<<< 46344541d4f20e3585d6ea01425f784292c0d84a
}, S = function() {
C(), y();
>>>>>>> Add SVG icons
=======
}, C = function() {
S(), y();
>>>>>>> Service instance details configuration and edit
=======
}, S = function() {
C(), y();
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
}, C = function() {
S(), y();
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
=======
}, C = function() {
S(), y();
>>>>>>> Adding label filter to ste secrets page
};
return d = c.open({
animation: !0,
templateUrl: "views/modals/delete-resource.html",
controller: "ConfirmModalController",
resolve: {
modalConfig: function() {
return e;
}
}
}), d.result.then(function() {
s(a, b), r(a);
});
};
return {
getServiceClassNameForInstance: l,
fetchServiceClassForInstance: m,
getServicePlanNameForInstance: n,
fetchServicePlanForInstance: o,
isCurrentPlan: p,
deprovision: t
};
} ]), angular.module("openshiftConsole").controller("LandingPageController", [ "$scope", "$rootScope", "AuthService", "Catalog", "CatalogService", "Constants", "DataService", "Navigate", "NotificationsService", "RecentlyViewedServiceItems", "GuidedTourService", "HTMLService", "$timeout", "$q", "$routeParams", "$location", function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
function q() {
var b = p.search();
return b.serviceExternalName ? _.find(a.catalogItems, {
resource: {
spec: {
externalName: b.serviceExternalName
}
}
}) : null;
}
function r() {
var c = q();
if (c) return void a.$broadcast("open-overlay-panel", c);
if (t) if (o.startTour) m(function() {
p.replace(), p.search("startTour", null), a.startGuidedTour();
}, 500); else if (_.get(s, "auto_launch")) {
var d = "openshift/viewedHomePage/" + b.user.metadata.name;
"true" !== localStorage.getItem(d) && m(function() {
a.startGuidedTour() && localStorage.setItem(d, "true");
}, 500);
}
}
var s = _.get(f, "GUIDED_TOURS.landing_page_tour"), t = s && s.enabled && s.steps;
a.saasOfferings = f.SAAS_OFFERINGS, a.viewMembership = function(a) {
h.toProjectMembership(a.metadata.name);
}, t && (a.startGuidedTour = function() {
return !l.isWindowBelowBreakpoint(l.WINDOW_SIZE_SM) && (k.startTour(s.steps), !0);
}), i.clearNotifications();
var u = function() {
var b = _.get(a, "template.metadata.uid");
b && j.addItem(b);
}, v = function(a) {
return "PartialObjectMetadata" === a.kind;
}, w = function(a) {
return v(a) ? g.get("templates", a.metadata.name, {
namespace: a.metadata.namespace
}) : n.when(a);
};
a.templateSelected = function(b) {
w(b).then(function(b) {
_.set(a, "ordering.panelName", "template"), a.template = b;
});
}, a.closeOrderingPanel = function() {
a.template && (u(), a.template = null), _.set(a, "ordering.panelName", "");
}, a.deployImageSelected = function() {
_.set(a, "ordering.panelName", "deployImage");
}, a.fromFileSelected = function() {
_.set(a, "ordering.panelName", "fromFile");
}, a.fromProjectSelected = function() {
_.set(a, "ordering.panelName", "fromProject");
}, c.withUser().then(function() {
var b = !e.isTemplateServiceBrokerEnabled();
d.getCatalogItems(b).then(_.spread(function(b, c) {
if (c) {
var d = {
type: "error",
message: c
};
i.addNotification(d);
}
a.catalogItems = b, r();
}));
}), a.$on("$destroy", function() {
u();
}), t && a.$on("$locationChangeStart", function(b) {
p.search().startTour && (a.startGuidedTour(), b.preventDefault());
});
} ]), angular.module("openshiftConsole").factory("EventsService", [ "BrowserStore", function(a) {
var b = "read", c = "cleared", d = a.loadJSON("session", "events") || {}, e = _.get(window, "OPENSHIFT_CONSTANTS.EVENTS_TO_SHOW"), f = function(a) {
return e[a.reason];
}, g = function(c) {
_.set(d, [ c, b ], !0), a.saveJSON("session", "events", d);
}, h = function(b) {
_.set(d, [ b, c ], !0), a.saveJSON("session", "events", d);
}, i = function(a) {
return _.get(d, [ a, b ]);
}, j = function(a) {
return _.get(d, [ a, c ]);
};
return {
isImportantAPIEvent: f,
markRead: g,
isRead: i,
markCleared: h,
isCleared: j
};
} ]), angular.module("openshiftConsole").controller("ProjectsController", [ "$scope", "$filter", "$location", "$route", "$timeout", "AuthService", "DataService", "KeywordService", "Navigate", "Logger", "ProjectsService", "gettext", "gettextCatalog", function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
var n, o, p = 250, q = [], r = [], s = !1;
a.alerts = a.alerts || {}, a.loading = !0, a.showGetStarted = !1, a.canCreate = void 0, a.search = {
text: ""
}, a.limitListTo = p;
var t, u = [ "metadata.name", 'metadata.annotations["openshift.io/display-name"]', 'metadata.annotations["openshift.io/description"]', 'metadata.annotations["openshift.io/requester"]' ], v = function() {
a.projects = h.filterForKeywords(o, u, r);
}, w = b("displayName"), x = function() {
var b = _.get(a, "sortConfig.currentField.id");
t !== b && (a.sortConfig.isAscending = "metadata.creationTimestamp" !== b);
var c = function(a) {
return w(a).toLowerCase();
}, d = a.sortConfig.isAscending ? "asc" : "desc";
switch (b) {
case 'metadata.annotations["openshift.io/display-name"]':
o = _.orderBy(n, [ c, "metadata.name" ], [ d ]);
break;

case 'metadata.annotations["openshift.io/requester"]':
o = _.orderBy(n, [ b, c ], [ d, "asc" ]);
break;

default:
o = _.orderBy(n, [ b ], [ d ]);
}
t = b;
}, y = function() {
x(), v();
};
a.sortConfig = {
fields: [ {
id: 'metadata.annotations["openshift.io/display-name"]',
title: m.getString(l("Display Name")),
sortType: "alpha"
}, {
id: "metadata.name",
title: m.getString(l("Name")),
sortType: "alpha"
}, {
id: 'metadata.annotations["openshift.io/requester"]',
title: m.getString(l("Creator")),
sortType: "alpha"
}, {
id: "metadata.creationTimestamp",
title: m.getString(l("Creation Date")),
sortType: "alpha"
} ],
isAscending: !0,
<<<<<<< 75fc56b9e42e29e1492befd08624dd0e5dade866
<<<<<<< 247459038ac366429876741dd447ec652f2f5e7d
<<<<<<< a19b22733566f12a68db59a49bc16848fffba594
<<<<<<< 46344541d4f20e3585d6ea01425f784292c0d84a
onSortChange: y
};
var z = function(b) {
n = _.toArray(b.by("metadata.name")), a.loading = !1, a.showGetStarted = _.isEmpty(n) && !a.isProjectListIncomplete, y();
}, A = function() {
s || k.list().then(z);
};
a.newProjectPanelShown = !1, a.createProject = function(b) {
for (var c = _.get(b, "target"); c && !angular.element(c).hasClass("btn"); ) c = c.parentElement;
a.popupElement = c, a.newProjectPanelShown = !0;
}, a.closeNewProjectPanel = function() {
a.newProjectPanelShown = !1;
}, a.onNewProject = function() {
a.newProjectPanelShown = !1, A();
}, a.editProjectPanelShown = !1, a.editProject = function(b) {
a.editingProject = b, a.editProjectPanelShown = !0;
}, a.closeEditProjectPanel = function() {
a.editProjectPanelShown = !1;
}, a.onEditProject = function() {
a.editProjectPanelShown = !1, A();
}, a.onDeleteProject = A, a.goToProject = function(a) {
i.toProjectOverview(a);
}, a.$watch("search.text", _.debounce(function(b) {
a.keywords = r = h.generateKeywords(b), a.$applyAsync(v);
}, 350)), f.withUser().then(function() {
k.list().then(function(b) {
a.isProjectListIncomplete = k.isProjectListIncomplete(), z(b), !a.isProjectListIncomplete && _.size(n) <= p && (q.push(k.watch(a, z)), s = !0);
}, function() {
a.isProjectListIncomplete = !0, a.loading = !1, n = [], y();
});
}), k.canCreate().then(function() {
a.canCreate = !0;
}, function(b) {
a.canCreate = !1;
var c = b.data || {};
if (403 !== b.status) {
var d = "Failed to determine create project permission";
return 0 !== b.status && (d += " (" + b.status + ")"), void j.warn(d);
}
if (c.details) {
var e = [];
_.forEach(c.details.causes || [], function(a) {
a.message && e.push(a.message);
}), _.isEmpty(e) || (a.newProjectMessage = e.join("\n"));
=======
onSortChange: C
=======
onSortChange: S
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
onSortChange: C
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
=======
onSortChange: C
>>>>>>> Adding label filter to ste secrets page
};
var w = function(t) {
d = _.toArray(t.by("metadata.name")), e.loading = !1, e.showGetStarted = _.isEmpty(d) && !e.isProjectListIncomplete, C();
}, P = function() {
g || u.list().then(w);
};
e.newProjectPanelShown = !1, e.createProject = function(t) {
for (var n = _.get(t, "target"); n && !angular.element(n).hasClass("btn"); ) n = n.parentElement;
e.popupElement = n, e.newProjectPanelShown = !0;
}, e.closeNewProjectPanel = function() {
e.newProjectPanelShown = !1;
}, e.onNewProject = function() {
e.newProjectPanelShown = !1, P();
}, e.editProjectPanelShown = !1, e.editProject = function(t) {
e.editingProject = t, e.editProjectPanelShown = !0;
}, e.closeEditProjectPanel = function() {
e.editProjectPanelShown = !1;
}, e.onEditProject = function() {
e.editProjectPanelShown = !1, P();
}, e.onDeleteProject = P, e.goToProject = function(e) {
c.toProjectOverview(e);
}, e.$watch("search.text", _.debounce(function(t) {
e.keywords = f = s.generateKeywords(t), e.$applyAsync(y);
}, 350)), o.withUser().then(function() {
u.list().then(function(t) {
e.isProjectListIncomplete = u.isProjectListIncomplete(), w(t), !e.isProjectListIncomplete && _.size(d) <= 250 && (p.push(u.watch(e, w)), g = !0);
}, function() {
e.isProjectListIncomplete = !0, e.loading = !1, d = [], C();
});
}), u.canCreate().then(function() {
e.canCreate = !0;
}, function(t) {
e.canCreate = !1;
var n = t.data || {};
if (403 !== t.status) {
var r = "Failed to determine create project permission";
return 0 !== t.status && (r += " (" + t.status + ")"), void l.warn(r);
}
if (n.details) {
var a = [];
_.forEach(n.details.causes || [], function(e) {
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
e.message && r.push(e.message);
}), _.isEmpty(r) || (e.newProjectMessage = r.join("\n"));
>>>>>>> Service instance details configuration and edit
}
}), a.$on("$destroy", function() {
g.unwatchAll(q);
});
<<<<<<< 95206a3cd766f0f406b7c662340a8a718268b5cc
} ]), angular.module("openshiftConsole").controller("PodsController", [ "$routeParams", "$scope", "DataService", "ProjectsService", "$filter", "LabelFilter", "Logger", function(a, b, c, d, e, f, g) {
b.projectName = a.project, b.pods = {}, b.unfilteredPods = {}, b.labelSuggestions = {}, b.clearFilter = function() {
f.clear();
};
var h = [];
d.get(a.project).then(_.spread(function(a, d) {
function e() {
b.filterWithZeroResults = !f.getLabelSelector().isEmpty() && _.isEmpty(b.pods) && !_.isEmpty(b.unfilteredPods);
}
b.project = a, h.push(c.watch("pods", d, function(a) {
b.podsLoaded = !0, b.unfilteredPods = a.by("metadata.name"), b.pods = f.getLabelSelector().select(b.unfilteredPods), f.addLabelSuggestionsFromResources(b.unfilteredPods, b.labelSuggestions), f.setLabelSuggestions(b.labelSuggestions), e(), g.log("pods (subscribe)", b.unfilteredPods);
})), f.onActiveFiltersChanged(function(a) {
b.$evalAsync(function() {
b.pods = a.select(b.unfilteredPods), e();
=======
}), angular.module("openshiftConsole").controller("LandingPageController", [ "$scope", "$rootScope", "AuthService", "Catalog", "Constants", "Navigate", "NotificationsService", "RecentlyViewedServiceItems", "GuidedTourService", "HTMLService", "$timeout", "$routeParams", "$location", function(e, t, n, a, r, o, i, s, c, l, u, d, m) {
function p() {
if (f) if (d.startTour) u(function() {
m.replace(), m.search("startTour", null), e.startGuidedTour();
}, 500); else if (_.get(g, "auto_launch")) {
var n = "openshift/viewedHomePage/" + t.user.metadata.name;
"true" !== localStorage.getItem(n) && u(function() {
e.startGuidedTour() && localStorage.setItem(n, "true");
}, 500);
}
}
var g = _.get(r, "GUIDED_TOURS.landing_page_tour"), f = g && g.enabled && g.steps;
e.saasOfferings = r.SAAS_OFFERINGS, e.viewMembership = function(e) {
o.toProjectMembership(e.metadata.name);
}, f && (e.startGuidedTour = function() {
return !l.isWindowBelowBreakpoint(l.WINDOW_SIZE_SM) && (c.startTour(g.steps), !0);
}), i.clearNotifications();
var h = function() {
var t = _.get(e, "template.metadata.uid");
t && s.addItem(t);
};
e.templateSelected = function(t) {
e.template = t;
}, e.templateDialogClosed = function() {
h(), e.template = null;
}, n.withUser().then(function() {
var t = !_.get(r, "ENABLE_TECH_PREVIEW_FEATURE.template_service_broker");
a.getCatalogItems(t).then(_.spread(function(t, n) {
if (n) {
var a = {
type: "error",
message: n
};
i.addNotification(a);
}
e.catalogItems = t, p();
}));
}), e.$on("$destroy", function() {
h();
}), f && e.$on("$locationChangeStart", function(t) {
m.search().startTour && (e.startGuidedTour(), t.preventDefault());
=======
s.addNotification(a);
}
e.catalogItems = t, f();
}));
}), e.$on("$destroy", function() {
y();
}), v && e.$on("$locationChangeStart", function(t) {
g.search().startTour && (e.startGuidedTour(), t.preventDefault());
>>>>>>> Bug 1471033 - Only request template metadata
});
} ]), angular.module("openshiftConsole").controller("ProjectsController", [ "$scope", "$filter", "$location", "$route", "$timeout", "AuthService", "DataService", "KeywordService", "Logger", "ProjectsService", function(e, t, n, a, r, o, i, s, c, l) {
var u, d, m = [], p = [];
e.alerts = e.alerts || {}, e.loading = !0, e.showGetStarted = !1, e.canCreate = void 0, e.search = {
text: ""
};
var g, f = [ "metadata.name", 'metadata.annotations["openshift.io/display-name"]', 'metadata.annotations["openshift.io/description"]', 'metadata.annotations["openshift.io/requester"]' ], h = function() {
e.projects = s.filterForKeywords(d, f, p);
}, v = t("displayName"), y = function() {
var t = _.get(e, "sortConfig.currentField.id");
g !== t && (e.sortConfig.isAscending = "metadata.creationTimestamp" !== t);
var n = function(e) {
return v(e).toLowerCase();
}, a = e.sortConfig.isAscending ? "asc" : "desc";
switch (t) {
case 'metadata.annotations["openshift.io/display-name"]':
d = _.orderBy(u, [ n, "metadata.name" ], [ a ]);
break;

case 'metadata.annotations["openshift.io/requester"]':
d = _.orderBy(u, [ t, n ], [ a, "asc" ]);
break;

default:
d = _.orderBy(u, [ t ], [ a ]);
}
g = t;
}, b = function() {
y(), h();
=======
} ]), angular.module("openshiftConsole").controller("ProjectsController", [ "$scope", "$filter", "$location", "$route", "$timeout", "AuthService", "DataService", "KeywordService", "Navigate", "Logger", "ProjectsService", function(e, t, n, a, r, o, i, s, c, l, u) {
var d, m, p = [], g = [], f = !1;
e.alerts = e.alerts || {}, e.loading = !0, e.showGetStarted = !1, e.canCreate = void 0, e.search = {
text: ""
}, e.limitListTo = 250;
var h, v = [ "metadata.name", 'metadata.annotations["openshift.io/display-name"]', 'metadata.annotations["openshift.io/description"]', 'metadata.annotations["openshift.io/requester"]' ], y = function() {
e.projects = s.filterForKeywords(m, v, g);
}, b = t("displayName"), C = function() {
var t = _.get(e, "sortConfig.currentField.id");
h !== t && (e.sortConfig.isAscending = "metadata.creationTimestamp" !== t);
var n = function(e) {
return b(e).toLowerCase();
}, a = e.sortConfig.isAscending ? "asc" : "desc";
switch (t) {
case 'metadata.annotations["openshift.io/display-name"]':
m = _.orderBy(d, [ n, "metadata.name" ], [ a ]);
break;

case 'metadata.annotations["openshift.io/requester"]':
m = _.orderBy(d, [ t, n ], [ a, "asc" ]);
break;

default:
m = _.orderBy(d, [ t ], [ a ]);
=======
p = _.orderBy(d, [ t ], [ a ]);
>>>>>>> Updates for Service Instance & Bindings
}
h = t;
}, S = function() {
C(), y();
>>>>>>> Bug 1481127 - More robust handling of large project lists
};
e.sortConfig = {
fields: [ {
id: 'metadata.annotations["openshift.io/display-name"]',
title: "Display Name",
sortType: "alpha"
}, {
id: "metadata.name",
title: "Name",
sortType: "alpha"
}, {
id: 'metadata.annotations["openshift.io/requester"]',
title: "Creator",
sortType: "alpha"
}, {
id: "metadata.creationTimestamp",
title: "Creation Date",
sortType: "alpha"
} ],
isAscending: !0,
onSortChange: S
};
var w = function(t) {
d = _.toArray(t.by("metadata.name")), e.loading = !1, e.showGetStarted = _.isEmpty(d) && !e.isProjectListIncomplete, S();
}, k = function() {
g || u.list().then(w);
};
e.newProjectPanelShown = !1, e.createProject = function(t) {
for (var n = _.get(t, "target"); n && !angular.element(n).hasClass("btn"); ) n = n.parentElement;
e.popupElement = n, e.newProjectPanelShown = !0;
}, e.closeNewProjectPanel = function() {
e.newProjectPanelShown = !1;
}, e.onNewProject = function() {
e.newProjectPanelShown = !1, k();
}, e.editProjectPanelShown = !1, e.editProject = function(t) {
e.editingProject = t, e.editProjectPanelShown = !0;
}, e.closeEditProjectPanel = function() {
e.editProjectPanelShown = !1;
}, e.onEditProject = function() {
e.editProjectPanelShown = !1, k();
}, e.onDeleteProject = k, e.goToProject = function(e) {
c.toProjectOverview(e);
}, e.$watch("search.text", _.debounce(function(t) {
e.keywords = f = s.generateKeywords(t), e.$applyAsync(y);
}, 350)), o.withUser().then(function() {
u.list().then(function(t) {
e.isProjectListIncomplete = u.isProjectListIncomplete(), w(t), !e.isProjectListIncomplete && _.size(d) <= 250 && (p.push(u.watch(e, w)), g = !0);
}, function() {
e.isProjectListIncomplete = !0, e.loading = !1, d = [], S();
});
}), u.canCreate().then(function() {
e.canCreate = !0;
}, function(t) {
e.canCreate = !1;
var n = t.data || {};
if (403 !== t.status) {
var a = "Failed to determine create project permission";
return 0 !== t.status && (a += " (" + t.status + ")"), void l.warn(a);
}
if (n.details) {
var r = [];
_.forEach(n.details.causes || [], function(e) {
e.message && r.push(e.message);
}), _.isEmpty(r) || (e.newProjectMessage = r.join("\n"));
=======
e.message && a.push(e.message);
}), _.isEmpty(a) || (e.newProjectMessage = a.join("\n"));
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}
}), e.$on("$destroy", function() {
i.unwatchAll(p);
});
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
} ]), angular.module("openshiftConsole").controller("PodsController", [ "$routeParams", "$scope", "DataService", "ProjectsService", "$filter", "LabelFilter", "Logger", function(e, t, n, a, r, o, i) {
t.projectName = e.project, t.pods = {}, t.unfilteredPods = {}, t.labelSuggestions = {}, t.clearFilter = function() {
o.clear();
};
var s = [];
a.get(e.project).then(_.spread(function(e, a) {
function r() {
t.filterWithZeroResults = !o.getLabelSelector().isEmpty() && _.isEmpty(t.pods) && !_.isEmpty(t.unfilteredPods);
}
t.project = e, s.push(n.watch("pods", a, function(e) {
t.podsLoaded = !0, t.unfilteredPods = e.by("metadata.name"), t.pods = o.getLabelSelector().select(t.unfilteredPods), o.addLabelSuggestionsFromResources(t.unfilteredPods, t.labelSuggestions), o.setLabelSuggestions(t.labelSuggestions), r(), i.log("pods (subscribe)", t.unfilteredPods);
})), o.onActiveFiltersChanged(function(e) {
t.$evalAsync(function() {
t.pods = e.select(t.unfilteredPods), r();
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
} ]), angular.module("openshiftConsole").controller("PodsController", [ "$filter", "$routeParams", "$scope", "APIService", "DataService", "ProjectsService", "LabelFilter", "Logger", function(e, t, n, a, r, o, i, s) {
=======
} ]), angular.module("openshiftConsole").controller("PodsController", [ "$filter", "$routeParams", "$scope", "APIService", "DataService", "ProjectsService", "LabelFilter", "Logger", function(e, t, n, r, a, o, i, s) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
n.projectName = t.project, n.pods = {}, n.unfilteredPods = {}, n.labelSuggestions = {}, n.clearFilter = function() {
i.clear();
};
var c = r.getPreferredVersion("pods"), l = [];
o.get(t.project).then(_.spread(function(e, t) {
function r() {
n.filterWithZeroResults = !i.getLabelSelector().isEmpty() && _.isEmpty(n.pods) && !_.isEmpty(n.unfilteredPods);
}
n.project = e, l.push(a.watch(c, t, function(e) {
n.podsLoaded = !0, n.unfilteredPods = e.by("metadata.name"), n.pods = i.getLabelSelector().select(n.unfilteredPods), i.addLabelSuggestionsFromResources(n.unfilteredPods, n.labelSuggestions), i.setLabelSuggestions(n.labelSuggestions), r(), s.log("pods (subscribe)", n.unfilteredPods);
})), i.onActiveFiltersChanged(function(e) {
n.$evalAsync(function() {
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
n.pods = e.select(n.unfilteredPods), a();
>>>>>>> Update pods controller to use getPreferredVersion
=======
n.pods = e.select(n.unfilteredPods), r();
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
});
}), n.$on("$destroy", function() {
a.unwatchAll(l);
});
}));
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< 2ce32f87748ff2fe030a6b53ff9490fcb80d856d
<<<<<<< 9bc0af8cb56dcc9609307333b9424f396867cab5
<<<<<<< 602d786018a3879a89789b1214b36a15c51b928b
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
} ]), angular.module("openshiftConsole").controller("PodController", [ "$scope", "$filter", "$routeParams", "$timeout", "$uibModal", "Logger", "DataService", "FullscreenService", "ImageStreamResolver", "MetricsService", "OwnerReferencesService", "PodsService", "ProjectsService", function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
a.projectName = c.project, a.pod = null, a.imageStreams = {}, a.imagesByDockerReference = {}, a.imageStreamImageRefByDockerReference = {}, a.builds = {}, a.alerts = {}, a.terminalDisconnectAlert = {}, a.renderOptions = a.renderOptions || {}, a.renderOptions.hideFilterWidget = !0, a.logOptions = {}, a.terminalTabWasSelected = !1, a.breadcrumbs = [ {
title: "Pods",
link: "project/" + c.project + "/browse/pods"
}, {
title: c.pod
} ], a.terminalDisconnectAlert.disconnect = {
type: "warning",
message: "This terminal has been disconnected. If you reconnect, your terminal history will be lost."
}, a.noContainersYet = !0, a.selectedTab = {};
var n = [], o = null;
j.isAvailable().then(function(b) {
a.metricsAvailable = b;
});
var p = function() {
if (a.pod) {
var b = _.find(a.pod.status.containerStatuses, {
name: a.logOptions.container
}), c = _.get(b, "state"), d = _.head(_.keys(c)), e = _.includes([ "running", "waiting", "terminated" ], d) ? d : "", f = _.get(b, "lastState"), g = _.head(_.keys(f)), h = _.get(b, "state.waiting");
angular.extend(a, {
containerStatusKey: e,
containerStateReason: _.get(c, [ d, "reason" ])
}), h ? angular.extend(a, {
lasStatusKey: g,
containerStartTime: _.get(f, [ g, "startedAt" ]),
containerEndTime: _.get(f, [ g, "finishedAt" ])
}) : angular.extend(a, {
containerStartTime: _.get(c, [ d, "startedAt" ]),
containerEndTime: _.get(c, [ d, "finishedAt" ])
});
}
}, q = function() {
var a = $("<span>").css({
position: "absolute",
top: "-100px"
}).addClass("terminal-font").text(_.repeat("x", 10)).appendTo("body"), b = {
width: a.width() / 10,
height: a.height()
};
return a.remove(), b;
}, r = q(), s = $(window), t = function(b) {
b || (b = 0), r.height && r.width && a.selectedTab.terminal && !(b > 10) && a.$apply(function() {
var c = $(".container-terminal-wrapper").get(0);
if (!c) return void d(function() {
t(b + 1);
=======
} ]), angular.module("openshiftConsole").controller("PodController", [ "$scope", "$filter", "$routeParams", "$timeout", "$uibModal", "Logger", "DataService", "FullscreenService", "ImageStreamResolver", "MetricsService", "OwnerReferencesService", "PodsService", "ProjectsService", function(e, t, n, a, r, o, i, s, c, l, u, d, m) {
=======
} ]), angular.module("openshiftConsole").controller("PodController", [ "$scope", "$filter", "$routeParams", "$timeout", "$uibModal", "Logger", "DataService", "FullscreenService", "ImageStreamResolver", "MetricsService", "OwnerReferencesService", "PodsService", "ProjectsService", function(e, t, n, a, r, o, i, s, c, l, u, d, p) {
>>>>>>> Updates for Service Instance & Bindings
=======
} ]), angular.module("openshiftConsole").controller("PodController", [ "$scope", "$filter", "$routeParams", "$timeout", "$uibModal", "Logger", "DataService", "FullscreenService", "ImageStreamResolver", "MetricsService", "OwnerReferencesService", "PodsService", "ProjectsService", function(e, t, n, a, r, o, i, s, c, l, u, d, m) {
>>>>>>> Support EnvFrom in the Env Editors
e.projectName = n.project, e.pod = null, e.imageStreams = {}, e.imagesByDockerReference = {}, e.imageStreamImageRefByDockerReference = {}, e.builds = {}, e.alerts = {}, e.terminalDisconnectAlert = {}, e.renderOptions = e.renderOptions || {}, e.renderOptions.hideFilterWidget = !0, e.logOptions = {}, e.terminalTabWasSelected = !1, e.breadcrumbs = [ {
=======
} ]), angular.module("openshiftConsole").controller("PodController", [ "$filter", "$routeParams", "$scope", "$timeout", "$uibModal", "APIService", "DataService", "FullscreenService", "ImageStreamResolver", "Logger", "MetricsService", "OwnerReferencesService", "PodsService", "ProjectsService", function(e, t, n, a, r, o, i, s, c, l, u, d, m, p) {
=======
} ]), angular.module("openshiftConsole").controller("PodController", [ "$filter", "$routeParams", "$scope", "$timeout", "$uibModal", "APIService", "DataService", "FullscreenService", "ImageStreamResolver", "Logger", "MetricsService", "OwnerReferencesService", "PodsService", "ProjectsService", function(e, t, n, r, a, o, i, s, c, l, u, d, m, p) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
n.projectName = t.project, n.pod = null, n.imageStreams = {}, n.imagesByDockerReference = {}, n.imageStreamImageRefByDockerReference = {}, n.builds = {}, n.alerts = {}, n.terminalDisconnectAlert = {}, n.renderOptions = n.renderOptions || {}, n.renderOptions.hideFilterWidget = !0, n.logOptions = {}, n.terminalTabWasSelected = !1, n.breadcrumbs = [ {
>>>>>>> Update pod controller to use getPreferredVersion
title: "Pods",
link: "project/" + t.project + "/browse/pods"
}, {
title: t.pod
} ], n.terminalDisconnectAlert.disconnect = {
type: "warning",
message: "This terminal has been disconnected. If you reconnect, your terminal history will be lost."
}, n.noContainersYet = !0, n.selectedTab = {};
var f = o.getPreferredVersion("imagestreams"), g = o.getPreferredVersion("builds");
n.podsVersion = o.getPreferredVersion("pods"), n.podsLogVersion = o.getPreferredVersion("pods/log"), n.eventsVersion = o.getPreferredVersion("events"), n.deploymentConfigsVersion = o.getPreferredVersion("deploymentconfigs");
var v = [], h = null;
u.isAvailable().then(function(e) {
n.metricsAvailable = e;
});
var y = function() {
if (n.pod) {
var e = _.find(n.pod.status.containerStatuses, {
name: n.logOptions.container
}), t = _.get(e, "state"), r = _.head(_.keys(t)), a = _.includes([ "running", "waiting", "terminated" ], r) ? r : "", o = _.get(e, "lastState"), i = _.head(_.keys(o)), s = _.get(e, "state.waiting");
angular.extend(n, {
containerStatusKey: a,
containerStateReason: _.get(t, [ r, "reason" ])
}), s ? angular.extend(n, {
lasStatusKey: i,
containerStartTime: _.get(o, [ i, "startedAt" ]),
containerEndTime: _.get(o, [ i, "finishedAt" ])
}) : angular.extend(n, {
containerStartTime: _.get(t, [ r, "startedAt" ]),
containerEndTime: _.get(t, [ r, "finishedAt" ])
});
}
}, b = function() {
var e = $("<span>").css({
position: "absolute",
top: "-100px"
}).addClass("terminal-font").text(_.repeat("x", 10)).appendTo("body"), t = {
width: e.width() / 10,
height: e.height()
};
return e.remove(), t;
}(), S = $(window), C = function(e) {
e || (e = 0), b.height && b.width && n.selectedTab.terminal && !(e > 10) && n.$apply(function() {
var t = $(".container-terminal-wrapper").get(0);
if (t) {
var a = t.getBoundingClientRect();
if (0 !== a.left || 0 !== a.top || 0 !== a.width || 0 !== a.height) {
var o = S.width(), i = S.height(), s = o - a.left - 54, c = i - a.top - 36;
n.terminalCols = Math.max(_.floor(s / b.width), 80), n.terminalRows = Math.max(_.floor(c / b.height), 24);
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
} else a(function() {
<<<<<<< 2ce32f87748ff2fe030a6b53ff9490fcb80d856d
y(t + 1);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
=======
} else r(function() {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
C(e + 1);
>>>>>>> Update pod controller to use getPreferredVersion
}, 50);
} else r(function() {
C(e + 1);
}, 50);
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
<<<<<<< f56378c1e748449074be8738ae159f02ed953303
var f = s.width(), g = s.height(), h = f - e.left - 54, i = g - e.top - 36;
=======
var f = s.width(), g = s.height(), h = f - e.left - 40, i = g - e.top - 50;
>>>>>>> Create reusable edit-environment-variables component
a.terminalCols = Math.max(_.floor(h / r.width), 80), a.terminalRows = Math.max(_.floor(i / r.height), 24);
});
};
a.$watch("selectedTab.terminal", function(a) {
<<<<<<< f56378c1e748449074be8738ae159f02ed953303
a ? (r.height && r.width ? $(window).on("resize.terminalsize", _.debounce(t, 100)) : f.warn("Unable to calculate the bounding box for a character.  Terminal will not be able to resize."), d(t, 0)) : $(window).off("resize.terminalsize");
=======
a ? (r.height && r.width ? $(window).on("resize.terminalsize", _.debounce(t, 100)) :f.warn("Unable to calculate the bounding box for a character.  Terminal will not be able to resize."), d(t, 0)) :$(window).off("resize.terminalsize");
>>>>>>> Create reusable edit-environment-variables component
}), a.onTerminalSelectChange = function(b) {
_.each(a.containerTerminals, function(a) {
a.isVisible = !1;
}), b.isVisible = !0, b.isUsed = !0, a.selectedTerminalContainer = b;
};
var u = function(a) {
var b = _.get(a, "state", {});
return _.head(_.keys(b));
}, v = function() {
var b = [];
_.each(a.pod.spec.containers, function(c) {
var d = _.find(a.pod.status.containerStatuses, {
<<<<<<< f56378c1e748449074be8738ae159f02ed953303
name: c.name
=======
name:c.name
>>>>>>> Create reusable edit-environment-variables component
}), e = u(d);
b.push({
containerName: c.name,
isVisible: !1,
isUsed: !1,
containerState: e
});
});
var c = _.head(b);
return c.isVisible = !0, c.isUsed = !0, a.selectedTerminalContainer = c, b;
}, w = function(b) {
a.noContainersYet && (a.noContainersYet = 0 === a.containersRunning(b.status.containerStatuses));
}, x = function(b) {
_.each(b, function(b) {
var c = _.find(a.pod.status.containerStatuses, {
<<<<<<< f56378c1e748449074be8738ae159f02ed953303
name: b.containerName
=======
name:b.containerName
>>>>>>> Create reusable edit-environment-variables component
}), d = u(c);
b.containerState = d;
});
}, y = b("annotation"), z = function(b, c) {
if (a.loaded = !0, a.pod = b, a.dcName = y(b, "deploymentConfig"), a.rcName = y(b, "deployment"), a.deploymentVersion = y(b, "deploymentVersion"), a.logCanRun = !_.includes([ "New", "Pending", "Unknown" ], b.status.phase), p(), delete a.controllerRef, !a.dcName) {
var d = k.getControllerReferences(b);
a.controllerRef = _.find(d, function(a) {
return "ReplicationController" === a.kind || "ReplicaSet" === a.kind || "Build" === a.kind;
});
}
"DELETED" === c && (a.alerts.deleted = {
=======
});
};
n.$watch("selectedTab.terminal", function(e) {
e ? (b.height && b.width ? $(window).on("resize.terminalsize", _.debounce(C, 100)) : l.warn("Unable to calculate the bounding box for a character.  Terminal will not be able to resize."), r(C, 0)) : $(window).off("resize.terminalsize");
}), n.onTerminalSelectChange = function(e) {
_.each(n.containerTerminals, function(e) {
e.isVisible = !1;
}), e.isVisible = !0, e.isUsed = !0, n.selectedTerminalContainer = e;
};
var w = function(e) {
var t = _.get(e, "state", {});
return _.head(_.keys(t));
}, P = function() {
var e = [];
_.each(n.pod.spec.containers, function(t) {
var r = _.find(n.pod.status.containerStatuses, {
name: t.name
}), a = w(r);
e.push({
containerName: t.name,
isVisible: !1,
isUsed: !1,
containerState: a
});
});
var t = _.head(e);
return t.isVisible = !0, t.isUsed = !0, n.selectedTerminalContainer = t, e;
}, j = function(e) {
n.noContainersYet && (n.noContainersYet = 0 === n.containersRunning(e.status.containerStatuses));
}, k = function(e) {
_.each(e, function(e) {
var t = _.find(n.pod.status.containerStatuses, {
name: e.containerName
}), r = w(t);
e.containerState = r;
});
}, I = e("annotation"), R = function(e, t) {
if (n.loaded = !0, n.pod = e, n.dcName = I(e, "deploymentConfig"), n.rcName = I(e, "deployment"), n.deploymentVersion = I(e, "deploymentVersion"), n.logCanRun = !_.includes([ "New", "Pending", "Unknown" ], e.status.phase), y(), delete n.controllerRef, !n.dcName) {
var r = d.getControllerReferences(e);
n.controllerRef = _.find(r, function(e) {
return "ReplicationController" === e.kind || "ReplicaSet" === e.kind || "Build" === e.kind;
});
}
<<<<<<< 2ce32f87748ff2fe030a6b53ff9490fcb80d856d
"DELETED" === n && (e.alerts.deleted = {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
"DELETED" === t && (n.alerts.deleted = {
>>>>>>> Update pod controller to use getPreferredVersion
type: "warning",
message: "This pod has been deleted."
});
};
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< 2ce32f87748ff2fe030a6b53ff9490fcb80d856d
<<<<<<< 9bc0af8cb56dcc9609307333b9424f396867cab5
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
m.get(c.project).then(_.spread(function(d, j) {
o = j, a.project = d, a.projectContext = j, g.get("pods", c.pod, j, {
<<<<<<< f56378c1e748449074be8738ae159f02ed953303
errorNotification: !1
=======
errorNotification:!1
>>>>>>> Create reusable edit-environment-variables component
}).then(function(b) {
z(b);
var d = {};
d[b.metadata.name] = b, a.logOptions.container = c.container || b.spec.containers[0].name, a.containerTerminals = v(), w(b), i.fetchReferencedImageStreamImages(d, a.imagesByDockerReference, a.imageStreamImageRefByDockerReference, o), n.push(g.watchObject("pods", c.pod, j, function(b, c) {
z(b, c), x(a.containerTerminals), w(b);
}));
}, function(c) {
a.loaded = !0, a.alerts.load = {
type: "error",
message: "The pod details could not be loaded.",
details: b("getErrorDetails")(c)
};
}), a.$watch("logOptions.container", p), n.push(g.watch("imagestreams", j, function(b) {
a.imageStreams = b.by("metadata.name"), i.buildDockerRefMapForImageStreams(a.imageStreams, a.imageStreamImageRefByDockerReference), i.fetchReferencedImageStreamImages(a.pods, a.imagesByDockerReference, a.imageStreamImageRefByDockerReference, j), f.log("imagestreams (subscribe)", a.imageStreams);
})), n.push(g.watch("builds", j, function(b) {
a.builds = b.by("metadata.name"), f.log("builds (subscribe)", a.builds);
}));
var k, m = function() {
var c = a.debugPod;
k && (g.unwatch(k), k = null), $(window).off("beforeunload.debugPod"), c && (g["delete"]("pods", c.metadata.name, j, {
<<<<<<< f56378c1e748449074be8738ae159f02ed953303
gracePeriodSeconds: 0
=======
gracePeriodSeconds:0
>>>>>>> Create reusable edit-environment-variables component
}).then(_.noop, function(d) {
a.alerts["debug-container-error"] = {
type: "error",
message: "Could not delete pod " + c.metadata.name,
details: b("getErrorDetails")(d)
};
}), a.debugPod = null);
}, q = function() {
$(".terminal:visible").focus();
};
a.hasFullscreen = h.hasFullscreen(!0), a.fullscreenTerminal = function() {
h.requestFullscreen("#container-terminal-wrapper"), setTimeout(q);
}, a.exitFullscreen = function() {
h.exitFullscreen();
}, a.debugTerminal = function(c) {
var d = l.generateDebugPod(a.pod, c);
return d ? void g.create("pods", null, d, j).then(function(b) {
var f = _.find(a.pod.spec.containers, {
name: c
});
a.debugPod = b, $(window).on("beforeunload.debugPod", function() {
return "Are you sure you want to leave with the debug terminal open? The debug pod will not be deleted unless you close the dialog.";
}), k = g.watchObject("pods", d.metadata.name, j, function(b) {
a.debugPod = b;
});
var h = e.open({
<<<<<<< f56378c1e748449074be8738ae159f02ed953303
animation: !0,
templateUrl: "views/modals/debug-terminal.html",
controller: "DebugTerminalModalController",
scope: a,
resolve: {
container: function() {
=======
animation:!0,
templateUrl:"views/modals/debug-terminal.html",
controller:"DebugTerminalModalController",
scope:a,
resolve:{
container:function() {
>>>>>>> Create reusable edit-environment-variables component
return f;
},
image: function() {
return _.get(a, [ "imagesByDockerReference", f.image ]);
}
},
backdrop: "static"
});
h.result.then(m);
}, function(d) {
a.alerts["debug-container-error"] = {
type: "error",
message: "Could not debug container " + c,
details: b("getErrorDetails")(d)
};
<<<<<<< 602d786018a3879a89789b1214b36a15c51b928b
}) : void (a.alerts["debug-container-error"] = {
type: "error",
message: "Could not debug container " + c
});
}, a.containersRunning = function(a) {
var b = 0;
return a && a.forEach(function(a) {
a.state && a.state.running && b++;
}), b;
}, a.$on("$destroy", function() {
g.unwatchAll(n), m(), $(window).off("resize.terminalsize");
});
}));
} ]), angular.module("openshiftConsole").controller("OverviewController", [ "$scope", "$filter", "$q", "$routeParams", "AlertMessageService", "APIService", "AppsService", "BindingService", "BuildsService", "CatalogService", "Constants", "DataService", "DeploymentsService", "HPAService", "HTMLService", "ImageStreamResolver", "KeywordService", "LabelFilter", "Logger", "MetricsService", "Navigate", "OwnerReferencesService", "PodsService", "ProjectsService", "PromiseUtils", "ResourceAlertsService", "RoutesService", "ServiceInstancesService", "gettext", OverviewController ]), angular.module("openshiftConsole").controller("QuotaController", [ "$filter", "$routeParams", "$scope", "DataService", "ProjectsService", "Logger", "gettext", "gettextCatalog", function(a, b, c, d, e, f, g, h) {
c.projectName = b.project, c.limitRanges = {}, c.limitsByType = {}, c.labelSuggestions = {}, c.alerts = c.alerts || {}, c.quotaHelp = h.getString(g("Limits resource usage within this project.")), c.emptyMessageLimitRanges = g("Loading..."), c.limitRangeHelp = h.getString(g("Defines minimum and maximum constraints for runtime resources such as memory and CPU.")), c.renderOptions = c.renderOptions || {}, c.renderOptions.hideFilterWidget = !0;
var i = [], j = a("usageValue");
c.isAtLimit = function(a, b) {
var c = a.status.total || a.status, d = j(_.get(c, [ "hard", b ]));
if (!d) return !1;
var e = j(_.get(c, [ "used", b ]));
return !!e && e >= d;
};
var k = a("humanizeQuotaResource"), l = function(a, b) {
return "cpu" === a || "requests.cpu" === a ? "cpu" === b || "requests.cpu" === b ? 0 : -1 : "cpu" === b || "requests.cpu" === b ? 1 : "memory" === a || "requests.memory" === a ? "memory" === b || "requests.memory" === b ? 0 : -1 : "memory" === b || "requests.memory" === b ? 1 : "limits.cpu" === a ? "limits.cpu" === b ? 0 : -1 : "limits.cpu" === b ? 1 : "limits.memory" === a ? "limits.memory" === b ? 0 : -1 : "limits.memory" === b ? 1 : (a = k(a), b = k(b), a.localeCompare(b));
}, m = function(a) {
var b = {};
return _.each(a, function(a) {
var c = _.get(a, "spec.quota.hard") || _.get(a, "spec.hard"), d = _.keys(c).sort(l);
b[a.metadata.name] = d;
}), b;
};
e.get(b.project).then(_.spread(function(a, e) {
c.project = a, d.list("resourcequotas", e).then(function(a) {
c.quotas = _.sortBy(a.by("metadata.name"), "metadata.name"), c.orderedTypesByQuota = m(c.quotas), f.log("quotas", c.quotas);
}), d.list("appliedclusterresourcequotas", e).then(function(a) {
c.clusterQuotas = _.sortBy(a.by("metadata.name"), "metadata.name"), c.orderedTypesByClusterQuota = m(c.clusterQuotas), c.namespaceUsageByClusterQuota = {}, _.each(c.clusterQuotas, function(a) {
if (a.status) {
var d = _.find(a.status.namespaces, {
namespace: b.project
});
c.namespaceUsageByClusterQuota[a.metadata.name] = d.status;
}
}), f.log("cluster quotas", c.clusterQuotas);
}), d.list("limitranges", e).then(function(a) {
c.limitRanges = _.sortBy(a.by("metadata.name"), "metadata.name"), c.emptyMessageLimitRanges = g("There are no limit ranges set on this project."), angular.forEach(c.limitRanges, function(a) {
var b = a.metadata.name;
c.limitsByType[b] = {}, angular.forEach(a.spec.limits, function(a) {
var d = c.limitsByType[b][a.type] = {};
angular.forEach(a.max, function(a, b) {
d[b] = d[b] || {}, d[b].max = a;
}), angular.forEach(a.min, function(a, b) {
d[b] = d[b] || {}, d[b].min = a;
}), angular.forEach(a["default"], function(a, b) {
d[b] = d[b] || {}, d[b]["default"] = a;
}), angular.forEach(a.defaultRequest, function(a, b) {
d[b] = d[b] || {}, d[b].defaultRequest = a;
}), angular.forEach(a.maxLimitRequestRatio, function(a, b) {
d[b] = d[b] || {}, d[b].maxLimitRequestRatio = a;
});
});
}), f.log("limitRanges", c.limitRanges);
}), c.$on("$destroy", function() {
d.unwatchAll(i);
});
}));
} ]), angular.module("openshiftConsole").controller("MonitoringController", [ "$routeParams", "$location", "$scope", "$filter", "BuildsService", "DataService", "ImageStreamResolver", "KeywordService", "Logger", "MetricsService", "Navigate", "PodsService", "ProjectsService", "$rootScope", "gettext", function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
c.projectName = a.project, c.alerts = c.alerts || {}, c.renderOptions = c.renderOptions || {}, c.renderOptions.showEventsSidebar = !0, c.renderOptions.collapseEventsSidebar = "true" === localStorage.getItem("monitoring.eventsidebar.collapsed");
var p = d("isIE")(), q = 6e4, r = [];
c.kinds = [ {
kind: o("All")
=======
m.get(n.project).then(_.spread(function(a, l) {
=======
p.get(n.project).then(_.spread(function(a, l) {
>>>>>>> Updates for Service Instance & Bindings
=======
m.get(n.project).then(_.spread(function(a, l) {
>>>>>>> Support EnvFrom in the Env Editors
f = l, e.project = a, e.projectContext = l, i.get("pods", n.pod, l, {
=======
p.get(t.project).then(_.spread(function(a, o) {
h = o, n.project = a, n.projectContext = o, i.get(n.podsVersion, t.pod, o, {
>>>>>>> Update pod controller to use getPreferredVersion
=======
p.get(t.project).then(_.spread(function(r, o) {
h = o, n.project = r, n.projectContext = o, i.get(n.podsVersion, t.pod, o, {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
errorNotification: !1
}).then(function(e) {
R(e);
var r = {};
r[e.metadata.name] = e, n.logOptions.container = t.container || e.spec.containers[0].name, n.containerTerminals = P(), j(e), c.fetchReferencedImageStreamImages(r, n.imagesByDockerReference, n.imageStreamImageRefByDockerReference, h), v.push(i.watchObject(n.podsVersion, t.pod, o, function(e, t) {
R(e, t), k(n.containerTerminals), j(e);
}));
}, function(t) {
n.loaded = !0, n.alerts.load = {
type: "error",
message: "The pod details could not be loaded.",
details: e("getErrorDetails")(t)
};
}), n.$watch("logOptions.container", y), v.push(i.watch(f, o, function(e) {
n.imageStreams = e.by("metadata.name"), c.buildDockerRefMapForImageStreams(n.imageStreams, n.imageStreamImageRefByDockerReference), c.fetchReferencedImageStreamImages(n.pods, n.imagesByDockerReference, n.imageStreamImageRefByDockerReference, o), l.log("imagestreams (subscribe)", n.imageStreams);
})), v.push(i.watch(g, o, function(e) {
n.builds = e.by("metadata.name"), l.log("builds (subscribe)", n.builds);
}));
var u, d = function() {
var t = n.debugPod;
u && (i.unwatch(u), u = null), $(window).off("beforeunload.debugPod"), t && (i.delete(n.podsVersion, t.metadata.name, o, {
gracePeriodSeconds: 0
}).then(_.noop, function(r) {
n.alerts["debug-container-error"] = {
type: "error",
message: "Could not delete pod " + t.metadata.name,
details: e("getErrorDetails")(r)
};
}), n.debugPod = null);
}, p = function() {
$(".terminal:visible").focus();
};
n.hasFullscreen = s.hasFullscreen(!0), n.fullscreenTerminal = function() {
s.requestFullscreen("#container-terminal-wrapper"), setTimeout(p);
}, n.exitFullscreen = function() {
s.exitFullscreen();
}, n.debugTerminal = function(t) {
var r = m.generateDebugPod(n.pod, t);
r ? i.create(n.podsVersion, null, r, o).then(function(e) {
var s = _.find(n.pod.spec.containers, {
name: t
});
n.debugPod = e, $(window).on("beforeunload.debugPod", function() {
return "Are you sure you want to leave with the debug terminal open? The debug pod will not be deleted unless you close the dialog.";
}), u = i.watchObject(n.podsVersion, r.metadata.name, o, function(e) {
n.debugPod = e;
}), a.open({
animation: !0,
templateUrl: "views/modals/debug-terminal.html",
controller: "DebugTerminalModalController",
scope: n,
resolve: {
container: function() {
return s;
},
image: function() {
return _.get(n, [ "imagesByDockerReference", s.image ]);
}
},
backdrop: "static"
}).result.then(d);
}, function(r) {
n.alerts["debug-container-error"] = {
type: "error",
message: "Could not debug container " + t,
details: e("getErrorDetails")(r)
};
}) : n.alerts["debug-container-error"] = {
type: "error",
message: "Could not debug container " + t
};
}, n.containersRunning = function(e) {
var t = 0;
return e && e.forEach(function(e) {
e.state && e.state.running && t++;
}), t;
}, n.$on("$destroy", function() {
i.unwatchAll(v), d(), $(window).off("resize.terminalsize");
});
}));
} ]), angular.module("openshiftConsole").controller("OverviewController", [ "$scope", "$filter", "$q", "$location", "$routeParams", "AlertMessageService", "APIService", "AppsService", "BindingService", "BuildsService", "CatalogService", "Constants", "DataService", "DeploymentsService", "HPAService", "HTMLService", "ImageStreamResolver", "KeywordService", "LabelFilter", "Logger", "MetricsService", "Navigate", "OwnerReferencesService", "PodsService", "ProjectsService", "PromiseUtils", "ResourceAlertsService", "RoutesService", "ServiceInstancesService", OverviewController ]), angular.module("openshiftConsole").controller("QuotaController", [ "$filter", "$routeParams", "$scope", "APIService", "DataService", "Logger", "ProjectsService", function(e, t, n, r, a, o, i) {
n.projectName = t.project, n.limitRanges = {}, n.limitsByType = {}, n.labelSuggestions = {}, n.alerts = n.alerts || {}, n.quotaHelp = "Limits resource usage within this project.", n.emptyMessageLimitRanges = "Loading...", n.limitRangeHelp = "Defines minimum and maximum constraints for runtime resources such as memory and CPU.", n.renderOptions = n.renderOptions || {}, n.renderOptions.hideFilterWidget = !0;
var s = r.getPreferredVersion("appliedclusterresourcequotas"), c = r.getPreferredVersion("resourcequotas"), l = r.getPreferredVersion("limitranges"), u = [], d = e("usageValue");
n.isAtLimit = function(e, t) {
var n = e.status.total || e.status, r = d(_.get(n, [ "hard", t ]));
if (!r) return !1;
var a = d(_.get(n, [ "used", t ]));
return !!a && a >= r;
};
var m = e("humanizeQuotaResource"), p = function(e, t) {
return "cpu" === e || "requests.cpu" === e ? "cpu" === t || "requests.cpu" === t ? 0 : -1 : "cpu" === t || "requests.cpu" === t ? 1 : "memory" === e || "requests.memory" === e ? "memory" === t || "requests.memory" === t ? 0 : -1 : "memory" === t || "requests.memory" === t ? 1 : "limits.cpu" === e ? "limits.cpu" === t ? 0 : -1 : "limits.cpu" === t ? 1 : "limits.memory" === e ? "limits.memory" === t ? 0 : -1 : "limits.memory" === t ? 1 : (e = m(e), t = m(t), e.localeCompare(t));
}, f = function(e) {
var t = {};
return _.each(e, function(e) {
var n = _.get(e, "spec.quota.hard") || _.get(e, "spec.hard"), r = _.keys(n).sort(p);
t[e.metadata.name] = r;
}), t;
};
i.get(t.project).then(_.spread(function(e, r) {
n.project = e, a.list(c, r).then(function(e) {
n.quotas = _.sortBy(e.by("metadata.name"), "metadata.name"), n.orderedTypesByQuota = f(n.quotas), o.log("quotas", n.quotas);
}), a.list(s, r).then(function(e) {
n.clusterQuotas = _.sortBy(e.by("metadata.name"), "metadata.name"), n.orderedTypesByClusterQuota = f(n.clusterQuotas), n.namespaceUsageByClusterQuota = {}, _.each(n.clusterQuotas, function(e) {
if (e.status) {
var r = _.find(e.status.namespaces, {
namespace: t.project
});
n.namespaceUsageByClusterQuota[e.metadata.name] = r.status;
}
}), o.log("cluster quotas", n.clusterQuotas);
}), a.list(l, r).then(function(e) {
n.limitRanges = _.sortBy(e.by("metadata.name"), "metadata.name"), n.emptyMessageLimitRanges = "There are no limit ranges set on this project.", angular.forEach(n.limitRanges, function(e) {
var t = e.metadata.name;
n.limitsByType[t] = {}, angular.forEach(e.spec.limits, function(e) {
var r = n.limitsByType[t][e.type] = {};
angular.forEach(e.max, function(e, t) {
r[t] = r[t] || {}, r[t].max = e;
}), angular.forEach(e.min, function(e, t) {
r[t] = r[t] || {}, r[t].min = e;
}), angular.forEach(e.default, function(e, t) {
r[t] = r[t] || {}, r[t].default = e;
}), angular.forEach(e.defaultRequest, function(e, t) {
r[t] = r[t] || {}, r[t].defaultRequest = e;
}), angular.forEach(e.maxLimitRequestRatio, function(e, t) {
r[t] = r[t] || {}, r[t].maxLimitRequestRatio = e;
});
});
}), o.log("limitRanges", n.limitRanges);
}), n.$on("$destroy", function() {
a.unwatchAll(u);
});
}));
} ]), angular.module("openshiftConsole").controller("MonitoringController", [ "$routeParams", "$location", "$scope", "$filter", "BuildsService", "DataService", "ImageStreamResolver", "KeywordService", "Logger", "MetricsService", "Navigate", "PodsService", "ProjectsService", "$rootScope", function(e, t, n, r, a, o, i, s, c, l, u, d, m, p) {
n.projectName = e.project, n.alerts = n.alerts || {}, n.renderOptions = n.renderOptions || {}, n.renderOptions.showEventsSidebar = !0, n.renderOptions.collapseEventsSidebar = "true" === localStorage.getItem("monitoring.eventsidebar.collapsed");
var f = r("isIE")(), g = [];
n.kinds = [ {
kind: "All"
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
}, {
kind: "Pods"
}, {
label: "Deployments",
kind: "ReplicationControllers"
}, {
kind: "Builds"
}, {
kind: "StatefulSets"
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
} ], c.kindSelector = {
selected: _.find(c.kinds, {
kind: a.kind
}) || _.head(c.kinds)
}, c.logOptions = {
=======
} ], n.kindSelector = {
selected: _.find(n.kinds, {
kind: e.kind
}) || _.head(n.kinds)
}, n.logOptions = {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
pods: {},
replicationControllers: {},
builds: {},
statefulSets: {}
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
}, c.logCanRun = {
=======
}, n.logCanRun = {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
pods: {},
replicationControllers: {},
builds: {},
statefulSets: {}
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
}, c.logEmpty = {
=======
}, n.logEmpty = {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
pods: {},
replicationControllers: {},
builds: {},
statefulSets: {}
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
}, c.expanded = {
=======
}, n.expanded = {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
pods: {},
replicationControllers: {},
replicaSets: {},
builds: {},
statefulSets: {}
};
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< 5968d52e2c8691c9334d0811cd6fcba946ef1ac7
<<<<<<< 33eb37eab8df0c17bc226501a924a2dc2b9b2f41
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
var s = d("isNil");
c.filters = {
hideOlderResources: s(a.hideOlderResources) || "true" === a.hideOlderResources,
text: ""
};
var t, u, v, w;
j.isAvailable().then(function(a) {
c.metricsAvailable = a;
});
var x = d("orderObjectsByDate"), y = [ "metadata.name" ], z = [], A = function() {
c.filteredPods = h.filterForKeywords(w, y, z), c.filteredReplicationControllers = h.filterForKeywords(u, y, z), c.filteredReplicaSets = h.filterForKeywords(v, y, z), c.filteredBuilds = h.filterForKeywords(t, y, z), c.filteredStatefulSets = h.filterForKeywords(_.values(c.statefulSets), y, z);
}, B = function(a) {
c.logOptions.pods[a.metadata.name] = {
container: a.spec.containers[0].name
}, c.logCanRun.pods[a.metadata.name] = !_.includes([ "New", "Pending", "Unknown" ], a.status.phase);
}, C = function(a) {
c.logOptions.replicationControllers[a.metadata.name] = {};
var b = d("annotation")(a, "deploymentVersion");
b && (c.logOptions.replicationControllers[a.metadata.name].version = b), c.logCanRun.replicationControllers[a.metadata.name] = !_.includes([ "New", "Pending" ], d("deploymentStatus")(a));
}, D = function(a) {
c.logOptions.builds[a.metadata.name] = {}, c.logCanRun.builds[a.metadata.name] = !_.includes([ "New", "Pending", "Error" ], a.status.phase);
}, E = function() {
c.filteredStatefulSets = h.filterForKeywords(_.values(c.statefulSets), y, z);
}, F = function() {
w = _.filter(c.pods, function(a) {
return !c.filters.hideOlderResources || "Succeeded" !== a.status.phase && "Failed" !== a.status.phase;
}), c.filteredPods = h.filterForKeywords(w, y, z);
}, G = d("isIncompleteBuild"), H = d("buildConfigForBuild"), I = d("isRecentBuild"), J = function() {
moment().subtract(5, "m");
t = _.filter(c.builds, function(a) {
if (!c.filters.hideOlderResources) return !0;
if (G(a)) return !0;
var b = H(a);
return b ? c.latestBuildByConfig[b].metadata.name === a.metadata.name : I(a);
}), c.filteredBuilds = h.filterForKeywords(t, y, z);
}, K = d("deploymentStatus"), L = d("deploymentIsInProgress"), M = function() {
u = _.filter(c.replicationControllers, function(a) {
return !c.filters.hideOlderResources || (L(a) || "Active" === K(a));
}), c.filteredReplicationControllers = h.filterForKeywords(u, y, z);
}, N = function() {
v = _.filter(c.replicaSets, function(a) {
return !c.filters.hideOlderResources || _.get(a, "status.replicas");
}), c.filteredReplicaSets = h.filterForKeywords(v, y, z);
};
c.toggleItem = function(a, b, e) {
var f = $(a.target);
if (!f || !f.closest("a", b).length) {
var g, h;
switch (e.kind) {
case "Build":
g = !c.expanded.builds[e.metadata.name], c.expanded.builds[e.metadata.name] = g, h = g ? "event.resource.highlight" : "event.resource.clear-highlight", n.$emit(h, e);
var i = _.get(c.podsByName, d("annotation")(e, "buildPod"));
i && n.$emit(h, i);
break;

case "ReplicationController":
g = !c.expanded.replicationControllers[e.metadata.name], c.expanded.replicationControllers[e.metadata.name] = g, h = g ? "event.resource.highlight" : "event.resource.clear-highlight", n.$emit(h, e);
var j = d("annotation")(e, "deployerPod");
j && n.$emit(h, {
kind: "Pod",
metadata: {
name: j
=======
var f = a("isNil");
=======
var g = a("isNil");
>>>>>>> Patternfly vertical navigation and project bar
=======
var v = a("isNil");
>>>>>>> Allow unlimited websockets on Edge - also fix leaking websockets on monitoring page
=======
var v = r("isNil");
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
n.filters = {
hideOlderResources: v(e.hideOlderResources) || "true" === e.hideOlderResources,
text: ""
};
var h, y, b, S;
l.isAvailable().then(function(e) {
n.metricsAvailable = e;
});
var C = r("orderObjectsByDate"), w = [ "metadata.name" ], P = [], j = function() {
n.filteredPods = s.filterForKeywords(S, w, P), n.filteredReplicationControllers = s.filterForKeywords(y, w, P), n.filteredReplicaSets = s.filterForKeywords(b, w, P), n.filteredBuilds = s.filterForKeywords(h, w, P), n.filteredStatefulSets = s.filterForKeywords(_.values(n.statefulSets), w, P);
}, k = function(e) {
n.logOptions.pods[e.metadata.name] = {
container: e.spec.containers[0].name
}, n.logCanRun.pods[e.metadata.name] = !_.includes([ "New", "Pending", "Unknown" ], e.status.phase);
}, I = function(e) {
n.logOptions.replicationControllers[e.metadata.name] = {};
var t = r("annotation")(e, "deploymentVersion");
t && (n.logOptions.replicationControllers[e.metadata.name].version = t), n.logCanRun.replicationControllers[e.metadata.name] = !_.includes([ "New", "Pending" ], r("deploymentStatus")(e));
}, R = function(e) {
n.logOptions.builds[e.metadata.name] = {}, n.logCanRun.builds[e.metadata.name] = !_.includes([ "New", "Pending", "Error" ], e.status.phase);
}, E = function() {
n.filteredStatefulSets = s.filterForKeywords(_.values(n.statefulSets), w, P);
}, T = function() {
S = _.filter(n.pods, function(e) {
return !n.filters.hideOlderResources || "Succeeded" !== e.status.phase && "Failed" !== e.status.phase;
}), n.filteredPods = s.filterForKeywords(S, w, P);
}, N = r("isIncompleteBuild"), D = r("buildConfigForBuild"), A = r("isRecentBuild"), B = function() {
moment().subtract(5, "m");
h = _.filter(n.builds, function(e) {
if (!n.filters.hideOlderResources) return !0;
if (N(e)) return !0;
var t = D(e);
return t ? n.latestBuildByConfig[t].metadata.name === e.metadata.name : A(e);
}), n.filteredBuilds = s.filterForKeywords(h, w, P);
}, L = r("deploymentStatus"), V = r("deploymentIsInProgress"), U = function() {
y = _.filter(n.replicationControllers, function(e) {
return !n.filters.hideOlderResources || (V(e) || "Active" === L(e));
}), n.filteredReplicationControllers = s.filterForKeywords(y, w, P);
}, O = function() {
b = _.filter(n.replicaSets, function(e) {
return !n.filters.hideOlderResources || _.get(e, "status.replicas");
}), n.filteredReplicaSets = s.filterForKeywords(b, w, P);
};
n.toggleItem = function(e, t, a, o) {
var i = $(e.target);
if (o || !i || !i.closest("a", t).length) {
var s, c;
switch (a.kind) {
case "Build":
s = !n.expanded.builds[a.metadata.name], n.expanded.builds[a.metadata.name] = s, c = s ? "event.resource.highlight" : "event.resource.clear-highlight", p.$emit(c, a);
var l = _.get(n.podsByName, r("annotation")(a, "buildPod"));
l && p.$emit(c, l);
break;

case "ReplicationController":
s = !n.expanded.replicationControllers[a.metadata.name], n.expanded.replicationControllers[a.metadata.name] = s, c = s ? "event.resource.highlight" : "event.resource.clear-highlight", p.$emit(c, a);
var u = r("annotation")(a, "deployerPod");
u && p.$emit(c, {
kind: "Pod",
metadata: {
<<<<<<< fe16a6e429c93aa50d8bc5da7b91ea5e273b7593
name: l
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
name: u
>>>>>>> Rework monitoring page - replace list-view-pf with list-pf markup structure and css
}
}), _.each(n.podsByOwnerUID[a.metadata.uid], function(e) {
p.$emit(c, e);
});
break;

case "ReplicaSet":
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< fe16a6e429c93aa50d8bc5da7b91ea5e273b7593
<<<<<<< 9bc0af8cb56dcc9609307333b9424f396867cab5
<<<<<<< 602d786018a3879a89789b1214b36a15c51b928b
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
g = !c.expanded.replicaSets[e.metadata.name], c.expanded.replicaSets[e.metadata.name] = g, h = g ? "event.resource.highlight" : "event.resource.clear-highlight", n.$emit(h, e), _.each(c.podsByOwnerUID[e.metadata.uid], function(a) {
n.$emit(h, a);
=======
i = !n.expanded.replicaSets[r.metadata.name], n.expanded.replicaSets[r.metadata.name] = i, s = i ? "event.resource.highlight" : "event.resource.clear-highlight", p.$emit(s, r), _.each(n.podsByOwnerUID[r.metadata.uid], function(e) {
p.$emit(s, e);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
i = !n.expanded.replicaSets[r.metadata.name], n.expanded.replicaSets[r.metadata.name] = i, s = i ? "event.resource.highlight" : "event.resource.clear-highlight", m.$emit(s, r), _.each(n.podsByOwnerUID[r.metadata.uid], function(e) {
m.$emit(s, e);
>>>>>>> Updates for Service Instance & Bindings
=======
i = !n.expanded.replicaSets[r.metadata.name], n.expanded.replicaSets[r.metadata.name] = i, s = i ? "event.resource.highlight" : "event.resource.clear-highlight", p.$emit(s, r), _.each(n.podsByOwnerUID[r.metadata.uid], function(e) {
p.$emit(s, e);
>>>>>>> Support EnvFrom in the Env Editors
=======
s = !n.expanded.replicaSets[r.metadata.name], n.expanded.replicaSets[r.metadata.name] = s, c = s ? "event.resource.highlight" : "event.resource.clear-highlight", p.$emit(c, r), _.each(n.podsByOwnerUID[r.metadata.uid], function(e) {
=======
s = !n.expanded.replicaSets[a.metadata.name], n.expanded.replicaSets[a.metadata.name] = s, c = s ? "event.resource.highlight" : "event.resource.clear-highlight", p.$emit(c, a), _.each(n.podsByOwnerUID[a.metadata.uid], function(e) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
p.$emit(c, e);
>>>>>>> Rework monitoring page - replace list-view-pf with list-pf markup structure and css
});
break;

case "Pod":
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< fe16a6e429c93aa50d8bc5da7b91ea5e273b7593
<<<<<<< 9bc0af8cb56dcc9609307333b9424f396867cab5
<<<<<<< 602d786018a3879a89789b1214b36a15c51b928b
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
g = !c.expanded.pods[e.metadata.name], c.expanded.pods[e.metadata.name] = g, h = g ? "event.resource.highlight" : "event.resource.clear-highlight", n.$emit(h, e);
break;

case "StatefulSet":
g = !c.expanded.statefulSets[e.metadata.name], c.expanded.statefulSets[e.metadata.name] = g, h = g ? "event.resource.highlight" : "event.resource.clear-highlight", n.$emit(h, e);
}
}
}, c.viewPodsForSet = function(a) {
var b = _.get(c, [ "podsByOwnerUID", a.metadata.uid ], []);
_.isEmpty(b) || k.toPodsForDeployment(a, b);
}, m.get(a.project).then(_.spread(function(a, d) {
c.project = a, c.projectContext = d, r.push(f.watch("pods", d, function(a) {
c.podsByName = a.by("metadata.name"), c.pods = x(c.podsByName, !0), c.podsByOwnerUID = l.groupByOwnerUID(c.pods), c.podsLoaded = !0, _.each(c.pods, B), F(), i.log("pods", c.pods);
})), r.push(f.watch({
resource: "statefulsets",
group: "apps",
version: "v1beta1"
}, d, function(a) {
c.statefulSets = a.by("metadata.name"), c.statefulSetsLoaded = !0, E(), i.log("statefulSets", c.statefulSets);
}, {
poll: p,
pollInterval: q
})), r.push(f.watch("replicationcontrollers", d, function(a) {
c.replicationControllers = x(a.by("metadata.name"), !0), c.replicationControllersLoaded = !0, _.each(c.replicationControllers, C), M(), i.log("replicationcontrollers", c.replicationControllers);
})), r.push(f.watch("builds", d, function(a) {
c.builds = x(a.by("metadata.name"), !0), c.latestBuildByConfig = e.latestBuildByConfig(c.builds), c.buildsLoaded = !0, _.each(c.builds, D), J(), i.log("builds", c.builds);
})), r.push(f.watch({
group: "extensions",
resource: "replicasets"
}, d, function(a) {
c.replicaSets = x(a.by("metadata.name"), !0), c.replicaSetsLoaded = !0, N(), i.log("replicasets", c.replicaSets);
}, {
poll: p,
pollInterval: q
})), c.$on("$destroy", function() {
f.unwatchAll(r);
}), c.$watch("filters.hideOlderResources", function() {
F(), J(), M(), N(), E();
var a = b.search();
a.hideOlderResources = c.filters.hideOlderResources ? "true" : "false", b.replace().search(a);
}), c.$watch("kindSelector.selected.kind", function() {
var a = b.search();
a.kind = c.kindSelector.selected.kind, b.replace().search(a);
}), c.$watch("filters.text", _.debounce(function() {
c.filterKeywords = z = h.generateKeywords(c.filters.text), c.$apply(A);
}, 50, {
maxWait: 250
})), c.$watch("renderOptions.collapseEventsSidebar", function(a, b) {
a !== b && (localStorage.setItem("monitoring.eventsidebar.collapsed", c.renderOptions.collapseEventsSidebar ? "true" : "false"), n.$emit("metrics.charts.resize"));
});
}));
} ]), angular.module("openshiftConsole").controller("MembershipController", [ "$filter", "$location", "$routeParams", "$scope", "$timeout", "$uibModal", "AuthService", "AuthorizationService", "DataService", "ProjectsService", "MembershipService", "NotificationsService", "RoleBindingsService", "RolesService", "gettext", "gettextCatalog", function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
var q, r = c.project, s = a("humanizeKind"), t = a("annotation"), u = a("canI"), v = [], w = {
notice: {
yourLastRole: _.template(p.getString(o('Removing the role "<%= roleName %>" may completely remove your ability to see this project.')))
},
warning: {
serviceAccount: _.template(p.getString(o("Removing a system role granted to a service account may cause unexpected behavior.")))
=======
i = !n.expanded.pods[r.metadata.name], n.expanded.pods[r.metadata.name] = i, s = i ? "event.resource.highlight" : "event.resource.clear-highlight", p.$emit(s, r);
=======
i = !n.expanded.pods[r.metadata.name], n.expanded.pods[r.metadata.name] = i, s = i ? "event.resource.highlight" : "event.resource.clear-highlight", m.$emit(s, r);
>>>>>>> Updates for Service Instance & Bindings
=======
i = !n.expanded.pods[r.metadata.name], n.expanded.pods[r.metadata.name] = i, s = i ? "event.resource.highlight" : "event.resource.clear-highlight", p.$emit(s, r);
>>>>>>> Support EnvFrom in the Env Editors
=======
s = !n.expanded.pods[r.metadata.name], n.expanded.pods[r.metadata.name] = s, c = s ? "event.resource.highlight" : "event.resource.clear-highlight", p.$emit(c, r);
>>>>>>> Rework monitoring page - replace list-view-pf with list-pf markup structure and css
=======
s = !n.expanded.pods[a.metadata.name], n.expanded.pods[a.metadata.name] = s, c = s ? "event.resource.highlight" : "event.resource.clear-highlight", p.$emit(c, a);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
break;

case "StatefulSet":
s = !n.expanded.statefulSets[a.metadata.name], n.expanded.statefulSets[a.metadata.name] = s, c = s ? "event.resource.highlight" : "event.resource.clear-highlight", p.$emit(c, a);
}
}
}, n.viewPodsForSet = function(e) {
var t = _.get(n, [ "podsByOwnerUID", e.metadata.uid ], []);
_.isEmpty(t) || u.toPodsForDeployment(e, t);
}, m.get(e.project).then(_.spread(function(e, r) {
n.project = e, n.projectContext = r, g.push(o.watch("pods", r, function(e) {
n.podsByName = e.by("metadata.name"), n.pods = C(n.podsByName, !0), n.podsByOwnerUID = d.groupByOwnerUID(n.pods), n.podsLoaded = !0, _.each(n.pods, k), T(), c.log("pods", n.pods);
})), g.push(o.watch({
resource: "statefulsets",
group: "apps",
version: "v1beta1"
}, r, function(e) {
n.statefulSets = e.by("metadata.name"), n.statefulSetsLoaded = !0, E(), c.log("statefulSets", n.statefulSets);
}, {
poll: f,
pollInterval: 6e4
})), g.push(o.watch("replicationcontrollers", r, function(e) {
n.replicationControllers = C(e.by("metadata.name"), !0), n.replicationControllersLoaded = !0, _.each(n.replicationControllers, I), U(), c.log("replicationcontrollers", n.replicationControllers);
})), g.push(o.watch("builds", r, function(e) {
n.builds = C(e.by("metadata.name"), !0), n.latestBuildByConfig = a.latestBuildByConfig(n.builds), n.buildsLoaded = !0, _.each(n.builds, R), B(), c.log("builds", n.builds);
})), g.push(o.watch({
group: "extensions",
resource: "replicasets"
}, r, function(e) {
n.replicaSets = C(e.by("metadata.name"), !0), n.replicaSetsLoaded = !0, O(), c.log("replicasets", n.replicaSets);
}, {
poll: f,
pollInterval: 6e4
})), n.$on("$destroy", function() {
o.unwatchAll(g);
}), n.$watch("filters.hideOlderResources", function() {
T(), B(), U(), O(), E();
var e = t.search();
e.hideOlderResources = n.filters.hideOlderResources ? "true" : "false", t.replace().search(e);
}), n.$watch("kindSelector.selected.kind", function() {
var e = t.search();
e.kind = n.kindSelector.selected.kind, t.replace().search(e);
}), n.$watch("filters.text", _.debounce(function() {
n.filterKeywords = P = s.generateKeywords(n.filters.text), n.$apply(j);
}, 50, {
maxWait: 250
})), n.$watch("renderOptions.collapseEventsSidebar", function(e, t) {
e !== t && (localStorage.setItem("monitoring.eventsidebar.collapsed", n.renderOptions.collapseEventsSidebar ? "true" : "false"), p.$emit("metrics.charts.resize"));
});
}));
} ]), angular.module("openshiftConsole").controller("MembershipController", [ "$filter", "$location", "$routeParams", "$scope", "$timeout", "$uibModal", "APIService", "AuthService", "AuthorizationService", "DataService", "ProjectsService", "MembershipService", "NotificationsService", "RoleBindingsService", "RolesService", function(e, t, n, r, a, o, i, s, c, l, u, d, m, p, f) {
var g, v = n.project, h = e("humanizeKind"), y = e("annotation"), b = e("canI"), S = i.getPreferredVersion("serviceaccounts");
r.roleBindingsVersion = i.getPreferredVersion("rolebindings");
var C = [], w = {
notice: {
yourLastRole: _.template('Removing the role "<%= roleName %>" may completely remove your ability to see this project.')
},
warning: {
serviceAccount: _.template("Removing a system role granted to a service account may cause unexpected behavior.")
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
},
remove: {
areYouSure: {
html: {
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
subject: _.template(p.getString(o("Are you sure you want to remove <strong><%- roleName %></strong> from the <%- kindName %> <strong><%- subjectName %></strong>?"))),
self: _.template(p.getString(o("Are you sure you want to remove <strong><%- roleName %></strong> from <strong><%- subjectName %></strong> (you)?")))
=======
subject: _.template("Are you sure you want to remove <strong><%- roleName %></strong> from the <%- kindName %> <strong><%- subjectName %></strong>?"),
self: _.template("Are you sure you want to remove <strong><%- roleName %></strong> from <strong><%- subjectName %></strong> (you)?")
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
}
},
success: _.template('The role "<%= roleName %>" was removed from "<%= subjectName %>".'),
error: _.template('The role "<%= roleName %>" was not removed from "<%= subjectName %>".')
},
update: {
subject: {
success: _.template('The role "<%= roleName %>" was granted to "<%= subjectName %>".'),
error: _.template('The role "<%= roleName %>" could not be granted to "<%= subjectName %>".'),
exists: _.template('The role "<%= roleName %>" has already been granted to "<%= subjectName %>".')
}
},
errorReason: _.template('Reason: "<%= httpErr %>"')
<<<<<<< 03048c83a11138780b80c1ac333639429e2925cd
<<<<<<< 75fc56b9e42e29e1492befd08624dd0e5dade866
<<<<<<< 247459038ac366429876741dd447ec652f2f5e7d
<<<<<<< a19b22733566f12a68db59a49bc16848fffba594
<<<<<<< 46344541d4f20e3585d6ea01425f784292c0d84a
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
}, x = function(a, b, c) {
l.addNotification({
type: a,
message: b,
details: c
});
}, y = function() {
d.disableAddForm = !1, d.newBinding.name = "", d.newBinding.namespace = r, d.newBinding.newRole = null;
}, z = function(a) {
i.list("serviceaccounts", a).then(function(a) {
var b = _.keys(a.by("metadata.name")).sort();
angular.extend(d, {
serviceAccounts: b,
refreshServiceAccounts: function(a) {
a && !_.includes(d.serviceAccounts, a) ? d.serviceAccounts = [ a ].concat(b) : d.serviceAccounts = b;
}
});
});
}, A = function(a) {
i.list("rolebindings", q, null, {
errorNotification: !1
}).then(function(a) {
angular.extend(d, {
canShowRoles: !0,
roleBindings: a.by("metadata.name"),
subjectKindsForUI: k.mapRolebindingsForUI(a.by("metadata.name"), v)
}), y();
}, function() {
a && (d.roleBindings[a.metadata.name] = a, d.subjectKindsForUI = k.mapRolebindingsForUI(d.roleBindings, v)), y();
});
}, B = function(b, c) {
d.disableAddForm = !0, m.create(b, c, r, q).then(function() {
A(), x("success", w.update.subject.success({
roleName: b.metadata.name,
subjectName: c.name
}));
}, function(d) {
y(), A(), x("error", w.update.subject.error({
roleName: b.metadata.name,
subjectName: c.name
}), w.errorReason({
httpErr: a("getErrorDetails")(d)
}));
});
}, C = function(b, c, e) {
d.disableAddForm = !0, m.addSubject(b, c, e, q).then(function() {
A(), x("success", w.update.subject.success({
roleName: b.roleRef.name,
subjectName: c.name
}));
}, function(d) {
y(), A(), x("error", w.update.subject.error({
roleName: b.roleRef.name,
subjectName: c.name
}), w.errorReason({
httpErr: a("getErrorDetails")(d)
}));
});
}, D = {};
c.tab && (D[c.tab] = !0);
var E = k.getSubjectKinds();
angular.extend(d, {
selectedTab: D,
projectName: r,
=======
}, S = function(e, t, n) {
=======
}, C = function(e, t, n) {
>>>>>>> Service instance details configuration and edit
=======
}, S = function(e, t, n) {
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
}, C = function(e, t, n) {
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
=======
}, C = function(e, t, n) {
>>>>>>> Adding label filter to ste secrets page
d.addNotification({
=======
}, P = function(e, t, n) {
m.addNotification({
>>>>>>> Update membership to use new rbac endpoints
type: e,
message: t,
details: n
});
}, j = function() {
r.disableAddForm = !1, r.newBinding.name = "", r.newBinding.namespace = v, r.newBinding.newRole = null;
}, k = function(e) {
l.list(S, e).then(function(e) {
var t = _.keys(e.by("metadata.name")).sort();
angular.extend(r, {
serviceAccounts: t,
refreshServiceAccounts: function(e) {
e && !_.includes(r.serviceAccounts, e) ? r.serviceAccounts = [ e ].concat(t) : r.serviceAccounts = t;
}
});
});
}, I = function(e) {
l.list(r.roleBindingsVersion, g, null, {
errorNotification: !1
}).then(function(e) {
angular.extend(r, {
canShowRoles: !0,
roleBindings: e.by("metadata.name"),
subjectKindsForUI: d.mapRolebindingsForUI(e.by("metadata.name"), C)
}), j();
}, function() {
e && (r.roleBindings[e.metadata.name] = e, r.subjectKindsForUI = d.mapRolebindingsForUI(r.roleBindings, C)), j();
});
}, R = function(t, n) {
r.disableAddForm = !0, p.create(t, n, v, g).then(function() {
I(), P("success", w.update.subject.success({
roleName: t.metadata.name,
subjectName: n.name
}));
}, function(r) {
j(), I(), P("error", w.update.subject.error({
roleName: t.metadata.name,
subjectName: n.name
}), w.errorReason({
httpErr: e("getErrorDetails")(r)
}));
});
}, E = function(t, n, a) {
r.disableAddForm = !0, p.addSubject(t, n, a, g).then(function() {
I(), P("success", w.update.subject.success({
roleName: t.roleRef.name,
subjectName: n.name
}));
}, function(r) {
j(), I(), P("error", w.update.subject.error({
roleName: t.roleRef.name,
subjectName: n.name
}), w.errorReason({
httpErr: e("getErrorDetails")(r)
}));
});
<<<<<<< 03048c83a11138780b80c1ac333639429e2925cd
}, R = {};
n.tab && (R[n.tab] = !0);
var E = u.getSubjectKinds();
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
angular.extend(a, {
<<<<<<< b4ddc9b550515059b9681d76233c34b7f7b3431c
<<<<<<< 602d786018a3879a89789b1214b36a15c51b928b
<<<<<<< 579cbe4ce2e640c919f9687b5c885f661897db96
selectedTab: E,
<<<<<<< 33eb37eab8df0c17bc226501a924a2dc2b9b2f41
projectName: f,
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
=======
selectedTab: T,
>>>>>>> Add the ability to add a secret to an application
=======
selectedTab: I,
>>>>>>> Updates for Service Instance & Bindings
=======
=======
angular.extend(r, {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
selectedTab: R,
>>>>>>> Add search catalog in project context
projectName: g,
>>>>>>> Patternfly vertical navigation and project bar
=======
}, T = {};
n.tab && (T[n.tab] = !0);
var N = d.getSubjectKinds();
angular.extend(r, {
selectedTab: T,
projectName: v,
>>>>>>> Update membership to use new rbac endpoints
forms: {},
subjectKinds: N,
newBinding: {
role: "",
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
kind: c.tab || "User",
name: ""
},
toggleEditMode: function() {
y(), d.mode.edit = !d.mode.edit;
=======
kind: n.tab || "User",
name: ""
},
toggleEditMode: function() {
<<<<<<< 03048c83a11138780b80c1ac333639429e2925cd
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
w(), a.mode.edit = !a.mode.edit;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
w(), r.mode.edit = !r.mode.edit;
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
=======
j(), r.mode.edit = !r.mode.edit;
>>>>>>> Update membership to use new rbac endpoints
},
mode: {
edit: !1
},
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
selectTab: function(a) {
d.newBinding.kind = a, d.newBinding.name = "";
}
}), angular.extend(d, {
excludeExistingRoles: function(a) {
return function(b) {
return !_.some(a, {
kind: b.kind,
metadata: {
name: b.metadata.name
=======
selectTab: function(e) {
r.newBinding.kind = e, r.newBinding.name = "";
}
}), angular.extend(r, {
excludeExistingRoles: function(e) {
return function(t) {
return !_.some(e, {
kind: t.kind,
metadata: {
name: t.metadata.name
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
}
});
};
},
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
roleHelp: function(a) {
if (a) {
var b = "", c = _.get(a, "metadata.namespace"), d = _.get(a, "metadata.name"), e = c ? c + " / " + d + ": " : "";
return a ? e + (t(a, "description") || b) : b;
}
}
});
<<<<<<< b9f74dc9163281caa65a7366573d340fa288654d
var F = function(a, b, c, e) {
var f = {
=======
var N = function(e, t, n, r) {
=======
roleHelp: function(e) {
if (e) {
var t = _.get(e, "metadata.namespace"), n = _.get(e, "metadata.name"), r = t ? t + " / " + n + ": " : "";
return e ? r + (y(e, "description") || "") : "";
}
}
});
<<<<<<< 03048c83a11138780b80c1ac333639429e2925cd
var T = function(e, t, n, a) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
=======
var D = function(e, t, n, a) {
>>>>>>> Update membership to use new rbac endpoints
var o = {
>>>>>>> Add notification-drawer to show curated list of events to user
alerts: {},
<<<<<<< 03048c83a11138780b80c1ac333639429e2925cd
<<<<<<< 75fc56b9e42e29e1492befd08624dd0e5dade866
detailsMarkup: w.remove.areYouSure.html.subject({
roleName: c,
kindName: p.getString(s(b)),
subjectName: a
=======
detailsMarkup: w.remove.areYouSure.html.subject({
roleName: n,
kindName: h(t),
subjectName: e
>>>>>>> Update membership to use new rbac endpoints
}),
okButtonText: p.getString(o("Remove")),
okButtonClass: "btn-danger",
cancelButtonText: p.getString(o("Cancel"))
};
<<<<<<< 03048c83a11138780b80c1ac333639429e2925cd
return _.isEqual(a, e) && (f.detailsMarkup = w.remove.areYouSure.html.self({
roleName: c,
subjectName: a
}), k.isLastRole(d.user.metadata.name, d.roleBindings) && (f.alerts.currentUserLabelRole = {
type: "error",
message: w.notice.yourLastRole({
roleName: c
})
})), _.isEqual(b, "ServiceAccount") && _.startsWith(c, "system:") && (f.alerts.editingServiceAccountRole = {
type: "error",
message: w.warning.serviceAccount()
}), f;
};
g.withUser().then(function(a) {
d.user = a;
}), j.list().then(function(a) {
var b = _.keys(a.by("metadata.name")).sort();
angular.extend(d, {
projects: b,
selectProject: function(a) {
d.newBinding.name = "", z({
namespace: a
});
},
refreshProjects: function(a) {
a && !_.includes(d.projects, a) ? d.projects = [ a ].concat(b) : d.projects = b;
}
});
}), j.get(c.project).then(_.spread(function(c, e) {
q = e, A(), z(q), angular.extend(d, {
project: c,
subjectKinds: E,
canUpdateRolebindings: u("rolebindings", "update", r),
confirmRemove: function(c, e, g, i) {
var j = null, l = F(c, e, g, d.user.metadata.name);
_.isEqual(c, d.user.metadata.name) && k.isLastRole(d.user.metadata.name, d.roleBindings) && (j = !0), f.open({
=======
roleHelp: function(e) {
if (e) {
var t = _.get(e, "metadata.namespace"), n = _.get(e, "metadata.name"), a = t ? t + " / " + n + ": " : "";
return e ? a + (h(e, "description") || "") : "";
}
}
});
var T = function(e, t, n, r) {
var o = {
alerts: {},
=======
>>>>>>> Adding label filter to ste secrets page
detailsMarkup: S.remove.areYouSure.html.subject({
roleName: n,
kindName: v(t),
subjectName: e
}),
okButtonText: "Remove",
okButtonClass: "btn-danger",
cancelButtonText: "Cancel"
};
return _.isEqual(e, a) && (o.detailsMarkup = S.remove.areYouSure.html.self({
roleName: n,
subjectName: e
}), u.isLastRole(r.user.metadata.name, r.roleBindings) && (o.alerts.currentUserLabelRole = {
type: "error",
message: S.notice.yourLastRole({
=======
return _.isEqual(e, a) && (o.detailsMarkup = w.remove.areYouSure.html.self({
roleName: n,
subjectName: e
}), d.isLastRole(r.user.metadata.name, r.roleBindings) && (o.alerts.currentUserLabelRole = {
type: "error",
message: w.notice.yourLastRole({
>>>>>>> Update membership to use new rbac endpoints
roleName: n
})
})), _.isEqual(t, "ServiceAccount") && _.startsWith(n, "system:") && (o.alerts.editingServiceAccountRole = {
type: "error",
message: w.warning.serviceAccount()
}), o;
};
s.withUser().then(function(e) {
r.user = e;
}), u.list().then(function(e) {
var t = _.keys(e.by("metadata.name")).sort();
angular.extend(r, {
projects: t,
selectProject: function(e) {
r.newBinding.name = "", k({
namespace: e
});
},
refreshProjects: function(e) {
e && !_.includes(r.projects, e) ? r.projects = [ e ].concat(t) : r.projects = t;
}
});
}), u.get(n.project).then(_.spread(function(n, a) {
g = a, I(), k(g), angular.extend(r, {
project: n,
<<<<<<< 03048c83a11138780b80c1ac333639429e2925cd
subjectKinds: E,
canUpdateRolebindings: y("rolebindings", "update", g),
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
confirmRemove: function(n, r, i) {
var c = null, l = T(n, r, i, a.user.metadata.name);
_.isEqual(n, a.user.metadata.name) && u.isLastRole(a.user.metadata.name, a.roleBindings) && (c = !0), o.open({
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
confirmRemove: function(n, a, i, c) {
var l = null, d = T(n, a, i, r.user.metadata.name);
_.isEqual(n, r.user.metadata.name) && u.isLastRole(r.user.metadata.name, r.roleBindings) && (l = !0), o.open({
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
=======
subjectKinds: N,
canUpdateRolebindings: b("rolebindings", "update", v),
confirmRemove: function(n, a, i, s) {
var l = null, u = D(n, a, i, r.user.metadata.name);
_.isEqual(n, r.user.metadata.name) && d.isLastRole(r.user.metadata.name, r.roleBindings) && (l = !0), o.open({
>>>>>>> Update membership to use new rbac endpoints
animation: !0,
templateUrl: "views/modals/confirm.html",
controller: "ConfirmModalController",
resolve: {
modalConfig: function() {
<<<<<<< 03048c83a11138780b80c1ac333639429e2925cd
return l;
}
}
}).result.then(function() {
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< 0c40bfb0d97d474f70b5801c1312be38074c32cb
<<<<<<< 9bc0af8cb56dcc9609307333b9424f396867cab5
<<<<<<< 602d786018a3879a89789b1214b36a15c51b928b
<<<<<<< 33eb37eab8df0c17bc226501a924a2dc2b9b2f41
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
m.removeSubject(c, g, i, d.roleBindings, q).then(function(a) {
j ? b.url("./") : (h.getProjectRules(r, !0).then(function() {
A(a[0]);
var b = u("rolebindings", "update", r);
angular.extend(d, {
canUpdateRolebindings: b,
mode: {
edit: !!d.mode.edit && b
}
});
}), x("success", w.remove.success({
roleName: g,
subjectName: c
})));
}, function(b) {
x("error", w.remove.error({
roleName: g,
subjectName: c
}), w.errorReason({
httpErr: a("getErrorDetails")(b)
=======
m.removeSubject(n, i, a.roleBindings, g).then(function(e) {
c ? t.url("./") : (s.getProjectRules(f, !0).then(function() {
=======
m.removeSubject(n, i, a.roleBindings, f).then(function(e) {
=======
p.removeSubject(n, i, a.roleBindings, f).then(function(e) {
>>>>>>> Updates for Service Instance & Bindings
=======
m.removeSubject(n, i, a.roleBindings, f).then(function(e) {
>>>>>>> Support EnvFrom in the Env Editors
c ? t.url("./") : (s.getProjectRules(g, !0).then(function() {
<<<<<<< 1f5fb674ad14c7e78d2e82e837750bd2747349ab
<<<<<<< a19b22733566f12a68db59a49bc16848fffba594
<<<<<<< d21c662f039266e2dd235fa32bd86d3647c082ae
<<<<<<< 77ce3ebb70d0568ad8fbbb649b8a01f54552ad2c
<<<<<<< 46344541d4f20e3585d6ea01425f784292c0d84a
>>>>>>> Patternfly vertical navigation and project bar
j(e[0]);
=======
P(e[0]);
>>>>>>> Service instance details configuration and edit
=======
j(e[0]);
>>>>>>> Add product icons for service catalog
=======
P(e[0]);
>>>>>>> Handle displaying parameters when secrets are not available.
=======
j(e[0]);
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
P(e[0]);
>>>>>>> Update template service broker flag name
=======
m.removeSubject(n, i, c, a.roleBindings, f).then(function(e) {
=======
m.removeSubject(n, i, c, r.roleBindings, f).then(function(e) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
l ? t.url("./") : (s.getProjectRules(g, !0).then(function() {
<<<<<<< 13ac2d832bc56edf6bc5e2fc652da9b188ddae32
<<<<<<< 2ce32f87748ff2fe030a6b53ff9490fcb80d856d
<<<<<<< 714c4a3ff94bc485f89078ceeb8105e8b94271be
k(e[0]);
>>>>>>> Fix for adding non-builder templates to a project
=======
P(e[0]);
>>>>>>> Bug 1505281 - Improve import YAML results message
=======
k(e[0]);
>>>>>>> Update pod controller to use getPreferredVersion
=======
j(e[0]);
>>>>>>> Add Browse Catalog to Project context view.
var t = y("rolebindings", "update", g);
=======
return u;
}
}
}).result.then(function() {
p.removeSubject(n, i, s, r.roleBindings, g).then(function(e) {
l ? t.url("./") : (c.getProjectRules(v, !0).then(function() {
I(e[0]);
var t = b("rolebindings", "update", v);
>>>>>>> Update membership to use new rbac endpoints
angular.extend(r, {
canUpdateRolebindings: t,
mode: {
edit: !!r.mode.edit && t
}
});
}), P("success", w.remove.success({
roleName: i,
subjectName: n
})));
}, function(t) {
P("error", w.remove.error({
roleName: i,
subjectName: n
}), w.errorReason({
httpErr: e("getErrorDetails")(t)
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
}));
});
});
},
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
addRoleTo: function(a, b, c, e) {
var f = {
name: a,
kind: b
};
"ServiceAccount" === b && (f.namespace = e);
var g = _.find(d.roleBindings, {
roleRef: {
name: c.metadata.name
}
});
g && _.some(g.subjects, f) ? x("error", w.update.subject.exists({
roleName: c.metadata.name,
subjectName: a
})) : g ? C(g, f, e) : B(c, f, e);
}
}), n.listAllRoles(q, {
errorNotification: !1
}).then(function(a) {
v = k.mapRolesForUI(_.head(a).by("metadata.name"), _.last(a).by("metadata.name"));
var b = k.sortRoles(v), c = k.filterRoles(v), e = function(a, b) {
return _.some(b, {
metadata: {
name: a
}
});
};
A(), angular.extend(d, {
toggle: {
roles: !1
},
filteredRoles: c,
toggleRoles: function() {
d.toggle.roles = !d.toggle.roles, d.toggle.roles ? d.filteredRoles = b : (d.filteredRoles = c, e(d.newBinding.role, c) || (d.newBinding.role = null));
=======
addRoleTo: function(e, t, n, r) {
=======
addRoleTo: function(e, t, n, a) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
var o = {
name: e,
kind: t
};
"ServiceAccount" === t && (o.namespace = a);
var i = _.find(r.roleBindings, {
roleRef: {
name: n.metadata.name
}
});
i && _.some(i.subjects, o) ? P("error", w.update.subject.exists({
roleName: n.metadata.name,
subjectName: e
})) : i ? E(i, o, a) : R(n, o);
}
}), f.listAllRoles(g, {
errorNotification: !1
}).then(function(e) {
C = d.mapRolesForUI(_.head(e).by("metadata.name"), _.last(e).by("metadata.name"));
var t = d.sortRoles(C), n = d.filterRoles(C), a = function(e, t) {
return _.some(t, {
metadata: {
name: e
}
});
};
I(), angular.extend(r, {
toggle: {
roles: !1
},
filteredRoles: n,
toggleRoles: function() {
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
a.toggle.roles = !a.toggle.roles, a.toggle.roles ? a.filteredRoles = t : (a.filteredRoles = n, r(a.newBinding.role, n) || (a.newBinding.role = null));
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
r.toggle.roles = !r.toggle.roles, r.toggle.roles ? r.filteredRoles = t : (r.filteredRoles = n, a(r.newBinding.role, n) || (r.newBinding.role = null));
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}
});
});
}));
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< f5b8f5682c5430fbc1da32250e09c7df8cec61c9
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
} ]), angular.module("openshiftConsole").controller("BuildsController", [ "$filter", "$location", "$routeParams", "$scope", "APIService", "BuildsService", "DataService", "LabelFilter", "Logger", "ProjectsService", function(a, b, c, d, e, f, g, h, i, j) {
d.projectName = c.project, d.builds = {}, d.unfilteredBuildConfigs = {}, d.buildConfigs = void 0, d.labelSuggestions = {}, d.latestByConfig = {}, d.clearFilter = function() {
h.clear();
};
var k = a("buildConfigForBuild"), l = e.getPreferredVersion("builds"), m = e.getPreferredVersion("buildconfigs"), n = [];
j.get(c.project).then(_.spread(function(b, c) {
function e(a) {
var b = h.getLabelSelector();
if (b.isEmpty()) return !0;
var c = k(a) || "";
return c && d.unfilteredBuildConfigs[c] ? !!d.buildConfigs[c] : b.matches(a);
}
<<<<<<< c3402a2575d9b360c752c51c219d95fe163ccb12
function j(a) {
var b = k(a);
if (b) return !1;
var c = h.getLabelSelector();
return !!c.isEmpty() || c.matches(a);
}
function o() {
d.latestByConfig = f.latestBuildByConfig(d.builds, e), d.buildsNoConfig = _.pickBy(d.builds, j), angular.forEach(d.buildConfigs, function(a, b) {
d.latestByConfig[b] = d.latestByConfig[b] || null;
});
}
function p() {
var a = _.omitBy(d.latestByConfig, _.isNull);
d.filterWithZeroResults = !h.getLabelSelector().isEmpty() && _.isEmpty(d.buildConfigs) && _.isEmpty(a);
}
d.project = b;
var q = a("isJenkinsPipelineStrategy");
n.push(g.watch(l, c, function(a) {
d.buildsLoaded = !0, d.builds = _.omitBy(a.by("metadata.name"), q), o(), h.addLabelSuggestionsFromResources(d.builds, d.labelSuggestions), i.log("builds (subscribe)", d.builds);
})), n.push(g.watch(m, c, function(a) {
d.unfilteredBuildConfigs = _.omitBy(a.by("metadata.name"), q), h.addLabelSuggestionsFromResources(d.unfilteredBuildConfigs, d.labelSuggestions), h.setLabelSuggestions(d.labelSuggestions), d.buildConfigs = h.getLabelSelector().select(d.unfilteredBuildConfigs), o(), p(), i.log("buildconfigs (subscribe)", d.buildConfigs);
})), h.onActiveFiltersChanged(function(a) {
d.$evalAsync(function() {
d.buildConfigs = a.select(d.unfilteredBuildConfigs), o(), p();
=======
function l(a) {
var b = j(a);
if (b) return !1;
var c = e.getLabelSelector();
return !!c.isEmpty() || c.matches(a);
=======
} ]), angular.module("openshiftConsole").controller("BuildsController", [ "$routeParams", "$scope", "DataService", "$filter", "LabelFilter", "Logger", "$location", "BuildsService", "ProjectsService", function(e, t, n, a, r, o, i, s, c) {
t.projectName = e.project, t.builds = {}, t.unfilteredBuildConfigs = {}, t.buildConfigs = void 0, t.labelSuggestions = {}, t.alerts = t.alerts || {}, t.emptyMessage = "Loading...", t.latestByConfig = {};
var l = a("buildConfigForBuild"), u = [];
c.get(e.project).then(_.spread(function(e, i) {
function c(e) {
var n = r.getLabelSelector();
if (n.isEmpty()) return !0;
var a = l(e) || "";
return a && t.unfilteredBuildConfigs[a] ? !!t.buildConfigs[a] : n.matches(e);
=======
} ]), angular.module("openshiftConsole").controller("BuildsController", [ "$filter", "$location", "$routeParams", "$scope", "APIService", "BuildsService", "DataService", "LabelFilter", "Logger", "ProjectsService", function(e, t, n, a, r, o, i, s, c, l) {
a.projectName = n.project, a.builds = {}, a.unfilteredBuildConfigs = {}, a.buildConfigs = void 0, a.labelSuggestions = {}, a.latestByConfig = {}, a.clearFilter = function() {
=======
} ]), angular.module("openshiftConsole").controller("BuildsController", [ "$filter", "$location", "$routeParams", "$scope", "APIService", "BuildsService", "DataService", "LabelFilter", "Logger", "ProjectsService", function(e, t, n, r, a, o, i, s, c, l) {
r.projectName = n.project, r.builds = {}, r.unfilteredBuildConfigs = {}, r.buildConfigs = void 0, r.labelSuggestions = {}, r.latestByConfig = {}, r.clearFilter = function() {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
s.clear();
};
var u = e("buildConfigForBuild"), d = a.getPreferredVersion("builds"), m = a.getPreferredVersion("buildconfigs"), p = [];
l.get(n.project).then(_.spread(function(t, n) {
function a(e) {
var t = s.getLabelSelector();
if (t.isEmpty()) return !0;
var n = u(e) || "";
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
return n && a.unfilteredBuildConfigs[n] ? !!a.buildConfigs[n] : t.matches(e);
>>>>>>> Update builds controller to use getPreferredVersion
=======
return n && r.unfilteredBuildConfigs[n] ? !!r.buildConfigs[n] : t.matches(e);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}
function l(e) {
if (u(e)) return !1;
var t = s.getLabelSelector();
return !!t.isEmpty() || t.matches(e);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
}
function f() {
r.latestByConfig = o.latestBuildByConfig(r.builds, a), r.buildsNoConfig = _.pickBy(r.builds, l), angular.forEach(r.buildConfigs, function(e, t) {
r.latestByConfig[t] = r.latestByConfig[t] || null;
});
}
<<<<<<< f5b8f5682c5430fbc1da32250e09c7df8cec61c9
<<<<<<< 602d786018a3879a89789b1214b36a15c51b928b
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
function n() {
var a = _.omit(b.latestByConfig, _.isNull);
!e.getLabelSelector().isEmpty() && _.isEmpty(b.buildConfigs) && _.isEmpty(a) ? b.alerts.builds = {
type:"warning",
details:"The active filters are hiding all builds."
} :delete b.alerts.builds;
}
b.project = a;
var o = d("isJenkinsPipelineStrategy");
k.push(c.watch("builds", g, function(a) {
b.builds = _.omit(a.by("metadata.name"), o), b.emptyMessage = "No builds to show", m(), e.addLabelSuggestionsFromResources(b.builds, b.labelSuggestions), f.log("builds (subscribe)", b.builds);
})), k.push(c.watch("buildconfigs", g, function(a) {
b.unfilteredBuildConfigs = _.omit(a.by("metadata.name"), o), e.addLabelSuggestionsFromResources(b.unfilteredBuildConfigs, b.labelSuggestions), e.setLabelSuggestions(b.labelSuggestions), b.buildConfigs = e.getLabelSelector().select(b.unfilteredBuildConfigs), m(), n(), f.log("buildconfigs (subscribe)", b.buildConfigs);
})), e.onActiveFiltersChanged(function(a) {
b.$apply(function() {
b.buildConfigs = a.select(b.unfilteredBuildConfigs), m(), n();
>>>>>>> Fix missing builds with no build config
});
}), d.$on("$destroy", function() {
g.unwatchAll(n);
});
}));
} ]), angular.module("openshiftConsole").controller("PipelinesController", [ "$filter", "$routeParams", "$scope", "Constants", "Navigate", "BuildsService", "DataService", "Logger", "ProjectsService", function(a, b, c, d, e, f, g, h, i) {
c.projectName = b.project, c.alerts = c.alerts || {}, c.buildConfigs = {};
var j = [];
i.get(b.project).then(_.spread(function(b, h) {
c.project = b;
var i = {}, k = a("buildConfigForBuild"), l = a("isIncompleteBuild"), m = a("isJenkinsPipelineStrategy"), n = a("isNewerResource"), o = function(a, b) {
if (!l(b)) {
c.statsByConfig[a] || (c.statsByConfig[a] = {
count: 0,
totalDuration: 0
});
var d = c.statsByConfig[a];
d.count++, d.totalDuration += f.getDuration(b), d.avgDuration = _.round(d.totalDuration / d.count);
}
}, p = function() {
var a = {}, b = {};
c.statsByConfig = {}, _.each(i, function(d) {
if (m(d)) {
var e = k(d) || "";
c.buildConfigs[e] || (c.buildConfigs[e] = null), l(d) ? _.set(a, [ e, d.metadata.name ], d) : n(d, b[e]) && (b[e] = d), o(e, d);
}
}), _.each(b, function(b, c) {
_.set(a, [ c, b.metadata.name ], b);
}), c.interestingBuildsByConfig = a;
};
j.push(g.watch("builds", h, function(a) {
c.buildsLoaded = !0, i = a.by("metadata.name"), p();
}));
var q = !1;
j.push(g.watch("buildconfigs", h, function(a) {
if (c.buildConfigsLoaded = !0, c.buildConfigs = _.pickBy(a.by("metadata.name"), m), _.isEmpty(c.buildConfigs) && !q && (q = !0, d.SAMPLE_PIPELINE_TEMPLATE)) {
var b = d.SAMPLE_PIPELINE_TEMPLATE.name, f = d.SAMPLE_PIPELINE_TEMPLATE.namespace;
g.get("templates", b, {
namespace: f
}, {
errorNotification: !1
}).then(function(a) {
c.createSampleURL = e.createFromTemplateURL(a, c.projectName);
=======
function p() {
=======
function m() {
>>>>>>> Updates for Service Instance & Bindings
var e = _.omitBy(t.latestByConfig, _.isNull);
!r.getLabelSelector().isEmpty() && _.isEmpty(t.buildConfigs) && _.isEmpty(e) ? t.alerts.builds = {
type: "warning",
details: "The active filters are hiding all builds."
} : delete t.alerts.builds;
}
t.project = e;
var f = a("isJenkinsPipelineStrategy");
u.push(n.watch("builds", i, function(e) {
t.builds = _.omitBy(e.by("metadata.name"), f), t.emptyMessage = "No builds to show", p(), r.addLabelSuggestionsFromResources(t.builds, t.labelSuggestions), o.log("builds (subscribe)", t.builds);
})), u.push(n.watch("buildconfigs", i, function(e) {
t.unfilteredBuildConfigs = _.omitBy(e.by("metadata.name"), f), r.addLabelSuggestionsFromResources(t.unfilteredBuildConfigs, t.labelSuggestions), r.setLabelSuggestions(t.labelSuggestions), t.buildConfigs = r.getLabelSelector().select(t.unfilteredBuildConfigs), p(), m(), o.log("buildconfigs (subscribe)", t.buildConfigs);
})), r.onActiveFiltersChanged(function(e) {
t.$apply(function() {
t.buildConfigs = e.select(t.unfilteredBuildConfigs), p(), m();
=======
function g() {
var e = _.omitBy(r.latestByConfig, _.isNull);
r.filterWithZeroResults = !s.getLabelSelector().isEmpty() && _.isEmpty(r.buildConfigs) && _.isEmpty(e);
}
r.project = t;
var v = e("isJenkinsPipelineStrategy");
p.push(i.watch(d, n, function(e) {
r.buildsLoaded = !0, r.builds = _.omitBy(e.by("metadata.name"), v), f(), s.addLabelSuggestionsFromResources(r.builds, r.labelSuggestions), c.log("builds (subscribe)", r.builds);
})), p.push(i.watch(m, n, function(e) {
r.unfilteredBuildConfigs = _.omitBy(e.by("metadata.name"), v), s.addLabelSuggestionsFromResources(r.unfilteredBuildConfigs, r.labelSuggestions), s.setLabelSuggestions(r.labelSuggestions), r.buildConfigs = s.getLabelSelector().select(r.unfilteredBuildConfigs), f(), g(), c.log("buildconfigs (subscribe)", r.buildConfigs);
})), s.onActiveFiltersChanged(function(e) {
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
a.$evalAsync(function() {
a.buildConfigs = e.select(a.unfilteredBuildConfigs), f(), g();
>>>>>>> Update builds controller to use getPreferredVersion
=======
r.$evalAsync(function() {
r.buildConfigs = e.select(r.unfilteredBuildConfigs), f(), g();
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
});
}), r.$on("$destroy", function() {
i.unwatchAll(p);
});
}));
} ]), angular.module("openshiftConsole").controller("PipelinesController", [ "$filter", "$routeParams", "$scope", "APIService", "BuildsService", "Constants", "DataService", "Logger", "Navigate", "ProjectsService", function(e, t, n, r, a, o, i, s, c, l) {
n.projectName = t.project, n.alerts = n.alerts || {}, n.buildConfigs = {};
var u = r.getPreferredVersion("builds"), d = r.getPreferredVersion("templates");
n.buildConfigsVersion = r.getPreferredVersion("buildconfigs"), n.buildConfigsInstantiateVersion = r.getPreferredVersion("buildconfigs/instantiate");
var m = [];
l.get(t.project).then(_.spread(function(t, r) {
n.project = t;
var s = {}, l = e("buildConfigForBuild"), p = e("isIncompleteBuild"), f = e("isJenkinsPipelineStrategy"), g = e("isNewerResource"), v = function(e, t) {
if (!p(t)) {
n.statsByConfig[e] || (n.statsByConfig[e] = {
count: 0,
totalDuration: 0
});
var r = n.statsByConfig[e];
r.count++, r.totalDuration += a.getDuration(t), r.avgDuration = _.round(r.totalDuration / r.count);
}
}, h = function() {
var e = {}, t = {};
n.statsByConfig = {}, _.each(s, function(r) {
if (f(r)) {
var a = l(r) || "";
n.buildConfigs[a] || (n.buildConfigs[a] = null), p(r) ? _.set(e, [ a, r.metadata.name ], r) : g(r, t[a]) && (t[a] = r), v(a, r);
}
}), _.each(t, function(t, n) {
_.set(e, [ n, t.metadata.name ], t);
}), n.interestingBuildsByConfig = e;
};
m.push(i.watch(u, r, function(e) {
n.buildsLoaded = !0, s = e.by("metadata.name"), h();
}));
var y = !1;
m.push(i.watch(n.buildConfigsVersion, r, function(e) {
if (n.buildConfigsLoaded = !0, n.buildConfigs = _.pickBy(e.by("metadata.name"), f), _.isEmpty(n.buildConfigs) && !y && (y = !0, o.SAMPLE_PIPELINE_TEMPLATE)) {
var t = o.SAMPLE_PIPELINE_TEMPLATE.name, r = o.SAMPLE_PIPELINE_TEMPLATE.namespace;
i.get(d, t, {
namespace: r
}, {
errorNotification: !1
}).then(function(e) {
<<<<<<< 86d55f4cdc436b66183150c9e1fd887e82687d52
n.createSampleURL = r.createFromTemplateURL(e, n.projectName);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
n.createSampleURL = c.createFromTemplateURL(e, n.projectName);
>>>>>>> Update pipelines controller to use getPreferredVersion
});
}
h();
})), n.startBuild = a.startBuild, n.$on("$destroy", function() {
i.unwatchAll(m);
});
}));
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< f4c2d5331eeb2822c057c0ccb12690cba9a8dbde
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
<<<<<<< 5331aa8bd38b5ec7e1c6383a5c6a470068e10b96
} ]), angular.module("openshiftConsole").controller("BuildConfigController", [ "$scope", "$filter", "$routeParams", "APIService", "BuildsService", "ImagesService", "DataService", "LabelFilter", "ModalsService", "NotificationsService", "ProjectsService", "keyValueEditorUtils", "gettext", function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
=======
} ]), angular.module("openshiftConsole").controller("BuildConfigController", [ "$scope", "$filter", "$routeParams", "APIService", "BuildsService", "ImagesService", "DataService", "LabelFilter", "ModalsService", "NotificationsService", "ProjectsService", "keyValueEditorUtils", function(a, b, c, d, e, f, g, h, i, j, k, l) {
>>>>>>> Use toast notifications for build config env editor
a.projectName = c.project, a.buildConfigName = c.buildconfig, a.buildConfig = null, a.labelSuggestions = {}, a.alerts = {}, a.breadcrumbs = [], a.forms = {}, a.expand = {
imageEnv: !1
}, c.isPipeline ? a.breadcrumbs.push({
title: "Pipelines",
link: "project/" + c.project + "/browse/pipelines"
}) : a.breadcrumbs.push({
title: "Builds",
link: "project/" + c.project + "/browse/builds"
}), a.breadcrumbs.push({
title: c.buildconfig
}), a.buildConfigsVersion = d.getPreferredVersion("buildconfigs"), a.buildsVersion = d.getPreferredVersion("builds"), a.buildConfigsInstantiateVersion = d.getPreferredVersion("buildconfigs/instantiate"), a.emptyMessage = m("Loading..."), a.aceLoaded = function(a) {
var b = a.getSession();
b.setOption("tabSize", 2), b.setOption("useSoftTabs", !0), a.$blockScrolling = 1 / 0;
};
<<<<<<< 5331aa8bd38b5ec7e1c6383a5c6a470068e10b96
var n = b("buildConfigForBuild"), o = b("buildStrategy"), p = [], q = function(b) {
=======
var m, n = b("buildConfigForBuild"), o = b("buildStrategy"), p = [], q = function(b) {
>>>>>>> Use toast notifications for build config env editor
a.updatedBuildConfig = angular.copy(b), a.envVars = o(a.updatedBuildConfig).env || [];
};
a.compareTriggers = function(a, b) {
return _.isNumber(a.value) ? -1 : "ConfigChange" === a.value ? -1 : "ConfigChange" === b.value ? 1 : "ImageChange" === a.value ? -1 : "ImageChange" === b.value ? 1 : a.value.localeCompare(b.value);
}, a.saveEnvVars = function() {
<<<<<<< 5331aa8bd38b5ec7e1c6383a5c6a470068e10b96
j.hideNotification("save-bc-env-error"), a.envVars = _.filter(a.envVars, "name"), o(a.updatedBuildConfig).env = l.compactEntries(angular.copy(a.envVars)), g.update(a.buildConfigsVersion, c.buildconfig, a.updatedBuildConfig, a.projectContext).then(function() {
j.addNotification({
type: "success",
message: "Environment variables for build config " + a.buildConfigName + " were successfully updated."
}), a.forms.bcEnvVars.$setPristine();
}, function(c) {
j.addNotification({
id: "save-bc-env-error",
type: "error",
message: "An error occurred updating environment variables for build config " + a.buildConfigName + ".",
details: b("getErrorDetails")(c)
=======
j.hideNotification("save-bc-env-error"), a.envVars = _.filter(a.envVars, "name"), o(a.updatedBuildConfig).env = l.compactEntries(angular.copy(a.envVars)), g.update("buildconfigs", c.buildconfig, a.updatedBuildConfig, m).then(function() {
j.addNotification({
type:"success",
message:"Environment variables for build config " + a.buildConfigName + " were successfully updated."
}), a.forms.bcEnvVars.$setPristine();
}, function(c) {
j.addNotification({
id:"save-bc-env-error",
type:"error",
message:"An error occurred updating environment variables for build config " + a.buildConfigName + ".",
details:b("getErrorDetails")(c)
>>>>>>> Use toast notifications for build config env editor
});
});
}, a.clearEnvVarUpdates = function() {
q(a.buildConfig), a.forms.bcEnvVars.$setPristine();
};
var r, s = function(c, h) {
a.loaded = !0, a.buildConfig = c, a.buildConfigPaused = e.isPaused(a.buildConfig), a.buildConfig.spec.source.images && (a.imageSources = a.buildConfig.spec.source.images, a.imageSourcesPaths = [], a.imageSources.forEach(function(c) {
a.imageSourcesPaths.push(b("destinationSourcePair")(c.paths));
}));
var i = _.get(o(c), "from", {}), j = i.kind + "/" + i.name + "/" + (i.namespace || a.projectName);
r !== j && (_.includes([ "ImageStreamTag", "ImageStreamImage" ], i.kind) ? (r = j, g.get(d.kindToResource(i.kind), i.name, {
<<<<<<< 5331aa8bd38b5ec7e1c6383a5c6a470068e10b96
namespace: i.namespace || a.projectName
=======
namespace:i.namespace || a.projectName
>>>>>>> Use toast notifications for build config env editor
}, {
errorNotification: !1
}).then(function(b) {
a.BCEnvVarsFromImage = f.getEnvironment(b);
}, function() {
a.BCEnvVarsFromImage = [];
<<<<<<< 5331aa8bd38b5ec7e1c6383a5c6a470068e10b96
})) : a.BCEnvVarsFromImage = []), q(c), "DELETED" === h && (a.alerts.deleted = {
type: "warning",
message: "This build configuration has been deleted."
}, a.buildConfigDeleted = !0), !a.forms.bcEnvVars || a.forms.bcEnvVars.$pristine ? q(c) : a.alerts.background_update = {
=======
} ]), angular.module("openshiftConsole").controller("BuildConfigController", [ "$scope", "$filter", "$routeParams", "APIService", "BuildsService", "ImagesService", "DataService", "LabelFilter", "ModalsService", "NotificationsService", "ProjectsService", "keyValueEditorUtils", function(e, t, n, a, r, o, i, s, c, l, u, d) {
=======
} ]), angular.module("openshiftConsole").controller("BuildConfigController", [ "$scope", "$filter", "$routeParams", "APIService", "BuildsService", "ImagesService", "DataService", "LabelFilter", "ModalsService", "NotificationsService", "ProjectsService", "SecretsService", "keyValueEditorUtils", function(e, t, n, a, r, o, i, s, c, l, u, d, m) {
>>>>>>> Enable valueFrom values for build config env vars
=======
} ]), angular.module("openshiftConsole").controller("BuildConfigController", [ "$scope", "$filter", "$routeParams", "APIService", "BuildsService", "ImagesService", "DataService", "LabelFilter", "ModalsService", "NotificationsService", "ProjectsService", "SecretsService", "keyValueEditorUtils", function(e, t, n, r, a, o, i, s, c, l, u, d, m) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
e.projectName = n.project, e.buildConfigName = n.buildconfig, e.buildConfig = null, e.labelSuggestions = {}, e.alerts = {}, e.breadcrumbs = [], e.forms = {}, e.expand = {
imageEnv: !1
}, n.isPipeline ? e.breadcrumbs.push({
title: "Pipelines",
link: "project/" + n.project + "/browse/pipelines"
}) : e.breadcrumbs.push({
title: "Builds",
link: "project/" + n.project + "/browse/builds"
}), e.breadcrumbs.push({
title: n.buildconfig
}), e.buildConfigsVersion = r.getPreferredVersion("buildconfigs"), e.buildsVersion = r.getPreferredVersion("builds"), e.buildConfigsInstantiateVersion = r.getPreferredVersion("buildconfigs/instantiate"), e.emptyMessage = "Loading...", e.aceLoaded = function(e) {
var t = e.getSession();
t.setOption("tabSize", 2), t.setOption("useSoftTabs", !0), e.$blockScrolling = 1 / 0;
};
var p = t("buildConfigForBuild"), f = t("buildStrategy"), g = t("orderByDisplayName"), v = t("getErrorDetails"), h = [], y = [], b = [];
e.valueFromObjects = [];
var S = function(t) {
e.updatedBuildConfig = angular.copy(t), e.envVars = f(e.updatedBuildConfig).env || [];
};
e.compareTriggers = function(e, t) {
return _.isNumber(e.value) ? -1 : "ConfigChange" === e.value ? -1 : "ConfigChange" === t.value ? 1 : "ImageChange" === e.value ? -1 : "ImageChange" === t.value ? 1 : e.value.localeCompare(t.value);
}, e.saveEnvVars = function() {
l.hideNotification("save-bc-env-error"), e.envVars = _.filter(e.envVars, "name"), f(e.updatedBuildConfig).env = m.compactEntries(angular.copy(e.envVars)), i.update(e.buildConfigsVersion, n.buildconfig, e.updatedBuildConfig, e.projectContext).then(function() {
l.addNotification({
type: "success",
message: "Environment variables for build config " + e.buildConfigName + " were successfully updated."
}), e.forms.bcEnvVars.$setPristine();
}, function(n) {
l.addNotification({
id: "save-bc-env-error",
type: "error",
message: "An error occurred updating environment variables for build config " + e.buildConfigName + ".",
details: t("getErrorDetails")(n)
});
});
}, e.clearEnvVarUpdates = function() {
S(e.buildConfig), e.forms.bcEnvVars.$setPristine();
};
var C, w = function(n, s) {
e.loaded = !0, e.buildConfig = n, e.buildConfigPaused = a.isPaused(e.buildConfig), e.buildConfig.spec.source.images && (e.imageSources = e.buildConfig.spec.source.images, e.imageSourcesPaths = [], e.imageSources.forEach(function(n) {
e.imageSourcesPaths.push(t("destinationSourcePair")(n.paths));
}));
var c = _.get(f(n), "from", {}), l = c.kind + "/" + c.name + "/" + (c.namespace || e.projectName);
C !== l && (_.includes([ "ImageStreamTag", "ImageStreamImage" ], c.kind) ? (C = l, i.get(r.kindToResource(c.kind), c.name, {
namespace: c.namespace || e.projectName
}, {
errorNotification: !1
}).then(function(t) {
e.BCEnvVarsFromImage = o.getEnvironment(t);
}, function() {
e.BCEnvVarsFromImage = [];
})) : e.BCEnvVarsFromImage = []), S(n), "DELETED" === s && (e.alerts.deleted = {
type: "warning",
message: "This build configuration has been deleted."
<<<<<<< f4c2d5331eeb2822c057c0ccb12690cba9a8dbde
<<<<<<< 82ecd105133e58ecd5737b3b3c3909bdc4572ffb
}, e.buildConfigDeleted = !0), !e.forms.bcEnvVars || e.forms.bcEnvVars.$pristine ? h(n) : e.alerts.background_update = {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
}, e.buildConfigDeleted = !0), !e.forms.bcEnvVars || e.forms.bcEnvVars.$pristine ? g(n) : e.alerts.background_update = {
>>>>>>> Bug 1495491 - Show events tab on build config page
=======
}, e.buildConfigDeleted = !0), !e.forms.bcEnvVars || e.forms.bcEnvVars.$pristine ? S(n) : e.alerts.background_update = {
>>>>>>> Enable valueFrom values for build config env vars
type: "warning",
message: "This build configuration has been updated in the background. Saving your changes may create a conflict or cause loss of data.",
links: [ {
label: "Reload Environment Variables",
onClick: function() {
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
=======
})) :a.BCEnvVarsFromImage = []), q(c), "DELETED" === h && (a.alerts.deleted = {
type:"warning",
message:"This build configuration has been deleted."
}, a.buildConfigDeleted = !0), !a.forms.bcEnvVars || a.forms.bcEnvVars.$pristine ? q(c) :a.alerts.background_update = {
type:"warning",
message:"This build configuration has been updated in the background. Saving your changes may create a conflict or cause loss of data.",
links:[ {
label:"Reload Environment Variables",
onClick:function() {
>>>>>>> Use toast notifications for build config env editor
return a.clearEnvVarUpdates(), !0;
=======
return e.clearEnvVarUpdates(), !0;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
}
} ]
}, e.paused = a.isPaused(e.buildConfig);
};
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
k.get(c.project).then(_.spread(function(d, f) {
function j() {
h.getLabelSelector().isEmpty() || !$.isEmptyObject(a.builds) || $.isEmptyObject(a.unfilteredBuilds) ? delete a.alerts.builds : a.alerts.builds = {
=======
u.get(n.project).then(_.spread(function(a, o) {
=======
u.get(n.project).then(_.spread(function(r, o) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
function u() {
s.getLabelSelector().isEmpty() || !$.isEmptyObject(e.builds) || $.isEmptyObject(e.unfilteredBuilds) ? delete e.alerts.builds : e.alerts.builds = {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
type: "warning",
details: "The active filters are hiding all builds."
};
}
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< 82ecd105133e58ecd5737b3b3c3909bdc4572ffb
<<<<<<< c08b1c047b91ff0d77854fc21f656928bf517a64
<<<<<<< 602d786018a3879a89789b1214b36a15c51b928b
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
<<<<<<< 5331aa8bd38b5ec7e1c6383a5c6a470068e10b96
a.project = d, a.projectContext = f, g.get(a.buildConfigsVersion, c.buildconfig, f, {
errorNotification: !1
}).then(function(b) {
s(b), p.push(g.watchObject(a.buildConfigsVersion, c.buildconfig, f, s));
=======
a.project = d, m = f, g.get("buildconfigs", c.buildconfig, f, {
errorNotification:!1
}).then(function(a) {
s(a), p.push(g.watchObject("buildconfigs", c.buildconfig, f, s));
>>>>>>> Use toast notifications for build config env editor
}, function(c) {
a.loaded = !0, a.alerts.load = {
type: "error",
message: 404 === c.status ? "This build configuration can not be found, it may have been deleted." : "The build configuration details could not be loaded.",
details: 404 === c.status ? "Any remaining build history for this build will be shown." : b("getErrorDetails")(c)
};
<<<<<<< 5331aa8bd38b5ec7e1c6383a5c6a470068e10b96
}), p.push(g.watch(a.buildsVersion, f, function(b, d, f) {
if (a.emptyMessage = m("No builds to show"), d) {
=======
}), p.push(g.watch("builds", f, function(b, d, f) {
if (a.emptyMessage = "No builds to show", d) {
>>>>>>> Use toast notifications for build config env editor
var g = n(f);
if (g === c.buildconfig) {
var i = f.metadata.name;
switch (d) {
=======
e.project = a, m = o, i.get("buildconfigs", n.buildconfig, o, {
=======
e.project = a, p = o, i.get("buildconfigs", n.buildconfig, o, {
>>>>>>> Updates for Service Instance & Bindings
=======
e.project = a, p = o, i.get(e.buildConfigsVersion, n.buildconfig, o, {
>>>>>>> Update buildConfig controller to use getPreferredVersion
=======
e.project = a, e.projectContext = o, i.get(e.buildConfigsVersion, n.buildconfig, o, {
>>>>>>> Bug 1495491 - Show events tab on build config page
=======
e.project = r, e.projectContext = o, i.get(e.buildConfigsVersion, n.buildconfig, o, {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
errorNotification: !1
}).then(function(t) {
w(t), h.push(i.watchObject(e.buildConfigsVersion, n.buildconfig, o, w));
}, function(n) {
e.loaded = !0, e.alerts.load = {
type: "error",
message: 404 === n.status ? "This build configuration can not be found, it may have been deleted." : "The build configuration details could not be loaded.",
details: 404 === n.status ? "Any remaining build history for this build will be shown." : t("getErrorDetails")(n)
};
}), i.list("configmaps", o, null, {
errorNotification: !1
}).then(function(t) {
y = g(t.by("metadata.name")), e.valueFromObjects = y.concat(b);
}, function(e) {
403 !== e.code && l.addNotification({
id: "build-config-list-config-maps-error",
type: "error",
message: "Could not load config maps.",
details: v(e)
});
}), i.list("secrets", o, null, {
errorNotification: !1
}).then(function(t) {
b = g(t.by("metadata.name")), e.valueFromObjects = y.concat(b);
}, function(e) {
403 !== e.code && l.addNotification({
id: "build-config-list-secrets-error",
type: "error",
message: "Could not load secrets.",
details: v(e)
});
}), h.push(i.watch(e.buildsVersion, o, function(t, r, o) {
if (e.emptyMessage = "No builds to show", r) {
if (p(o) === n.buildconfig) {
var i = o.metadata.name;
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
switch (a) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
switch (r) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
case "ADDED":
case "MODIFIED":
e.unfilteredBuilds[i] = o;
break;

case "DELETED":
delete e.unfilteredBuilds[i];
}
}
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
} else a.unfilteredBuilds = e.validatedBuildsForBuildConfig(c.buildconfig, b.by("metadata.name"));
a.builds = h.getLabelSelector().select(a.unfilteredBuilds), j(), h.addLabelSuggestionsFromResources(a.unfilteredBuilds, a.labelSuggestions), h.setLabelSuggestions(a.labelSuggestions), a.orderedBuilds = e.sortBuilds(a.builds, !0), a.latestBuild = _.head(a.orderedBuilds);
}, {
http: {
params: {
labelSelector: b("labelName")("buildConfig") + "=" + _.truncate(a.buildConfigName, {
=======
} else e.unfilteredBuilds = r.validatedBuildsForBuildConfig(n.buildconfig, t.by("metadata.name"));
e.builds = s.getLabelSelector().select(e.unfilteredBuilds), u(), s.addLabelSuggestionsFromResources(e.unfilteredBuilds, e.labelSuggestions), s.setLabelSuggestions(e.labelSuggestions), e.orderedBuilds = r.sortBuilds(e.builds, !0), e.latestBuild = _.head(e.orderedBuilds);
=======
} else e.unfilteredBuilds = a.validatedBuildsForBuildConfig(n.buildconfig, t.by("metadata.name"));
e.builds = s.getLabelSelector().select(e.unfilteredBuilds), u(), s.addLabelSuggestionsFromResources(e.unfilteredBuilds, e.labelSuggestions), s.setLabelSuggestions(e.labelSuggestions), e.orderedBuilds = a.sortBuilds(e.builds, !0), e.latestBuild = _.head(e.orderedBuilds);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}, {
http: {
params: {
<<<<<<< 8ab4f4a09cf53190c7bc08d260e963252c3ba6a5
labelSelector: t("labelName")("buildConfig") + "=" + _.trunc(e.buildConfigName, {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
labelSelector: t("labelName")("buildConfig") + "=" + _.truncate(e.buildConfigName, {
>>>>>>> Upgrade to angular-patternfly v4.1.1 and patternfly v3.25.1
length: 63,
omission: ""
})
}
}
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
})), h.onActiveFiltersChanged(function(b) {
a.$apply(function() {
a.builds = b.select(a.unfilteredBuilds), a.orderedBuilds = e.sortBuilds(a.builds, !0), a.latestBuild = _.head(a.orderedBuilds), j();
=======
})), s.onActiveFiltersChanged(function(t) {
e.$apply(function() {
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< f4c2d5331eeb2822c057c0ccb12690cba9a8dbde
<<<<<<< 8ab4f4a09cf53190c7bc08d260e963252c3ba6a5
e.builds = t.select(e.unfilteredBuilds), e.orderedBuilds = r.sortBuilds(e.builds, !0), e.latestBuild = _.first(e.orderedBuilds), l();
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
e.builds = t.select(e.unfilteredBuilds), e.orderedBuilds = r.sortBuilds(e.builds, !0), e.latestBuild = _.head(e.orderedBuilds), l();
>>>>>>> Upgrade to angular-patternfly v4.1.1 and patternfly v3.25.1
=======
e.builds = t.select(e.unfilteredBuilds), e.orderedBuilds = r.sortBuilds(e.builds, !0), e.latestBuild = _.head(e.orderedBuilds), u();
>>>>>>> Enable valueFrom values for build config env vars
=======
e.builds = t.select(e.unfilteredBuilds), e.orderedBuilds = a.sortBuilds(e.builds, !0), e.latestBuild = _.head(e.orderedBuilds), u();
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
});
}), e.startBuild = function() {
a.startBuild(e.buildConfig);
}, e.showJenkinsfileExamples = function() {
c.showJenkinsfileExamples();
}, e.$on("$destroy", function() {
i.unwatchAll(h);
});
}));
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< 4f61521d7db379799711c39e9cebe284a6d3753e
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
} ]), angular.module("openshiftConsole").controller("BuildController", [ "$scope", "$filter", "$routeParams", "APIService", "BuildsService", "DataService", "ModalsService", "Navigate", "ProjectsService", function(a, b, c, d, e, f, g, h, i) {
a.projectName = c.project, a.build = null, a.buildConfig = null, a.buildConfigName = c.buildconfig, a.builds = {}, a.alerts = {}, a.showSecret = !1, a.renderOptions = {
hideFilterWidget: !0
}, a.breadcrumbs = [], c.isPipeline ? (a.breadcrumbs.push({
title: "Pipelines",
link: "project/" + c.project + "/browse/pipelines"
}), c.buildconfig && a.breadcrumbs.push({
title: c.buildconfig,
link: "project/" + c.project + "/browse/pipelines/" + c.buildconfig
})) : (a.breadcrumbs.push({
title: "Builds",
link: "project/" + c.project + "/browse/builds"
}), c.buildconfig && a.breadcrumbs.push({
title: c.buildconfig,
link: "project/" + c.project + "/browse/builds/" + c.buildconfig
})), a.breadcrumbs.push({
title: c.build
}), a.buildsVersion = d.getPreferredVersion("builds"), a.buildConfigsVersion = d.getPreferredVersion("buildconfigs"), a.podsVersion = d.getPreferredVersion("pods");
var j, k = b("annotation"), l = [], m = function(b) {
a.logCanRun = !_.includes([ "New", "Pending", "Error" ], b.status.phase);
}, n = function() {
a.buildConfig ? a.canBuild = e.canBuild(a.buildConfig) : a.canBuild = !1;
};
i.get(c.project).then(_.spread(function(d, h) {
a.project = d, a.projectContext = h, a.logOptions = {};
var i = function() {
j ? a.eventObjects = [ a.build, j ] : a.eventObjects = [ a.build ];
}, o = function(b, c) {
a.loaded = !0, a.build = b, m(b), i();
var d = k(b, "buildNumber");
d && a.breadcrumbs[2] && (a.breadcrumbs[2].title = "#" + d), "DELETED" === c && (a.alerts.deleted = {
type: "warning",
message: "This build has been deleted."
});
var e;
j || (e = k(b, "buildPod"), e && f.get(a.podsVersion, e, h, {
errorNotification: !1
}).then(function(a) {
j = a, i();
}));
}, p = function(c) {
a.loaded = !0, a.alerts.load = {
type: "error",
message: "The build details could not be loaded.",
details: b("getErrorDetails")(c)
};
}, q = function(b, c) {
"DELETED" === c && (a.alerts.deleted = {
type: "warning",
message: "Build configuration " + a.buildConfigName + " has been deleted."
}, a.buildConfigDeleted = !0), a.buildConfig = b, a.buildConfigPaused = e.isPaused(a.buildConfig), n();
};
f.get(a.buildsVersion, c.build, h, {
errorNotification: !1
}).then(function(b) {
o(b), l.push(f.watchObject(a.buildsVersion, c.build, h, o)), l.push(f.watchObject(a.buildConfigsVersion, c.buildconfig, h, q));
}, p), a.toggleSecret = function() {
a.showSecret = !0;
}, a.cancelBuild = function() {
e.cancelBuild(a.build, a.buildConfigName);
}, a.cloneBuild = function() {
a.build && a.canBuild && e.cloneBuild(a.build, a.buildConfigName);
}, a.showJenkinsfileExamples = function() {
g.showJenkinsfileExamples();
}, a.$on("$destroy", function() {
f.unwatchAll(l);
});
}));
} ]), angular.module("openshiftConsole").controller("ImageController", [ "$filter", "$scope", "$routeParams", "APIService", "DataService", "ImageStreamsService", "imageLayers", "ProjectsService", function(a, b, c, d, e, f, g, h) {
function i(a, d) {
var e = f.tagsByName(a);
b.imageStream = a, b.tagsByName = e, b.tagName = c.tag;
var g = e[c.tag];
return g ? (delete b.alerts.load, void m(g, d)) : void (b.alerts.load = {
type: "error",
message: "The image tag was not found in the stream."
});
}
b.projectName = c.project, b.imageStream = null, b.image = null, b.layers = null, b.tagsByName = {}, b.alerts = {}, b.renderOptions = b.renderOptions || {}, b.renderOptions.hideFilterWidget = !0, b.breadcrumbs = [ {
title: "Image Streams",
link: "project/" + c.project + "/browse/images"
}, {
title: c.imagestream,
link: "project/" + c.project + "/browse/images/" + c.imagestream
}, {
title: ":" + c.tag
} ];
var j = d.getPreferredVersion("imagestreamtags"), k = d.getPreferredVersion("imagestreams"), l = [], m = _.debounce(function(d, f) {
var h = c.imagestream + ":" + c.tag;
e.get(j, h, f).then(function(a) {
b.loaded = !0, b.image = a.image, b.layers = g(b.image);
}, function(c) {
b.loaded = !0, b.alerts.load = {
type: "error",
message: "The image details could not be loaded.",
details: a("getErrorDetails")(c)
};
});
}, 200), n = function(a, c, d) {
i(a, c), "DELETED" === d && (b.alerts.deleted = {
=======
} ]), angular.module("openshiftConsole").controller("BuildController", [ "$scope", "$filter", "$routeParams", "BuildsService", "DataService", "ModalsService", "Navigate", "ProjectsService", function(e, t, n, a, r, o, i, s) {
=======
} ]), angular.module("openshiftConsole").controller("BuildController", [ "$scope", "$filter", "$routeParams", "APIService", "BuildsService", "DataService", "ModalsService", "Navigate", "ProjectsService", function(e, t, n, a, r, o, i, s, c) {
>>>>>>> Update build controller to use getPreferredVersion
=======
} ]), angular.module("openshiftConsole").controller("BuildController", [ "$scope", "$filter", "$routeParams", "APIService", "BuildsService", "DataService", "ModalsService", "Navigate", "ProjectsService", function(e, t, n, r, a, o, i, s, c) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
e.projectName = n.project, e.build = null, e.buildConfig = null, e.buildConfigName = n.buildconfig, e.builds = {}, e.alerts = {}, e.showSecret = !1, e.renderOptions = {
hideFilterWidget: !0
}, e.breadcrumbs = [], n.isPipeline ? (e.breadcrumbs.push({
title: "Pipelines",
link: "project/" + n.project + "/browse/pipelines"
}), n.buildconfig && e.breadcrumbs.push({
title: n.buildconfig,
link: "project/" + n.project + "/browse/pipelines/" + n.buildconfig
})) : (e.breadcrumbs.push({
title: "Builds",
link: "project/" + n.project + "/browse/builds"
}), n.buildconfig && e.breadcrumbs.push({
title: n.buildconfig,
link: "project/" + n.project + "/browse/builds/" + n.buildconfig
})), e.breadcrumbs.push({
title: n.build
}), e.buildsVersion = r.getPreferredVersion("builds"), e.buildConfigsVersion = r.getPreferredVersion("buildconfigs"), e.podsVersion = r.getPreferredVersion("pods");
var l, u = t("annotation"), d = [], m = function(t) {
e.logCanRun = !_.includes([ "New", "Pending", "Error" ], t.status.phase);
}, p = function() {
e.buildConfig ? e.canBuild = a.canBuild(e.buildConfig) : e.canBuild = !1;
};
c.get(n.project).then(_.spread(function(r, s) {
e.project = r, e.projectContext = s, e.logOptions = {};
var c = function() {
e.eventObjects = l ? [ e.build, l ] : [ e.build ];
}, f = function(t, n) {
e.loaded = !0, e.build = t, m(t), c();
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
var a = u(t, "buildNumber");
a && (e.breadcrumbs[2].title = "#" + a), "DELETED" === n && (e.alerts.deleted = {
=======
var r = u(t, "buildNumber");
r && e.breadcrumbs[2] && (e.breadcrumbs[2].title = "#" + r), "DELETED" === n && (e.alerts.deleted = {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
type: "warning",
message: "This build has been deleted."
});
var a;
l || (a = u(t, "buildPod")) && o.get(e.podsVersion, a, s, {
errorNotification: !1
}).then(function(e) {
l = e, c();
});
}, g = function(t, n) {
"DELETED" === n && (e.alerts.deleted = {
type: "warning",
message: "Build configuration " + e.buildConfigName + " has been deleted."
}, e.buildConfigDeleted = !0), e.buildConfig = t, e.buildConfigPaused = a.isPaused(e.buildConfig), p();
};
o.get(e.buildsVersion, n.build, s, {
errorNotification: !1
}).then(function(t) {
f(t), d.push(o.watchObject(e.buildsVersion, n.build, s, f)), d.push(o.watchObject(e.buildConfigsVersion, n.buildconfig, s, g));
}, function(n) {
e.loaded = !0, e.alerts.load = {
type: "error",
message: "The build details could not be loaded.",
details: t("getErrorDetails")(n)
};
}), e.toggleSecret = function() {
e.showSecret = !0;
}, e.cancelBuild = function() {
a.cancelBuild(e.build, e.buildConfigName);
}, e.cloneBuild = function() {
e.build && e.canBuild && a.cloneBuild(e.build, e.buildConfigName);
}, e.showJenkinsfileExamples = function() {
i.showJenkinsfileExamples();
}, e.$on("$destroy", function() {
o.unwatchAll(d);
});
}));
} ]), angular.module("openshiftConsole").controller("ImageController", [ "$filter", "$scope", "$routeParams", "APIService", "DataService", "ImageStreamsService", "imageLayers", "ProjectsService", function(e, t, n, r, a, o, i, s) {
function c(e, r) {
var a = o.tagsByName(e);
t.imageStream = e, t.tagsByName = a, t.tagName = n.tag;
var i = a[n.tag];
i ? (delete t.alerts.load, m(i, r)) : t.alerts.load = {
type: "error",
message: "The image tag was not found in the stream."
};
}
t.projectName = n.project, t.imageStream = null, t.image = null, t.layers = null, t.tagsByName = {}, t.alerts = {}, t.renderOptions = t.renderOptions || {}, t.renderOptions.hideFilterWidget = !0, t.breadcrumbs = [ {
title: "Image Streams",
link: "project/" + n.project + "/browse/images"
}, {
title: n.imagestream,
link: "project/" + n.project + "/browse/images/" + n.imagestream
}, {
title: ":" + n.tag
} ];
var l = r.getPreferredVersion("imagestreamtags"), u = r.getPreferredVersion("imagestreams"), d = [], m = _.debounce(function(r, o) {
var s = n.imagestream + ":" + n.tag;
a.get(l, s, o).then(function(e) {
t.loaded = !0, t.image = e.image, t.layers = i(t.image);
}, function(n) {
t.loaded = !0, t.alerts.load = {
type: "error",
message: "The image details could not be loaded.",
details: e("getErrorDetails")(n)
};
});
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< 9bc0af8cb56dcc9609307333b9424f396867cab5
<<<<<<< f5bee351fe1f2c950441897687b668e5bfdeb820
}, 200), u = function(t, n, a) {
s(t, n), "DELETED" === a && (e.alerts.deleted = {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
}, 200), m = function(e, n, a) {
=======
}, 200), p = function(e, n, a) {
>>>>>>> Support EnvFrom in the Env Editors
c(e, n), "DELETED" === a && (t.alerts.deleted = {
>>>>>>> Update ImageController to use getPreferredVersion
=======
}, 200), p = function(e, n, r) {
c(e, n), "DELETED" === r && (t.alerts.deleted = {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
type: "warning",
message: "This image stream has been deleted."
});
};
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< f5bee351fe1f2c950441897687b668e5bfdeb820
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
h.get(c.project).then(_.spread(function(d, f) {
b.project = d, e.get(k, c.imagestream, f, {
errorNotification: !1
}).then(function(a) {
n(a, f), l.push(e.watchObject(k, c.imagestream, f, function(a, b) {
n(a, f, b);
}));
}, function(c) {
b.loaded = !0, b.alerts.load = {
type: "error",
message: "The image stream details could not be loaded.",
details: a("getErrorDetails")(c)
};
}), b.$on("$destroy", function() {
e.unwatchAll(l);
});
}));
} ]), angular.module("openshiftConsole").controller("ImagesController", [ "$filter", "$routeParams", "$scope", "APIService", "DataService", "LabelFilter", "Logger", "ProjectsService", function(a, b, c, d, e, f, g, h) {
c.projectName = b.project, c.imageStreams = {}, c.unfilteredImageStreams = {}, c.missingStatusTagsByImageStream = {}, c.builds = {}, c.labelSuggestions = {}, c.clearFilter = function() {
f.clear();
};
var i = d.getPreferredVersion("imagestreams"), j = [];
h.get(b.project).then(_.spread(function(a, b) {
function d() {
angular.forEach(c.unfilteredImageStreams, function(a, b) {
var d = c.missingStatusTagsByImageStream[b] = {};
if (a.spec && a.spec.tags) {
var e = {};
a.status && a.status.tags && angular.forEach(a.status.tags, function(a) {
e[a.tag] = !0;
}), angular.forEach(a.spec.tags, function(a) {
e[a.name] || (d[a.name] = a);
=======
a.get(t.project).then(_.spread(function(a, o) {
e.project = a, n.get("imagestreams", t.imagestream, o, {
=======
s.get(n.project).then(_.spread(function(a, o) {
t.project = a, r.get(u, n.imagestream, o, {
>>>>>>> Update ImageController to use getPreferredVersion
=======
s.get(n.project).then(_.spread(function(r, o) {
t.project = r, a.get(u, n.imagestream, o, {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
errorNotification: !1
}).then(function(e) {
p(e, o), d.push(a.watchObject(u, n.imagestream, o, function(e, t) {
p(e, o, t);
}));
}, function(n) {
t.loaded = !0, t.alerts.load = {
type: "error",
message: "The image stream details could not be loaded.",
details: e("getErrorDetails")(n)
};
}), t.$on("$destroy", function() {
a.unwatchAll(d);
});
}));
} ]), angular.module("openshiftConsole").controller("ImagesController", [ "$filter", "$routeParams", "$scope", "APIService", "DataService", "LabelFilter", "Logger", "ProjectsService", function(e, t, n, r, a, o, i, s) {
n.projectName = t.project, n.imageStreams = {}, n.unfilteredImageStreams = {}, n.missingStatusTagsByImageStream = {}, n.builds = {}, n.labelSuggestions = {}, n.clearFilter = function() {
o.clear();
};
var c = r.getPreferredVersion("imagestreams"), l = [];
s.get(t.project).then(_.spread(function(e, t) {
function r() {
angular.forEach(n.unfilteredImageStreams, function(e, t) {
var r = n.missingStatusTagsByImageStream[t] = {};
if (e.spec && e.spec.tags) {
var a = {};
e.status && e.status.tags && angular.forEach(e.status.tags, function(e) {
a[e.tag] = !0;
}), angular.forEach(e.spec.tags, function(e) {
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
r[e.name] || (a[e.name] = e);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
});
}
});
}
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
function h() {
c.filterWithZeroResults = !f.getLabelSelector().isEmpty() && _.isEmpty(c.imageStreams) && !_.isEmpty(c.unfilteredImageStreams);
}
c.project = a, j.push(e.watch(i, b, function(a) {
c.imageStreamsLoaded = !0, c.unfilteredImageStreams = a.by("metadata.name"), f.addLabelSuggestionsFromResources(c.unfilteredImageStreams, c.labelSuggestions), f.setLabelSuggestions(c.labelSuggestions), c.imageStreams = f.getLabelSelector().select(c.unfilteredImageStreams), d(), h(), g.log("image streams (subscribe)", c.imageStreams);
})), f.onActiveFiltersChanged(function(a) {
c.$evalAsync(function() {
c.imageStreams = a.select(c.unfilteredImageStreams), h();
});
}), c.$on("$destroy", function() {
e.unwatchAll(j);
});
}));
} ]), angular.module("openshiftConsole").controller("ImageStreamController", [ "$filter", "$routeParams", "$scope", "APIService", "DataService", "ImageStreamsService", "Navigate", "ProjectsService", "gettext", function(a, b, c, d, e, f, g, h, i) {
c.projectName = b.project, c.imageStream = null, c.tags = [], c.tagShowOlder = {}, c.alerts = {}, c.renderOptions = c.renderOptions || {}, c.renderOptions.hideFilterWidget = !0, c.breadcrumbs = [ {
title: "Image Streams",
link: "project/" + b.project + "/browse/images"
}, {
title: b.imagestream
} ], c.emptyMessage = i("Loading..."), c.imageStreamsVersion = d.getPreferredVersion("imagestreams");
var j = [];
h.get(b.project).then(_.spread(function(d, g) {
c.project = d, e.get(c.imageStreamsVersion, b.imagestream, g, {
errorNotification: !1
}).then(function(a) {
c.loaded = !0, c.imageStream = a, c.emptyMessage = i("No tags to show"), j.push(e.watchObject(c.imageStreamsVersion, b.imagestream, g, function(a, b) {
"DELETED" === b && (c.alerts.deleted = {
type: "warning",
message: "This image stream has been deleted."
}), c.imageStream = a, c.tags = _.toArray(f.tagsByName(c.imageStream));
}));
}, function(b) {
c.loaded = !0, c.alerts.load = {
type: "error",
message: "The image stream details could not be loaded.",
details: a("getErrorDetails")(b)
};
}), c.$on("$destroy", function() {
e.unwatchAll(j);
});
})), c.imagestreamPath = function(a, b) {
if (!b.status) return "";
var c = g.resourceURL(a.metadata.name, "ImageStream", a.metadata.namespace);
return b && (c += "/" + b.name), c;
};
} ]), angular.module("openshiftConsole").controller("DeploymentsController", [ "$scope", "$filter", "$routeParams", "APIService", "DataService", "DeploymentsService", "LabelFilter", "Logger", "OwnerReferencesService", "ProjectsService", "gettext", function(a, b, c, d, e, f, g, h, i, j, k) {
function l() {
var b = _.isEmpty(a.unfilteredDeploymentConfigs) && _.isEmpty(a.unfilteredReplicationControllers) && _.isEmpty(a.unfilteredDeployments) && _.isEmpty(a.unfilteredReplicaSets), c = !g.getLabelSelector().isEmpty(), d = _.isEmpty(a.deploymentConfigs) && _.isEmpty(a.replicationControllersByDC[""]) && _.isEmpty(a.deployments) && _.isEmpty(a.replicaSets);
a.showEmptyState = b, a.filterWithZeroResults = c && d && !b;
}
a.projectName = c.project, a.replicationControllers = {}, a.unfilteredDeploymentConfigs = {}, a.unfilteredDeployments = {}, a.replicationControllersByDC = {}, a.labelSuggestions = {}, a.emptyMessage = k("Loading..."), a.expandedDeploymentConfigRow = {}, a.unfilteredReplicaSets = {}, a.unfilteredReplicationControllers = {}, a.showEmptyState = !0, a.clearFilter = function() {
g.clear();
};
var m, n, o = b("annotation"), p = d.getPreferredVersion("deployments"), q = d.getPreferredVersion("deploymentconfigs"), r = d.getPreferredVersion("replicationcontrollers"), s = d.getPreferredVersion("replicasets"), t = function() {
m && n && (a.replicaSetsByDeploymentUID = i.groupByControllerUID(m), a.unfilteredReplicaSets = _.get(a, [ "replicaSetsByDeploymentUID", "" ], {}), g.addLabelSuggestionsFromResources(a.unfilteredReplicaSets, a.labelSuggestions), g.setLabelSuggestions(a.labelSuggestions), a.replicaSets = g.getLabelSelector().select(a.unfilteredReplicaSets), a.latestReplicaSetByDeploymentUID = {}, _.each(a.replicaSetsByDeploymentUID, function(b, c) {
c && (a.latestReplicaSetByDeploymentUID[c] = f.getActiveReplicaSet(b, n[c]));
}), l());
}, u = [];
j.get(c.project).then(_.spread(function(c, d) {
a.project = c, u.push(e.watch(r, d, function(c, d, e) {
a.replicationControllers = c.by("metadata.name");
var i, j;
if (e && (i = o(e, "deploymentConfig"), j = e.metadata.name), a.replicationControllersByDC = f.associateDeploymentsToDeploymentConfig(a.replicationControllers, a.deploymentConfigs, !0), a.replicationControllersByDC[""] && (a.unfilteredReplicationControllers = a.replicationControllersByDC[""], g.addLabelSuggestionsFromResources(a.unfilteredReplicationControllers, a.labelSuggestions), g.setLabelSuggestions(a.labelSuggestions), a.replicationControllersByDC[""] = g.getLabelSelector().select(a.replicationControllersByDC[""])), l(), d) {
if ("ADDED" === d || "MODIFIED" === d && [ "New", "Pending", "Running" ].indexOf(b("deploymentStatus")(e)) > -1) a.deploymentConfigDeploymentsInProgress[i] = a.deploymentConfigDeploymentsInProgress[i] || {}, a.deploymentConfigDeploymentsInProgress[i][j] = e; else if ("MODIFIED" === d) {
var k = b("deploymentStatus")(e);
"Complete" !== k && "Failed" !== k || delete a.deploymentConfigDeploymentsInProgress[i][j];
}
} else a.deploymentConfigDeploymentsInProgress = f.associateRunningDeploymentToDeploymentConfig(a.replicationControllersByDC);
e ? "DELETED" !== d && (e.causes = b("deploymentCauses")(e)) : angular.forEach(a.replicationControllers, function(a) {
a.causes = b("deploymentCauses")(a);
<<<<<<< 61b7ccebc1be9196354cef218d1e7a812de7a0c6
}), h.log("replicationControllers (subscribe)", a.replicationControllers);
})), u.push(e.watch(s, d, function(b) {
m = b.by("metadata.name"), t(), h.log("replicasets (subscribe)", a.replicaSets);
})), u.push(e.watch(q, d, function(b) {
a.deploymentConfigsLoaded = !0, a.unfilteredDeploymentConfigs = b.by("metadata.name"), g.addLabelSuggestionsFromResources(a.unfilteredDeploymentConfigs, a.labelSuggestions), g.setLabelSuggestions(a.labelSuggestions), a.deploymentConfigs = g.getLabelSelector().select(a.unfilteredDeploymentConfigs), a.emptyMessage = k("No deployment configurations to show"), a.replicationControllersByDC = f.associateDeploymentsToDeploymentConfig(a.replicationControllers, a.deploymentConfigs, !0), a.replicationControllersByDC[""] && (a.unfilteredReplicationControllers = a.replicationControllersByDC[""], a.replicationControllersByDC[""] = g.getLabelSelector().select(a.replicationControllersByDC[""])), l(), h.log("deploymentconfigs (subscribe)", a.deploymentConfigs);
})), u.push(e.watch(p, d, function(b) {
n = a.unfilteredDeployments = b.by("metadata.uid"), g.addLabelSuggestionsFromResources(a.unfilteredDeployments, a.labelSuggestions), g.setLabelSuggestions(a.labelSuggestions), a.deployments = g.getLabelSelector().select(a.unfilteredDeployments), t(), h.log("deployments (subscribe)", a.unfilteredDeployments);
})), a.showDeploymentConfigTable = function() {
var b = _.size(a.replicationControllersByDC);
return b > 1 || 1 === b && !a.replicationControllersByDC[""];
}, g.onActiveFiltersChanged(function(b) {
a.$evalAsync(function() {
a.deploymentConfigs = b.select(a.unfilteredDeploymentConfigs), a.replicationControllersByDC = f.associateDeploymentsToDeploymentConfig(a.replicationControllers, a.deploymentConfigs, !0), a.replicationControllersByDC[""] && (a.unfilteredReplicationControllers = a.replicationControllersByDC[""], a.replicationControllersByDC[""] = g.getLabelSelector().select(a.replicationControllersByDC[""])), a.deployments = b.select(a.unfilteredDeployments), a.replicaSets = b.select(a.unfilteredReplicaSets), l();
=======
}), g.log("replicationControllers (subscribe)", a.replicationControllers);
})), n.push(d.watch({
group:"extensions",
resource:"replicasets"
}, h, function(b) {
j = b.by("metadata.name"), m(), g.log("replicasets (subscribe)", a.replicaSets);
})), n.push(d.watch("deploymentconfigs", h, function(b) {
a.unfilteredDeploymentConfigs = b.by("metadata.name"), f.addLabelSuggestionsFromResources(a.unfilteredDeploymentConfigs, a.labelSuggestions), f.setLabelSuggestions(a.labelSuggestions), a.deploymentConfigs = f.getLabelSelector().select(a.unfilteredDeploymentConfigs), a.emptyMessage = "No deployment configurations to show", a.replicationControllersByDC = e.associateDeploymentsToDeploymentConfig(a.replicationControllers, a.deploymentConfigs, !0), a.replicationControllersByDC[""] && (a.unfilteredReplicationControllers = a.replicationControllersByDC[""], a.replicationControllersByDC[""] = f.getLabelSelector().select(a.replicationControllersByDC[""])), i(), g.log("deploymentconfigs (subscribe)", a.deploymentConfigs);
})), n.push(d.watch({
group:"apps",
resource:"deployments"
}, h, function(b) {
k = a.unfilteredDeployments = b.by("metadata.uid"), f.addLabelSuggestionsFromResources(a.unfilteredDeployments, a.labelSuggestions), f.setLabelSuggestions(a.labelSuggestions), a.deployments = f.getLabelSelector().select(a.unfilteredDeployments), m(), g.log("deployments (subscribe)", a.unfilteredDeployments);
})), a.showEmptyMessage = function() {
return 0 === b("hashSize")(a.replicationControllersByDC) || !(1 !== b("hashSize")(a.replicationControllersByDC) || !a.replicationControllersByDC[""]);
}, f.onActiveFiltersChanged(function(b) {
a.$apply(function() {
a.deploymentConfigs = b.select(a.unfilteredDeploymentConfigs), a.replicationControllersByDC = e.associateDeploymentsToDeploymentConfig(a.replicationControllers, a.deploymentConfigs, !0), a.replicationControllersByDC[""] && (a.unfilteredReplicationControllers = a.replicationControllersByDC[""], a.replicationControllersByDC[""] = f.getLabelSelector().select(a.replicationControllersByDC[""])), a.deployments = b.select(a.unfilteredDeployments), a.replicaSets = b.select(a.unfilteredReplicaSets), i();
>>>>>>> Use `apps` API group for deployments
});
}), a.$on("$destroy", function() {
e.unwatchAll(u);
=======
a[e.name] || (r[e.name] = e);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
});
}));
<<<<<<< f56378c1e748449074be8738ae159f02ed953303
<<<<<<< 61b7ccebc1be9196354cef218d1e7a812de7a0c6
} ]), angular.module("openshiftConsole").controller("DeploymentController", [ "$scope", "$filter", "$routeParams", "APIService", "DataService", "DeploymentsService", "HPAService", "ImageStreamResolver", "LabelFilter", "Logger", "ModalsService", "Navigate", "OwnerReferencesService", "ProjectsService", "StorageService", "gettext", "gettextCatalog", function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
var r = {};
a.projectName = c.project, a.name = c.deployment, a.replicaSetsForDeployment = {}, a.unfilteredReplicaSetsForDeployment = {}, a.labelSuggestions = {}, a.emptyMessage = "Loading...", a.forms = {}, a.alerts = {}, a.imagesByDockerReference = {}, a.breadcrumbs = [ {
title: p("Deployments"),
link: "project/" + c.project + "/browse/deployments"
}, {
title: c.deployment
} ];
var s = d.getPreferredVersion("builds"), t = d.getPreferredVersion("replicasets"), u = d.getPreferredVersion("limitranges"), v = d.getPreferredVersion("imagestreams");
a.deploymentsVersion = d.getPreferredVersion("deployments"), a.eventsVersion = d.getPreferredVersion("events"), a.horizontalPodAutoscalersVersion = d.getPreferredVersion("horizontalpodautoscalers"), a.healthCheckURL = l.healthCheckURL(c.project, "Deployment", c.deployment, a.deploymentsVersion.group);
var w = [];
n.get(c.project).then(_.spread(function(d, l) {
function n() {
i.getLabelSelector().isEmpty() || !_.isEmpty(a.replicaSetsForDeployment) || _.isEmpty(a.unfilteredReplicaSetsForDeployment) ? delete a.alerts["filter-hiding-all"] : a.alerts["filter-hiding-all"] = {
type: "warning",
details: "The active filters are hiding all rollout history."
=======
} ]), angular.module("openshiftConsole").controller("DeploymentController", [ "$scope", "$filter", "$routeParams", "DataService", "DeploymentsService", "EnvironmentService", "HPAService", "ImageStreamResolver", "ModalsService", "Navigate", "OwnerReferencesService", "Logger", "ProjectsService", "StorageService", function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
var o = {};
=======
} ]), angular.module("openshiftConsole").controller("DeploymentController", [ "$scope", "$filter", "$routeParams", "DataService", "DeploymentsService", "HPAService", "ImageStreamResolver", "ModalsService", "Navigate", "OwnerReferencesService", "Logger", "ProjectsService", "StorageService", function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
var n = {};
>>>>>>> Create reusable edit-environment-variables component
a.projectName = c.project, a.name = c.deployment, a.forms = {}, a.alerts = {}, a.imagesByDockerReference = {}, a.breadcrumbs = [ {
title:"Deployments",
link:"project/" + c.project + "/browse/deployments"
}, {
title:c.deployment
<<<<<<< f56378c1e748449074be8738ae159f02ed953303
} ], a.healthCheckURL = j.healthCheckURL(c.project, "Deployment", c.deployment, "apps");
var p = !1, q = function(b, c) {
if (!p) {
if (!a.forms.deploymentEnvVars || a.forms.deploymentEnvVars.$pristine) return void (a.updatedDeployment = f.copyAndNormalize(b));
if (f.isEnvironmentEqual(b, c)) return void (a.updatedDeployment = f.mergeEdits(a.updatedDeployment, b));
p = !0, a.alerts["env-conflict"] = {
type:"warning",
message:"The environment variables for the deployment have been updated in the background. Saving your changes may create a conflict or cause loss of data.",
links:[ {
label:"Reload Environment Variables",
onClick:function() {
return a.clearEnvVarUpdates(), !0;
}
} ]
>>>>>>> Use `apps` API group for deployments
};
}
a.project = d, a.projectContext = l;
var x = {}, y = function() {
g.getHPAWarnings(a.deployment, a.autoscalers, x, d).then(function(b) {
=======
} ], a.healthCheckURL = i.healthCheckURL(c.project, "Deployment", c.deployment, "apps");
var o = [];
l.get(c.project).then(_.spread(function(i, l) {
a.project = i, a.projectContext = l;
var p = {}, q = function() {
f.getHPAWarnings(a.deployment, a.autoscalers, p, i).then(function(b) {
>>>>>>> Create reusable edit-environment-variables component
a.hpaWarnings = b;
});
};
<<<<<<< 61b7ccebc1be9196354cef218d1e7a812de7a0c6
e.get(a.deploymentsVersion, c.deployment, l, {
errorNotification: !1
}).then(function(b) {
a.loaded = !0, a.deployment = b, y(), w.push(e.watchObject(a.deploymentsVersion, c.deployment, l, function(b, c) {
=======
d.get({
group:"apps",
resource:"deployments"
}, c.deployment, l, {
errorNotification:!1
}).then(function(b) {
a.loaded = !0, a.deployment = b, q(), o.push(d.watchObject({
group:"apps",
resource:"deployments"
<<<<<<< f56378c1e748449074be8738ae159f02ed953303
}, c.deployment, m, function(b, c) {
>>>>>>> Use `apps` API group for deployments
"DELETED" === c && (a.alerts.deleted = {
type: "warning",
message: "This deployment has been deleted."
}), a.deployment = b, a.updatingPausedState = !1, y(), h.fetchReferencedImageStreamImages([ b.spec.template ], a.imagesByDockerReference, r, l);
})), w.push(e.watch(t, l, function(c) {
a.emptyMessage = "No deployments to show";
var d = c.by("metadata.name");
d = m.filterForController(d, b), a.inProgressDeployment = _.chain(d).filter("status.replicas").length > 1, a.unfilteredReplicaSetsForDeployment = f.sortByRevision(d), a.replicaSetsForDeployment = i.getLabelSelector().select(a.unfilteredReplicaSetsForDeployment), n(), i.addLabelSuggestionsFromResources(a.unfilteredReplicaSetsForDeployment, a.labelSuggestions), i.setLabelSuggestions(a.labelSuggestions);
=======
}, c.deployment, l, function(b, c) {
"DELETED" === c && (a.alerts.deleted = {
type:"warning",
message:"This deployment has been deleted."
}), a.deployment = b, a.updatingPausedState = !1, q(), g.fetchReferencedImageStreamImages([ b.spec.template ], a.imagesByDockerReference, n, l);
})), o.push(d.watch({
group:"extensions",
resource:"replicasets"
}, l, function(c) {
var d = c.by("metadata.name");
d = j.filterForController(d, b), a.inProgressDeployment = _.chain(d).filter("status.replicas").size() > 1, a.replicaSetsForDeployment = e.sortByRevision(d);
>>>>>>> Create reusable edit-environment-variables component
}));
}, function(c) {
a.loaded = !0, a.alerts.load = {
type: "error",
message: 404 === c.status ? "This deployment can not be found, it may have been deleted." : "The deployment details could not be loaded.",
details: b("getErrorDetails")(c)
};
<<<<<<< f56378c1e748449074be8738ae159f02ed953303
}), e.list(u, l).then(function(a) {
x = a.by("metadata.name"), y();
}), w.push(e.watch(v, l, function(b) {
var c = b.by("metadata.name");
h.buildDockerRefMapForImageStreams(c, r), a.deployment && h.fetchReferencedImageStreamImages([ a.deployment.spec.template ], a.imagesByDockerReference, r, l), j.log("imagestreams (subscribe)", a.imageStreams);
})), w.push(e.watch(a.horizontalPodAutoscalersVersion, l, function(b) {
a.autoscalers = g.filterHPA(b.by("metadata.name"), "Deployment", c.deployment), y();
})), w.push(e.watch(s, l, function(b) {
a.builds = b.by("metadata.name"), j.log("builds (subscribe)", a.builds);
})), i.onActiveFiltersChanged(function(b) {
a.$evalAsync(function() {
a.replicaSetsForDeployment = b.select(a.unfilteredReplicaSetsForDeployment), n();
});
}), a.scale = function(c) {
=======
}), d.list("limitranges", l).then(function(a) {
p = a.by("metadata.name"), q();
}), o.push(d.watch("imagestreams", l, function(b) {
var c = b.by("metadata.name");
g.buildDockerRefMapForImageStreams(c, n), a.deployment && g.fetchReferencedImageStreamImages([ a.deployment.spec.template ], a.imagesByDockerReference, n, l), k.log("imagestreams (subscribe)", a.imageStreams);
})), o.push(d.watch({
group:"autoscaling",
resource:"horizontalpodautoscalers",
version:"v1"
}, l, function(b) {
a.autoscalers = f.filterHPA(b.by("metadata.name"), "Deployment", c.deployment), q();
})), o.push(d.watch("builds", l, function(b) {
a.builds = b.by("metadata.name"), k.log("builds (subscribe)", a.builds);
})), a.scale = function(c) {
>>>>>>> Create reusable edit-environment-variables component
var d = function(c) {
a.alerts = a.alerts || {}, a.alerts.scale = {
type: "error",
message: "An error occurred scaling the deployment.",
details: b("getErrorDetails")(c)
};
};
f.scale(a.deployment, c).then(_.noop, d);
}, a.setPaused = function(c) {
<<<<<<< f56378c1e748449074be8738ae159f02ed953303
a.updatingPausedState = !0, f.setPaused(a.deployment, c, l).then(_.noop, function(d) {
=======
a.updatingPausedState = !0, e.setPaused(a.deployment, c, l).then(_.noop, function(d) {
>>>>>>> Create reusable edit-environment-variables component
a.updatingPausedState = !1, a.alerts = a.alerts || {}, a.alerts.scale = {
type: "error",
message: q.getString(p("An error occurred")) + " " + (c ? q.getString(p("pausing")) : q.getString(p("resuming"))) + " " + q.getString(p("the deployment.")),
details: b("getErrorDetails")(d)
};
});
}, a.removeVolume = function(b) {
var c;
<<<<<<< f56378c1e748449074be8738ae159f02ed953303
c = _.get(a, "deployment.spec.paused") ? q.getString(p("This will remove the volume from the deployment.")) : q.getString(p("This will remove the volume from the deployment and start a new rollout.")), b.persistentVolumeClaim ? c += " " + q.getString(p("It will not delete the persistent volume claim.")) : b.secret ? c += " " + q.getString(p("It will not delete the secret.")) : b.configMap && (c += " " + q.getString(p("It will not delete the config map.")));
var d = k.confirm({
message: q.getString(p("Remove volume")) + " " + b.name + "?",
details: c,
okButtonText: q.getString(p("Remove")),
okButtonClass: "btn-danger",
cancelButtonText: q.getString(p("Cancel"))
}), e = function() {
o.removeVolume(a.deployment, b, l);
};
d.then(e);
}, a.$on("$destroy", function() {
e.unwatchAll(w);
});
}));
} ]), angular.module("openshiftConsole").controller("DeploymentConfigController", [ "$scope", "$filter", "$routeParams", "APIService", "BreadcrumbsService", "DataService", "DeploymentsService", "HPAService", "ImageStreamResolver", "ModalsService", "Navigate", "NotificationsService", "Logger", "ProjectsService", "StorageService", "LabelFilter", "labelNameFilter", "gettext", "gettextCatalog", function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
var t = {};
a.projectName = c.project, a.deploymentConfigName = c.deploymentconfig, a.deploymentConfig = null, a.deployments = {}, a.unfilteredDeployments = {}, a.imagesByDockerReference = {}, a.builds = {}, a.labelSuggestions = {}, a.forms = {}, a.alerts = {}, a.breadcrumbs = e.getBreadcrumbs({
name: c.deploymentconfig,
kind: "DeploymentConfig",
namespace: c.project
}), a.emptyMessage = r("Loading..."), a.deploymentConfigsInstantiateVersion = d.getPreferredVersion("deploymentconfigs/instantiate"), a.deploymentConfigsVersion = d.getPreferredVersion("deploymentconfigs"), a.eventsVersion = d.getPreferredVersion("events"), a.horizontalPodAutoscalersVersion = d.getPreferredVersion("horizontalpodautoscalers");
var u = d.getPreferredVersion("builds"), v = d.getPreferredVersion("imagestreams"), w = d.getPreferredVersion("limitranges"), x = d.getPreferredVersion("replicationcontrollers");
a.healthCheckURL = k.healthCheckURL(c.project, "DeploymentConfig", c.deploymentconfig, a.deploymentConfigsVersion.group);
var y = b("mostRecent"), z = b("orderObjectsByDate"), A = [];
n.get(c.project).then(_.spread(function(d, e) {
function k() {
p.getLabelSelector().isEmpty() || !$.isEmptyObject(a.deployments) || $.isEmptyObject(a.unfilteredDeployments) ? delete a.alerts.deployments : a.alerts.deployments = {
type: "warning",
details: "The active filters are hiding all deployments."
};
}
a.project = d, a.projectContext = e;
var l = {}, n = function() {
h.getHPAWarnings(a.deploymentConfig, a.autoscalers, l, d).then(function(b) {
a.hpaWarnings = b;
});
};
f.get(a.deploymentConfigsVersion, c.deploymentconfig, e, {
errorNotification: !1
}).then(function(d) {
a.loaded = !0, a.deploymentConfig = d, a.strategyParams = b("deploymentStrategyParams")(d), n(), A.push(f.watchObject(a.deploymentConfigsVersion, c.deploymentconfig, e, function(b, c) {
"DELETED" === c && (a.alerts.deleted = {
type: "warning",
message: "This deployment configuration has been deleted."
}), a.deploymentConfig = b, a.updatingPausedState = !1, n(), i.fetchReferencedImageStreamImages([ b.spec.template ], a.imagesByDockerReference, t, e);
=======
c = _.get(a, "deployment.spec.paused") ? "This will remove the volume from the deployment." :"This will remove the volume from the deployment and start a new rollout.", b.persistentVolumeClaim ? c += " It will not delete the persistent volume claim." :b.secret ? c += " It will not delete the secret." :b.configMap && (c += " It will not delete the config map.");
var d = h.confirm({
message:"Remove volume " + b.name + "?",
details:c,
okButtonText:"Remove",
okButtonClass:"btn-danger",
cancelButtonText:"Cancel"
}), e = function() {
m.removeVolume(a.deployment, b, l);
};
d.then(e);
}, a.$on("$destroy", function() {
d.unwatchAll(o);
});
<<<<<<< f5bee351fe1f2c950441897687b668e5bfdeb820
}));
} ]), angular.module("openshiftConsole").controller("DeploymentConfigController", [ "$scope", "$filter", "$routeParams", "BreadcrumbsService", "DataService", "DeploymentsService", "HPAService", "ImageStreamResolver", "ModalsService", "Navigate", "NotificationsService", "Logger", "ProjectsService", "StorageService", "LabelFilter", "labelNameFilter", function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
var q = {};
a.projectName = c.project, a.deploymentConfigName = c.deploymentconfig, a.deploymentConfig = null, a.deployments = {}, a.unfilteredDeployments = {}, a.imagesByDockerReference = {}, a.builds = {}, a.labelSuggestions = {}, a.forms = {}, a.alerts = {}, a.breadcrumbs = d.getBreadcrumbs({
name:c.deploymentconfig,
kind:"DeploymentConfig",
namespace:c.project
}), a.emptyMessage = "Loading...", a.healthCheckURL = j.healthCheckURL(c.project, "DeploymentConfig", c.deploymentconfig);
var r = b("mostRecent"), s = b("orderObjectsByDate"), t = [];
m.get(c.project).then(_.spread(function(d, j) {
function k() {
o.getLabelSelector().isEmpty() || !$.isEmptyObject(a.deployments) || $.isEmptyObject(a.unfilteredDeployments) ? delete a.alerts.deployments :a.alerts.deployments = {
type:"warning",
details:"The active filters are hiding all deployments."
};
}
a.project = d, a.projectContext = j;
var m = {}, u = function() {
g.getHPAWarnings(a.deploymentConfig, a.autoscalers, m, d).then(function(b) {
a.hpaWarnings = b;
});
};
e.get("deploymentconfigs", c.deploymentconfig, j, {
errorNotification:!1
}).then(function(d) {
a.loaded = !0, a.deploymentConfig = d, a.strategyParams = b("deploymentStrategyParams")(d), u(), t.push(e.watchObject("deploymentconfigs", c.deploymentconfig, j, function(b, c) {
"DELETED" === c && (a.alerts.deleted = {
type:"warning",
message:"This deployment configuration has been deleted."
}), a.deploymentConfig = b, a.updatingPausedState = !1, u(), h.fetchReferencedImageStreamImages([ b.spec.template ], a.imagesByDockerReference, q, j);
>>>>>>> Create reusable edit-environment-variables component
}));
}, function(c) {
a.loaded = !0, a.alerts.load = {
type: "error",
message: 404 === c.status ? "This deployment configuration can not be found, it may have been deleted." : "The deployment configuration details could not be loaded.",
details: 404 === c.status ? "Any remaining deployment history for this deployment will be shown." : b("getErrorDetails")(c)
};
<<<<<<< f56378c1e748449074be8738ae159f02ed953303
}), A.push(f.watch(x, e, function(d, e, f) {
=======
}), t.push(e.watch("replicationcontrollers", j, function(d, e, g) {
>>>>>>> Create reusable edit-environment-variables component
var h = c.deploymentconfig;
if (a.emptyMessage = r("No deployments to show"), e) {
if (g.deploymentBelongsToConfig(f, c.deploymentconfig)) {
var i = f.metadata.name;
switch (e) {
case "ADDED":
case "MODIFIED":
a.unfilteredDeployments[i] = f, b("deploymentIsInProgress")(f) ? (a.deploymentConfigDeploymentsInProgress[h] = a.deploymentConfigDeploymentsInProgress[h] || {}, a.deploymentConfigDeploymentsInProgress[h][i] = f) : a.deploymentConfigDeploymentsInProgress[h] && delete a.deploymentConfigDeploymentsInProgress[h][i], f.causes = b("deploymentCauses")(f);
=======
function c() {
o.getLabelSelector().isEmpty() || !$.isEmptyObject(t.imageStreams) || $.isEmptyObject(t.unfilteredImageStreams) ? delete t.alerts.imageStreams : t.alerts.imageStreams = {
=======
}
function s() {
<<<<<<< 5ee4e8975cd809cf7a654cbc903e7d305ed5ecb9
o.getLabelSelector().isEmpty() || !$.isEmptyObject(n.imageStreams) || $.isEmptyObject(n.unfilteredImageStreams) ? delete n.alerts.imageStreams : n.alerts.imageStreams = {
>>>>>>> Update ImageController to use getPreferredVersion
type: "warning",
details: "The active filters are hiding all image streams."
};
=======
n.filterWithZeroResults = !o.getLabelSelector().isEmpty() && _.isEmpty(n.imageStreams) && !_.isEmpty(n.unfilteredImageStreams);
>>>>>>> Replacing empty tables with empty state message
}
n.project = e, l.push(a.watch(c, t, function(e) {
n.imageStreamsLoaded = !0, n.unfilteredImageStreams = e.by("metadata.name"), o.addLabelSuggestionsFromResources(n.unfilteredImageStreams, n.labelSuggestions), o.setLabelSuggestions(n.labelSuggestions), n.imageStreams = o.getLabelSelector().select(n.unfilteredImageStreams), r(), s(), i.log("image streams (subscribe)", n.imageStreams);
})), o.onActiveFiltersChanged(function(e) {
n.$evalAsync(function() {
n.imageStreams = e.select(n.unfilteredImageStreams), s();
});
}), n.$on("$destroy", function() {
a.unwatchAll(l);
});
}));
} ]), angular.module("openshiftConsole").controller("ImageStreamController", [ "$filter", "$routeParams", "$scope", "APIService", "DataService", "ImageStreamsService", "Navigate", "ProjectsService", function(e, t, n, r, a, o, i, s) {
n.projectName = t.project, n.imageStream = null, n.tags = [], n.tagShowOlder = {}, n.alerts = {}, n.renderOptions = n.renderOptions || {}, n.renderOptions.hideFilterWidget = !0, n.breadcrumbs = [ {
title: "Image Streams",
link: "project/" + t.project + "/browse/images"
}, {
title: t.imagestream
} ], n.emptyMessage = "Loading...", n.imageStreamsVersion = r.getPreferredVersion("imagestreams");
var c = [];
s.get(t.project).then(_.spread(function(r, i) {
n.project = r, a.get(n.imageStreamsVersion, t.imagestream, i, {
errorNotification: !1
}).then(function(e) {
n.loaded = !0, n.imageStream = e, n.emptyMessage = "No tags to show", c.push(a.watchObject(n.imageStreamsVersion, t.imagestream, i, function(e, t) {
"DELETED" === t && (n.alerts.deleted = {
type: "warning",
message: "This image stream has been deleted."
}), n.imageStream = e, n.tags = _.toArray(o.tagsByName(n.imageStream));
}));
}, function(t) {
n.loaded = !0, n.alerts.load = {
type: "error",
message: "The image stream details could not be loaded.",
details: e("getErrorDetails")(t)
};
}), n.$on("$destroy", function() {
a.unwatchAll(c);
});
})), n.imagestreamPath = function(e, t) {
if (!t.status) return "";
var n = i.resourceURL(e.metadata.name, "ImageStream", e.metadata.namespace);
return t && (n += "/" + t.name), n;
};
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< 5ee4e8975cd809cf7a654cbc903e7d305ed5ecb9
} ]), angular.module("openshiftConsole").controller("DeploymentsController", [ "$scope", "$filter", "$routeParams", "DataService", "DeploymentsService", "LabelFilter", "Logger", "OwnerReferencesService", "ProjectsService", function(e, t, n, a, r, o, i, s, c) {
e.projectName = n.project, e.replicationControllers = {}, e.unfilteredDeploymentConfigs = {}, e.unfilteredDeployments = {}, e.replicationControllersByDC = {}, e.labelSuggestions = {}, e.alerts = e.alerts || {}, e.emptyMessage = "Loading...", e.expandedDeploymentConfigRow = {}, e.unfilteredReplicaSets = {}, e.unfilteredReplicationControllers = {};
<<<<<<< 3087d5859f05def6301fced3a013ac9165fd8c7a
<<<<<<< 9bc0af8cb56dcc9609307333b9424f396867cab5
var l, u, d = t("annotation"), p = function() {
l && u && (e.replicaSetsByDeploymentUID = s.groupByControllerUID(l), e.unfilteredReplicaSets = _.get(e, [ "replicaSetsByDeploymentUID", "" ], {}), o.addLabelSuggestionsFromResources(e.unfilteredReplicaSets, e.labelSuggestions), o.setLabelSuggestions(e.labelSuggestions), e.replicaSets = o.getLabelSelector().select(e.unfilteredReplicaSets), e.latestReplicaSetByDeploymentUID = {}, _.each(e.replicaSetsByDeploymentUID, function(t, n) {
n && (e.latestReplicaSetByDeploymentUID[n] = r.getActiveReplicaSet(t, u[n]));
=======
var u, d, m = t("annotation"), p = a.getPreferredVersion("deployments"), f = a.getPreferredVersion("deploymentconfigs"), g = a.getPreferredVersion("replicationcontrollers"), h = a.getPreferredVersion("replicasets"), v = function() {
=======
var u, d, m = t("annotation"), p = a.getPreferredVersion("deployments"), f = a.getPreferredVersion("deploymentconfigs"), g = a.getPreferredVersion("replicationcontrollers"), v = a.getPreferredVersion("replicasets"), h = function() {
>>>>>>> Add SVG icons
u && d && (e.replicaSetsByDeploymentUID = c.groupByControllerUID(u), e.unfilteredReplicaSets = _.get(e, [ "replicaSetsByDeploymentUID", "" ], {}), i.addLabelSuggestionsFromResources(e.unfilteredReplicaSets, e.labelSuggestions), i.setLabelSuggestions(e.labelSuggestions), e.replicaSets = i.getLabelSelector().select(e.unfilteredReplicaSets), e.latestReplicaSetByDeploymentUID = {}, _.each(e.replicaSetsByDeploymentUID, function(t, n) {
n && (e.latestReplicaSetByDeploymentUID[n] = o.getActiveReplicaSet(t, d[n]));
>>>>>>> Support EnvFrom in the Env Editors
}));
}, m = [];
c.get(n.project).then(_.spread(function(n, s) {
function c() {
o.getLabelSelector().isEmpty() ? delete e.alerts.deployments : _.isEmpty(e.unfilteredDeploymentConfigs) && _.isEmpty(e.unfilteredReplicationControllers) && _.isEmpty(e.unfilteredDeployments) && _.isEmpty(e.unfilteredReplicaSets) ? delete e.alerts.deployments : _.isEmpty(e.deploymentConfigs) && _.isEmpty(e.replicationControllersByDC[""]) && _.isEmpty(e.deployments) && _.isEmpty(e.replicaSets) ? e.alerts.deployments = {
type: "warning",
details: "The active filters are hiding all deployments."
} : delete e.alerts.deployments;
}
e.project = n, m.push(a.watch("replicationcontrollers", s, function(n, a, s) {
e.replicationControllers = n.by("metadata.name");
var l, u;
<<<<<<< 9bc0af8cb56dcc9609307333b9424f396867cab5
if (s && (l = d(s, "deploymentConfig"), u = s.metadata.name), e.replicationControllersByDC = r.associateDeploymentsToDeploymentConfig(e.replicationControllers, e.deploymentConfigs, !0), e.replicationControllersByDC[""] && (e.unfilteredReplicationControllers = e.replicationControllersByDC[""], o.addLabelSuggestionsFromResources(e.unfilteredReplicationControllers, e.labelSuggestions), o.setLabelSuggestions(e.labelSuggestions), e.replicationControllersByDC[""] = o.getLabelSelector().select(e.replicationControllersByDC[""])), c(), a) {
if ("ADDED" === a || "MODIFIED" === a && [ "New", "Pending", "Running" ].indexOf(t("deploymentStatus")(s)) > -1) e.deploymentConfigDeploymentsInProgress[l] = e.deploymentConfigDeploymentsInProgress[l] || {}, e.deploymentConfigDeploymentsInProgress[l][u] = s; else if ("MODIFIED" === a) {
var p = t("deploymentStatus")(s);
"Complete" !== p && "Failed" !== p || delete e.deploymentConfigDeploymentsInProgress[l][u];
=======
if (r && (l = m(r, "deploymentConfig"), u = r.metadata.name), e.replicationControllersByDC = o.associateDeploymentsToDeploymentConfig(e.replicationControllers, e.deploymentConfigs, !0), e.replicationControllersByDC[""] && (e.unfilteredReplicationControllers = e.replicationControllersByDC[""], i.addLabelSuggestionsFromResources(e.unfilteredReplicationControllers, e.labelSuggestions), i.setLabelSuggestions(e.labelSuggestions), e.replicationControllersByDC[""] = i.getLabelSelector().select(e.replicationControllersByDC[""])), c(), a) {
if ("ADDED" === a || "MODIFIED" === a && [ "New", "Pending", "Running" ].indexOf(t("deploymentStatus")(r)) > -1) e.deploymentConfigDeploymentsInProgress[l] = e.deploymentConfigDeploymentsInProgress[l] || {}, e.deploymentConfigDeploymentsInProgress[l][u] = r; else if ("MODIFIED" === a) {
var d = t("deploymentStatus")(r);
"Complete" !== d && "Failed" !== d || delete e.deploymentConfigDeploymentsInProgress[l][u];
>>>>>>> Support EnvFrom in the Env Editors
=======
} ]), angular.module("openshiftConsole").controller("DeploymentsController", [ "$scope", "$filter", "$routeParams", "APIService", "DataService", "DeploymentsService", "LabelFilter", "Logger", "OwnerReferencesService", "ProjectsService", function(e, t, n, a, r, o, i, s, c, l) {
=======
} ]), angular.module("openshiftConsole").controller("DeploymentsController", [ "$scope", "$filter", "$routeParams", "APIService", "DataService", "DeploymentsService", "LabelFilter", "Logger", "OwnerReferencesService", "ProjectsService", function(e, t, n, r, a, o, i, s, c, l) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
function u() {
var t = _.isEmpty(e.unfilteredDeploymentConfigs) && _.isEmpty(e.unfilteredReplicationControllers) && _.isEmpty(e.unfilteredDeployments) && _.isEmpty(e.unfilteredReplicaSets), n = !i.getLabelSelector().isEmpty(), r = _.isEmpty(e.deploymentConfigs) && _.isEmpty(e.replicationControllersByDC[""]) && _.isEmpty(e.deployments) && _.isEmpty(e.replicaSets);
e.showEmptyState = t, e.filterWithZeroResults = n && r && !t;
}
e.projectName = n.project, e.replicationControllers = {}, e.unfilteredDeploymentConfigs = {}, e.unfilteredDeployments = {}, e.replicationControllersByDC = {}, e.labelSuggestions = {}, e.emptyMessage = "Loading...", e.expandedDeploymentConfigRow = {}, e.unfilteredReplicaSets = {}, e.unfilteredReplicationControllers = {}, e.showEmptyState = !0, e.clearFilter = function() {
i.clear();
};
var d, m, p = t("annotation"), f = r.getPreferredVersion("deployments"), g = r.getPreferredVersion("deploymentconfigs"), v = r.getPreferredVersion("replicationcontrollers"), h = r.getPreferredVersion("replicasets"), y = function() {
d && m && (e.replicaSetsByDeploymentUID = c.groupByControllerUID(d), e.unfilteredReplicaSets = _.get(e, [ "replicaSetsByDeploymentUID", "" ], {}), i.addLabelSuggestionsFromResources(e.unfilteredReplicaSets, e.labelSuggestions), i.setLabelSuggestions(e.labelSuggestions), e.replicaSets = i.getLabelSelector().select(e.unfilteredReplicaSets), e.latestReplicaSetByDeploymentUID = {}, _.each(e.replicaSetsByDeploymentUID, function(t, n) {
n && (e.latestReplicaSetByDeploymentUID[n] = o.getActiveReplicaSet(t, m[n]));
}), u());
}, b = [];
l.get(n.project).then(_.spread(function(n, r) {
e.project = n, b.push(a.watch(v, r, function(n, r, a) {
e.replicationControllers = n.by("metadata.name");
var c, l;
if (a && (c = p(a, "deploymentConfig"), l = a.metadata.name), e.replicationControllersByDC = o.associateDeploymentsToDeploymentConfig(e.replicationControllers, e.deploymentConfigs, !0), e.replicationControllersByDC[""] && (e.unfilteredReplicationControllers = e.replicationControllersByDC[""], i.addLabelSuggestionsFromResources(e.unfilteredReplicationControllers, e.labelSuggestions), i.setLabelSuggestions(e.labelSuggestions), e.replicationControllersByDC[""] = i.getLabelSelector().select(e.replicationControllersByDC[""])), u(), r) {
if ("ADDED" === r || "MODIFIED" === r && [ "New", "Pending", "Running" ].indexOf(t("deploymentStatus")(a)) > -1) e.deploymentConfigDeploymentsInProgress[c] = e.deploymentConfigDeploymentsInProgress[c] || {}, e.deploymentConfigDeploymentsInProgress[c][l] = a; else if ("MODIFIED" === r) {
var d = t("deploymentStatus")(a);
"Complete" !== d && "Failed" !== d || delete e.deploymentConfigDeploymentsInProgress[c][l];
>>>>>>> Replacing empty tables with empty state message
}
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
} else e.deploymentConfigDeploymentsInProgress = r.associateRunningDeploymentToDeploymentConfig(e.replicationControllersByDC);
s ? "DELETED" !== a && (s.causes = t("deploymentCauses")(s)) : angular.forEach(e.replicationControllers, function(e) {
=======
} else e.deploymentConfigDeploymentsInProgress = o.associateRunningDeploymentToDeploymentConfig(e.replicationControllersByDC);
a ? "DELETED" !== r && (a.causes = t("deploymentCauses")(a)) : angular.forEach(e.replicationControllers, function(e) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
e.causes = t("deploymentCauses")(e);
<<<<<<< 9bc0af8cb56dcc9609307333b9424f396867cab5
}), i.log("replicationControllers (subscribe)", e.replicationControllers);
})), m.push(a.watch({
group: "extensions",
resource: "replicasets"
}, s, function(t) {
l = t.by("metadata.name"), p(), i.log("replicasets (subscribe)", e.replicaSets);
})), m.push(a.watch("deploymentconfigs", s, function(t) {
e.unfilteredDeploymentConfigs = t.by("metadata.name"), o.addLabelSuggestionsFromResources(e.unfilteredDeploymentConfigs, e.labelSuggestions), o.setLabelSuggestions(e.labelSuggestions), e.deploymentConfigs = o.getLabelSelector().select(e.unfilteredDeploymentConfigs), e.emptyMessage = "No deployment configurations to show", e.replicationControllersByDC = r.associateDeploymentsToDeploymentConfig(e.replicationControllers, e.deploymentConfigs, !0), e.replicationControllersByDC[""] && (e.unfilteredReplicationControllers = e.replicationControllersByDC[""], e.replicationControllersByDC[""] = o.getLabelSelector().select(e.replicationControllersByDC[""])), c(), i.log("deploymentconfigs (subscribe)", e.deploymentConfigs);
})), m.push(a.watch({
group: "apps",
resource: "deployments"
}, s, function(t) {
u = e.unfilteredDeployments = t.by("metadata.uid"), o.addLabelSuggestionsFromResources(e.unfilteredDeployments, e.labelSuggestions), o.setLabelSuggestions(e.labelSuggestions), e.deployments = o.getLabelSelector().select(e.unfilteredDeployments), p(), i.log("deployments (subscribe)", e.unfilteredDeployments);
=======
}), s.log("replicationControllers (subscribe)", e.replicationControllers);
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< 5ee4e8975cd809cf7a654cbc903e7d305ed5ecb9
})), y.push(r.watch(v, a, function(t) {
u = t.by("metadata.name"), h(), s.log("replicasets (subscribe)", e.replicaSets);
})), y.push(r.watch(f, a, function(t) {
e.unfilteredDeploymentConfigs = t.by("metadata.name"), i.addLabelSuggestionsFromResources(e.unfilteredDeploymentConfigs, e.labelSuggestions), i.setLabelSuggestions(e.labelSuggestions), e.deploymentConfigs = i.getLabelSelector().select(e.unfilteredDeploymentConfigs), e.emptyMessage = "No deployment configurations to show", e.replicationControllersByDC = o.associateDeploymentsToDeploymentConfig(e.replicationControllers, e.deploymentConfigs, !0), e.replicationControllersByDC[""] && (e.unfilteredReplicationControllers = e.replicationControllersByDC[""], e.replicationControllersByDC[""] = i.getLabelSelector().select(e.replicationControllersByDC[""])), c(), s.log("deploymentconfigs (subscribe)", e.deploymentConfigs);
})), y.push(r.watch(p, a, function(t) {
<<<<<<< 3087d5859f05def6301fced3a013ac9165fd8c7a
d = e.unfilteredDeployments = t.by("metadata.uid"), i.addLabelSuggestionsFromResources(e.unfilteredDeployments, e.labelSuggestions), i.setLabelSuggestions(e.labelSuggestions), e.deployments = i.getLabelSelector().select(e.unfilteredDeployments), v(), s.log("deployments (subscribe)", e.unfilteredDeployments);
>>>>>>> Support EnvFrom in the Env Editors
=======
d = e.unfilteredDeployments = t.by("metadata.uid"), i.addLabelSuggestionsFromResources(e.unfilteredDeployments, e.labelSuggestions), i.setLabelSuggestions(e.labelSuggestions), e.deployments = i.getLabelSelector().select(e.unfilteredDeployments), h(), s.log("deployments (subscribe)", e.unfilteredDeployments);
>>>>>>> Add SVG icons
})), e.showEmptyMessage = function() {
return 0 === t("hashSize")(e.replicationControllersByDC) || !(1 !== t("hashSize")(e.replicationControllersByDC) || !e.replicationControllersByDC[""]);
}, o.onActiveFiltersChanged(function(t) {
e.$apply(function() {
e.deploymentConfigs = t.select(e.unfilteredDeploymentConfigs), e.replicationControllersByDC = r.associateDeploymentsToDeploymentConfig(e.replicationControllers, e.deploymentConfigs, !0), e.replicationControllersByDC[""] && (e.unfilteredReplicationControllers = e.replicationControllersByDC[""], e.replicationControllersByDC[""] = o.getLabelSelector().select(e.replicationControllersByDC[""])), e.deployments = t.select(e.unfilteredDeployments), e.replicaSets = t.select(e.unfilteredReplicaSets), c();
});
}), e.$on("$destroy", function() {
a.unwatchAll(m);
=======
})), b.push(r.watch(h, a, function(t) {
=======
})), b.push(a.watch(h, r, function(t) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
d = t.by("metadata.name"), y(), s.log("replicasets (subscribe)", e.replicaSets);
})), b.push(a.watch(g, r, function(t) {
e.deploymentConfigsLoaded = !0, e.unfilteredDeploymentConfigs = t.by("metadata.name"), i.addLabelSuggestionsFromResources(e.unfilteredDeploymentConfigs, e.labelSuggestions), i.setLabelSuggestions(e.labelSuggestions), e.deploymentConfigs = i.getLabelSelector().select(e.unfilteredDeploymentConfigs), e.emptyMessage = "No deployment configurations to show", e.replicationControllersByDC = o.associateDeploymentsToDeploymentConfig(e.replicationControllers, e.deploymentConfigs, !0), e.replicationControllersByDC[""] && (e.unfilteredReplicationControllers = e.replicationControllersByDC[""], e.replicationControllersByDC[""] = i.getLabelSelector().select(e.replicationControllersByDC[""])), u(), s.log("deploymentconfigs (subscribe)", e.deploymentConfigs);
})), b.push(a.watch(f, r, function(t) {
m = e.unfilteredDeployments = t.by("metadata.uid"), i.addLabelSuggestionsFromResources(e.unfilteredDeployments, e.labelSuggestions), i.setLabelSuggestions(e.labelSuggestions), e.deployments = i.getLabelSelector().select(e.unfilteredDeployments), y(), s.log("deployments (subscribe)", e.unfilteredDeployments);
})), e.showDeploymentConfigTable = function() {
var t = _.size(e.replicationControllersByDC);
return t > 1 || 1 === t && !e.replicationControllersByDC[""];
}, i.onActiveFiltersChanged(function(t) {
e.$evalAsync(function() {
e.deploymentConfigs = t.select(e.unfilteredDeploymentConfigs), e.replicationControllersByDC = o.associateDeploymentsToDeploymentConfig(e.replicationControllers, e.deploymentConfigs, !0), e.replicationControllersByDC[""] && (e.unfilteredReplicationControllers = e.replicationControllersByDC[""], e.replicationControllersByDC[""] = i.getLabelSelector().select(e.replicationControllersByDC[""])), e.deployments = t.select(e.unfilteredDeployments), e.replicaSets = t.select(e.unfilteredReplicaSets), u();
});
}), e.$on("$destroy", function() {
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
r.unwatchAll(b);
>>>>>>> Replacing empty tables with empty state message
=======
a.unwatchAll(b);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
});
}));
} ]), angular.module("openshiftConsole").controller("DeploymentController", [ "$scope", "$filter", "$routeParams", "APIService", "DataService", "DeploymentsService", "HPAService", "ImageStreamResolver", "LabelFilter", "Logger", "ModalsService", "Navigate", "OwnerReferencesService", "ProjectsService", "StorageService", function(e, t, n, r, a, o, i, s, c, l, u, d, m, p, f) {
var g = {};
e.projectName = n.project, e.name = n.deployment, e.replicaSetsForDeployment = {}, e.unfilteredReplicaSetsForDeployment = {}, e.labelSuggestions = {}, e.emptyMessage = "Loading...", e.forms = {}, e.alerts = {}, e.imagesByDockerReference = {}, e.breadcrumbs = [ {
title: "Deployments",
link: "project/" + n.project + "/browse/deployments"
}, {
title: n.deployment
} ];
var v = r.getPreferredVersion("builds"), h = r.getPreferredVersion("replicasets"), y = r.getPreferredVersion("limitranges"), b = r.getPreferredVersion("imagestreams");
e.deploymentsVersion = r.getPreferredVersion("deployments"), e.eventsVersion = r.getPreferredVersion("events"), e.horizontalPodAutoscalersVersion = r.getPreferredVersion("horizontalpodautoscalers"), e.healthCheckURL = d.healthCheckURL(n.project, "Deployment", n.deployment, e.deploymentsVersion.group);
var S = [];
p.get(n.project).then(_.spread(function(r, d) {
function p() {
c.getLabelSelector().isEmpty() || !_.isEmpty(e.replicaSetsForDeployment) || _.isEmpty(e.unfilteredReplicaSetsForDeployment) ? delete e.alerts["filter-hiding-all"] : e.alerts["filter-hiding-all"] = {
type: "warning",
details: "The active filters are hiding all rollout history."
};
}
e.project = r, e.projectContext = d;
var C = {}, w = function() {
i.getHPAWarnings(e.deployment, e.autoscalers, C, r).then(function(t) {
e.hpaWarnings = t;
});
};
a.get(e.deploymentsVersion, n.deployment, d, {
errorNotification: !1
}).then(function(t) {
e.loaded = !0, e.deployment = t, w(), S.push(a.watchObject(e.deploymentsVersion, n.deployment, d, function(t, n) {
"DELETED" === n && (e.alerts.deleted = {
type: "warning",
message: "This deployment has been deleted."
}), e.deployment = t, e.updatingPausedState = !1, w(), s.fetchReferencedImageStreamImages([ t.spec.template ], e.imagesByDockerReference, g, d);
})), S.push(a.watch(h, d, function(n) {
e.emptyMessage = "No deployments to show";
var r = n.by("metadata.name");
r = m.filterForController(r, t), e.inProgressDeployment = _.chain(r).filter("status.replicas").length > 1, e.unfilteredReplicaSetsForDeployment = o.sortByRevision(r), e.replicaSetsForDeployment = c.getLabelSelector().select(e.unfilteredReplicaSetsForDeployment), p(), c.addLabelSuggestionsFromResources(e.unfilteredReplicaSetsForDeployment, e.labelSuggestions), c.setLabelSuggestions(e.labelSuggestions);
}));
}, function(n) {
e.loaded = !0, e.alerts.load = {
type: "error",
message: 404 === n.status ? "This deployment can not be found, it may have been deleted." : "The deployment details could not be loaded.",
details: t("getErrorDetails")(n)
};
}), a.list(y, d).then(function(e) {
C = e.by("metadata.name"), w();
}), S.push(a.watch(b, d, function(t) {
var n = t.by("metadata.name");
s.buildDockerRefMapForImageStreams(n, g), e.deployment && s.fetchReferencedImageStreamImages([ e.deployment.spec.template ], e.imagesByDockerReference, g, d), l.log("imagestreams (subscribe)", e.imageStreams);
})), S.push(a.watch(e.horizontalPodAutoscalersVersion, d, function(t) {
e.autoscalers = i.filterHPA(t.by("metadata.name"), "Deployment", n.deployment), w();
})), S.push(a.watch(v, d, function(t) {
e.builds = t.by("metadata.name"), l.log("builds (subscribe)", e.builds);
})), c.onActiveFiltersChanged(function(t) {
e.$evalAsync(function() {
e.replicaSetsForDeployment = t.select(e.unfilteredReplicaSetsForDeployment), p();
});
}), e.scale = function(n) {
o.scale(e.deployment, n).then(_.noop, function(n) {
e.alerts = e.alerts || {}, e.alerts.scale = {
type: "error",
message: "An error occurred scaling the deployment.",
details: t("getErrorDetails")(n)
};
});
}, e.setPaused = function(n) {
e.updatingPausedState = !0, o.setPaused(e.deployment, n, d).then(_.noop, function(r) {
e.updatingPausedState = !1, e.alerts = e.alerts || {}, e.alerts.scale = {
type: "error",
message: "An error occurred " + (n ? "pausing" : "resuming") + " the deployment.",
details: t("getErrorDetails")(r)
};
});
}, e.removeVolume = function(t) {
var n;
n = _.get(e, "deployment.spec.paused") ? "This will remove the volume from the deployment." : "This will remove the volume from the deployment and start a new rollout.", t.persistentVolumeClaim ? n += " It will not delete the persistent volume claim." : t.secret ? n += " It will not delete the secret." : t.configMap && (n += " It will not delete the config map.");
u.confirm({
message: "Remove volume " + t.name + "?",
details: n,
okButtonText: "Remove",
okButtonClass: "btn-danger",
cancelButtonText: "Cancel"
}).then(function() {
f.removeVolume(e.deployment, t, d);
});
}, e.$on("$destroy", function() {
a.unwatchAll(S);
});
}));
} ]), angular.module("openshiftConsole").controller("DeploymentConfigController", [ "$scope", "$filter", "$routeParams", "APIService", "BreadcrumbsService", "DataService", "DeploymentsService", "HPAService", "ImageStreamResolver", "ModalsService", "Navigate", "NotificationsService", "Logger", "ProjectsService", "StorageService", "LabelFilter", "labelNameFilter", function(e, t, n, r, a, o, i, s, c, l, u, d, m, p, f, g, v) {
var h = {};
e.projectName = n.project, e.deploymentConfigName = n.deploymentconfig, e.deploymentConfig = null, e.deployments = {}, e.unfilteredDeployments = {}, e.imagesByDockerReference = {}, e.builds = {}, e.labelSuggestions = {}, e.forms = {}, e.alerts = {}, e.breadcrumbs = a.getBreadcrumbs({
name: n.deploymentconfig,
kind: "DeploymentConfig",
namespace: n.project
}), e.emptyMessage = "Loading...", e.deploymentConfigsInstantiateVersion = r.getPreferredVersion("deploymentconfigs/instantiate"), e.deploymentConfigsVersion = r.getPreferredVersion("deploymentconfigs"), e.eventsVersion = r.getPreferredVersion("events"), e.horizontalPodAutoscalersVersion = r.getPreferredVersion("horizontalpodautoscalers");
var y = r.getPreferredVersion("builds"), b = r.getPreferredVersion("imagestreams"), S = r.getPreferredVersion("limitranges"), C = r.getPreferredVersion("replicationcontrollers");
e.healthCheckURL = u.healthCheckURL(n.project, "DeploymentConfig", n.deploymentconfig, e.deploymentConfigsVersion.group);
var w = t("mostRecent"), P = t("orderObjectsByDate"), j = [];
p.get(n.project).then(_.spread(function(r, a) {
function u() {
g.getLabelSelector().isEmpty() || !$.isEmptyObject(e.deployments) || $.isEmptyObject(e.unfilteredDeployments) ? delete e.alerts.deployments : e.alerts.deployments = {
type: "warning",
details: "The active filters are hiding all deployments."
};
}
e.project = r, e.projectContext = a;
var d = {}, p = function() {
s.getHPAWarnings(e.deploymentConfig, e.autoscalers, d, r).then(function(t) {
e.hpaWarnings = t;
});
};
o.get(e.deploymentConfigsVersion, n.deploymentconfig, a, {
errorNotification: !1
}).then(function(r) {
e.loaded = !0, e.deploymentConfig = r, e.strategyParams = t("deploymentStrategyParams")(r), p(), j.push(o.watchObject(e.deploymentConfigsVersion, n.deploymentconfig, a, function(t, n) {
"DELETED" === n && (e.alerts.deleted = {
type: "warning",
message: "This deployment configuration has been deleted."
}), e.deploymentConfig = t, e.updatingPausedState = !1, p(), c.fetchReferencedImageStreamImages([ t.spec.template ], e.imagesByDockerReference, h, a);
}));
}, function(n) {
e.loaded = !0, e.alerts.load = {
type: "error",
message: 404 === n.status ? "This deployment configuration can not be found, it may have been deleted." : "The deployment configuration details could not be loaded.",
details: 404 === n.status ? "Any remaining deployment history for this deployment will be shown." : t("getErrorDetails")(n)
};
}), j.push(o.watch(C, a, function(r, a, o) {
var s = n.deploymentconfig;
if (e.emptyMessage = "No deployments to show", a) {
if (i.deploymentBelongsToConfig(o, n.deploymentconfig)) {
var c = o.metadata.name;
switch (a) {
case "ADDED":
case "MODIFIED":
<<<<<<< 732d662f7f842aa418e96c3675436cf858a18573
e.unfilteredDeployments[c] = i, t("deploymentIsInProgress")(i) ? (e.deploymentConfigDeploymentsInProgress[s] = e.deploymentConfigDeploymentsInProgress[s] || {}, e.deploymentConfigDeploymentsInProgress[s][c] = i) : e.deploymentConfigDeploymentsInProgress[s] && delete e.deploymentConfigDeploymentsInProgress[s][c], i.causes = t("deploymentCauses")(i);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
e.unfilteredDeployments[c] = o, t("deploymentIsInProgress")(o) ? (e.deploymentConfigDeploymentsInProgress[s] = e.deploymentConfigDeploymentsInProgress[s] || {}, e.deploymentConfigDeploymentsInProgress[s][c] = o) : e.deploymentConfigDeploymentsInProgress[s] && delete e.deploymentConfigDeploymentsInProgress[s][c], o.causes = t("deploymentCauses")(o);
>>>>>>> Update DeploymentConfig controller to use getPreferredVersion
break;

case "DELETED":
delete e.unfilteredDeployments[c], e.deploymentConfigDeploymentsInProgress[s] && delete e.deploymentConfigDeploymentsInProgress[s][c];
}
}
} else {
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< 732d662f7f842aa418e96c3675436cf858a18573
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
var j = g.associateDeploymentsToDeploymentConfig(d.by("metadata.name"));
a.unfilteredDeployments = j[c.deploymentconfig] || {}, angular.forEach(a.unfilteredDeployments, function(a) {
a.causes = b("deploymentCauses")(a);
}), a.deploymentConfigDeploymentsInProgress = g.associateRunningDeploymentToDeploymentConfig(j);
}
<<<<<<< f56378c1e748449074be8738ae159f02ed953303
a.deployments = p.getLabelSelector().select(a.unfilteredDeployments), a.orderedDeployments = z(a.deployments, !0), a.deploymentInProgress = !!_.size(a.deploymentConfigDeploymentsInProgress[h]), a.mostRecent = y(a.unfilteredDeployments), k(), p.addLabelSuggestionsFromResources(a.unfilteredDeployments, a.labelSuggestions), p.setLabelSuggestions(a.labelSuggestions);
}, {
http: {
params: {
labelSelector: q("deploymentConfig") + "=" + a.deploymentConfigName
}
}
})), f.list(w, e).then(function(a) {
l = a.by("metadata.name"), n();
}), A.push(f.watch(v, e, function(b) {
var c = b.by("metadata.name");
i.buildDockerRefMapForImageStreams(c, t), a.deploymentConfig && i.fetchReferencedImageStreamImages([ a.deploymentConfig.spec.template ], a.imagesByDockerReference, t, e), m.log("imagestreams (subscribe)", a.imageStreams);
})), A.push(f.watch(u, e, function(b) {
a.builds = b.by("metadata.name"), m.log("builds (subscribe)", a.builds);
})), A.push(f.watch(a.horizontalPodAutoscalersVersion, e, function(b) {
a.autoscalers = h.filterHPA(b.by("metadata.name"), "DeploymentConfig", c.deploymentconfig), n();
})), p.onActiveFiltersChanged(function(b) {
a.$apply(function() {
a.deployments = b.select(a.unfilteredDeployments), a.orderedDeployments = z(a.deployments, !0), k();
=======
a.deployments = o.getLabelSelector().select(a.unfilteredDeployments), a.orderedDeployments = s(a.deployments, !0), a.deploymentInProgress = !!_.size(a.deploymentConfigDeploymentsInProgress[h]), a.mostRecent = r(a.unfilteredDeployments), k(), o.addLabelSuggestionsFromResources(a.unfilteredDeployments, a.labelSuggestions), o.setLabelSuggestions(a.labelSuggestions);
}, {
http:{
params:{
labelSelector:p("deploymentConfig") + "=" + a.deploymentConfigName
}
}
})), e.list("limitranges", j).then(function(a) {
m = a.by("metadata.name"), u();
}), t.push(e.watch("imagestreams", j, function(b) {
var c = b.by("metadata.name");
h.buildDockerRefMapForImageStreams(c, q), a.deploymentConfig && h.fetchReferencedImageStreamImages([ a.deploymentConfig.spec.template ], a.imagesByDockerReference, q, j), l.log("imagestreams (subscribe)", a.imageStreams);
})), t.push(e.watch("builds", j, function(b) {
a.builds = b.by("metadata.name"), l.log("builds (subscribe)", a.builds);
})), t.push(e.watch({
group:"autoscaling",
resource:"horizontalpodautoscalers",
version:"v1"
}, j, function(b) {
a.autoscalers = g.filterHPA(b.by("metadata.name"), "DeploymentConfig", c.deploymentconfig), u();
})), o.onActiveFiltersChanged(function(b) {
a.$apply(function() {
a.deployments = b.select(a.unfilteredDeployments), a.orderedDeployments = s(a.deployments, !0), k();
>>>>>>> Create reusable edit-environment-variables component
});
}), a.canDeploy = function() {
return !!a.deploymentConfig && (!a.deploymentConfig.metadata.deletionTimestamp && (!a.deploymentInProgress && !a.deploymentConfig.spec.paused));
}, a.startLatestDeployment = function() {
<<<<<<< f56378c1e748449074be8738ae159f02ed953303
a.canDeploy() && g.startLatestDeployment(a.deploymentConfig, e);
=======
a.canDeploy() && f.startLatestDeployment(a.deploymentConfig, j);
>>>>>>> Create reusable edit-environment-variables component
}, a.scale = function(c) {
var d = function(c) {
a.alerts["scale-error"] = {
type: "error",
message: "An error occurred scaling the deployment config.",
details: b("getErrorDetails")(c)
};
};
g.scale(a.deploymentConfig, c).then(_.noop, d);
}, a.setPaused = function(c) {
<<<<<<< f56378c1e748449074be8738ae159f02ed953303
a.updatingPausedState = !0, g.setPaused(a.deploymentConfig, c, e).then(_.noop, function(d) {
=======
a.updatingPausedState = !0, f.setPaused(a.deploymentConfig, c, j).then(_.noop, function(d) {
>>>>>>> Create reusable edit-environment-variables component
a.updatingPausedState = !1, a.alerts["pause-error"] = {
type: "error",
message: "An error occurred " + (c ? "pausing" : "resuming") + " the deployment config.",
details: b("getErrorDetails")(d)
=======
var l = o.associateDeploymentsToDeploymentConfig(a.by("metadata.name"));
=======
var l = i.associateDeploymentsToDeploymentConfig(a.by("metadata.name"));
>>>>>>> Update DeploymentConfig controller to use getPreferredVersion
=======
var l = i.associateDeploymentsToDeploymentConfig(r.by("metadata.name"));
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
e.unfilteredDeployments = l[n.deploymentconfig] || {}, angular.forEach(e.unfilteredDeployments, function(e) {
e.causes = t("deploymentCauses")(e);
}), e.deploymentConfigDeploymentsInProgress = i.associateRunningDeploymentToDeploymentConfig(l);
}
e.deployments = g.getLabelSelector().select(e.unfilteredDeployments), e.orderedDeployments = P(e.deployments, !0), e.deploymentInProgress = !!_.size(e.deploymentConfigDeploymentsInProgress[s]), e.mostRecent = w(e.unfilteredDeployments), u(), g.addLabelSuggestionsFromResources(e.unfilteredDeployments, e.labelSuggestions), g.setLabelSuggestions(e.labelSuggestions);
}, {
http: {
params: {
labelSelector: v("deploymentConfig") + "=" + e.deploymentConfigName
}
}
})), o.list(S, a).then(function(e) {
d = e.by("metadata.name"), p();
}), j.push(o.watch(b, a, function(t) {
var n = t.by("metadata.name");
c.buildDockerRefMapForImageStreams(n, h), e.deploymentConfig && c.fetchReferencedImageStreamImages([ e.deploymentConfig.spec.template ], e.imagesByDockerReference, h, a), m.log("imagestreams (subscribe)", e.imageStreams);
})), j.push(o.watch(y, a, function(t) {
e.builds = t.by("metadata.name"), m.log("builds (subscribe)", e.builds);
})), j.push(o.watch(e.horizontalPodAutoscalersVersion, a, function(t) {
e.autoscalers = s.filterHPA(t.by("metadata.name"), "DeploymentConfig", n.deploymentconfig), p();
})), g.onActiveFiltersChanged(function(t) {
e.$apply(function() {
e.deployments = t.select(e.unfilteredDeployments), e.orderedDeployments = P(e.deployments, !0), u();
});
}), e.canDeploy = function() {
return !!e.deploymentConfig && (!e.deploymentConfig.metadata.deletionTimestamp && (!e.deploymentInProgress && !e.deploymentConfig.spec.paused));
}, e.startLatestDeployment = function() {
e.canDeploy() && i.startLatestDeployment(e.deploymentConfig, a);
}, e.scale = function(n) {
i.scale(e.deploymentConfig, n).then(_.noop, function(n) {
e.alerts["scale-error"] = {
type: "error",
message: "An error occurred scaling the deployment config.",
details: t("getErrorDetails")(n)
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
};
});
}, e.setPaused = function(n) {
e.updatingPausedState = !0, i.setPaused(e.deploymentConfig, n, a).then(_.noop, function(r) {
e.updatingPausedState = !1, e.alerts["pause-error"] = {
type: "error",
message: "An error occurred " + (n ? "pausing" : "resuming") + " the deployment config.",
details: t("getErrorDetails")(r)
};
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
<<<<<<< f56378c1e748449074be8738ae159f02ed953303
var B = function() {
=======
var v = function() {
>>>>>>> Create reusable edit-environment-variables component
if (_.get(a, "deploymentConfig.spec.paused")) return !1;
var b = _.get(a, "deploymentConfig.spec.triggers", []);
return _.some(b, {
type: "ConfigChange"
});
};
a.removeVolume = function(b) {
var c;
<<<<<<< f56378c1e748449074be8738ae159f02ed953303
c = B() ? s.getString(r("This will remove the volume from the deployment config and trigger a new deployment.")) : s.getString(r("This will remove the volume from the deployment config.")), b.persistentVolumeClaim ? c += " " + s.getString(r("It will not delete the persistent volume claim.")) : b.secret ? c += " " + s.getString(r("It will not delete the secret.")) : b.configMap && (c += " " + s.getString(r("It will not delete the config map.")));
var d = j.confirm({
message: s.getString(r("Remove volume")) + " " + b.name + "?",
details: c,
okButtonText: s.getString(r("Remove")),
okButtonClass: "btn-danger",
cancelButtonText: s.getString(r("Cancel"))
}), f = function() {
o.removeVolume(a.deploymentConfig, b, e);
=======
c = v() ? "This will remove the volume from the deployment config and trigger a new deployment." :"This will remove the volume from the deployment config.", b.persistentVolumeClaim ? c += " It will not delete the persistent volume claim." :b.secret ? c += " It will not delete the secret." :b.configMap && (c += " It will not delete the config map.");
var d = i.confirm({
message:"Remove volume " + b.name + "?",
details:c,
okButtonText:"Remove",
okButtonClass:"btn-danger",
cancelButtonText:"Cancel"
}), e = function() {
n.removeVolume(a.deploymentConfig, b, j);
>>>>>>> Create reusable edit-environment-variables component
};
d.then(f);
}, a.$on("$destroy", function() {
<<<<<<< f56378c1e748449074be8738ae159f02ed953303
f.unwatchAll(A);
=======
e.unwatchAll(t);
>>>>>>> Create reusable edit-environment-variables component
=======
});
};
var k = function() {
if (_.get(e, "deploymentConfig.spec.paused")) return !1;
var t = _.get(e, "deploymentConfig.spec.triggers", []);
return _.some(t, {
type: "ConfigChange"
});
};
e.removeVolume = function(t) {
var n;
n = k() ? "This will remove the volume from the deployment config and trigger a new deployment." : "This will remove the volume from the deployment config.", t.persistentVolumeClaim ? n += " It will not delete the persistent volume claim." : t.secret ? n += " It will not delete the secret." : t.configMap && (n += " It will not delete the config map.");
l.confirm({
message: "Remove volume " + t.name + "?",
details: n,
okButtonText: "Remove",
okButtonClass: "btn-danger",
cancelButtonText: "Cancel"
}).then(function() {
f.removeVolume(e.deploymentConfig, t, a);
});
}, e.$on("$destroy", function() {
<<<<<<< 13ac2d832bc56edf6bc5e2fc652da9b188ddae32
<<<<<<< 2ce32f87748ff2fe030a6b53ff9490fcb80d856d
<<<<<<< 714c4a3ff94bc485f89078ceeb8105e8b94271be
<<<<<<< 0c40bfb0d97d474f70b5801c1312be38074c32cb
<<<<<<< 1f5fb674ad14c7e78d2e82e837750bd2747349ab
<<<<<<< a19b22733566f12a68db59a49bc16848fffba594
<<<<<<< d21c662f039266e2dd235fa32bd86d3647c082ae
<<<<<<< 77ce3ebb70d0568ad8fbbb649b8a01f54552ad2c
<<<<<<< 46344541d4f20e3585d6ea01425f784292c0d84a
<<<<<<< 732d662f7f842aa418e96c3675436cf858a18573
r.unwatchAll(b);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
o.unwatchAll(j);
>>>>>>> Update DeploymentConfig controller to use getPreferredVersion
=======
o.unwatchAll(P);
>>>>>>> Service instance details configuration and edit
=======
o.unwatchAll(j);
>>>>>>> Add product icons for service catalog
=======
o.unwatchAll(P);
>>>>>>> Handle displaying parameters when secrets are not available.
=======
o.unwatchAll(j);
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
o.unwatchAll(P);
>>>>>>> Update template service broker flag name
=======
o.unwatchAll(k);
>>>>>>> Fix for adding non-builder templates to a project
=======
o.unwatchAll(P);
>>>>>>> Bug 1505281 - Improve import YAML results message
=======
o.unwatchAll(k);
>>>>>>> Update pod controller to use getPreferredVersion
=======
o.unwatchAll(j);
>>>>>>> Add Browse Catalog to Project context view.
});
}));
} ]), angular.module("openshiftConsole").controller("ReplicaSetController", [ "$scope", "$filter", "$routeParams", "APIService", "AuthorizationService", "BreadcrumbsService", "DataService", "DeploymentsService", "HPAService", "ImageStreamResolver", "keyValueEditorUtils", "kind", "Logger", "MetricsService", "ModalsService", "Navigate", "OwnerReferencesService", "PodsService", "ProjectsService", "StorageService", function(e, t, n, r, a, o, i, s, c, l, u, d, m, p, f, g, v, h, y, b) {
var S = !1, C = t("annotation"), w = t("humanizeKind")(d), P = t("hasDeployment");
switch (d) {
case "ReplicaSet":
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
a.resource = {
<<<<<<< f56378c1e748449074be8738ae159f02ed953303
group: "extensions",
resource: "replicasets"
<<<<<<< 44f396286c95279739890891eea2b89e4abdde15
=======
group:"extensions",
resource:"replicasets"
>>>>>>> Create reusable edit-environment-variables component
}, a.healthCheckURL = m.healthCheckURL(c.project, "ReplicaSet", c.replicaSet, "extensions");
break;

case "ReplicationController":
<<<<<<< 714c4a3ff94bc485f89078ceeb8105e8b94271be
<<<<<<< 0c40bfb0d97d474f70b5801c1312be38074c32cb
<<<<<<< 1f5fb674ad14c7e78d2e82e837750bd2747349ab
<<<<<<< d21c662f039266e2dd235fa32bd86d3647c082ae
a.resource = "replicationcontrollers", a.healthCheckURL = m.healthCheckURL(c.project, "ReplicationController", c.replicaSet);
}
var x = {};
a.projectName = c.project, a.kind = s, a.replicaSet = null, a.deploymentConfig = null, a.deploymentConfigMissing = !1, a.imagesByDockerReference = {}, a.builds = {}, a.alerts = {}, a.renderOptions = a.renderOptions || {}, a.renderOptions.hideFilterWidget = !0, a.forms = {}, a.logOptions = {};
var y = [];
k.isAvailable().then(function(b) {
a.metricsAvailable = b;
});
var z = b("deploymentStatus"), A = function(b) {
a.logCanRun = !_.includes([ "New", "Pending" ], z(b));
<<<<<<< f56378c1e748449074be8738ae159f02ed953303
}, B = b("isIE")();
=======
}, B = b("isIE")() || b("isEdge")();
>>>>>>> Create reusable edit-environment-variables component
p.get(c.project).then(_.spread(function(k, p) {
a.project = k, a.projectContext = p;
var r = {}, C = function() {
if (a.hpaForRS = h.filterHPA(r, s, c.replicaSet), a.deploymentConfigName && a.isActive) {
var b = h.filterHPA(r, "DeploymentConfig", a.deploymentConfigName);
a.autoscalers = a.hpaForRS.concat(b);
} else if (a.deployment && a.isActive) {
var d = h.filterHPA(r, "Deployment", a.deployment.metadata.name);
a.autoscalers = a.hpaForRS.concat(d);
} else a.autoscalers = a.hpaForRS;
}, D = function() {
y.push(f.watch(a.resource, p, function(b) {
var c, d = [];
angular.forEach(b.by("metadata.name"), function(b) {
var c = u(b, "deploymentConfig") || "";
c === a.deploymentConfigName && d.push(b);
}), c = g.getActiveDeployment(d), a.isActive = c && c.metadata.uid === a.replicaSet.metadata.uid, C();
}));
}, E = function() {
h.getHPAWarnings(a.replicaSet, a.autoscalers, a.limitRanges, k).then(function(b) {
a.hpaWarnings = b;
=======
e.resource = "replicationcontrollers", e.healthCheckURL = m.healthCheckURL(n.project, "ReplicationController", n.replicaSet);
}
var P = {};
e.projectName = n.project, e.kind = y, e.replicaSet = null, e.deploymentConfig = null, e.deploymentConfigMissing = !1, e.imagesByDockerReference = {}, e.builds = {}, e.alerts = {}, e.renderOptions = e.renderOptions || {}, e.renderOptions.hideFilterWidget = !0, e.forms = {}, e.logOptions = {};
var k = [];
u.isAvailable().then(function(t) {
=======
}, e.healthCheckURL = g.healthCheckURL(n.project, "ReplicaSet", n.replicaSet, "extensions");
break;

case "ReplicationController":
e.resource = "replicationcontrollers", e.healthCheckURL = g.healthCheckURL(n.project, "ReplicationController", n.replicaSet);
}
var j = {};
e.projectName = n.project, e.kind = d, e.replicaSet = null, e.deploymentConfig = null, e.deploymentConfigMissing = !1, e.imagesByDockerReference = {}, e.builds = {}, e.alerts = {}, e.renderOptions = e.renderOptions || {}, e.renderOptions.hideFilterWidget = !0, e.forms = {}, e.logOptions = {};
var k = r.getPreferredVersion("builds"), I = r.getPreferredVersion("imagestreams"), R = r.getPreferredVersion("horizontalpodautoscalers"), E = r.getPreferredVersion("limitranges"), T = r.getPreferredVersion("pods"), N = r.getPreferredVersion("replicasets"), D = r.getPreferredVersion("resourcequotas"), A = r.getPreferredVersion("appliedclusterresourcequotas");
e.deploymentsVersion = r.getPreferredVersion("deployments"), e.deploymentConfigsVersion = r.getPreferredVersion("deploymentconfigs"), e.eventsVersion = r.getPreferredVersion("events"), e.deploymentConfigsLogVersion = "deploymentconfigs/log";
var $ = [];
p.isAvailable().then(function(t) {
>>>>>>> Update replicaSets controller to use getPreferredVersion
e.metricsAvailable = t;
>>>>>>> Bug 1505281 - Improve import YAML results message
});
<<<<<<< 03048c83a11138780b80c1ac333639429e2925cd
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< 44f396286c95279739890891eea2b89e4abdde15
}, F = function(d) {
var e = u(d, "deploymentConfig");
if (e) {
t = !0, a.deploymentConfigName = e;
var g = u(d, "deploymentVersion");
g && (a.logOptions.version = g), a.healthCheckURL = m.healthCheckURL(c.project, "DeploymentConfig", e), f.get("deploymentconfigs", e, p, {
<<<<<<< f56378c1e748449074be8738ae159f02ed953303
errorNotification: !1
=======
errorNotification:!1
>>>>>>> Create reusable edit-environment-variables component
}).then(function(b) {
a.deploymentConfig = b;
}, function(c) {
return 404 === c.status ? void (a.deploymentConfigMissing = !0) : void (a.alerts.load = {
type: "error",
message: "The deployment configuration details could not be loaded.",
details: b("getErrorDetails")(c)
});
});
}
}, G = function() {
a.isActive = g.isActiveReplicaSet(a.replicaSet, a.deployment);
}, H = function(b) {
return _.some(b, function(b) {
if (_.get(b, "status.replicas") && _.get(b, "metadata.uid") !== _.get(a.replicaSet, "metadata.uid")) {
var c = n.getControllerReferences(b);
return _.some(c, {
uid: a.deployment.metadata.uid
});
}
});
}, I = !1, J = function() {
var b = n.getControllerReferences(a.replicaSet), d = _.find(b, {
<<<<<<< f56378c1e748449074be8738ae159f02ed953303
kind: "Deployment"
=======
kind:"Deployment"
>>>>>>> Create reusable edit-environment-variables component
});
d && f.get({
<<<<<<< 61b7ccebc1be9196354cef218d1e7a812de7a0c6
group: "apps",
resource: "deployments"
}, d.name, p).then(function(b) {
a.deployment = b, a.healthCheckURL = m.healthCheckURL(c.project, "Deployment", b.metadata.name, "apps"), y.push(f.watchObject({
group: "apps",
resource: "deployments"
}, b.metadata.name, p, function(b, d) {
=======
group:"apps",
resource:"deployments"
}, d.name, p).then(function(b) {
a.deployment = b, a.healthCheckURL = m.healthCheckURL(c.project, "Deployment", b.metadata.name, "apps"), y.push(f.watchObject({
group:"apps",
resource:"deployments"
<<<<<<< f56378c1e748449074be8738ae159f02ed953303
}, b.metadata.name, l, function(b, d) {
>>>>>>> Use `apps` API group for deployments
return "DELETED" === d ? (a.alerts["deployment-deleted"] = {
type: "warning",
message: "The deployment controlling this replica set has been deleted."
}, a.healthCheckURL = m.healthCheckURL(c.project, "ReplicaSet", c.replicaSet, "extensions"), a.deploymentMissing = !0, void delete a.deployment) : (a.deployment = b, a.breadcrumbs = e.getBreadcrumbs({
object: a.replicaSet,
displayName: "#" + g.getRevision(a.replicaSet),
parent: {
title: a.deployment.metadata.name,
link: m.resourceURL(a.deployment)
},
humanizedKind: "Deployments"
}), G(), void C());
})), y.push(f.watch({
group: "extensions",
resource: "replicasets"
=======
}, b.metadata.name, p, function(b, d) {
return "DELETED" === d ? (a.alerts["deployment-deleted"] = {
type:"warning",
message:"The deployment controlling this replica set has been deleted."
}, a.healthCheckURL = m.healthCheckURL(c.project, "ReplicaSet", c.replicaSet, "extensions"), a.deploymentMissing = !0, void delete a.deployment) :(a.deployment = b, a.breadcrumbs = e.getBreadcrumbs({
object:a.replicaSet,
displayName:"#" + g.getRevision(a.replicaSet),
parent:{
title:a.deployment.metadata.name,
link:m.resourceURL(a.deployment)
},
humanizedKind:"Deployments"
}), G(), void C());
})), y.push(f.watch({
group:"extensions",
resource:"replicasets"
>>>>>>> Create reusable edit-environment-variables component
}, p, function(a) {
var b = a.by("metadata.name");
I = H(b);
=======
e.resource = {
group: "extensions",
resource: "replicasets"
}, e.healthCheckURL = m.healthCheckURL(n.project, "ReplicaSet", n.replicaSet, "extensions");
break;

case "ReplicationController":
=======
>>>>>>> Handle displaying parameters when secrets are not available.
=======
>>>>>>> Update template service broker flag name
e.resource = "replicationcontrollers", e.healthCheckURL = m.healthCheckURL(n.project, "ReplicationController", n.replicaSet);
}
var k = {};
e.projectName = n.project, e.kind = y, e.replicaSet = null, e.deploymentConfig = null, e.deploymentConfigMissing = !1, e.imagesByDockerReference = {}, e.builds = {}, e.alerts = {}, e.renderOptions = e.renderOptions || {}, e.renderOptions.hideFilterWidget = !0, e.forms = {}, e.logOptions = {};
<<<<<<< 1f5fb674ad14c7e78d2e82e837750bd2747349ab
<<<<<<< a19b22733566f12a68db59a49bc16848fffba594
<<<<<<< d21c662f039266e2dd235fa32bd86d3647c082ae
var j = [];
=======
var P = [];
>>>>>>> Handle displaying parameters when secrets are not available.
=======
var j = [];
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
var P = [];
>>>>>>> Update template service broker flag name
=======
e.resource = "replicationcontrollers", e.healthCheckURL = m.healthCheckURL(n.project, "ReplicationController", n.replicaSet);
}
var P = {};
e.projectName = n.project, e.kind = y, e.replicaSet = null, e.deploymentConfig = null, e.deploymentConfigMissing = !1, e.imagesByDockerReference = {}, e.builds = {}, e.alerts = {}, e.renderOptions = e.renderOptions || {}, e.renderOptions.hideFilterWidget = !0, e.forms = {}, e.logOptions = {};
var k = [];
>>>>>>> Fix for adding non-builder templates to a project
u.isAvailable().then(function(t) {
e.metricsAvailable = t;
});
var j = t("deploymentStatus"), R = function(t) {
e.logCanRun = !_.includes([ "New", "Pending" ], j(t));
}, I = t("isIE")();
g.get(n.project).then(_.spread(function(u, g) {
e.project = u, e.projectContext = g;
var h = {}, E = function() {
if (e.hpaForRS = s.filterHPA(h, y, n.replicaSet), e.deploymentConfigName && e.isActive) {
var t = s.filterHPA(h, "DeploymentConfig", e.deploymentConfigName);
=======
var B = t("deploymentStatus"), L = function(t) {
e.logCanRun = !_.includes([ "New", "Pending" ], B(t));
}, U = t("isIE")();
y.get(n.project).then(_.spread(function(a, u) {
e.project = a, e.projectContext = u;
var p = {}, y = function() {
if (e.hpaForRS = c.filterHPA(p, d, n.replicaSet), e.deploymentConfigName && e.isActive) {
var t = c.filterHPA(p, "DeploymentConfig", e.deploymentConfigName);
>>>>>>> Update replicaSets controller to use getPreferredVersion
e.autoscalers = e.hpaForRS.concat(t);
} else if (e.deployment && e.isActive) {
var a = c.filterHPA(p, "Deployment", e.deployment.metadata.name);
e.autoscalers = e.hpaForRS.concat(a);
=======
var B = t("deploymentStatus"), L = function(t) {
e.logCanRun = !_.includes([ "New", "Pending" ], B(t));
}, U = t("isIE")();
=======
var B = t("deploymentStatus"), L = function(t) {
e.logCanRun = !_.includes([ "New", "Pending" ], B(t));
}, V = t("isIE")();
>>>>>>> Update membership to use new rbac endpoints
y.get(n.project).then(_.spread(function(r, u) {
e.project = r, e.projectContext = u;
var p = {}, y = function() {
if (e.hpaForRS = c.filterHPA(p, d, n.replicaSet), e.deploymentConfigName && e.isActive) {
var t = c.filterHPA(p, "DeploymentConfig", e.deploymentConfigName);
e.autoscalers = e.hpaForRS.concat(t);
} else if (e.deployment && e.isActive) {
var r = c.filterHPA(p, "Deployment", e.deployment.metadata.name);
e.autoscalers = e.hpaForRS.concat(r);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
} else e.autoscalers = e.hpaForRS;
}, U = function() {
$.push(i.watch(e.resource, u, function(t) {
var n, r = [];
angular.forEach(t.by("metadata.name"), function(t) {
(C(t, "deploymentConfig") || "") === e.deploymentConfigName && r.push(t);
}), n = s.getActiveDeployment(r), e.isActive = n && n.metadata.uid === e.replicaSet.metadata.uid, y();
}));
}, O = function() {
c.getHPAWarnings(e.replicaSet, e.autoscalers, e.limitRanges, r).then(function(t) {
e.hpaWarnings = t;
});
}, F = function(r) {
var a = C(r, "deploymentConfig");
if (a) {
S = !0, e.deploymentConfigName = a;
var o = C(r, "deploymentVersion");
o && (e.logOptions.version = o), e.healthCheckURL = g.healthCheckURL(n.project, "DeploymentConfig", a), i.get(e.deploymentConfigsVersion, a, u, {
errorNotification: !1
}).then(function(t) {
e.deploymentConfig = t;
}, function(n) {
404 !== n.status ? e.alerts.load = {
type: "error",
message: "The deployment configuration details could not be loaded.",
details: t("getErrorDetails")(n)
} : e.deploymentConfigMissing = !0;
});
}
}, x = function() {
e.isActive = s.isActiveReplicaSet(e.replicaSet, e.deployment);
}, M = function(t) {
return _.some(t, function(t) {
if (_.get(t, "status.replicas") && _.get(t, "metadata.uid") !== _.get(e.replicaSet, "metadata.uid")) {
var n = v.getControllerReferences(t);
return _.some(n, {
uid: e.deployment.metadata.uid
});
}
});
}, q = !1, z = function() {
var t = v.getControllerReferences(e.replicaSet), r = _.find(t, {
kind: "Deployment"
});
r && i.get(e.deploymentsVersion, r.name, u).then(function(t) {
e.deployment = t, e.healthCheckURL = g.healthCheckURL(n.project, "Deployment", t.metadata.name, "apps"), $.push(i.watchObject(e.deploymentsVersion, t.metadata.name, u, function(t, r) {
if ("DELETED" === r) return e.alerts["deployment-deleted"] = {
type: "warning",
message: "The deployment controlling this replica set has been deleted."
}, e.healthCheckURL = g.healthCheckURL(n.project, "ReplicaSet", n.replicaSet, "extensions"), e.deploymentMissing = !0, void delete e.deployment;
e.deployment = t, e.breadcrumbs = o.getBreadcrumbs({
object: e.replicaSet,
displayName: "#" + s.getRevision(e.replicaSet),
parent: {
title: e.deployment.metadata.name,
link: g.resourceURL(e.deployment)
},
humanizedKind: "Deployments"
}), x(), y();
})), $.push(i.watch(N, u, function(e) {
var t = e.by("metadata.name");
<<<<<<< 44f396286c95279739890891eea2b89e4abdde15
<<<<<<< f8cb892c3d9e864c3b7b3ba810c290ed7ce351f0
<<<<<<< 952b26bc3acaa89a51e4aad5f965e515d3b007ae
<<<<<<< 8ab4f4a09cf53190c7bc08d260e963252c3ba6a5
<<<<<<< 9854a04a93530a5cbed260dddc4991d2b65730e5
A = B(t);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
B = A(t);
>>>>>>> Improve YAML editor validation and feedback
=======
B = A(t);
>>>>>>> Add bindings list to resource pages
=======
B = $(t);
>>>>>>> Let administrators disable "Copy Login Command"
=======
q = M(t);
>>>>>>> Update replicaSets controller to use getPreferredVersion
}));
});
}, H = function() {
if (!_.isEmpty(j)) {
var t = _.get(e, "replicaSet.spec.template");
t && l.fetchReferencedImageStreamImages([ t ], e.imagesByDockerReference, j, u);
}
};
<<<<<<< 44f396286c95279739890891eea2b89e4abdde15
<<<<<<< 33eb37eab8df0c17bc226501a924a2dc2b9b2f41
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
f.get(a.resource, c.replicaSet, p, {
<<<<<<< f56378c1e748449074be8738ae159f02ed953303
errorNotification: !1
=======
errorNotification:!1
>>>>>>> Create reusable edit-environment-variables component
}).then(function(b) {
switch (a.loaded = !0, a.replicaSet = b, A(b), s) {
=======
o.get(e.resource, n.replicaSet, f, {
=======
o.get(e.resource, n.replicaSet, g, {
>>>>>>> Patternfly vertical navigation and project bar
errorNotification: !1
}).then(function(t) {
<<<<<<< 7d5cc388b34d6a87a5e2ae6b26f6b146dae1daa3
switch (e.loaded = !0, e.replicaSet = t, P(t), y) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
switch (e.loaded = !0, e.replicaSet = t, R(t), y) {
>>>>>>> Adding Deploy Image and Import YAML / JSON functionality to catalog
=======
i.get(e.resource, n.replicaSet, u, {
errorNotification: !1
}).then(function(t) {
switch (e.loaded = !0, e.replicaSet = t, L(t), d) {
>>>>>>> Update replicaSets controller to use getPreferredVersion
case "ReplicationController":
F(t);
break;

case "ReplicaSet":
<<<<<<< 44f396286c95279739890891eea2b89e4abdde15
<<<<<<< 7fc0bb75a45e57cf2098d66ed317a3123741a3d2
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
J();
}
E(), a.breadcrumbs = e.getBreadcrumbs({
<<<<<<< f56378c1e748449074be8738ae159f02ed953303
object: b
}), y.push(f.watchObject(a.resource, c.replicaSet, p, function(b, c) {
"DELETED" === c && (a.alerts.deleted = {
type: "warning",
message: "This " + v + " has been deleted."
=======
object:b
}), y.push(f.watchObject(a.resource, c.replicaSet, p, function(b, c) {
"DELETED" === c && (a.alerts.deleted = {
type:"warning",
message:"This " + v + " has been deleted."
>>>>>>> Create reusable edit-environment-variables component
}), a.replicaSet = b, A(b), E(), K(), a.deployment && G();
})), a.deploymentConfigName && D(), y.push(f.watch("pods", p, function(b) {
var c = b.by("metadata.name");
a.podsForDeployment = o.filterForOwner(c, a.replicaSet);
=======
L();
}
N(), e.breadcrumbs = r.getBreadcrumbs({
object: t
}), j.push(o.watchObject(e.resource, n.replicaSet, f, function(t, n) {
"DELETED" === n && (e.alerts.deleted = {
type: "warning",
message: "This " + S + " has been deleted."
<<<<<<< 9bc0af8cb56dcc9609307333b9424f396867cab5
}), e.replicaSet = t, R(t), N(), U(), e.deployment && $();
})), e.deploymentConfigName && I(), j.push(o.watch("pods", f, function(t) {
=======
}), e.replicaSet = t, R(t), N(), U(), e.deployment && A();
})), e.deploymentConfigName && T(), j.push(o.watch("pods", g, function(t) {
>>>>>>> Support EnvFrom in the Env Editors
var n = t.by("metadata.name");
e.podsForDeployment = g.filterForOwner(n, e.replicaSet);
>>>>>>> Bug 1481127 - More robust handling of large project lists
}));
}, function(d) {
a.loaded = !0, a.alerts.load = {
<<<<<<< f56378c1e748449074be8738ae159f02ed953303
type: "error",
message: "The " + v + " details could not be loaded.",
details: b("getErrorDetails")(d)
}, a.breadcrumbs = e.getBreadcrumbs({
name: c.replicaSet,
kind: s,
namespace: c.project
=======
type:"error",
message:"The " + v + " details could not be loaded.",
details:b("getErrorDetails")(d)
}, a.breadcrumbs = e.getBreadcrumbs({
name:c.replicaSet,
kind:s,
namespace:c.project
>>>>>>> Create reusable edit-environment-variables component
});
}), y.push(f.watch(a.resource, p, function(c, d, e) {
a.replicaSets = c.by("metadata.name"), "ReplicationController" === s && (a.deploymentsByDeploymentConfig = g.associateDeploymentsToDeploymentConfig(a.replicaSets));
var f, h;
<<<<<<< f56378c1e748449074be8738ae159f02ed953303
e && (f = u(e, "deploymentConfig"), h = e.metadata.name), a.deploymentConfigDeploymentsInProgress = a.deploymentConfigDeploymentsInProgress || {}, d ? "ADDED" === d || "MODIFIED" === d && b("deploymentIsInProgress")(e) ? (a.deploymentConfigDeploymentsInProgress[f] = a.deploymentConfigDeploymentsInProgress[f] || {}, a.deploymentConfigDeploymentsInProgress[f][h] = e) : "MODIFIED" === d && a.deploymentConfigDeploymentsInProgress[f] && delete a.deploymentConfigDeploymentsInProgress[f][h] : a.deploymentConfigDeploymentsInProgress = g.associateRunningDeploymentToDeploymentConfig(a.deploymentsByDeploymentConfig), e ? "DELETED" !== d && (e.causes = b("deploymentCauses")(e)) : angular.forEach(a.replicaSets, function(a) {
=======
e && (f = u(e, "deploymentConfig"), h = e.metadata.name), a.deploymentConfigDeploymentsInProgress = a.deploymentConfigDeploymentsInProgress || {}, d ? "ADDED" === d || "MODIFIED" === d && b("deploymentIsInProgress")(e) ? (a.deploymentConfigDeploymentsInProgress[f] = a.deploymentConfigDeploymentsInProgress[f] || {}, a.deploymentConfigDeploymentsInProgress[f][h] = e) :"MODIFIED" === d && a.deploymentConfigDeploymentsInProgress[f] && delete a.deploymentConfigDeploymentsInProgress[f][h] :a.deploymentConfigDeploymentsInProgress = g.associateRunningDeploymentToDeploymentConfig(a.deploymentsByDeploymentConfig), e ? "DELETED" !== d && (e.causes = b("deploymentCauses")(e)) :angular.forEach(a.replicaSets, function(a) {
>>>>>>> Create reusable edit-environment-variables component
a.causes = b("deploymentCauses")(a);
});
})), y.push(f.watch("imagestreams", p, function(a) {
var b = a.by("metadata.name");
i.buildDockerRefMapForImageStreams(b, x), K(), j.log("imagestreams (subscribe)", b);
})), y.push(f.watch("builds", p, function(b) {
a.builds = b.by("metadata.name"), j.log("builds (subscribe)", a.builds);
})), y.push(f.watch({
<<<<<<< f56378c1e748449074be8738ae159f02ed953303
group: "autoscaling",
resource: "horizontalpodautoscalers",
version: "v1"
<<<<<<< 9bc0af8cb56dcc9609307333b9424f396867cab5
}, p, function(a) {
r = a.by("metadata.name"), C(), E();
=======
}, g, function(e) {
v = e.by("metadata.name"), E(), N();
>>>>>>> Support EnvFrom in the Env Editors
}, {
poll: B,
pollInterval: 6e4
<<<<<<< 9bc0af8cb56dcc9609307333b9424f396867cab5
=======
group:"autoscaling",
resource:"horizontalpodautoscalers",
version:"v1"
}, p, function(a) {
r = a.by("metadata.name"), C(), E();
}, {
poll:B,
pollInterval:6e4
>>>>>>> Create reusable edit-environment-variables component
})), f.list("limitranges", p).then(function(b) {
a.limitRanges = b.by("metadata.name"), E();
});
var L = 6e4;
y.push(f.watch("resourcequotas", p, function(b) {
a.quotas = b.by("metadata.name");
}, {
<<<<<<< f56378c1e748449074be8738ae159f02ed953303
poll: !0,
pollInterval: L
})), y.push(f.watch("appliedclusterresourcequotas", p, function(b) {
a.clusterQuotas = b.by("metadata.name");
}, {
poll: !0,
pollInterval: L
=======
poll:!0,
pollInterval:L
})), y.push(f.watch("appliedclusterresourcequotas", p, function(b) {
a.clusterQuotas = b.by("metadata.name");
}, {
poll:!0,
pollInterval:L
>>>>>>> Create reusable edit-environment-variables component
=======
A = B(t);
>>>>>>> Upgrade to angular-patternfly v4.1.1 and patternfly v3.25.1
}));
var M = b("deploymentIsLatest");
a.showRollbackAction = function() {
return "Complete" === z(a.replicaSet) && !M(a.replicaSet, a.deploymentConfig) && !a.replicaSet.metadata.deletionTimestamp && d.canI("deploymentconfigrollbacks", "create");
}, a.retryFailedDeployment = function(b) {
g.retryFailedDeployment(b, p, a);
}, a.rollbackToDeployment = function(b, c, d, e) {
g.rollbackToDeployment(b, c, d, e, p, a);
}, a.cancelRunningDeployment = function(a) {
g.cancelRunningDeployment(a, p);
}, a.scale = function(c) {
var d = function(c) {
a.alerts = a.alerts || {}, a.alerts.scale = {
type: "error",
message: "An error occurred scaling.",
details: b("getErrorDetails")(c)
};
}, e = a.deployment || a.deploymentConfig || a.replicaSet;
g.scale(e, c).then(_.noop, d);
};
var N = b("hasDeploymentConfig");
a.isScalable = function() {
return !!_.isEmpty(a.autoscalers) && (!N(a.replicaSet) && !w(a.replicaSet) || (!(!a.deploymentConfigMissing && !a.deploymentMissing) || !(!a.deploymentConfig && !a.deployment) && (a.isActive && !I)));
}, a.removeVolume = function(c) {
var d = "This will remove the volume from the " + b("humanizeKind")(a.replicaSet.kind) + ".";
<<<<<<< f56378c1e748449074be8738ae159f02ed953303
c.persistentVolumeClaim ? d += " It will not delete the persistent volume claim." : c.secret ? d += " It will not delete the secret." : c.configMap && (d += " It will not delete the config map.");
var e = l.confirm({
message: "Remove volume " + c.name + "?",
details: d,
okButtonText: "Remove",
okButtonClass: "btn-danger",
cancelButtonText: "Cancel"
=======
c.persistentVolumeClaim ? d += " It will not delete the persistent volume claim." :c.secret ? d += " It will not delete the secret." :c.configMap && (d += " It will not delete the config map.");
var e = l.confirm({
message:"Remove volume " + c.name + "?",
details:d,
okButtonText:"Remove",
okButtonClass:"btn-danger",
cancelButtonText:"Cancel"
>>>>>>> Create reusable edit-environment-variables component
}), f = function() {
q.removeVolume(a.replicaSet, c, p);
};
e.then(f);
}, a.$on("$destroy", function() {
f.unwatchAll(y);
});
}));
} ]), angular.module("openshiftConsole").controller("StatefulSetsController", [ "$scope", "$routeParams", "DataService", "ProjectsService", "LabelFilter", "PodsService", function(a, b, c, d, e, f) {
a.projectName = b.project, a.labelSuggestions = {}, a.clearFilter = function() {
e.clear();
};
var g = [];
d.get(b.project).then(_.spread(function(b, d) {
function h() {
a.filterWithZeroResults = !e.getLabelSelector().isEmpty() && _.isEmpty(a.statefulSets) && !_.isEmpty(a.unfilteredStatefulSets);
}
a.project = b, g.push(c.watch({
resource: "statefulsets",
group: "apps",
version: "v1beta1"
}, d, function(b) {
angular.extend(a, {
loaded: !0,
unfilteredStatefulSets: b.by("metadata.name")
}), a.statefulSets = e.getLabelSelector().select(a.unfilteredStatefulSets), e.addLabelSuggestionsFromResources(a.unfilteredStatefulSets, a.labelSuggestions), e.setLabelSuggestions(a.labelSuggestions), h();
})), g.push(c.watch("pods", d, function(b) {
a.pods = b.by("metadata.name"), a.podsByOwnerUID = f.groupByOwnerUID(a.pods);
})), e.onActiveFiltersChanged(function(b) {
a.$evalAsync(function() {
a.statefulSets = b.select(a.unfilteredStatefulSets), h();
});
}), a.$on("$destroy", function() {
c.unwatchAll(g);
});
}));
} ]), angular.module("openshiftConsole").controller("StatefulSetController", [ "$filter", "$scope", "$routeParams", "BreadcrumbsService", "DataService", "MetricsService", "ProjectsService", "PodsService", function(a, b, c, d, e, f, g, h) {
b.projectName = c.project, b.statefulSetName = c.statefulset, b.forms = {}, b.alerts = {}, b.breadcrumbs = d.getBreadcrumbs({
<<<<<<< f56378c1e748449074be8738ae159f02ed953303
name: b.statefulSetName,
kind: "StatefulSet",
namespace: c.project
});
var i, j = [], k = b.resourceGroupVersion = {
resource: "statefulsets",
group: "apps",
version: "v1beta1"
=======
name:b.statefulSetName,
kind:"StatefulSet",
namespace:c.project
});
var i, j = [], k = b.resourceGroupVersion = {
resource:"statefulsets",
group:"apps",
version:"v1beta1"
>>>>>>> Create reusable edit-environment-variables component
};
f.isAvailable().then(function(a) {
b.metricsAvailable = a;
}), g.get(c.project).then(_.spread(function(c, d) {
i = d, e.get(k, b.statefulSetName, d, {
<<<<<<< f56378c1e748449074be8738ae159f02ed953303
errorNotification: !1
}).then(function(a) {
angular.extend(b, {
project: c,
projectContext: d,
statefulSet: a,
loaded: !0,
isScalable: function() {
return !1;
},
scale: function() {}
=======
errorNotification:!1
}).then(function(a) {
angular.extend(b, {
project:c,
projectContext:d,
statefulSet:a,
loaded:!0,
isScalable:function() {
return !1;
},
scale:function() {}
>>>>>>> Create reusable edit-environment-variables component
}), j.push(e.watchObject(k, b.statefulSetName, d, function(a) {
b.statefulSet = a;
})), j.push(e.watch("pods", d, function(c) {
var d = c.by("metadata.name");
b.podsForStatefulSet = h.filterForOwner(d, a);
=======
L();
}
<<<<<<< 1f5fb674ad14c7e78d2e82e837750bd2747349ab
<<<<<<< a19b22733566f12a68db59a49bc16848fffba594
<<<<<<< 28651868c34b8ebf846f1da11eea62cc91408c4c
<<<<<<< 9cc4f1b3be7962f38dedf1e6eb381217dccafaae
D(), e.breadcrumbs = r.getBreadcrumbs({
=======
N(), e.breadcrumbs = r.getBreadcrumbs({
>>>>>>> Adjust events to show in the drawer
=======
E(), e.breadcrumbs = r.getBreadcrumbs({
>>>>>>> Quota Notifications
=======
T(), e.breadcrumbs = r.getBreadcrumbs({
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
N(), e.breadcrumbs = r.getBreadcrumbs({
>>>>>>> Update template service broker flag name
=======
z();
}
<<<<<<< 54fd2fbbc13bc9ca6203880fcea399383443bb5d
<<<<<<< 06fbfb52480e8cc20e5a3f4162b2ca9038ca931e
<<<<<<< 7bf7823be61d31cbcc56164e8989102db4019779
<<<<<<< efac32e4a13e2aac92238d69168ae1212cab677f
<<<<<<< 95202452f2b81c9bc8bc144dd2acf1c4e4d42bb8
<<<<<<< 108d45a2ac9babe3c2b0751225807b0260dca3b6
F(), e.breadcrumbs = o.getBreadcrumbs({
>>>>>>> Update replicaSets controller to use getPreferredVersion
=======
V(), e.breadcrumbs = o.getBreadcrumbs({
>>>>>>> Update directives/deployImage to use getPreferredVersion
=======
V(), e.breadcrumbs = o.getBreadcrumbs({
>>>>>>> Update directives/serviceBinding to use getPreferredVersion
=======
V(), e.breadcrumbs = o.getBreadcrumbs({
>>>>>>> Update directives/oscPersistentVolumeClaim to use getPreferredVersion
=======
V(), e.breadcrumbs = o.getBreadcrumbs({
>>>>>>> Update nextSteps controller to use getPreferredVersion
=======
V(), e.breadcrumbs = o.getBreadcrumbs({
>>>>>>> Update createFromImage controller to use getPreferredVersion
=======
O(), e.breadcrumbs = o.getBreadcrumbs({
>>>>>>> Fix start build & deploy via correct instantiateVersions, add $filter to build group/resource string
object: t
}), $.push(i.watchObject(e.resource, n.replicaSet, u, function(t, n) {
"DELETED" === n && (e.alerts.deleted = {
type: "warning",
<<<<<<< 44f396286c95279739890891eea2b89e4abdde15
<<<<<<< 75fc56b9e42e29e1492befd08624dd0e5dade866
<<<<<<< 247459038ac366429876741dd447ec652f2f5e7d
<<<<<<< a19b22733566f12a68db59a49bc16848fffba594
<<<<<<< 46344541d4f20e3585d6ea01425f784292c0d84a
message: "This " + S + " has been deleted."
<<<<<<< 28651868c34b8ebf846f1da11eea62cc91408c4c
<<<<<<< f8cb892c3d9e864c3b7b3ba810c290ed7ce351f0
<<<<<<< 9cc4f1b3be7962f38dedf1e6eb381217dccafaae
}), e.replicaSet = t, R(t), D(), U(), e.deployment && $();
=======
}), e.replicaSet = t, R(t), N(), U(), e.deployment && $();
<<<<<<< 0666ab16a69f060ee6faef6feade97117cedbd56
<<<<<<< 33eb37eab8df0c17bc226501a924a2dc2b9b2f41
>>>>>>> Adjust events to show in the drawer
})), e.deploymentConfigName && I(), j.push(o.watch("pods", f, function(t) {
=======
})), e.deploymentConfigName && I(), j.push(o.watch("pods", g, function(t) {
>>>>>>> Patternfly vertical navigation and project bar
=======
=======
}), e.replicaSet = t, R(t), N(), U(), e.deployment && A();
>>>>>>> Let administrators disable "Copy Login Command"
})), e.deploymentConfigName && E(), j.push(o.watch("pods", g, function(t) {
>>>>>>> Enable new landing page experience by default
=======
}), e.replicaSet = t, R(t), E(), U(), e.deployment && A();
})), e.deploymentConfigName && N(), j.push(o.watch("pods", g, function(t) {
>>>>>>> Quota Notifications
=======
message: "This " + C + " has been deleted."
}), e.replicaSet = t, R(t), N(), U(), e.deployment && A();
<<<<<<< d21c662f039266e2dd235fa32bd86d3647c082ae
<<<<<<< 77ce3ebb70d0568ad8fbbb649b8a01f54552ad2c
})), e.deploymentConfigName && T(), P.push(o.watch("pods", g, function(t) {
>>>>>>> Service instance details configuration and edit
=======
})), e.deploymentConfigName && T(), j.push(o.watch("pods", g, function(t) {
>>>>>>> Add product icons for service catalog
=======
})), e.deploymentConfigName && T(), P.push(o.watch("pods", g, function(t) {
>>>>>>> Handle displaying parameters when secrets are not available.
=======
message: "This " + S + " has been deleted."
<<<<<<< 1f5fb674ad14c7e78d2e82e837750bd2747349ab
}), e.replicaSet = t, R(t), T(), U(), e.deployment && A();
})), e.deploymentConfigName && N(), j.push(o.watch("pods", g, function(t) {
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
=======
message: "This " + C + " has been deleted."
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
=======
message: "This " + C + " has been deleted."
>>>>>>> Adding label filter to ste secrets page
}), e.replicaSet = t, R(t), N(), U(), e.deployment && A();
<<<<<<< 2ce32f87748ff2fe030a6b53ff9490fcb80d856d
<<<<<<< 714c4a3ff94bc485f89078ceeb8105e8b94271be
<<<<<<< 0c40bfb0d97d474f70b5801c1312be38074c32cb
})), e.deploymentConfigName && T(), P.push(o.watch("pods", g, function(t) {
>>>>>>> Update template service broker flag name
=======
})), e.deploymentConfigName && T(), k.push(o.watch("pods", g, function(t) {
>>>>>>> Fix for adding non-builder templates to a project
=======
})), e.deploymentConfigName && T(), P.push(o.watch("pods", g, function(t) {
>>>>>>> Bug 1505281 - Improve import YAML results message
=======
})), e.deploymentConfigName && T(), k.push(o.watch("pods", g, function(t) {
>>>>>>> Update pod controller to use getPreferredVersion
=======
message: "This " + w + " has been deleted."
<<<<<<< 54fd2fbbc13bc9ca6203880fcea399383443bb5d
}), e.replicaSet = t, L(t), V(), H(), e.deployment && x();
})), e.deploymentConfigName && O(), $.push(i.watch(T, u, function(t) {
>>>>>>> Update replicaSets controller to use getPreferredVersion
=======
}), e.replicaSet = t, L(t), O(), H(), e.deployment && x();
<<<<<<< 03048c83a11138780b80c1ac333639429e2925cd
})), e.deploymentConfigName && V(), $.push(i.watch(T, u, function(t) {
>>>>>>> Fix start build & deploy via correct instantiateVersions, add $filter to build group/resource string
=======
})), e.deploymentConfigName && U(), $.push(i.watch(T, u, function(t) {
>>>>>>> Update membership to use new rbac endpoints
var n = t.by("metadata.name");
e.podsForDeployment = h.filterForOwner(n, e.replicaSet);
}));
}, function(r) {
e.loaded = !0, e.alerts.load = {
type: "error",
message: "The " + w + " details could not be loaded.",
details: t("getErrorDetails")(r)
}, e.breadcrumbs = o.getBreadcrumbs({
name: n.replicaSet,
kind: d,
namespace: n.project
});
}), $.push(i.watch(e.resource, u, function(n, r, a) {
e.replicaSets = n.by("metadata.name"), "ReplicationController" === d && (e.deploymentsByDeploymentConfig = s.associateDeploymentsToDeploymentConfig(e.replicaSets));
var o, i;
a && (o = C(a, "deploymentConfig"), i = a.metadata.name), e.deploymentConfigDeploymentsInProgress = e.deploymentConfigDeploymentsInProgress || {}, r ? "ADDED" === r || "MODIFIED" === r && t("deploymentIsInProgress")(a) ? (e.deploymentConfigDeploymentsInProgress[o] = e.deploymentConfigDeploymentsInProgress[o] || {}, e.deploymentConfigDeploymentsInProgress[o][i] = a) : "MODIFIED" === r && e.deploymentConfigDeploymentsInProgress[o] && delete e.deploymentConfigDeploymentsInProgress[o][i] : e.deploymentConfigDeploymentsInProgress = s.associateRunningDeploymentToDeploymentConfig(e.deploymentsByDeploymentConfig), a ? "DELETED" !== r && (a.causes = t("deploymentCauses")(a)) : angular.forEach(e.replicaSets, function(e) {
e.causes = t("deploymentCauses")(e);
});
})), $.push(i.watch(I, u, function(e) {
var t = e.by("metadata.name");
<<<<<<< 13ac2d832bc56edf6bc5e2fc652da9b188ddae32
<<<<<<< 44f396286c95279739890891eea2b89e4abdde15
c.buildDockerRefMapForImageStreams(t, P), U(), l.log("imagestreams (subscribe)", t);
})), k.push(o.watch("builds", g, function(t) {
e.builds = t.by("metadata.name"), l.log("builds (subscribe)", e.builds);
})), k.push(o.watch({
group: "autoscaling",
resource: "horizontalpodautoscalers",
version: "v1"
}, g, function(e) {
<<<<<<< 1f5fb674ad14c7e78d2e82e837750bd2747349ab
<<<<<<< a19b22733566f12a68db59a49bc16848fffba594
<<<<<<< 3087d5859f05def6301fced3a013ac9165fd8c7a
v = e.by("metadata.name"), T(), E();
=======
h = e.by("metadata.name"), E(), N();
>>>>>>> Add SVG icons
=======
h = e.by("metadata.name"), E(), T();
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
h = e.by("metadata.name"), E(), N();
>>>>>>> Update template service broker flag name
=======
l.buildDockerRefMapForImageStreams(t, k), H(), m.log("imagestreams (subscribe)", t);
})), $.push(i.watch(j, u, function(t) {
=======
l.buildDockerRefMapForImageStreams(t, j), H(), m.log("imagestreams (subscribe)", t);
})), $.push(i.watch(k, u, function(t) {
>>>>>>> Add Browse Catalog to Project context view.
e.builds = t.by("metadata.name"), m.log("builds (subscribe)", e.builds);
})), $.push(i.watch(R, u, function(e) {
<<<<<<< 54fd2fbbc13bc9ca6203880fcea399383443bb5d
<<<<<<< 06fbfb52480e8cc20e5a3f4162b2ca9038ca931e
<<<<<<< 7bf7823be61d31cbcc56164e8989102db4019779
<<<<<<< efac32e4a13e2aac92238d69168ae1212cab677f
<<<<<<< 95202452f2b81c9bc8bc144dd2acf1c4e4d42bb8
<<<<<<< 108d45a2ac9babe3c2b0751225807b0260dca3b6
p = e.by("metadata.name"), y(), F();
>>>>>>> Update replicaSets controller to use getPreferredVersion
=======
p = e.by("metadata.name"), y(), V();
>>>>>>> Update directives/deployImage to use getPreferredVersion
=======
p = e.by("metadata.name"), y(), V();
>>>>>>> Update directives/serviceBinding to use getPreferredVersion
=======
p = e.by("metadata.name"), y(), V();
>>>>>>> Update directives/oscPersistentVolumeClaim to use getPreferredVersion
=======
p = e.by("metadata.name"), y(), V();
>>>>>>> Update nextSteps controller to use getPreferredVersion
=======
p = e.by("metadata.name"), y(), V();
>>>>>>> Update createFromImage controller to use getPreferredVersion
=======
p = e.by("metadata.name"), y(), O();
>>>>>>> Fix start build & deploy via correct instantiateVersions, add $filter to build group/resource string
}, {
poll: V,
pollInterval: 6e4
<<<<<<< 44f396286c95279739890891eea2b89e4abdde15
})), o.list("limitranges", g).then(function(t) {
<<<<<<< 1f5fb674ad14c7e78d2e82e837750bd2747349ab
<<<<<<< a19b22733566f12a68db59a49bc16848fffba594
e.limitRanges = t.by("metadata.name"), E();
=======
})), o.list("limitranges", g).then(function(t) {
e.limitRanges = t.by("metadata.name"), N();
>>>>>>> Support EnvFrom in the Env Editors
=======
e.limitRanges = t.by("metadata.name"), T();
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
e.limitRanges = t.by("metadata.name"), N();
>>>>>>> Update template service broker flag name
=======
})), i.list(E, u).then(function(t) {
<<<<<<< 54fd2fbbc13bc9ca6203880fcea399383443bb5d
<<<<<<< 06fbfb52480e8cc20e5a3f4162b2ca9038ca931e
<<<<<<< 7bf7823be61d31cbcc56164e8989102db4019779
<<<<<<< efac32e4a13e2aac92238d69168ae1212cab677f
<<<<<<< 95202452f2b81c9bc8bc144dd2acf1c4e4d42bb8
<<<<<<< 108d45a2ac9babe3c2b0751225807b0260dca3b6
e.limitRanges = t.by("metadata.name"), F();
>>>>>>> Update replicaSets controller to use getPreferredVersion
=======
e.limitRanges = t.by("metadata.name"), V();
>>>>>>> Update directives/deployImage to use getPreferredVersion
=======
e.limitRanges = t.by("metadata.name"), V();
>>>>>>> Update directives/serviceBinding to use getPreferredVersion
=======
e.limitRanges = t.by("metadata.name"), V();
>>>>>>> Update directives/oscPersistentVolumeClaim to use getPreferredVersion
=======
e.limitRanges = t.by("metadata.name"), V();
>>>>>>> Update nextSteps controller to use getPreferredVersion
=======
e.limitRanges = t.by("metadata.name"), V();
>>>>>>> Update createFromImage controller to use getPreferredVersion
=======
e.limitRanges = t.by("metadata.name"), O();
>>>>>>> Fix start build & deploy via correct instantiateVersions, add $filter to build group/resource string
});
$.push(i.watch(D, u, function(t) {
e.quotas = t.by("metadata.name");
}, {
poll: !0,
pollInterval: 6e4
})), $.push(i.watch(A, u, function(t) {
e.clusterQuotas = t.by("metadata.name");
}, {
poll: !0,
pollInterval: 6e4
}));
var G = t("deploymentIsLatest");
e.showRollbackAction = function() {
return "Complete" === B(e.replicaSet) && !G(e.replicaSet, e.deploymentConfig) && !e.replicaSet.metadata.deletionTimestamp && a.canI("deploymentconfigrollbacks", "create");
}, e.retryFailedDeployment = function(t) {
s.retryFailedDeployment(t, u, e);
}, e.rollbackToDeployment = function(t, n, r, a) {
s.rollbackToDeployment(t, n, r, a, u, e);
}, e.cancelRunningDeployment = function(e) {
s.cancelRunningDeployment(e, u);
}, e.scale = function(n) {
var r = e.deployment || e.deploymentConfig || e.replicaSet;
s.scale(r, n).then(_.noop, function(n) {
e.alerts = e.alerts || {}, e.alerts.scale = {
type: "error",
message: "An error occurred scaling.",
details: t("getErrorDetails")(n)
};
});
};
var K = t("hasDeploymentConfig");
e.isScalable = function() {
return !!_.isEmpty(e.autoscalers) && (!K(e.replicaSet) && !P(e.replicaSet) || (!(!e.deploymentConfigMissing && !e.deploymentMissing) || !(!e.deploymentConfig && !e.deployment) && (e.isActive && !q)));
}, e.removeVolume = function(n) {
var r = "This will remove the volume from the " + t("humanizeKind")(e.replicaSet.kind) + ".";
n.persistentVolumeClaim ? r += " It will not delete the persistent volume claim." : n.secret ? r += " It will not delete the secret." : n.configMap && (r += " It will not delete the config map.");
f.confirm({
message: "Remove volume " + n.name + "?",
details: r,
okButtonText: "Remove",
okButtonClass: "btn-danger",
cancelButtonText: "Cancel"
}).then(function() {
b.removeVolume(e.replicaSet, n, u);
});
}, e.$on("$destroy", function() {
i.unwatchAll($);
});
}));
} ]), angular.module("openshiftConsole").controller("StatefulSetsController", [ "$scope", "$routeParams", "APIService", "DataService", "ProjectsService", "LabelFilter", "PodsService", function(e, t, n, r, a, o, i) {
e.projectName = t.project, e.labelSuggestions = {}, e.clearFilter = function() {
o.clear();
};
var s = n.getPreferredVersion("pods"), c = n.getPreferredVersion("statefulsets"), l = [];
a.get(t.project).then(_.spread(function(t, n) {
function a() {
e.filterWithZeroResults = !o.getLabelSelector().isEmpty() && _.isEmpty(e.statefulSets) && !_.isEmpty(e.unfilteredStatefulSets);
}
e.project = t, l.push(r.watch(c, n, function(t) {
angular.extend(e, {
loaded: !0,
unfilteredStatefulSets: t.by("metadata.name")
}), e.statefulSets = o.getLabelSelector().select(e.unfilteredStatefulSets), o.addLabelSuggestionsFromResources(e.unfilteredStatefulSets, e.labelSuggestions), o.setLabelSuggestions(e.labelSuggestions), a();
})), l.push(r.watch(s, n, function(t) {
e.pods = t.by("metadata.name"), e.podsByOwnerUID = i.groupByOwnerUID(e.pods);
})), o.onActiveFiltersChanged(function(t) {
e.$evalAsync(function() {
e.statefulSets = t.select(e.unfilteredStatefulSets), a();
});
}), e.$on("$destroy", function() {
r.unwatchAll(l);
});
}));
} ]), angular.module("openshiftConsole").controller("StatefulSetController", [ "$filter", "$scope", "$routeParams", "APIService", "BreadcrumbsService", "DataService", "MetricsService", "ProjectsService", "PodsService", function(e, t, n, r, a, o, i, s, c) {
t.projectName = n.project, t.statefulSetName = n.statefulset, t.forms = {}, t.alerts = {}, t.breadcrumbs = a.getBreadcrumbs({
name: t.statefulSetName,
kind: "StatefulSet",
namespace: n.project
});
var l = r.getPreferredVersion("pods"), u = r.getPreferredVersion("resourcequotas"), d = r.getPreferredVersion("appliedclusterresourcequotas");
t.statefulSetsVersion = r.getPreferredVersion("statefulsets");
var m, p = [];
i.isAvailable().then(function(e) {
t.metricsAvailable = e;
}), s.get(n.project).then(_.spread(function(n, r) {
m = r, o.get(t.statefulSetsVersion, t.statefulSetName, r, {
errorNotification: !1
}).then(function(e) {
angular.extend(t, {
project: n,
projectContext: r,
statefulSet: e,
loaded: !0,
isScalable: function() {
return !1;
},
scale: function() {}
}), p.push(o.watchObject(t.statefulSetsVersion, t.statefulSetName, r, function(e) {
t.statefulSet = e;
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
})), p.push(o.watch(l, a, function(n) {
var a = n.by("metadata.name");
<<<<<<< c5e2f2f315b733d64218fb4e229a4efd2c2f0059
t.podsForStatefulSet = s.filterForOwner(a, e);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
t.podsForStatefulSet = c.filterForOwner(a, e);
>>>>>>> Update stateful sets controllers to use getPreferredVersion
=======
})), p.push(o.watch(l, r, function(n) {
var r = n.by("metadata.name");
t.podsForStatefulSet = c.filterForOwner(r, e);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}));
p.push(o.watch(u, r, function(e) {
t.quotas = e.by("metadata.name");
}, {
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
<<<<<<< f56378c1e748449074be8738ae159f02ed953303
poll: !0,
pollInterval: f
=======
poll:!0,
pollInterval:f
>>>>>>> Create reusable edit-environment-variables component
})), j.push(e.watch("appliedclusterresourcequotas", d, function(a) {
b.clusterQuotas = a.by("metadata.name");
}, {
poll: !0,
pollInterval: f
}));
}, function(c) {
b.loaded = !0, b.alerts.load = {
type: "error",
message: "The stateful set details could not be loaded.",
details: a("getErrorDetails")(c)
=======
poll: !0,
pollInterval: 6e4
})), p.push(o.watch(d, r, function(e) {
t.clusterQuotas = e.by("metadata.name");
}, {
poll: !0,
pollInterval: 6e4
}));
}, function(n) {
t.loaded = !0, t.alerts.load = {
type: "error",
message: "The stateful set details could not be loaded.",
details: e("getErrorDetails")(n)
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
};
});
})), t.$on("$destroy", function() {
o.unwatchAll(p);
});
<<<<<<< 1720db6ea0b4aec9cceca2f9ada6a6dabb2f3546
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
} ]), angular.module("openshiftConsole").controller("ServicesController", [ "$routeParams", "$scope", "DataService", "ProjectsService", "$filter", "LabelFilter", "Logger", function(a, b, c, d, e, f, g) {
b.projectName = a.project, b.services = {}, b.unfilteredServices = {}, b.routesByService = {}, b.routes = {}, b.labelSuggestions = {}, b.clearFilter = function() {
f.clear();
};
var h = [];
d.get(a.project).then(_.spread(function(a, d) {
function e() {
b.filterWithZeroResults = !f.getLabelSelector().isEmpty() && _.isEmpty(b.services) && !_.isEmpty(b.unfilteredServices);
}
b.project = a, h.push(c.watch("services", d, function(a) {
b.servicesLoaded = !0, b.unfilteredServices = a.by("metadata.name"), f.addLabelSuggestionsFromResources(b.unfilteredServices, b.labelSuggestions), f.setLabelSuggestions(b.labelSuggestions), b.services = f.getLabelSelector().select(b.unfilteredServices), e(), g.log("services (subscribe)", b.unfilteredServices);
})), f.onActiveFiltersChanged(function(a) {
b.$evalAsync(function() {
b.services = a.select(b.unfilteredServices), e();
=======
} ]), angular.module("openshiftConsole").controller("ServicesController", [ "$routeParams", "$scope", "DataService", "ProjectsService", "$filter", "LabelFilter", "Logger", function(e, t, n, a, r, o, i) {
=======
} ]), angular.module("openshiftConsole").controller("ServicesController", [ "$routeParams", "$scope", "DataService", "ProjectsService", "$filter", "LabelFilter", "Logger", function(e, t, n, r, a, o, i) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
t.projectName = e.project, t.services = {}, t.unfilteredServices = {}, t.routesByService = {}, t.routes = {}, t.labelSuggestions = {}, t.clearFilter = function() {
o.clear();
=======
} ]), angular.module("openshiftConsole").controller("ServicesController", [ "$filter", "$routeParams", "$scope", "APIService", "DataService", "ProjectsService", "LabelFilter", "Logger", function(e, t, n, r, a, o, i, s) {
n.projectName = t.project, n.services = {}, n.unfilteredServices = {}, n.routesByService = {}, n.routes = {}, n.labelSuggestions = {}, n.clearFilter = function() {
i.clear();
>>>>>>> Update service, services controllers to use getPreferredVersion
};
var c = r.getPreferredVersion("services"), l = [];
o.get(t.project).then(_.spread(function(e, t) {
function r() {
n.filterWithZeroResults = !i.getLabelSelector().isEmpty() && _.isEmpty(n.services) && !_.isEmpty(n.unfilteredServices);
}
<<<<<<< 1720db6ea0b4aec9cceca2f9ada6a6dabb2f3546
t.project = e, s.push(n.watch("services", r, function(e) {
t.servicesLoaded = !0, t.unfilteredServices = e.by("metadata.name"), o.addLabelSuggestionsFromResources(t.unfilteredServices, t.labelSuggestions), o.setLabelSuggestions(t.labelSuggestions), t.services = o.getLabelSelector().select(t.unfilteredServices), a(), i.log("services (subscribe)", t.unfilteredServices);
})), o.onActiveFiltersChanged(function(e) {
t.$evalAsync(function() {
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
t.services = e.select(t.unfilteredServices), r();
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
t.services = e.select(t.unfilteredServices), a();
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
=======
n.project = e, l.push(a.watch(c, t, function(e) {
n.servicesLoaded = !0, n.unfilteredServices = e.by("metadata.name"), i.addLabelSuggestionsFromResources(n.unfilteredServices, n.labelSuggestions), i.setLabelSuggestions(n.labelSuggestions), n.services = i.getLabelSelector().select(n.unfilteredServices), r(), s.log("services (subscribe)", n.unfilteredServices);
})), i.onActiveFiltersChanged(function(e) {
n.$evalAsync(function() {
n.services = e.select(n.unfilteredServices), r();
>>>>>>> Update service, services controllers to use getPreferredVersion
});
}), n.$on("$destroy", function() {
a.unwatchAll(l);
});
}));
<<<<<<< 2c0c5427ab6cebac5278a4a53e08c3e41bcf91a0
<<<<<<< 1720db6ea0b4aec9cceca2f9ada6a6dabb2f3546
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
} ]), angular.module("openshiftConsole").controller("ServiceController", [ "$scope", "$routeParams", "DataService", "ProjectsService", "$filter", function(a, b, c, d, e) {
a.projectName = b.project, a.service = null, a.services = null, a.alerts = {}, a.renderOptions = a.renderOptions || {}, a.renderOptions.hideFilterWidget = !0, a.breadcrumbs = [ {
title: "Services",
link: "project/" + b.project + "/browse/services"
}, {
title: b.service
} ], a.podFailureReasons = {
Pending: "This pod will not receive traffic until all of its containers have been created."
};
var f = {}, g = [], h = function() {
a.service && (a.portsByRoute = {}, _.each(a.service.spec.ports, function(b) {
var c = !1;
b.nodePort && (a.showNodePorts = !0), _.each(a.routesForService, function(d) {
d.spec.port && d.spec.port.targetPort !== b.name && d.spec.port.targetPort !== b.targetPort || (a.portsByRoute[d.metadata.name] = a.portsByRoute[d.metadata.name] || [], a.portsByRoute[d.metadata.name].push(b), c = !0);
}), c || (a.portsByRoute[""] = a.portsByRoute[""] || [], a.portsByRoute[""].push(b));
}));
}, i = function() {
if (a.podsForService = {}, a.service) {
var b = new LabelSelector(a.service.spec.selector);
a.podsForService = b.select(f);
}
}, j = function(b, c) {
a.loaded = !0, a.service = b, i(), h(), "DELETED" === c && (a.alerts.deleted = {
=======
} ]), angular.module("openshiftConsole").controller("ServiceController", [ "$scope", "$routeParams", "DataService", "ProjectsService", "$filter", function(e, t, n, a, r) {
=======
} ]), angular.module("openshiftConsole").controller("ServiceController", [ "$scope", "$routeParams", "DataService", "ProjectsService", "$filter", function(e, t, n, r, a) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
=======
} ]), angular.module("openshiftConsole").controller("ServiceController", [ "$scope", "$routeParams", "APIService", "DataService", "ProjectsService", "$filter", function(e, t, n, r, a, o) {
>>>>>>> Update service, services controllers to use getPreferredVersion
=======
} ]), angular.module("openshiftConsole").controller("ServiceController", [ "$scope", "$routeParams", "APIService", "DataService", "Logger", "ProjectsService", "$filter", function(e, t, n, r, a, o, i) {
>>>>>>> Fix service page logging
e.projectName = t.project, e.service = null, e.services = null, e.alerts = {}, e.renderOptions = e.renderOptions || {}, e.renderOptions.hideFilterWidget = !0, e.breadcrumbs = [ {
title: "Services",
link: "project/" + t.project + "/browse/services"
}, {
title: t.service
} ], e.podFailureReasons = {
Pending: "This pod will not receive traffic until all of its containers have been created."
};
var s = n.getPreferredVersion("pods"), c = n.getPreferredVersion("endpoints");
e.eventsVersion = n.getPreferredVersion("events"), e.routesVersion = n.getPreferredVersion("routes"), e.servicesVersion = n.getPreferredVersion("services");
var l = {}, u = [], d = function() {
e.service && (e.portsByRoute = {}, _.each(e.service.spec.ports, function(t) {
var n = !1;
t.nodePort && (e.showNodePorts = !0), _.each(e.routesForService, function(r) {
r.spec.port && r.spec.port.targetPort !== t.name && r.spec.port.targetPort !== t.targetPort || (e.portsByRoute[r.metadata.name] = e.portsByRoute[r.metadata.name] || [], e.portsByRoute[r.metadata.name].push(t), n = !0);
}), n || (e.portsByRoute[""] = e.portsByRoute[""] || [], e.portsByRoute[""].push(t));
}));
}, m = function() {
if (e.podsForService = {}, e.service) {
var t = new LabelSelector(e.service.spec.selector);
e.podsForService = t.select(l);
}
<<<<<<< 2c0c5427ab6cebac5278a4a53e08c3e41bcf91a0
<<<<<<< 1720db6ea0b4aec9cceca2f9ada6a6dabb2f3546
}, l = function(t, n) {
e.loaded = !0, e.service = t, c(), s(), "DELETED" === n && (e.alerts.deleted = {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
}, m = function(t, n) {
e.loaded = !0, e.service = t, d(), u(), "DELETED" === n && (e.alerts.deleted = {
>>>>>>> Update service, services controllers to use getPreferredVersion
=======
}, p = function(t, n) {
e.loaded = !0, e.service = t, m(), d(), "DELETED" === n && (e.alerts.deleted = {
>>>>>>> Fix service page logging
type: "warning",
message: "This service has been deleted."
});
};
<<<<<<< 2c0c5427ab6cebac5278a4a53e08c3e41bcf91a0
<<<<<<< 1720db6ea0b4aec9cceca2f9ada6a6dabb2f3546
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
d.get(b.project).then(_.spread(function(d, k) {
a.project = d, a.projectContext = k, c.get("services", b.service, k, {
errorNotification: !1
}).then(function(a) {
j(a), g.push(c.watchObject("services", b.service, k, j));
}, function(b) {
a.loaded = !0, a.alerts.load = {
type: "error",
message: "The service details could not be loaded.",
details: e("getErrorDetails")(b)
};
}), g.push(c.watch("services", k, function(b) {
a.services = b.by("metadata.name");
})), g.push(c.watch("pods", k, function(a) {
f = a.by("metadata.name"), i();
})), g.push(c.watch("endpoints", k, function(c) {
a.podsWithEndpoints = {};
var d = c.by("metadata.name")[b.service];
d && _.each(d.subsets, function(b) {
_.each(b.addresses, function(b) {
"Pod" === _.get(b, "targetRef.kind") && (a.podsWithEndpoints[b.targetRef.name] = !0);
});
});
})), g.push(c.watch("routes", k, function(c) {
a.routesForService = {}, angular.forEach(c.by("metadata.name"), function(c) {
"Service" === c.spec.to.kind && c.spec.to.name === b.service && (a.routesForService[c.metadata.name] = c);
}), h(), Logger.log("routes (subscribe)", a.routesByService);
})), a.$on("$destroy", function() {
c.unwatchAll(g);
});
}));
} ]), angular.module("openshiftConsole").controller("ServiceInstancesController", [ "$scope", "$filter", "$routeParams", "APIService", "BindingService", "Constants", "DataService", "LabelFilter", "Logger", "ProjectsService", function(a, b, c, d, e, f, g, h, i, j) {
a.bindingsByInstanceRef = {}, a.labelSuggestions = {}, a.projectName = c.project, a.serviceClasses = {}, a.serviceInstances = {}, a.unfilteredServiceInstances = {}, a.clearFilter = function() {
h.clear();
};
var k = [], l = function() {
a.serviceInstances = h.getLabelSelector().select(a.unfilteredServiceInstances);
}, m = function() {
a.unfilteredServiceInstances = e.sortServiceInstances(a.unfilteredServiceInstances, a.serviceClasses);
};
a.getServiceClass = function(b) {
var c = _.get(b, "spec.clusterServiceClassRef.name");
return _.get(a, [ "serviceClasses", c ]);
}, j.get(c.project).then(_.spread(function(b, c) {
function e() {
a.filterWithZeroResults = !h.getLabelSelector().isEmpty() && _.isEmpty(a.serviceInstances) && !_.isEmpty(a.unfilteredServiceInstances);
}
a.project = b, a.projectContext = c;
var f = d.getPreferredVersion("servicebindings");
k.push(g.watch(f, c, function(b) {
var c = b.by("metadata.name");
a.bindingsByInstanceRef = _.groupBy(c, "spec.instanceRef.name");
}));
var j = d.getPreferredVersion("serviceinstances");
k.push(g.watch(j, c, function(b) {
a.serviceInstancesLoaded = !0, a.unfilteredServiceInstances = b.by("metadata.name"), m(), l(), e(), h.addLabelSuggestionsFromResources(a.unfilteredServiceInstances, a.labelSuggestions), h.setLabelSuggestions(a.labelSuggestions), i.log("provisioned services (subscribe)", a.unfilteredServiceInstances);
}));
var n = d.getPreferredVersion("clusterserviceclasses");
g.list(n, {}, function(b) {
a.serviceClasses = b.by("metadata.name"), m(), l();
}), h.onActiveFiltersChanged(function(b) {
a.$evalAsync(function() {
a.serviceInstances = b.select(a.unfilteredServiceInstances), e();
});
}), a.$on("$destroy", function() {
g.unwatchAll(k);
});
}));
} ]), angular.module("openshiftConsole").controller("ServiceInstanceController", [ "$scope", "$filter", "$routeParams", "APIService", "BindingService", "AuthorizationService", "Catalog", "DataService", "Logger", "ProjectsService", "SecretsService", "ServiceInstancesService", function(a, b, c, d, e, f, g, h, i, j, k, l) {
a.alerts = {}, a.projectName = c.project, a.serviceInstance = null, a.serviceClass = null, a.serviceClasses = null, a.editDialogShown = !1, a.breadcrumbs = [ {
title: "Provisioned Services",
link: "project/" + c.project + "/browse/service-instances"
} ], a.deprovision = function() {
a.serviceInstance.metadata.deletionTimestamp || l.deprovision(a.serviceInstance, a.bindings);
}, a.showEditDialog = function() {
a.editDialogShown = !0;
}, a.showParameterValues = !1, a.toggleShowParameterValues = function() {
a.showParameterValues = !a.showParameterValues;
}, a.closeEditDialog = function() {
a.editDialogShown = !1;
};
var m, n, o = [], p = [], q = b("serviceInstanceDisplayName"), r = b("isServiceInstanceFailed"), s = d.getPreferredVersion("servicebindings");
a.serviceInstancesVersion = d.getPreferredVersion("serviceinstances");
var t = function() {
a.breadcrumbs.push({
title: a.displayName
});
}, u = function() {
if (a.serviceInstance && a.parameterSchema) {
h.unwatchAll(p), p = [], a.allowParametersReveal = f.canI("secrets", "get", a.projectName), a.parameterData = {}, a.opaqueParameterKeys = [];
var b = a.allowParametersReveal ? "" : "*****";
_.each(_.keys(_.get(a.parameterSchema, "properties")), function(c) {
a.parameterData[c] = b;
});
var c = _.get(a.serviceInstance, "status.externalProperties.parameters", {});
_.each(_.keys(c), function(b) {
"<redacted>" === c[b] ? a.parameterData[b] = "*****" : (a.parameterData[b] = c[b], a.opaqueParameterKeys.push(b));
}), a.allowParametersReveal && _.each(_.get(a.serviceInstance, "spec.parametersFrom"), function(b) {
p.push(h.watchObject("secrets", _.get(b, "secretKeyRef.name"), a.projectContext, function(c) {
try {
var d = JSON.parse(k.decodeSecretData(c.data)[b.secretKeyRef.key]);
_.extend(a.parameterData, d);
} catch (e) {
i.warn("Unable to load parameters from secret " + _.get(b, "secretKeyRef.name"), e);
}
}));
});
}
}, v = function() {
if (a.plan && a.serviceClass && a.serviceInstance) {
var b = _.get(a.plan, "spec.instanceUpdateParameterSchema"), c = _.size(_.get(b, "properties")) > 0 || _.get(a.serviceClass, "spec.planUpdatable") && _.size(a.servicePlans) > 1;
a.editAvailable = c && !r(a.serviceInstance) && !_.get(a.serviceInstance, "status.asyncOpInProgress") && !_.get(a.serviceInstance, "metadata.deletionTimestamp");
}
}, w = function() {
a.parameterFormDefinition = angular.copy(_.get(a.plan, "spec.externalMetadata.schemas.service_instance.update.openshift_form_definition")), a.parameterSchema = _.get(a.plan, "spec.instanceCreateParameterSchema"), u();
}, x = function() {
var b = _.get(a.serviceInstance, "spec.clusterServicePlanRef.name");
a.plan = _.find(a.servicePlans, {
metadata: {
name: b
}
}), w(), v();
}, y = function() {
a.serviceClass && !n && (a.servicePlans ? x() : n = g.getServicePlansForServiceClass(a.serviceClass).then(function(b) {
var c = _.get(a.serviceInstance, "spec.clusterServicePlanRef.name");
a.servicePlans = _.reject(b.by("metadata.name"), function(a) {
return _.get(a, "status.removedFromBrokerCatalog") && a.metadata.name !== c;
}), x(), n = null;
}));
}, z = function() {
a.serviceInstance && !m && (a.serviceClass ? y() : m = l.fetchServiceClassForInstance(a.serviceInstance).then(function(b) {
a.serviceClass = b, a.displayName = q(a.serviceInstance, a.serviceClass), t(), m = null, y();
}));
}, A = function(b, c) {
a.loaded = !0, a.serviceInstance = b, "DELETED" === c && (a.alerts.deleted = {
type: "warning",
message: "This provisioned service has been deleted."
}), z(), u(), v();
};
j.get(c.project).then(_.spread(function(d, f) {
a.project = d, a.projectContext = f, h.get(a.serviceInstancesVersion, c.instance, f, {
errorNotification: !1
}).then(function(b) {
A(b), o.push(h.watchObject(a.serviceInstancesVersion, c.instance, f, A)), o.push(h.watch(s, f, function(c) {
var d = c.by("metadata.name");
a.bindings = e.getBindingsForResource(d, b);
}));
}, function(c) {
a.loaded = !0, a.alerts.load = {
type: "error",
message: "The provisioned service details could not be loaded.",
details: b("getErrorDetails")(c)
};
});
}, function(c) {
a.loaded = !0, a.alerts.load = {
type: "error",
message: "The service details could not be loaded.",
details: b("getErrorDetails")(c)
};
})), a.$on("$destroy", function() {
h.unwatchAll(o), h.unwatchAll(p);
});
} ]), angular.module("openshiftConsole").controller("SecretsController", [ "$routeParams", "$scope", "DataService", "ProjectsService", function(a, b, c, d) {
b.projectName = a.project, b.secretsByType = {};
var e = [];
d.get(a.project).then(_.spread(function(a, d) {
b.project = a, b.context = d, e.push(c.watch("secrets", d, function(a) {
b.secrets = _.sortBy(a.by("metadata.name"), [ "type", "metadata.name" ]), b.secretsLoaded = !0;
})), b.$on("$destroy", function() {
c.unwatchAll(e);
});
}));
} ]), angular.module("openshiftConsole").controller("SecretController", [ "$routeParams", "$filter", "$scope", "DataService", "ProjectsService", "SecretsService", function(a, b, c, d, e, f) {
c.projectName = a.project, c.secretName = a.secret, c.view = {
showSecret: !1
}, c.alerts = c.alerts || {}, c.breadcrumbs = [ {
title: "Secrets",
link: "project/" + a.project + "/browse/secrets"
}, {
title: c.secretName
} ];
var g = [], h = function(a, b) {
return c.secret = a, "DELETED" === b ? void (c.alerts.deleted = {
type: "warning",
message: "This secret has been deleted."
}) : void (c.decodedSecretData = f.decodeSecretData(c.secret.data));
};
c.addToApplicationVisible = !1, c.addToApplication = function() {
c.secret.data && (c.addToApplicationVisible = !0);
}, c.closeAddToApplication = function() {
c.addToApplicationVisible = !1;
}, e.get(a.project).then(_.spread(function(a, e) {
c.project = a, c.context = e, d.get("secrets", c.secretName, e, {
errorNotification: !1
}).then(function(a) {
c.loaded = !0, h(a), g.push(d.watchObject("secrets", c.secretName, e, h));
}, function(a) {
c.loaded = !0, c.alerts.load = {
type: "error",
message: "The secret details could not be loaded.",
details: b("getErrorDetails")(a)
};
}), c.$on("$destroy", function() {
d.unwatchAll(g);
});
}));
} ]), angular.module("openshiftConsole").controller("CreateSecretController", [ "$filter", "$location", "$routeParams", "$scope", "$window", "ApplicationGenerator", "AuthorizationService", "DataService", "Navigate", "ProjectsService", function(a, b, c, d, e, f, g, h, i, j) {
d.alerts = {}, d.projectName = c.project, d.breadcrumbs = [ {
title: "Secrets",
link: "project/" + d.projectName + "/browse/secrets"
}, {
title: "Create Secret"
} ], j.get(c.project).then(_.spread(function(a, f) {
return d.project = a, d.context = f, g.canI("secrets", "create", c.project) ? void (d.navigateBack = function() {
return c.then ? void b.url(c.then) : void e.history.back();
}) : void i.toErrorPage("You do not have authority to create secrets in project " + c.project + ".", "access_denied");
}));
} ]), angular.module("openshiftConsole").controller("ConfigMapsController", [ "$scope", "$routeParams", "APIService", "DataService", "LabelFilter", "ProjectsService", function(a, b, c, d, e, f) {
a.projectName = b.project, a.loaded = !1, a.labelSuggestions = {}, a.configMapsVersion = c.getPreferredVersion("configmaps"), a.clearFilter = function() {
e.clear();
};
var g, h = [], i = function() {
a.filterWithZeroResults = !e.getLabelSelector().isEmpty() && _.isEmpty(a.configMaps) && !_.isEmpty(g);
}, j = function() {
e.addLabelSuggestionsFromResources(g, a.labelSuggestions), e.setLabelSuggestions(a.labelSuggestions);
}, k = function() {
var b = e.getLabelSelector().select(g);
a.configMaps = _.sortBy(b, "metadata.name"), i();
};
f.get(b.project).then(_.spread(function(b, c) {
a.project = b, h.push(d.watch(a.configMapsVersion, c, function(b) {
g = b.by("metadata.name"), j(), k(), a.loaded = !0;
})), e.onActiveFiltersChanged(function() {
a.$evalAsync(k);
}), a.$on("$destroy", function() {
d.unwatchAll(h);
});
}));
} ]), angular.module("openshiftConsole").controller("ConfigMapController", [ "$scope", "$routeParams", "APIService", "BreadcrumbsService", "DataService", "ProjectsService", function(a, b, c, d, e, f) {
a.projectName = b.project, a.alerts = a.alerts || {}, a.loaded = !1, a.labelSuggestions = {}, a.breadcrumbs = d.getBreadcrumbs({
name: b.configMap,
kind: "ConfigMap",
namespace: b.project
}), a.configMapsVersion = c.getPreferredVersion("configmaps");
var g = [], h = function(b, c) {
a.loaded = !0, a.configMap = b, "DELETED" === c && (a.alerts.deleted = {
=======
a.get(t.project).then(_.spread(function(a, u) {
e.project = a, e.projectContext = u, n.get("services", t.service, u, {
=======
r.get(t.project).then(_.spread(function(r, u) {
e.project = r, e.projectContext = u, n.get("services", t.service, u, {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
=======
a.get(t.project).then(_.spread(function(n, a) {
e.project = n, e.projectContext = a, r.get(e.servicesVersion, t.service, a, {
>>>>>>> Update service, services controllers to use getPreferredVersion
=======
o.get(t.project).then(_.spread(function(n, o) {
e.project = n, e.projectContext = o, r.get(e.servicesVersion, t.service, o, {
>>>>>>> Fix service page logging
errorNotification: !1
}).then(function(n) {
p(n), u.push(r.watchObject(e.servicesVersion, t.service, o, p));
}, function(t) {
e.loaded = !0, e.alerts.load = {
type: "error",
message: "The service details could not be loaded.",
details: i("getErrorDetails")(t)
};
}), u.push(r.watch(e.servicesVersion, o, function(t) {
e.services = t.by("metadata.name");
})), u.push(r.watch(s, o, function(e) {
l = e.by("metadata.name"), m();
})), u.push(r.watch(c, o, function(n) {
e.podsWithEndpoints = {};
var r = n.by("metadata.name")[t.service];
r && _.each(r.subsets, function(t) {
_.each(t.addresses, function(t) {
"Pod" === _.get(t, "targetRef.kind") && (e.podsWithEndpoints[t.targetRef.name] = !0);
});
});
})), u.push(r.watch(e.routesVersion, o, function(n) {
e.routesForService = {}, angular.forEach(n.by("metadata.name"), function(n) {
"Service" === n.spec.to.kind && n.spec.to.name === t.service && (e.routesForService[n.metadata.name] = n);
}), d(), a.log("routes (subscribe)", e.routesForService);
})), e.$on("$destroy", function() {
r.unwatchAll(u);
});
}));
} ]), angular.module("openshiftConsole").controller("ServiceInstancesController", [ "$scope", "$filter", "$routeParams", "APIService", "BindingService", "Constants", "DataService", "LabelFilter", "Logger", "ProjectsService", function(e, t, n, r, a, o, i, s, c, l) {
e.bindingsByInstanceRef = {}, e.labelSuggestions = {}, e.projectName = n.project, e.serviceClasses = {}, e.serviceInstances = {}, e.unfilteredServiceInstances = {}, e.clearFilter = function() {
s.clear();
};
var u = r.getPreferredVersion("servicebindings"), d = r.getPreferredVersion("clusterserviceclasses");
e.serviceInstancesVersion = r.getPreferredVersion("serviceinstances");
var m = [], p = function() {
e.serviceInstances = s.getLabelSelector().select(e.unfilteredServiceInstances);
}, f = function() {
e.unfilteredServiceInstances = a.sortServiceInstances(e.unfilteredServiceInstances, e.serviceClasses);
};
e.getServiceClass = function(t) {
var n = _.get(t, "spec.clusterServiceClassRef.name");
return _.get(e, [ "serviceClasses", n ]);
}, l.get(n.project).then(_.spread(function(t, n) {
function r() {
e.filterWithZeroResults = !s.getLabelSelector().isEmpty() && _.isEmpty(e.serviceInstances) && !_.isEmpty(e.unfilteredServiceInstances);
}
e.project = t, e.projectContext = n, m.push(i.watch(u, n, function(t) {
var n = t.by("metadata.name");
e.bindingsByInstanceRef = _.groupBy(n, "spec.instanceRef.name");
<<<<<<< af20237e01df8756b3fcd23b6115674686c4e420
<<<<<<< 0ba73cbc37b88f92a6380ccc93fc8e3d978020aa
})), u.push(i.watch({
group: "servicecatalog.k8s.io",
resource: "serviceinstances"
}, n, function(t) {
e.emptyMessage = "No provisioned services to show", e.unfilteredServiceInstances = t.by("metadata.name"), m(), d(), a(), s.addLabelSuggestionsFromResources(e.unfilteredServiceInstances, e.labelSuggestions), s.setLabelSuggestions(e.labelSuggestions), c.log("provisioned services (subscribe)", e.unfilteredServiceInstances);
})), i.list({
group: "servicecatalog.k8s.io",
resource: "serviceclasses"
<<<<<<< 9bc0af8cb56dcc9609307333b9424f396867cab5
}, n, function(t) {
e.serviceClasses = t.by("metadata.name"), p(), d();
=======
}, {}, function(t) {
=======
}));
var l = a.getPreferredVersion("serviceinstances");
u.push(i.watch(l, n, function(t) {
e.serviceInstancesLoaded = !0, e.unfilteredServiceInstances = t.by("metadata.name"), m(), d(), r(), s.addLabelSuggestionsFromResources(e.unfilteredServiceInstances, e.labelSuggestions), s.setLabelSuggestions(e.labelSuggestions), c.log("provisioned services (subscribe)", e.unfilteredServiceInstances);
}));
var p = a.getPreferredVersion("clusterserviceclasses");
i.list(p, {}, function(t) {
>>>>>>> Adopt service catalog API changes
e.serviceClasses = t.by("metadata.name"), m(), d();
>>>>>>> Support EnvFrom in the Env Editors
=======
})), m.push(i.watch(e.serviceInstancesVersion, n, function(t) {
e.serviceInstancesLoaded = !0, e.unfilteredServiceInstances = t.by("metadata.name"), f(), p(), r(), s.addLabelSuggestionsFromResources(e.unfilteredServiceInstances, e.labelSuggestions), s.setLabelSuggestions(e.labelSuggestions), c.log("provisioned services (subscribe)", e.unfilteredServiceInstances);
})), i.list(d, {}, function(t) {
e.serviceClasses = t.by("metadata.name"), f(), p();
>>>>>>> Update serviceInstance, serviceInstances controllers to use getPreferredVersion
}), s.onActiveFiltersChanged(function(t) {
e.$evalAsync(function() {
e.serviceInstances = t.select(e.unfilteredServiceInstances), r();
});
}), e.$on("$destroy", function() {
i.unwatchAll(m);
});
}));
} ]), angular.module("openshiftConsole").controller("ServiceInstanceController", [ "$scope", "$filter", "$routeParams", "APIService", "BindingService", "AuthorizationService", "Catalog", "DataService", "Logger", "ProjectsService", "SecretsService", "ServiceInstancesService", function(e, t, n, r, a, o, i, s, c, l, u, d) {
e.alerts = {}, e.projectName = n.project, e.serviceInstance = null, e.serviceClass = null, e.serviceClasses = null, e.editDialogShown = !1, e.breadcrumbs = [ {
title: "Provisioned Services",
link: "project/" + n.project + "/browse/service-instances"
} ], e.deprovision = function() {
<<<<<<< 46344541d4f20e3585d6ea01425f784292c0d84a
<<<<<<< ed7141d71afeea314ad6d1183c760dedc6ee73fe
i.deprovision(e.serviceInstance);
=======
e.serviceInstance.metadata.deletionTimestamp || s.deprovision(e.serviceInstance, e.bindings);
>>>>>>> Fix issues with bindings widget for service instances
};
var c = [], l = t("serviceInstanceDisplayName"), u = a.getPreferredVersion("servicebindings");
e.serviceInstancesVersion = a.getPreferredVersion("serviceinstances");
<<<<<<< ed7141d71afeea314ad6d1183c760dedc6ee73fe
var l = function() {
e.breadcrumbs.push({
title: e.displayName
});
}, u = function() {
e.serviceClass || i.fetchServiceClassForInstance(e.serviceInstance).then(function(t) {
e.serviceClass = t, e.displayName = c(e.serviceInstance, t), l();
});
}, d = function() {
i.isCurrentPlan(e.serviceInstance, e.plan) || i.fetchServicePlanForInstance(e.serviceInstance).then(function(t) {
e.plan = t;
});
}, m = function(t, n) {
e.loaded = !0, e.serviceInstance = t, "DELETED" === n && (e.alerts.deleted = {
type: "warning",
message: "This provisioned service has been deleted."
}), u(), d();
=======
var d, m = function() {
=======
e.serviceInstance.metadata.deletionTimestamp || d.deprovision(e.serviceInstance, e.bindings);
}, e.showEditDialog = function() {
e.editDialogShown = !0;
}, e.showParameterValues = !1, e.toggleShowParameterValues = function() {
e.showParameterValues = !e.showParameterValues;
}, e.closeEditDialog = function() {
e.editDialogShown = !1;
};
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< af20237e01df8756b3fcd23b6115674686c4e420
var m, p = [], f = [], g = t("serviceInstanceDisplayName"), v = t("isServiceInstanceReady"), h = a.getPreferredVersion("servicebindings");
e.serviceInstancesVersion = a.getPreferredVersion("serviceinstances");
var y = function() {
>>>>>>> Service instance details configuration and edit
=======
var m = a.getPreferredVersion("servicebindings");
e.eventsVersion = a.getPreferredVersion("events"), e.serviceInstancesVersion = a.getPreferredVersion("serviceinstances");
=======
var m = r.getPreferredVersion("servicebindings");
e.eventsVersion = r.getPreferredVersion("events"), e.serviceInstancesVersion = r.getPreferredVersion("serviceinstances");
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
var p, f, g = [], v = [], h = t("serviceInstanceDisplayName"), y = t("isServiceInstanceFailed"), b = function() {
>>>>>>> Update serviceInstance, serviceInstances controllers to use getPreferredVersion
e.breadcrumbs.push({
title: e.displayName
});
<<<<<<< 75fc56b9e42e29e1492befd08624dd0e5dade866
<<<<<<< 247459038ac366429876741dd447ec652f2f5e7d
}, b = function() {
=======
}, S = function() {
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
=======
}, S = function() {
>>>>>>> Adding label filter to ste secrets page
if (e.serviceInstance && e.parameterSchema) {
<<<<<<< af20237e01df8756b3fcd23b6115674686c4e420
s.unwatchAll(f), f = [], e.allowParametersReveal = o.canI("secrets", "get", e.projectName), e.parameterData = {}, e.opaqueParameterKeys = [];
=======
s.unwatchAll(v), v = [], e.allowParametersReveal = o.canI("secrets", "get", e.projectName), e.parameterData = {}, e.opaqueParameterKeys = [];
>>>>>>> Update serviceInstance, serviceInstances controllers to use getPreferredVersion
var t = e.allowParametersReveal ? "" : "*****";
_.each(_.keys(_.get(e.parameterSchema, "properties")), function(n) {
e.parameterData[n] = t;
});
var n = _.get(e.serviceInstance, "status.externalProperties.parameters", {});
_.each(_.keys(n), function(t) {
"<redacted>" === n[t] ? e.parameterData[t] = "*****" : (e.parameterData[t] = n[t], e.opaqueParameterKeys.push(t));
}), e.allowParametersReveal && _.each(_.get(e.serviceInstance, "spec.parametersFrom"), function(t) {
<<<<<<< af20237e01df8756b3fcd23b6115674686c4e420
f.push(s.watchObject("secrets", _.get(t, "secretKeyRef.name"), e.projectContext, function(n) {
=======
v.push(s.watchObject("secrets", _.get(t, "secretKeyRef.name"), e.projectContext, function(n) {
>>>>>>> Update serviceInstance, serviceInstances controllers to use getPreferredVersion
try {
var r = JSON.parse(u.decodeSecretData(n.data)[t.secretKeyRef.key]);
_.extend(e.parameterData, r);
} catch (e) {
c.warn("Unable to load parameters from secret " + _.get(t, "secretKeyRef.name"), e);
}
}));
});
}
}, C = function() {
if (e.plan && e.serviceClass && e.serviceInstance) {
var t = _.get(e.plan, "spec.instanceUpdateParameterSchema"), n = _.size(_.get(t, "properties")) > 0 || _.get(e.serviceClass, "spec.planUpdatable") && _.size(e.servicePlans) > 1;
<<<<<<< af20237e01df8756b3fcd23b6115674686c4e420
e.editAvailable = n && v(e.serviceInstance) && !_.get(e.serviceInstance, "metadata.deletionTimestamp");
=======
e.editAvailable = n && !y(e.serviceInstance) && !_.get(e.serviceInstance, "status.asyncOpInProgress") && !_.get(e.serviceInstance, "metadata.deletionTimestamp");
>>>>>>> Update serviceInstance, serviceInstances controllers to use getPreferredVersion
}
}, S = function() {
e.parameterFormDefinition = angular.copy(_.get(e.plan, "spec.externalMetadata.schemas.service_instance.update.openshift_form_definition")), e.parameterSchema = _.get(e.plan, "spec.instanceCreateParameterSchema"), b();
}, w = function() {
<<<<<<< 75fc56b9e42e29e1492befd08624dd0e5dade866
<<<<<<< 247459038ac366429876741dd447ec652f2f5e7d
<<<<<<< 0c40bfb0d97d474f70b5801c1312be38074c32cb
!e.serviceInstance || e.serviceClass || m || (m = d.fetchServiceClassForInstance(e.serviceInstance).then(function(t) {
e.serviceClass = t, e.displayName = g(e.serviceInstance, e.serviceClass), y(), m = null, i.getServicePlans().then(function(t) {
t = t.by("metadata.name");
<<<<<<< a19b22733566f12a68db59a49bc16848fffba594
var n = i.groupPlansByServiceClassName(t);
e.servicePlans = n[e.serviceClass.metadata.name];
var a = _.get(e.serviceInstance, "spec.clusterServicePlanRef.name");
e.plan = t[a], C(), S();
=======
=======
e.parameterFormDefinition = angular.copy(_.get(e.plan, "spec.externalMetadata.schemas.service_instance.update.openshift_form_definition")), e.parameterSchema = _.get(e.plan, "spec.instanceCreateParameterSchema"), C();
=======
e.parameterFormDefinition = angular.copy(_.get(e.plan, "spec.externalMetadata.schemas.service_instance.update.openshift_form_definition")), e.parameterSchema = _.get(e.plan, "spec.instanceCreateParameterSchema"), S();
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
=======
e.parameterFormDefinition = angular.copy(_.get(e.plan, "spec.externalMetadata.schemas.service_instance.update.openshift_form_definition")), e.parameterSchema = _.get(e.plan, "spec.instanceCreateParameterSchema"), S();
<<<<<<< 2ce32f87748ff2fe030a6b53ff9490fcb80d856d
>>>>>>> Adding label filter to ste secrets page
}, k = function() {
=======
}, P = function() {
>>>>>>> Update pod controller to use getPreferredVersion
var t = _.get(e.serviceInstance, "spec.clusterServicePlanRef.name");
e.plan = _.find(e.servicePlans, {
metadata: {
name: t
}
<<<<<<< 75fc56b9e42e29e1492befd08624dd0e5dade866
<<<<<<< 247459038ac366429876741dd447ec652f2f5e7d
}), w(), S();
<<<<<<< 714c4a3ff94bc485f89078ceeb8105e8b94271be
}, k = function() {
e.serviceClass && !p && (e.servicePlans ? P() : p = i.getServicePlansForServiceClass(e.serviceClass).then(function(t) {
>>>>>>> Fix for adding non-builder templates to a project
=======
=======
}), w(), C();
<<<<<<< 13ac2d832bc56edf6bc5e2fc652da9b188ddae32
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
=======
}), w(), C();
<<<<<<< 2ce32f87748ff2fe030a6b53ff9490fcb80d856d
>>>>>>> Adding label filter to ste secrets page
}, P = function() {
e.serviceClass && !p && (e.servicePlans ? k() : p = i.getServicePlansForServiceClass(e.serviceClass).then(function(t) {
>>>>>>> Bug 1505281 - Improve import YAML results message
=======
}, k = function() {
<<<<<<< af20237e01df8756b3fcd23b6115674686c4e420
e.serviceClass && !p && (e.servicePlans ? P() : p = i.getServicePlansForServiceClass(e.serviceClass).then(function(t) {
>>>>>>> Update pod controller to use getPreferredVersion
=======
=======
}, j = function() {
>>>>>>> Add Browse Catalog to Project context view.
e.serviceClass && !f && (e.servicePlans ? P() : f = i.getServicePlansForServiceClass(e.serviceClass).then(function(t) {
>>>>>>> Update serviceInstance, serviceInstances controllers to use getPreferredVersion
var n = _.get(e.serviceInstance, "spec.clusterServicePlanRef.name");
e.servicePlans = _.reject(t, function(e) {
return _.get(e, "status.removedFromBrokerCatalog") && e.metadata.name !== n;
<<<<<<< af20237e01df8756b3fcd23b6115674686c4e420
<<<<<<< 2ce32f87748ff2fe030a6b53ff9490fcb80d856d
<<<<<<< 714c4a3ff94bc485f89078ceeb8105e8b94271be
<<<<<<< 0c40bfb0d97d474f70b5801c1312be38074c32cb
}), e.plan = t[n], S(), C();
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
});
=======
}), P(), p = null;
}));
}, j = function() {
e.serviceInstance && !m && (e.serviceClass ? k() : m = d.fetchServiceClassForInstance(e.serviceInstance).then(function(t) {
e.serviceClass = t, e.displayName = v(e.serviceInstance, e.serviceClass), b(), m = null, k();
>>>>>>> Fix for adding non-builder templates to a project
=======
}), k(), p = null;
=======
}), P(), f = null;
}));
<<<<<<< 13ac2d832bc56edf6bc5e2fc652da9b188ddae32
}, j = function() {
e.serviceInstance && !p && (e.serviceClass ? k() : p = d.fetchServiceClassForInstance(e.serviceInstance).then(function(t) {
e.serviceClass = t, e.displayName = h(e.serviceInstance, e.serviceClass), b(), p = null, k();
>>>>>>> Update serviceInstance, serviceInstances controllers to use getPreferredVersion
}));
}, j = function() {
e.serviceInstance && !m && (e.serviceClass ? P() : m = d.fetchServiceClassForInstance(e.serviceInstance).then(function(t) {
e.serviceClass = t, e.displayName = v(e.serviceInstance, e.serviceClass), b(), m = null, P();
>>>>>>> Bug 1505281 - Improve import YAML results message
=======
}), P(), p = null;
=======
}, k = function() {
e.serviceInstance && !p && (e.serviceClass ? j() : p = d.fetchServiceClassForInstance(e.serviceInstance).then(function(t) {
e.serviceClass = t, e.displayName = h(e.serviceInstance, e.serviceClass), b(), p = null, j();
>>>>>>> Add Browse Catalog to Project context view.
}));
}, j = function() {
e.serviceInstance && !m && (e.serviceClass ? k() : m = d.fetchServiceClassForInstance(e.serviceInstance).then(function(t) {
e.serviceClass = t, e.displayName = v(e.serviceInstance, e.serviceClass), b(), m = null, k();
>>>>>>> Update pod controller to use getPreferredVersion
}));
<<<<<<< b4ddc9b550515059b9681d76233c34b7f7b3431c
}, k = function(t, n) {
=======
}, I = function(t, n) {
>>>>>>> Add search catalog in project context
e.loaded = !0, e.serviceInstance = t, "DELETED" === n && (e.alerts.deleted = {
type: "warning",
message: "This provisioned service has been deleted."
<<<<<<< 13ac2d832bc56edf6bc5e2fc652da9b188ddae32
<<<<<<< 75fc56b9e42e29e1492befd08624dd0e5dade866
<<<<<<< 247459038ac366429876741dd447ec652f2f5e7d
<<<<<<< a19b22733566f12a68db59a49bc16848fffba594
<<<<<<< 46344541d4f20e3585d6ea01425f784292c0d84a
}), p(), f();
>>>>>>> Fix issues with bindings widget for service instances
=======
}), w(), b(), S();
>>>>>>> Service instance details configuration and edit
=======
}), w(), b(), C();
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
}), j(), S(), C();
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
=======
}), j(), S(), C();
>>>>>>> Adding label filter to ste secrets page
=======
}), k(), S(), C();
>>>>>>> Add Browse Catalog to Project context view.
};
l.get(n.project).then(_.spread(function(r, o) {
e.project = r, e.projectContext = o, s.get(e.serviceInstancesVersion, n.instance, o, {
errorNotification: !1
}).then(function(t) {
<<<<<<< b4ddc9b550515059b9681d76233c34b7f7b3431c
<<<<<<< af20237e01df8756b3fcd23b6115674686c4e420
<<<<<<< 46344541d4f20e3585d6ea01425f784292c0d84a
<<<<<<< ed7141d71afeea314ad6d1183c760dedc6ee73fe
m(t), s.push(r.watchObject(e.serviceInstancesVersion, n.instance, o, m));
=======
g(t), c.push(o.watchObject(e.serviceInstancesVersion, n.instance, i, g)), c.push(o.watch(u, i, function(n) {
=======
k(t), p.push(s.watchObject(e.serviceInstancesVersion, n.instance, o, k)), p.push(s.watch(h, o, function(n) {
>>>>>>> Service instance details configuration and edit
=======
R(t), g.push(s.watchObject(e.serviceInstancesVersion, n.instance, o, R)), g.push(s.watch(m, o, function(n) {
>>>>>>> Update serviceInstance, serviceInstances controllers to use getPreferredVersion
=======
I(t), g.push(s.watchObject(e.serviceInstancesVersion, n.instance, o, I)), g.push(s.watch(m, o, function(n) {
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
>>>>>>> Add search catalog in project context
var a = n.by("metadata.name");
e.bindings = r.getBindingsForResource(a, t);
=======
var r = n.by("metadata.name");
e.bindings = a.getBindingsForResource(r, t);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}));
>>>>>>> Fix issues with bindings widget for service instances
}, function(n) {
e.loaded = !0, e.alerts.load = {
type: "error",
message: "The provisioned service details could not be loaded.",
details: t("getErrorDetails")(n)
};
<<<<<<< 46344541d4f20e3585d6ea01425f784292c0d84a
<<<<<<< 0ba73cbc37b88f92a6380ccc93fc8e3d978020aa
}), a.list({
group: "servicecatalog.k8s.io",
resource: "serviceclasses"
}, o, function(t) {
e.serviceClasses = t.by("metadata.name"), c(), s();
=======
>>>>>>> Adopt service catalog API changes
}), e.$on("$destroy", function() {
o.unwatchAll(c);
=======
>>>>>>> Service instance details configuration and edit
});
}, function(n) {
e.loaded = !0, e.alerts.load = {
type: "error",
message: "The service details could not be loaded.",
details: t("getErrorDetails")(n)
};
})), e.$on("$destroy", function() {
<<<<<<< af20237e01df8756b3fcd23b6115674686c4e420
s.unwatchAll(p), s.unwatchAll(f);
=======
s.unwatchAll(g), s.unwatchAll(v);
>>>>>>> Update serviceInstance, serviceInstances controllers to use getPreferredVersion
});
} ]), angular.module("openshiftConsole").controller("SecretsController", [ "$routeParams", "$scope", "APIService", "DataService", "LabelFilter", "ProjectsService", function(e, t, n, r, a, o) {
t.projectName = e.project, t.labelSuggestions = {}, t.clearFilter = function() {
a.clear();
}, t.secretsVersion = n.getPreferredVersion("secrets");
var i = [];
o.get(e.project).then(_.spread(function(e, n) {
function o() {
t.filterWithZeroResults = !a.getLabelSelector().isEmpty() && _.isEmpty(t.secrets) && !_.isEmpty(t.unfilteredSecrets);
}
t.project = e, t.context = n, i.push(r.watch(t.secretsVersion, n, function(e) {
t.unfilteredSecrets = _.sortBy(e.by("metadata.name"), [ "type", "metadata.name" ]), t.secretsLoaded = !0, a.addLabelSuggestionsFromResources(t.unfilteredSecrets, t.labelSuggestions), a.setLabelSuggestions(t.labelSuggestions), t.secrets = a.getLabelSelector().select(t.unfilteredSecrets), o();
})), a.onActiveFiltersChanged(function(e) {
t.$evalAsync(function() {
t.secrets = e.select(t.unfilteredSecrets), o();
});
}), t.$on("$destroy", function() {
r.unwatchAll(i);
});
}));
} ]), angular.module("openshiftConsole").controller("SecretController", [ "$routeParams", "$filter", "$scope", "APIService", "DataService", "ProjectsService", "SecretsService", function(e, t, n, r, a, o, i) {
n.projectName = e.project, n.secretName = e.secret, n.view = {
showSecret: !1
}, n.alerts = n.alerts || {}, n.breadcrumbs = [ {
title: "Secrets",
link: "project/" + e.project + "/browse/secrets"
}, {
title: n.secretName
} ], n.secretsVersion = r.getPreferredVersion("secrets");
var s = [], c = function(e, t) {
n.secret = e, "DELETED" !== t ? n.decodedSecretData = i.decodeSecretData(n.secret.data) : n.alerts.deleted = {
type: "warning",
message: "This secret has been deleted."
};
};
n.addToApplicationVisible = !1, n.addToApplication = function() {
n.secret.data && (n.addToApplicationVisible = !0);
}, n.closeAddToApplication = function() {
n.addToApplicationVisible = !1;
}, o.get(e.project).then(_.spread(function(e, r) {
n.project = e, n.context = r, a.get(n.secretsVersion, n.secretName, r, {
errorNotification: !1
}).then(function(e) {
n.loaded = !0, c(e), s.push(a.watchObject(n.secretsVersion, n.secretName, r, c));
}, function(e) {
n.loaded = !0, n.alerts.load = {
type: "error",
message: "The secret details could not be loaded.",
details: t("getErrorDetails")(e)
};
}), n.$on("$destroy", function() {
a.unwatchAll(s);
});
}));
} ]), angular.module("openshiftConsole").controller("CreateSecretController", [ "$filter", "$location", "$routeParams", "$scope", "$window", "ApplicationGenerator", "AuthorizationService", "DataService", "Navigate", "ProjectsService", function(e, t, n, r, a, o, i, s, c, l) {
r.alerts = {}, r.projectName = n.project, r.breadcrumbs = [ {
title: "Secrets",
link: "project/" + r.projectName + "/browse/secrets"
}, {
title: "Create Secret"
} ], l.get(n.project).then(_.spread(function(e, o) {
r.project = e, r.context = o, i.canI("secrets", "create", n.project) ? r.navigateBack = function() {
n.then ? t.url(n.then) : a.history.back();
} : c.toErrorPage("You do not have authority to create secrets in project " + n.project + ".", "access_denied");
}));
} ]), angular.module("openshiftConsole").controller("ConfigMapsController", [ "$scope", "$routeParams", "APIService", "DataService", "LabelFilter", "ProjectsService", function(e, t, n, r, a, o) {
e.projectName = t.project, e.loaded = !1, e.labelSuggestions = {}, e.configMapsVersion = n.getPreferredVersion("configmaps"), e.clearFilter = function() {
a.clear();
};
var i, s = [], c = function() {
e.filterWithZeroResults = !a.getLabelSelector().isEmpty() && _.isEmpty(e.configMaps) && !_.isEmpty(i);
}, l = function() {
a.addLabelSuggestionsFromResources(i, e.labelSuggestions), a.setLabelSuggestions(e.labelSuggestions);
}, u = function() {
var t = a.getLabelSelector().select(i);
e.configMaps = _.sortBy(t, "metadata.name"), c();
};
o.get(t.project).then(_.spread(function(t, n) {
e.project = t, s.push(r.watch(e.configMapsVersion, n, function(t) {
i = t.by("metadata.name"), l(), u(), e.loaded = !0;
})), a.onActiveFiltersChanged(function() {
e.$evalAsync(u);
}), e.$on("$destroy", function() {
r.unwatchAll(s);
});
}));
} ]), angular.module("openshiftConsole").controller("ConfigMapController", [ "$scope", "$routeParams", "APIService", "BreadcrumbsService", "DataService", "ProjectsService", function(e, t, n, r, a, o) {
e.projectName = t.project, e.alerts = e.alerts || {}, e.loaded = !1, e.labelSuggestions = {}, e.breadcrumbs = r.getBreadcrumbs({
name: t.configMap,
kind: "ConfigMap",
namespace: t.project
}), e.configMapsVersion = n.getPreferredVersion("configmaps");
var i = [], s = function(t, n) {
e.loaded = !0, e.configMap = t, "DELETED" === n && (e.alerts.deleted = {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
type: "warning",
message: "This config map has been deleted."
});
};
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< 6d5e9a5aa4a6d93c06a5519a2feb6650bd482f4a
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
a.addToApplicationVisible = !1, a.addToApplication = function() {
a.addToApplicationVisible = !0;
}, a.closeAddToApplication = function() {
a.addToApplicationVisible = !1;
}, f.get(b.project).then(_.spread(function(c, d) {
a.project = c, e.get(a.configMapsVersion, b.configMap, d, {
errorNotification: !1
}).then(function(a) {
h(a), g.push(e.watchObject("configmaps", b.configMap, d, h));
}, function(b) {
a.loaded = !0, a.error = b;
}), a.$on("$destroy", function() {
e.unwatchAll(g);
});
}));
} ]), angular.module("openshiftConsole").controller("CreateConfigMapController", [ "$filter", "$routeParams", "$scope", "$window", "APIService", "AuthorizationService", "DataService", "Navigate", "NotificationsService", "ProjectsService", function(a, b, c, d, e, f, g, h, i, j) {
c.projectName = b.project, c.breadcrumbs = [ {
title: "Config Maps",
link: "project/" + c.projectName + "/browse/config-maps"
}, {
title: "Create Config Map"
} ];
var k = function() {
i.hideNotification("create-config-map-error");
};
c.$on("$destroy", k);
var l = function() {
d.history.back();
};
c.cancel = l, j.get(b.project).then(_.spread(function(d, j) {
return c.project = d, f.canI("configmaps", "create", b.project) ? (c.configMap = {
apiVersion: "v1",
kind: "ConfigMap",
metadata: {
namespace: b.project
},
data: {}
}, void (c.createConfigMap = function() {
if (c.createConfigMapForm.$valid) {
k(), c.disableInputs = !0;
var b = e.objectToResourceGroupVersion(c.configMap);
g.create(b, null, c.configMap, j).then(function() {
i.addNotification({
type: "success",
message: "Config map " + c.configMap.metadata.name + " successfully created."
}), l();
}, function(b) {
c.disableInputs = !1, i.addNotification({
id: "create-config-map-error",
type: "error",
message: "An error occurred creating the config map.",
details: a("getErrorDetails")(b)
});
});
}
})) : void h.toErrorPage("You do not have authority to create config maps in project " + b.project + ".", "access_denied");
}));
} ]), angular.module("openshiftConsole").controller("RoutesController", [ "$routeParams", "$scope", "DataService", "$filter", "LabelFilter", "ProjectsService", function(a, b, c, d, e, f) {
b.projectName = a.project, b.unfilteredRoutes = {}, b.routes = {}, b.labelSuggestions = {}, b.clearFilter = function() {
e.clear();
};
var g = [];
f.get(a.project).then(_.spread(function(a, d) {
function f() {
b.filterWithZeroResults = !e.getLabelSelector().isEmpty() && _.isEmpty(b.routes) && !_.isEmpty(b.unfilteredRoutes);
}
b.project = a, g.push(c.watch("routes", d, function(a) {
b.routesLoaded = !0, b.unfilteredRoutes = a.by("metadata.name"), e.addLabelSuggestionsFromResources(b.unfilteredRoutes, b.labelSuggestions), e.setLabelSuggestions(b.labelSuggestions), b.routes = e.getLabelSelector().select(b.unfilteredRoutes), f();
})), g.push(c.watch("services", d, function(a) {
b.services = a.by("metadata.name");
})), e.onActiveFiltersChanged(function(a) {
b.$evalAsync(function() {
b.routes = a.select(b.unfilteredRoutes), f();
=======
r.get(t.project).then(_.spread(function(n, r) {
a.get("configmaps", t.configMap, r, {
=======
e.addToApplicationVisible = !1, e.addToApplication = function() {
e.addToApplicationVisible = !0;
}, e.closeAddToApplication = function() {
e.addToApplicationVisible = !1;
<<<<<<< fc0f316593fabf6f406ea5caaad59ec90408ea48
}, r.get(t.project).then(_.spread(function(n, r) {
e.project = n, a.get("configmaps", t.configMap, r, {
>>>>>>> "Add to Application" for config maps
=======
}, o.get(t.project).then(_.spread(function(n, a) {
e.project = n, r.get(e.configMapsVersion, t.configMap, a, {
>>>>>>> Update configMap/configMaps controllers to use getPreferredVersion
errorNotification: !1
}).then(function(e) {
s(e), i.push(r.watchObject("configmaps", t.configMap, a, s));
}, function(t) {
e.loaded = !0, e.error = t;
}), e.$on("$destroy", function() {
r.unwatchAll(i);
});
}));
} ]), angular.module("openshiftConsole").controller("CreateConfigMapController", [ "$filter", "$routeParams", "$scope", "$window", "APIService", "AuthorizationService", "DataService", "Navigate", "NotificationsService", "ProjectsService", function(e, t, n, a, r, o, i, s, c, l) {
=======
e.addToApplicationVisible = !1, e.addToApplication = function() {
e.addToApplicationVisible = !0;
}, e.closeAddToApplication = function() {
e.addToApplicationVisible = !1;
}, o.get(t.project).then(_.spread(function(n, r) {
e.project = n, a.get(e.configMapsVersion, t.configMap, r, {
errorNotification: !1
}).then(function(e) {
s(e), i.push(a.watchObject("configmaps", t.configMap, r, s));
}, function(t) {
e.loaded = !0, e.error = t;
}), e.$on("$destroy", function() {
a.unwatchAll(i);
});
}));
} ]), angular.module("openshiftConsole").controller("CreateConfigMapController", [ "$filter", "$routeParams", "$scope", "$window", "APIService", "AuthorizationService", "DataService", "Navigate", "NotificationsService", "ProjectsService", function(e, t, n, r, a, o, i, s, c, l) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
n.projectName = t.project, n.breadcrumbs = [ {
title: "Config Maps",
link: "project/" + n.projectName + "/browse/config-maps"
}, {
title: "Create Config Map"
} ];
var u = function() {
c.hideNotification("create-config-map-error");
};
n.$on("$destroy", u);
var d = function() {
r.history.back();
};
n.cancel = d, l.get(t.project).then(_.spread(function(r, l) {
n.project = r, o.canI("configmaps", "create", t.project) ? (n.configMap = {
apiVersion: "v1",
kind: "ConfigMap",
metadata: {
namespace: t.project
},
data: {}
}, n.createConfigMap = function() {
if (n.createConfigMapForm.$valid) {
u(), n.disableInputs = !0;
var t = a.objectToResourceGroupVersion(n.configMap);
i.create(t, null, n.configMap, l).then(function() {
c.addNotification({
type: "success",
message: "Config map " + n.configMap.metadata.name + " successfully created."
}), d();
}, function(t) {
n.disableInputs = !1, c.addNotification({
id: "create-config-map-error",
type: "error",
message: "An error occurred creating the config map.",
details: e("getErrorDetails")(t)
});
});
}
}) : s.toErrorPage("You do not have authority to create config maps in project " + t.project + ".", "access_denied");
}));
} ]), angular.module("openshiftConsole").controller("RoutesController", [ "$filter", "$routeParams", "$scope", "APIService", "DataService", "LabelFilter", "ProjectsService", function(e, t, n, r, a, o, i) {
n.projectName = t.project, n.unfilteredRoutes = {}, n.routes = {}, n.labelSuggestions = {}, n.clearFilter = function() {
o.clear();
};
var s = r.getPreferredVersion("services");
n.routesVersion = r.getPreferredVersion("routes");
var c = [];
i.get(t.project).then(_.spread(function(e, t) {
function r() {
n.filterWithZeroResults = !o.getLabelSelector().isEmpty() && _.isEmpty(n.routes) && !_.isEmpty(n.unfilteredRoutes);
}
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< dcc2597a3dba049aabc111ffd8a8e1cd9f390594
t.project = e, i.push(n.watch("routes", a, function(e) {
t.routesLoaded = !0, t.unfilteredRoutes = e.by("metadata.name"), r.addLabelSuggestionsFromResources(t.unfilteredRoutes, t.labelSuggestions), r.setLabelSuggestions(t.labelSuggestions), t.routes = r.getLabelSelector().select(t.unfilteredRoutes), o();
})), i.push(n.watch("services", a, function(e) {
t.services = e.by("metadata.name");
})), r.onActiveFiltersChanged(function(e) {
t.$evalAsync(function() {
t.routes = e.select(t.unfilteredRoutes), o();
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
n.project = e, c.push(r.watch(n.routesVersion, t, function(e) {
n.routesLoaded = !0, n.unfilteredRoutes = e.by("metadata.name"), o.addLabelSuggestionsFromResources(n.unfilteredRoutes, n.labelSuggestions), o.setLabelSuggestions(n.labelSuggestions), n.routes = o.getLabelSelector().select(n.unfilteredRoutes), a();
})), c.push(r.watch(s, t, function(e) {
n.services = e.by("metadata.name");
})), o.onActiveFiltersChanged(function(e) {
n.$evalAsync(function() {
n.routes = e.select(n.unfilteredRoutes), a();
>>>>>>> Update routes controller to use getPreferredVersion
=======
n.project = e, c.push(a.watch(n.routesVersion, t, function(e) {
n.routesLoaded = !0, n.unfilteredRoutes = e.by("metadata.name"), o.addLabelSuggestionsFromResources(n.unfilteredRoutes, n.labelSuggestions), o.setLabelSuggestions(n.labelSuggestions), n.routes = o.getLabelSelector().select(n.unfilteredRoutes), r();
})), c.push(a.watch(s, t, function(e) {
n.services = e.by("metadata.name");
})), o.onActiveFiltersChanged(function(e) {
n.$evalAsync(function() {
n.routes = e.select(n.unfilteredRoutes), r();
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
});
}), n.$on("$destroy", function() {
a.unwatchAll(c);
});
}));
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< 608c094bb49d96caec6ebbc1443b6f0112ac66d6
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
} ]), angular.module("openshiftConsole").controller("RouteController", [ "$scope", "$filter", "$routeParams", "AlertMessageService", "DataService", "ProjectsService", "RoutesService", function(a, b, c, d, e, f, g) {
a.projectName = c.project, a.route = null, a.alerts = {}, a.renderOptions = a.renderOptions || {}, a.renderOptions.hideFilterWidget = !0, a.breadcrumbs = [ {
title: "Routes",
link: "project/" + c.project + "/browse/routes"
}, {
title: c.route
} ];
var h, i = [], j = function(b, c) {
a.loaded = !0, a.route = b, h = g.isCustomHost(b), "DELETED" === c && (a.alerts.deleted = {
type: "warning",
message: "This route has been deleted."
});
}, k = function(b) {
var c = _.get(a, "route.metadata.uid");
return "router-host-" + c + "-" + b.host + "-" + b.routerCanonicalHostname;
};
a.showRouterHostnameAlert = function(b, c) {
if (!h) return !1;
if (!b || !b.host || !b.routerCanonicalHostname) return !1;
if (!c || "True" !== c.status) return !1;
var e = k(b);
return !d.isAlertPermanentlyHidden(e, a.projectName);
}, f.get(c.project).then(_.spread(function(d, f) {
a.project = d, e.get("routes", c.route, f, {
errorNotification: !1
}).then(function(a) {
j(a), i.push(e.watchObject("routes", c.route, f, j));
}, function(c) {
a.loaded = !0, a.alerts.load = {
type: "error",
message: "The route details could not be loaded.",
details: b("getErrorDetails")(c)
};
}), i.push(e.watch("services", f, function(b) {
a.services = b.by("metadata.name");
})), a.$on("$destroy", function() {
e.unwatchAll(i);
});
}));
} ]), angular.module("openshiftConsole").controller("StorageController", [ "$routeParams", "$scope", "AlertMessageService", "DataService", "ProjectsService", "QuotaService", "$filter", "LabelFilter", "Logger", "gettext", "gettextCatalog", function(a, b, c, d, e, f, g, h, i, j, k) {
b.projectName = a.project, b.pvcs = {}, b.unfilteredPVCs = {}, b.labelSuggestions = {}, b.alerts = b.alerts || {}, b.outOfClaims = !1, b.clearFilter = function() {
h.clear();
};
var l = function() {
var a = c.isAlertPermanentlyHidden("storage-quota-limit-reached", b.projectName);
if (b.outOfClaims = f.isAnyStorageQuotaExceeded(b.quotas, b.clusterQuotas), !a && b.outOfClaims) {
if (b.alerts.quotaExceeded) return;
b.alerts.quotaExceeded = {
type: "warning",
message: k.getString(j("Storage quota limit has been reached. You will not be able to create any new storage.")),
links: [ {
href: "project/" + b.projectName + "/quota",
label: k.getString(j("View Quota"))
}, {
href: "",
label: k.getString(j("Don't Show Me Again")),
onClick: function() {
return c.permanentlyHideAlert("storage-quota-limit-reached", b.projectName), !0;
}
} ]
};
} else delete b.alerts.quotaExceeded;
}, m = [];
e.get(a.project).then(_.spread(function(a, c) {
function e() {
b.filterWithZeroResults = !h.getLabelSelector().isEmpty() && $.isEmptyObject(b.pvcs) && !$.isEmptyObject(b.unfilteredPVCs);
}
b.project = a, m.push(d.watch("persistentvolumeclaims", c, function(a) {
b.pvcsLoaded = !0, b.unfilteredPVCs = a.by("metadata.name"), h.addLabelSuggestionsFromResources(b.unfilteredPVCs, b.labelSuggestions), h.setLabelSuggestions(b.labelSuggestions), b.pvcs = h.getLabelSelector().select(b.unfilteredPVCs), e(), i.log("pvcs (subscribe)", b.unfilteredPVCs);
})), h.onActiveFiltersChanged(function(a) {
b.$evalAsync(function() {
b.pvcs = a.select(b.unfilteredPVCs), e();
});
}), b.$on("$destroy", function() {
d.unwatchAll(m);
}), d.list("resourcequotas", {
namespace: b.projectName
}, function(a) {
b.quotas = a.by("metadata.name"), l();
}), d.list("appliedclusterresourcequotas", {
namespace: b.projectName
}, function(a) {
b.clusterQuotas = a.by("metadata.name"), l();
});
}));
} ]), angular.module("openshiftConsole").controller("OtherResourcesController", [ "$routeParams", "$location", "$scope", "AuthorizationService", "DataService", "ProjectsService", "$filter", "LabelFilter", "Logger", "APIService", function(a, b, c, d, e, f, g, h, i, j) {
function k() {
c.filterWithZeroResults = !h.getLabelSelector().isEmpty() && _.isEmpty(c.resources) && !_.isEmpty(c.unfilteredResources);
}
function l() {
var a = c.kindSelector.selected;
if (a) {
var d = b.search();
d.kind = a.kind, d.group = a.group || "", b.replace().search(d), c.selectedResource = {
resource: j.kindToResource(a.kind),
group: a.group || ""
}, e.list({
group: a.group,
resource: j.kindToResource(a.kind)
}, c.context).then(function(b) {
c.unfilteredResources = b.by("metadata.name"), c.labelSuggestions = {}, h.addLabelSuggestionsFromResources(c.unfilteredResources, c.labelSuggestions), h.setLabelSuggestions(c.labelSuggestions), c.resources = h.getLabelSelector().select(c.unfilteredResources), c.resourceName = j.kindToResource(a.kind, !0), k();
});
}
}
c.projectName = a.project, c.labelSuggestions = {}, c.kindSelector = {
disabled: !0
}, c.kinds = _.filter(j.availableKinds(), function(a) {
switch (a.kind) {
case "AppliedClusterResourceQuota":
=======
} ]), angular.module("openshiftConsole").controller("RouteController", [ "$scope", "$filter", "$routeParams", "AlertMessageService", "DataService", "ProjectsService", "RoutesService", function(e, t, n, a, r, o, i) {
=======
} ]), angular.module("openshiftConsole").controller("RouteController", [ "$scope", "$filter", "$routeParams", "AlertMessageService", "APIService", "DataService", "ProjectsService", "RoutesService", function(e, t, n, a, r, o, i, s) {
>>>>>>> Update route controller to use getPreferredVersion
=======
} ]), angular.module("openshiftConsole").controller("RouteController", [ "$scope", "$filter", "$routeParams", "AlertMessageService", "APIService", "DataService", "ProjectsService", "RoutesService", function(e, t, n, r, a, o, i, s) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
e.projectName = n.project, e.route = null, e.alerts = {}, e.renderOptions = e.renderOptions || {}, e.renderOptions.hideFilterWidget = !0, e.breadcrumbs = [ {
title: "Routes",
link: "project/" + n.project + "/browse/routes"
}, {
title: n.route
} ];
var c = a.getPreferredVersion("services");
e.routesVersion = a.getPreferredVersion("routes");
var l, u = [], d = function(t, n) {
e.loaded = !0, e.route = t, l = s.isCustomHost(t), "DELETED" === n && (e.alerts.deleted = {
type: "warning",
message: "This route has been deleted."
});
}, m = function(t) {
return "router-host-" + _.get(e, "route.metadata.uid") + "-" + t.host + "-" + t.routerCanonicalHostname;
};
e.showRouterHostnameAlert = function(t, n) {
if (!l) return !1;
if (!t || !t.host || !t.routerCanonicalHostname) return !1;
if (!n || "True" !== n.status) return !1;
var a = m(t);
return !r.isAlertPermanentlyHidden(a, e.projectName);
}, i.get(n.project).then(_.spread(function(r, a) {
e.project = r, o.get(e.routesVersion, n.route, a, {
errorNotification: !1
}).then(function(t) {
d(t), u.push(o.watchObject(e.routesVersion, n.route, a, d));
}, function(n) {
e.loaded = !0, e.alerts.load = {
type: "error",
message: "The route details could not be loaded.",
details: t("getErrorDetails")(n)
};
}), u.push(o.watch(c, a, function(t) {
e.services = t.by("metadata.name");
})), e.$on("$destroy", function() {
o.unwatchAll(u);
});
}));
} ]), angular.module("openshiftConsole").controller("StorageController", [ "$filter", "$routeParams", "$scope", "APIService", "AlertMessageService", "DataService", "LabelFilter", "Logger", "ProjectsService", "QuotaService", function(e, t, n, r, a, o, i, s, c, l) {
n.projectName = t.project, n.pvcs = {}, n.unfilteredPVCs = {}, n.labelSuggestions = {}, n.alerts = n.alerts || {}, n.outOfClaims = !1, n.clearFilter = function() {
i.clear();
};
var u = function() {
var e = a.isAlertPermanentlyHidden("storage-quota-limit-reached", n.projectName);
if (n.outOfClaims = l.isAnyStorageQuotaExceeded(n.quotas, n.clusterQuotas), !e && n.outOfClaims) {
if (n.alerts.quotaExceeded) return;
n.alerts.quotaExceeded = {
type: "warning",
message: "Storage quota limit has been reached. You will not be able to create any new storage.",
links: [ {
href: "project/" + n.projectName + "/quota",
label: "View Quota"
}, {
href: "",
label: "Don't Show Me Again",
onClick: function() {
return a.permanentlyHideAlert("storage-quota-limit-reached", n.projectName), !0;
}
} ]
};
} else delete n.alerts.quotaExceeded;
}, d = r.getPreferredVersion("resourcequotas"), m = r.getPreferredVersion("appliedclusterresourcequotas");
n.persistentVolumeClaimsVersion = r.getPreferredVersion("persistentvolumeclaims");
var p = [];
c.get(t.project).then(_.spread(function(e, t) {
function r() {
n.filterWithZeroResults = !i.getLabelSelector().isEmpty() && $.isEmptyObject(n.pvcs) && !$.isEmptyObject(n.unfilteredPVCs);
}
n.project = e, p.push(o.watch(n.persistentVolumeClaimsVersion, t, function(e) {
n.pvcsLoaded = !0, n.unfilteredPVCs = e.by("metadata.name"), i.addLabelSuggestionsFromResources(n.unfilteredPVCs, n.labelSuggestions), i.setLabelSuggestions(n.labelSuggestions), n.pvcs = i.getLabelSelector().select(n.unfilteredPVCs), r(), s.log("pvcs (subscribe)", n.unfilteredPVCs);
})), i.onActiveFiltersChanged(function(e) {
n.$evalAsync(function() {
n.pvcs = e.select(n.unfilteredPVCs), r();
});
}), n.$on("$destroy", function() {
o.unwatchAll(p);
}), o.list(d, {
namespace: n.projectName
}, function(e) {
n.quotas = e.by("metadata.name"), u();
}), o.list(m, {
namespace: n.projectName
}, function(e) {
n.clusterQuotas = e.by("metadata.name"), u();
});
}));
} ]), angular.module("openshiftConsole").controller("OtherResourcesController", [ "$routeParams", "$location", "$scope", "AuthorizationService", "DataService", "ProjectsService", "$filter", "LabelFilter", "Logger", "APIService", function(e, t, n, r, a, o, i, s, c, l) {
function u() {
n.filterWithZeroResults = !s.getLabelSelector().isEmpty() && _.isEmpty(n.resources) && !_.isEmpty(n.unfilteredResources);
}
function d() {
var e = n.kindSelector.selected;
if (e) {
var r = t.search();
r.kind = e.kind, r.group = e.group || "", t.replace().search(r), n.selectedResource = {
resource: l.kindToResource(e.kind),
group: e.group || ""
}, a.list({
group: e.group,
resource: l.kindToResource(e.kind)
}, n.context).then(function(t) {
n.unfilteredResources = t.by("metadata.name"), n.labelSuggestions = {}, s.addLabelSuggestionsFromResources(n.unfilteredResources, n.labelSuggestions), s.setLabelSuggestions(n.labelSuggestions), n.resources = s.getLabelSelector().select(n.unfilteredResources), n.resourceName = l.kindToResource(e.kind, !0), u();
});
}
}
n.projectName = e.project, n.labelSuggestions = {}, n.kindSelector = {
disabled: !0
}, n.kinds = _.filter(l.availableKinds(), function(e) {
switch (e.kind) {
<<<<<<< 7589890d205f4617c71a4b92195a0ff6e9fdf8d3
case "ReplicationController":
case "Deployment":
case "DeploymentConfig":
case "BuildConfig":
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
case "AppliedClusterResourceQuota":
>>>>>>> Don't show "Service Instance" in Other Resources list
case "Build":
case "BuildConfig":
case "ConfigMap":
case "Deployment":
case "DeploymentConfig":
case "Event":
case "ImageStream":
case "ImageStreamImage":
case "ImageStreamImport":
case "ImageStreamMapping":
case "ImageStreamTag":
case "LimitRange":
case "PersistentVolumeClaim":
case "Pod":
case "ReplicaSet":
case "ReplicationController":
case "ResourceQuota":
case "Route":
case "Secret":
case "Service":
case "ServiceInstance":
case "StatefulSet":
return !1;

default:
return !0;
}
<<<<<<< 5ee4e8975cd809cf7a654cbc903e7d305ed5ecb9
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
}), c.clearFilter = function() {
h.clear();
};
var m = function(a) {
if (a) {
var b = j.kindToResourceGroupVersion(a), c = j.apiInfo(b);
return !c || !c.verbs || _.includes(c.verbs, "list");
}
};
c.getReturnURL = function() {
var b = _.get(c, "kindSelector.selected.kind");
return b ? URI.expand("project/{projectName}/browse/other?kind={kind}&group={group}", {
projectName: a.project,
kind: b,
group: _.get(c, "kindSelector.selected.group", "")
=======
});
=======
}), n.clearFilter = function() {
s.clear();
};
>>>>>>> Replacing empty tables with empty state message
var m = function(e) {
if (e) {
var t = l.kindToResourceGroupVersion(e), n = l.apiInfo(t);
return !n || !n.verbs || _.includes(n.verbs, "list");
}
};
n.getReturnURL = function() {
var t = _.get(n, "kindSelector.selected.kind");
return t ? URI.expand("project/{projectName}/browse/other?kind={kind}&group={group}", {
projectName: e.project,
kind: t,
group: _.get(n, "kindSelector.selected.group", "")
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
}).toString() : "";
};
var p;
n.isDuplicateKind = function(e) {
return p || (p = _.countBy(n.kinds, "kind")), p[e] > 1;
};
var f = function(e, t) {
return _.some(n.kinds, function(n) {
return n.kind === e && (!n.group && !t || n.group === t);
});
};
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
f.get(a.project).then(_.spread(function(b, e) {
c.kinds = _.filter(c.kinds, function(a) {
var b = {
resource: j.kindToResource(a.kind),
group: a.group || ""
};
return !!m(a) && (!!d.checkResource(b.resource) && d.canI(b, "list", c.projectName));
}), c.project = b, c.context = e, c.kindSelector.disabled = !1, a.kind && o(a.kind, a.group) && (_.set(c, "kindSelector.selected.kind", a.kind), _.set(c, "kindSelector.selected.group", a.group || ""));
})), c.loadKind = l, c.$watch("kindSelector.selected", function() {
h.clear(), l();
});
var p = g("humanizeKind");
c.matchKind = function(a, b) {
return p(a).toLowerCase().indexOf(b.toLowerCase()) !== -1;
}, h.onActiveFiltersChanged(function(a) {
c.$evalAsync(function() {
c.resources = a.select(c.unfilteredResources), k();
});
});
} ]), angular.module("openshiftConsole").controller("PersistentVolumeClaimController", [ "$scope", "$routeParams", "DataService", "ProjectsService", "$filter", function(a, b, c, d, e) {
a.projectName = b.project, a.pvc = null, a.alerts = {}, a.renderOptions = a.renderOptions || {}, a.renderOptions.hideFilterWidget = !0, a.breadcrumbs = [ {
title: "Persistent Volume Claims",
link: "project/" + b.project + "/browse/storage"
}, {
title: b.pvc
} ];
var f = [], g = function(b, c) {
a.pvc = b, a.loaded = !0, "DELETED" === c && (a.alerts.deleted = {
=======
o.get(e.project).then(_.spread(function(t, r) {
=======
o.get(e.project).then(_.spread(function(t, a) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
n.kinds = _.filter(n.kinds, function(e) {
var t = {
resource: l.kindToResource(e.kind),
group: e.group || ""
};
return !!m(e) && (!!r.checkResource(t.resource) && r.canI(t, "list", n.projectName));
}), n.project = t, n.context = a, n.kindSelector.disabled = !1, e.kind && f(e.kind, e.group) && (_.set(n, "kindSelector.selected.kind", e.kind), _.set(n, "kindSelector.selected.group", e.group || ""));
})), n.loadKind = d, n.$watch("kindSelector.selected", function() {
s.clear(), d();
});
var g = i("humanizeKind");
n.matchKind = function(e, t) {
return -1 !== g(e).toLowerCase().indexOf(t.toLowerCase());
}, s.onActiveFiltersChanged(function(e) {
n.$evalAsync(function() {
n.resources = e.select(n.unfilteredResources), u();
});
});
} ]), angular.module("openshiftConsole").controller("PersistentVolumeClaimController", [ "$filter", "$scope", "$routeParams", "APIService", "DataService", "ProjectsService", function(e, t, n, r, a, o) {
t.projectName = n.project, t.pvc = null, t.alerts = {}, t.renderOptions = t.renderOptions || {}, t.renderOptions.hideFilterWidget = !0, t.breadcrumbs = [ {
title: "Storage",
link: "project/" + n.project + "/browse/storage"
}, {
<<<<<<< c1662a43b64d2a3c9b199692a5fea18601a03302
title: t.pvc
} ];
var o = [], i = function(t, n) {
e.pvc = t, e.loaded = !0, "DELETED" === n && (e.alerts.deleted = {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
title: n.pvc
} ], t.pvcVersion = r.getPreferredVersion("persistentvolumeclaims"), t.eventsVersion = r.getPreferredVersion("events");
var i = [], s = function(e, n) {
t.pvc = e, t.loaded = !0, "DELETED" === n && (t.alerts.deleted = {
>>>>>>> Update PersistentVolumeClaim controller to use getPreferredVersion
type: "warning",
message: "This persistent volume claim has been deleted."
});
};
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< c1662a43b64d2a3c9b199692a5fea18601a03302
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
d.get(b.project).then(_.spread(function(d, h) {
a.project = d, a.projectContext = h, c.get("persistentvolumeclaims", b.pvc, h, {
errorNotification: !1
}).then(function(a) {
g(a), f.push(c.watchObject("persistentvolumeclaims", b.pvc, h, g));
}, function(b) {
a.loaded = !0, a.alerts.load = {
type: "error",
message: "The persistent volume claim details could not be loaded.",
details: e("getErrorDetails")(b)
};
}), a.$on("$destroy", function() {
c.unwatchAll(f);
});
}));
} ]), angular.module("openshiftConsole").controller("SetLimitsController", [ "$filter", "$location", "$parse", "$routeParams", "$scope", "APIService", "AuthorizationService", "BreadcrumbsService", "DataService", "LimitRangesService", "Navigate", "NotificationsService", "ProjectsService", function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
if (!d.kind || !d.name) return void k.toErrorPage("Kind or name parameter missing.");
var n = [ "Deployment", "DeploymentConfig", "ReplicaSet", "ReplicationController" ];
if (!_.includes(n, d.kind)) return void k.toErrorPage("Health checks are not supported for kind " + d.kind + ".");
var o = a("humanizeKind"), p = o(d.kind, !0) + " " + d.name;
e.name = d.name, "ReplicationController" !== d.kind && "ReplicaSet" !== d.kind || (e.showPodWarning = !0), e.renderOptions = {
hideFilterWidget: !0
}, e.breadcrumbs = h.getBreadcrumbs({
name: d.name,
kind: d.kind,
namespace: d.project,
subpage: "Edit Resource Limits"
});
var q = a("getErrorDetails"), r = function(a, b) {
l.addNotification({
id: "set-compute-limits-error",
type: "error",
message: a,
details: b
=======
a.get(t.project).then(_.spread(function(a, s) {
e.project = a, e.projectContext = s, n.get("persistentvolumeclaims", t.pvc, s, {
=======
o.get(n.project).then(_.spread(function(a, o) {
t.project = a, t.projectContext = o, r.get(t.pvcVersion, n.pvc, o, {
>>>>>>> Update PersistentVolumeClaim controller to use getPreferredVersion
=======
o.get(n.project).then(_.spread(function(r, o) {
t.project = r, t.projectContext = o, a.get(t.pvcVersion, n.pvc, o, {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
errorNotification: !1
}).then(function(e) {
s(e), i.push(a.watchObject(t.pvcVersion, n.pvc, o, s));
}, function(n) {
t.loaded = !0, t.alerts.load = {
type: "error",
message: "The persistent volume claim details could not be loaded.",
details: e("getErrorDetails")(n)
};
}), t.$on("$destroy", function() {
a.unwatchAll(i);
});
}));
} ]), angular.module("openshiftConsole").controller("SetLimitsController", [ "$filter", "$location", "$parse", "$routeParams", "$scope", "APIService", "AuthorizationService", "BreadcrumbsService", "DataService", "LimitRangesService", "Navigate", "NotificationsService", "ProjectsService", function(e, t, n, r, a, o, i, s, c, l, u, d, m) {
if (r.kind && r.name) {
var p = [ "Deployment", "DeploymentConfig", "ReplicaSet", "ReplicationController" ];
if (_.includes(p, r.kind)) {
var f = e("humanizeKind"), g = f(r.kind, !0) + " " + r.name;
a.name = r.name, "ReplicationController" !== r.kind && "ReplicaSet" !== r.kind || (a.showPodWarning = !0), a.renderOptions = {
hideFilterWidget: !0
}, a.breadcrumbs = s.getBreadcrumbs({
name: r.name,
kind: r.kind,
namespace: r.project,
subpage: "Edit Resource Limits"
});
var v = e("getErrorDetails"), h = function(e, t) {
d.addNotification({
id: "set-compute-limits-error",
type: "error",
message: e,
details: t
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
});
}, y = function() {
t.url(a.resourceURL);
}, b = function() {
d.hideNotification("set-compute-limits-error");
};
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< decd0ff023f645c465c71b42b736f9215234cb3d
<<<<<<< 9bc0af8cb56dcc9609307333b9424f396867cab5
<<<<<<< 602d786018a3879a89789b1214b36a15c51b928b
<<<<<<< 33eb37eab8df0c17bc226501a924a2dc2b9b2f41
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
e.cancel = s, e.$on("$destroy", t), m.get(d.project).then(_.spread(function(a, b) {
var c = {
resource: f.kindToResource(d.kind),
group: d.group
};
if (!g.canI(c, "update", d.project)) return void k.toErrorPage("You do not have authority to update " + o(d.kind) + " " + d.name + ".", "access_denied");
i.get(c, e.name, b).then(function(d) {
var f = e.object = angular.copy(d);
e.breadcrumbs = h.getBreadcrumbs({
object: f,
project: a,
subpage: "Edit Resource Limits"
}), e.resourceURL = k.resourceURL(f), e.containers = _.get(f, "spec.template.spec.containers"), e.save = function() {
e.disableInputs = !0, t(), i.update(c, e.name, f, b).then(function() {
l.addNotification({
type: "success",
message: p + " was updated."
}), s();
}, function(a) {
e.disableInputs = !1, r(p + " could not be updated.", q(a));
=======
r.cancel = y, r.$on("$destroy", b), m.get(a.project).then(_.spread(function(t, n) {
r.breadcrumbs[0].title = e("displayName")(t);
var m = {
=======
r.cancel = y, r.$on("$destroy", b), m.get(a.project).then(_.spread(function(e, t) {
=======
r.cancel = y, r.$on("$destroy", b), p.get(a.project).then(_.spread(function(e, t) {
>>>>>>> Updates for Service Instance & Bindings
=======
r.cancel = y, r.$on("$destroy", b), m.get(a.project).then(_.spread(function(e, t) {
>>>>>>> Support EnvFrom in the Env Editors
=======
r.cancel = y, r.$on("$destroy", b);
var S = o.getPreferredVersion("limitranges");
m.get(a.project).then(_.spread(function(e, t) {
>>>>>>> Update setLimits controller to use getPreferrdVersion
var n = {
>>>>>>> Patternfly vertical navigation and project bar
resource: o.kindToResource(a.kind),
group: a.group
=======
a.cancel = y, a.$on("$destroy", b);
var S = o.getPreferredVersion("limitranges");
m.get(r.project).then(_.spread(function(e, t) {
var n = {
resource: o.kindToResource(r.kind),
group: r.group
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
};
if (i.canI(n, "update", r.project)) {
c.get(n, a.name, t).then(function(r) {
var o = a.object = angular.copy(r);
a.breadcrumbs = s.getBreadcrumbs({
object: o,
project: e,
subpage: "Edit Resource Limits"
}), a.resourceURL = u.resourceURL(o), a.containers = _.get(o, "spec.template.spec.containers"), a.save = function() {
a.disableInputs = !0, b(), c.update(n, a.name, o, t).then(function() {
d.addNotification({
type: "success",
message: g + " was updated."
}), y();
}, function(e) {
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< 3087d5859f05def6301fced3a013ac9165fd8c7a
<<<<<<< 33eb37eab8df0c17bc226501a924a2dc2b9b2f41
r.disableInputs = !1, v(f + " could not be updated.", h(e));
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
r.disableInputs = !1, v(g + " could not be updated.", h(e));
>>>>>>> Patternfly vertical navigation and project bar
=======
r.disableInputs = !1, h(g + " could not be updated.", v(e));
>>>>>>> Add SVG icons
=======
a.disableInputs = !1, h(g + " could not be updated.", v(e));
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
});
};
}, function(e) {
h(g + " could not be loaded.", v(e));
});
<<<<<<< 9bc0af8cb56dcc9609307333b9424f396867cab5
<<<<<<< 602d786018a3879a89789b1214b36a15c51b928b
<<<<<<< 33eb37eab8df0c17bc226501a924a2dc2b9b2f41
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
var m = function() {
e.hideCPU || (e.cpuProblems = j.validatePodLimits(e.limitRanges, "cpu", e.containers, a)), e.memoryProblems = j.validatePodLimits(e.limitRanges, "memory", e.containers, a);
};
i.list("limitranges", b).then(function(a) {
e.limitRanges = a.by("metadata.name"), _.isEmpty(e.limitRanges) || e.$watch("containers", m, !0);
=======
var p = function() {
r.hideCPU || (r.cpuProblems = l.validatePodLimits(r.limitRanges, "cpu", r.containers, t)), r.memoryProblems = l.validatePodLimits(r.limitRanges, "memory", r.containers, t);
};
c.list("limitranges", n).then(function(e) {
r.limitRanges = e.by("metadata.name"), _.isEmpty(r.limitRanges) || r.$watch("containers", p, !0);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
var m = function() {
r.hideCPU || (r.cpuProblems = l.validatePodLimits(r.limitRanges, "cpu", r.containers, e)), r.memoryProblems = l.validatePodLimits(r.limitRanges, "memory", r.containers, e);
};
c.list("limitranges", t).then(function(e) {
r.limitRanges = e.by("metadata.name"), _.isEmpty(r.limitRanges) || r.$watch("containers", m, !0);
>>>>>>> Patternfly vertical navigation and project bar
=======
var p = function() {
r.hideCPU || (r.cpuProblems = l.validatePodLimits(r.limitRanges, "cpu", r.containers, e)), r.memoryProblems = l.validatePodLimits(r.limitRanges, "memory", r.containers, e);
};
c.list("limitranges", t).then(function(e) {
r.limitRanges = e.by("metadata.name"), _.isEmpty(r.limitRanges) || r.$watch("containers", p, !0);
>>>>>>> Updates for Service Instance & Bindings
=======
var m = function() {
a.hideCPU || (a.cpuProblems = l.validatePodLimits(a.limitRanges, "cpu", a.containers, e)), a.memoryProblems = l.validatePodLimits(a.limitRanges, "memory", a.containers, e);
};
c.list(S, t).then(function(e) {
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
r.limitRanges = e.by("metadata.name"), _.isEmpty(r.limitRanges) || r.$watch("containers", m, !0);
>>>>>>> Support EnvFrom in the Env Editors
=======
a.limitRanges = e.by("metadata.name"), _.isEmpty(a.limitRanges) || a.$watch("containers", m, !0);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
});
} else u.toErrorPage("You do not have authority to update " + f(r.kind) + " " + r.name + ".", "access_denied");
}));
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
} ]), angular.module("openshiftConsole").controller("EditBuildConfigController", [ "$scope", "$filter", "$location", "$routeParams", "$window", "ApplicationGenerator", "AuthorizationService", "DataService", "Navigate", "NotificationsService", "ProjectsService", "SOURCE_URL_PATTERN", "SecretsService", "keyValueEditorUtils", function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
a.projectName = d.project, a.buildConfig = null, a.alerts = {}, a.sourceURLPattern = l, a.options = {}, a.jenkinsfileOptions = {
type: "path"
}, a.selectTypes = {
ImageStreamTag: "Image Stream Tag",
ImageStreamImage: "Image Stream Image",
DockerImage: "Docker Image Repository"
}, a.buildFromTypes = [ "ImageStreamTag", "ImageStreamImage", "DockerImage" ], a.pushToTypes = [ "ImageStreamTag", "DockerImage", "None" ], a.jenkinsfileTypes = [ {
=======
} else u.toErrorPage("Health checks are not supported for kind " + a.kind + ".");
=======
} else u.toErrorPage("Health checks are not supported for kind " + r.kind + ".");
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
} else u.toErrorPage("Kind or name parameter missing.");
} ]), angular.module("openshiftConsole").controller("EditBuildConfigController", [ "$scope", "$filter", "$location", "$routeParams", "$window", "APIService", "ApplicationGenerator", "AuthorizationService", "DataService", "Navigate", "NotificationsService", "ProjectsService", "SOURCE_URL_PATTERN", "SecretsService", "keyValueEditorUtils", function(e, t, n, r, a, o, i, s, c, l, u, d, m, p, f) {
e.projectName = r.project, e.buildConfig = null, e.alerts = {}, e.sourceURLPattern = m, e.options = {}, e.jenkinsfileOptions = {
type: "path"
}, e.selectTypes = {
ImageStreamTag: "Image Stream Tag",
ImageStreamImage: "Image Stream Image",
DockerImage: "Docker Image Repository"
}, e.buildFromTypes = [ "ImageStreamTag", "ImageStreamImage", "DockerImage" ], e.pushToTypes = [ "ImageStreamTag", "DockerImage", "None" ], e.jenkinsfileTypes = [ {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
id: "path",
title: "From Source Repository"
}, {
id: "inline",
title: "Inline"
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
} ], a.view = {
advancedOptions: !1,
hasHooks: !1
}, a.breadcrumbs = [], d.isPipeline ? (a.breadcrumbs.push({
title: "Pipelines",
link: "project/" + d.project + "/browse/pipelines"
}), a.breadcrumbs.push({
title: d.buildconfig,
link: "project/" + d.project + "/browse/pipelines/" + d.buildconfig
})) : (a.breadcrumbs.push({
title: "Builds",
link: "project/" + d.project + "/browse/builds"
}), a.breadcrumbs.push({
title: d.buildconfig,
link: "project/" + d.project + "/browse/builds/" + d.buildconfig
})), a.breadcrumbs.push({
title: d.isPipeline ? "Edit Pipelines" : "Edit Builds"
}), a.imageOptions = {
from: {},
to: {},
fromSource: {}
}, a.sources = {
=======
} ], e.view = {
advancedOptions: !1,
hasHooks: !1
}, e.breadcrumbs = [], r.isPipeline ? (e.breadcrumbs.push({
title: "Pipelines",
link: "project/" + r.project + "/browse/pipelines"
}), e.breadcrumbs.push({
title: r.buildconfig,
link: "project/" + r.project + "/browse/pipelines/" + r.buildconfig
})) : (e.breadcrumbs.push({
title: "Builds",
link: "project/" + r.project + "/browse/builds"
}), e.breadcrumbs.push({
title: r.buildconfig,
link: "project/" + r.project + "/browse/builds/" + r.buildconfig
})), e.breadcrumbs.push({
title: r.isPipeline ? "Edit Pipelines" : "Edit Builds"
}), e.imageOptions = {
from: {},
to: {},
fromSource: {}
}, e.sources = {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
binary: !1,
dockerfile: !1,
git: !1,
images: !1,
contextDir: !1,
none: !0
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
}, a.triggers = {
=======
}, e.triggers = {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
githubWebhooks: [],
gitlabWebhooks: [],
bitbucketWebhooks: [],
genericWebhooks: [],
imageChangeTriggers: [],
builderImageChangeTrigger: {},
configChangeTrigger: {}
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
}, a.createTriggerSelect = {
=======
}, e.createTriggerSelect = {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
selectedType: "",
options: [ {
type: "github",
label: "GitHub"
}, {
type: "gitlab",
label: "GitLab"
}, {
type: "bitbucket",
label: "Bitbucket"
}, {
type: "generic",
label: "Generic"
} ]
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
}, a.runPolicyTypes = [ "Serial", "Parallel", "SerialLatestOnly" ], a.buildHookTypes = [ {
=======
}, e.runPolicyTypes = [ "Serial", "Parallel", "SerialLatestOnly" ], e.buildHookTypes = [ {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
id: "command",
label: "Command"
}, {
id: "script",
label: "Shell Script"
}, {
id: "args",
label: "Arguments to default image entry point"
}, {
id: "commandArgs",
label: "Command with arguments"
}, {
id: "scriptArgs",
label: "Shell script with arguments"
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
} ], a.buildHookSelection = {
type: {}
}, a.getArgumentsDescription = function() {
var b = _.get(a, "buildHookSelection.type.id", "");
switch (b) {
=======
} ], e.buildHookSelection = {
type: {}
}, e.getArgumentsDescription = function() {
switch (_.get(e, "buildHookSelection.type.id", "")) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
case "args":
return "Enter the arguments that will be appended to the default image entry point.";

case "commandArgs":
return "Enter the arguments that will be appended to the command.";

case "scriptArgs":
return "Enter the arguments that will be appended to the script.";
}
return null;
};
<<<<<<< 418e6421bf3361cc4fbf12f2ee2f9d6a98bcff12
<<<<<<< 33eb37eab8df0c17bc226501a924a2dc2b9b2f41
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
var o = function() {
var b = !_.isEmpty(_.get(a, "buildConfig.spec.postCommit.args")), c = !_.isEmpty(_.get(a, "buildConfig.spec.postCommit.command")), d = !!_.get(a, "buildConfig.spec.postCommit.script");
a.view.hasHooks = b || c || d;
var e;
e = b && c ? "commandArgs" : b && d ? "scriptArgs" : b ? "args" : d ? "script" : "command", a.buildHookSelection.type = _.find(a.buildHookTypes, {
id: e
});
}, p = function() {
if (a.view.hasHooks) switch (a.buildHookSelection.type.id) {
=======
var g = function() {
=======
var f = function() {
>>>>>>> Patternfly vertical navigation and project bar
=======
var g = function() {
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
>>>>>>> Update edit buildConfigs controller to use getPreferredVersion
var t = !_.isEmpty(_.get(e, "buildConfig.spec.postCommit.args")), n = !_.isEmpty(_.get(e, "buildConfig.spec.postCommit.command")), a = !!_.get(e, "buildConfig.spec.postCommit.script");
e.view.hasHooks = t || n || a;
var r;
r = t && n ? "commandArgs" : t && a ? "scriptArgs" : t ? "args" : a ? "script" : "command", e.buildHookSelection.type = _.find(e.buildHookTypes, {
id: r
=======
var t = !_.isEmpty(_.get(e, "buildConfig.spec.postCommit.args")), n = !_.isEmpty(_.get(e, "buildConfig.spec.postCommit.command")), r = !!_.get(e, "buildConfig.spec.postCommit.script");
e.view.hasHooks = t || n || r;
var a;
a = t && n ? "commandArgs" : t && r ? "scriptArgs" : t ? "args" : r ? "script" : "command", e.buildHookSelection.type = _.find(e.buildHookTypes, {
id: a
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
});
}, v = function() {
if (e.view.hasHooks) switch (e.buildHookSelection.type.id) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
case "script":
delete e.updatedBuildConfig.spec.postCommit.command, delete e.updatedBuildConfig.spec.postCommit.args;
break;

case "command":
delete e.updatedBuildConfig.spec.postCommit.script, delete e.updatedBuildConfig.spec.postCommit.args;
break;

case "args":
delete e.updatedBuildConfig.spec.postCommit.script, delete e.updatedBuildConfig.spec.postCommit.command;
break;

case "scriptArgs":
delete e.updatedBuildConfig.spec.postCommit.command;
break;

case "commandArgs":
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
delete a.updatedBuildConfig.spec.postCommit.script;
} else delete a.updatedBuildConfig.spec.postCommit.command, delete a.updatedBuildConfig.spec.postCommit.args, delete a.updatedBuildConfig.spec.postCommit.script;
};
a.secrets = {};
var q = [], r = b("buildStrategy"), s = function() {
var b;
a.buildConfig ? (b = i.resourceURL(a.buildConfig), c.path(b)) : e.history.back();
};
a.cancel = s;
var t = function() {
j.hideNotification("edit-build-config-error"), j.hideNotification("edit-build-config-conflict"), j.hideNotification("edit-build-config-deleted");
};
a.$on("$destroy", t), k.get(d.project).then(_.spread(function(c, e) {
return a.project = c, a.context = e, g.canI("buildconfigs", "update", d.project) ? void h.get("buildconfigs", d.buildconfig, e, {
errorNotification: !1
}).then(function(b) {
a.buildConfig = b, o(), a.updatedBuildConfig = angular.copy(a.buildConfig), a.buildStrategy = r(a.updatedBuildConfig), a.strategyType = a.buildConfig.spec.strategy.type, a.envVars = a.buildStrategy.env || [], a.triggers = u(a.triggers, a.buildConfig.spec.triggers), a.sources = B(a.sources, a.buildConfig.spec.source), _.has(b, "spec.strategy.jenkinsPipelineStrategy.jenkinsfile") && (a.jenkinsfileOptions.type = "inline"), h.list("secrets", e).then(function(b) {
var c = m.groupSecretsByType(b), d = _.mapValues(c, function(a) {
return _.map(a, "metadata.name");
});
a.secrets.secretsByType = _.each(d, function(a) {
a.unshift("");
}), y();
});
var c = function(a, c) {
a.type = c && c.kind ? c.kind : "None";
var d = {}, e = "", f = "";
d = "ImageStreamTag" === a.type ? {
namespace: c.namespace || b.metadata.namespace,
imageStream: c.name.split(":")[0],
tagObject: {
tag: c.name.split(":")[1]
=======
delete e.updatedBuildConfig.spec.postCommit.script;
} else delete e.updatedBuildConfig.spec.postCommit.command, delete e.updatedBuildConfig.spec.postCommit.args, delete e.updatedBuildConfig.spec.postCommit.script;
};
e.secrets = {};
var h = o.getPreferredVersion("buildconfigs"), y = o.getPreferredVersion("secrets"), b = [], S = t("buildStrategy"), C = t("orderByDisplayName"), w = t("getErrorDetails"), P = [], j = [];
e.valueFromObjects = [];
var k = function() {
var t;
e.buildConfig ? (t = l.resourceURL(e.buildConfig), n.path(t)) : a.history.back();
};
e.cancel = k;
var I = function() {
u.hideNotification("edit-build-config-error"), u.hideNotification("edit-build-config-conflict"), u.hideNotification("edit-build-config-deleted");
};
e.$on("$destroy", I), d.get(r.project).then(_.spread(function(n, a) {
e.project = n, e.context = a, s.canI("buildconfigs", "update", r.project) ? (c.get(h, r.buildconfig, a, {
errorNotification: !1
}).then(function(t) {
e.buildConfig = t, g(), e.updatedBuildConfig = angular.copy(e.buildConfig), e.buildStrategy = S(e.updatedBuildConfig), e.strategyType = e.buildConfig.spec.strategy.type, e.envVars = e.buildStrategy.env || [], e.triggers = R(e.triggers, e.buildConfig.spec.triggers), e.sources = B(e.sources, e.buildConfig.spec.source), _.has(t, "spec.strategy.jenkinsPipelineStrategy.jenkinsfile") && (e.jenkinsfileOptions.type = "inline"), c.list(y, a).then(function(t) {
var n = p.groupSecretsByType(t), r = _.mapValues(n, function(e) {
return _.map(e, "metadata.name");
});
e.secrets.secretsByType = _.each(r, function(e) {
e.unshift("");
}), D(), j = C(t.by("metadata.name")), e.valueFromObjects = P.concat(j);
});
var n = function(e, n) {
e.type = n && n.kind ? n.kind : "None";
var r = {}, a = "", o = "";
r = "ImageStreamTag" === e.type ? {
namespace: n.namespace || t.metadata.namespace,
imageStream: n.name.split(":")[0],
tagObject: {
tag: n.name.split(":")[1]
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
}
} : {
namespace: "",
imageStream: "",
tagObject: {
tag: ""
}
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
}, e = "ImageStreamImage" === a.type ? (c.namespace || b.metadata.namespace) + "/" + c.name : "", f = "DockerImage" === a.type ? c.name : "", a.imageStreamTag = d, a.imageStreamImage = e, a.dockerImage = f;
};
c(a.imageOptions.from, a.buildStrategy.from), c(a.imageOptions.to, a.updatedBuildConfig.spec.output.to), a.sources.images && (a.sourceImages = a.buildConfig.spec.source.images, 1 === _.size(a.sourceImages) ? (a.imageSourceTypes = angular.copy(a.buildFromTypes), c(a.imageOptions.fromSource, a.sourceImages[0].from), a.imageSourcePaths = _.map(a.sourceImages[0].paths, function(a) {
return {
name: a.sourcePath,
value: a.destinationDir
};
})) : (a.imageSourceFromObjects = [], a.sourceImages.forEach(function(b) {
a.imageSourceFromObjects.push(b.from);
}))), a.options.forcePull = !!a.buildStrategy.forcePull, "Docker" === a.strategyType && (a.options.noCache = !!a.buildConfig.spec.strategy.dockerStrategy.noCache, a.buildFromTypes.push("None")), q.push(h.watchObject("buildconfigs", d.buildconfig, e, function(b, c) {
"MODIFIED" === c && j.addNotification({
id: "edit-build-config-conflict",
type: "warning",
message: "This build configuration has changed since you started editing it. You'll need to copy any changes you've made and edit again."
}), "DELETED" === c && (j.addNotification({
id: "edit-build-config-deleted",
type: "warning",
message: "This build configuration has been deleted."
}), a.disableInputs = !0), a.buildConfig = b;
})), a.loaded = !0;
}, function(c) {
a.loaded = !0, a.alerts.load = {
type: "error",
message: "The build configuration details could not be loaded.",
details: "Reason: " + b("getErrorDetails")(c)
};
}) : void i.toErrorPage("You do not have authority to update build config " + d.buildconfig + ".", "access_denied");
=======
}, r = "ImageStreamImage" === e.type ? (n.namespace || t.metadata.namespace) + "/" + n.name : "", o = "DockerImage" === e.type ? n.name : "", e.imageStreamTag = a, e.imageStreamImage = r, e.dockerImage = o;
=======
}, a = "ImageStreamImage" === e.type ? (n.namespace || t.metadata.namespace) + "/" + n.name : "", o = "DockerImage" === e.type ? n.name : "", e.imageStreamTag = r, e.imageStreamImage = a, e.dockerImage = o;
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
};
n(e.imageOptions.from, e.buildStrategy.from), n(e.imageOptions.to, e.updatedBuildConfig.spec.output.to), e.sources.images && (e.sourceImages = e.buildConfig.spec.source.images, 1 === _.size(e.sourceImages) ? (e.imageSourceTypes = angular.copy(e.buildFromTypes), n(e.imageOptions.fromSource, e.sourceImages[0].from), e.imageSourcePaths = _.map(e.sourceImages[0].paths, function(e) {
return {
name: e.sourcePath,
value: e.destinationDir
};
})) : (e.imageSourceFromObjects = [], e.sourceImages.forEach(function(t) {
e.imageSourceFromObjects.push(t.from);
}))), e.options.forcePull = !!e.buildStrategy.forcePull, "Docker" === e.strategyType && (e.options.noCache = !!e.buildConfig.spec.strategy.dockerStrategy.noCache, e.buildFromTypes.push("None")), b.push(c.watchObject(h, r.buildconfig, a, function(t, n) {
"MODIFIED" === n && u.addNotification({
id: "edit-build-config-conflict",
type: "warning",
message: "This build configuration has changed since you started editing it. You'll need to copy any changes you've made and edit again."
}), "DELETED" === n && (u.addNotification({
id: "edit-build-config-deleted",
type: "warning",
message: "This build configuration has been deleted."
}), e.disableInputs = !0), e.buildConfig = t;
})), e.loaded = !0;
}, function(n) {
e.loaded = !0, e.alerts.load = {
type: "error",
message: "The build configuration details could not be loaded.",
details: "Reason: " + t("getErrorDetails")(n)
};
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< f4c2d5331eeb2822c057c0ccb12690cba9a8dbde
<<<<<<< 418e6421bf3361cc4fbf12f2ee2f9d6a98bcff12
}) : c.toErrorPage("You do not have authority to update build config " + a.buildconfig + ".", "access_denied");
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
}) : l.toErrorPage("You do not have authority to update build config " + a.buildconfig + ".", "access_denied");
>>>>>>> Update edit buildConfigs controller to use getPreferredVersion
=======
}), c.list("configmaps", r, null, {
=======
}), c.list("configmaps", a, null, {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
errorNotification: !1
}).then(function(t) {
P = C(t.by("metadata.name")), e.valueFromObjects = P.concat(j);
}, function(e) {
403 !== e.code && u.addNotification({
id: "edit-build-config-list-config-maps-error",
type: "error",
message: "Could not load config maps.",
details: w(e)
});
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
})) : l.toErrorPage("You do not have authority to update build config " + a.buildconfig + ".", "access_denied");
>>>>>>> Enable valueFrom values for build config env vars
=======
})) : l.toErrorPage("You do not have authority to update build config " + r.buildconfig + ".", "access_denied");
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}));
var R = function(n, r) {
function a(n, r) {
return t("imageObjectRef")(n, e.projectName) === t("imageObjectRef")(r, e.projectName);
}
var o = S(e.buildConfig).from;
return r.forEach(function(e) {
switch (e.type) {
case "Generic":
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
c.genericWebhooks.push({
disabled: !1,
data: a
=======
n.genericWebhooks.push({
disabled: !1,
data: e
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
});
break;

case "GitHub":
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
c.githubWebhooks.push({
disabled: !1,
data: a
=======
n.githubWebhooks.push({
disabled: !1,
data: e
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
});
break;

case "GitLab":
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
c.gitlabWebhooks.push({
disabled: !1,
data: a
=======
n.gitlabWebhooks.push({
disabled: !1,
data: e
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
});
break;

case "Bitbucket":
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
c.bitbucketWebhooks.push({
disabled: !1,
data: a
=======
n.bitbucketWebhooks.push({
disabled: !1,
data: e
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
});
break;

case "ImageChange":
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
var b = a.imageChange.from;
b || (b = f);
var d = {
present: !0,
data: a
};
e(b, f) ? c.builderImageChangeTrigger = d : c.imageChangeTriggers.push(d);
break;

case "ConfigChange":
c.configChangeTrigger = {
present: !0,
data: a
};
}
}), _.isEmpty(c.builderImageChangeTrigger) && (c.builderImageChangeTrigger = {
=======
var t = e.imageChange.from;
t || (t = o);
var r = {
present: !0,
data: e
};
a(t, o) ? n.builderImageChangeTrigger = r : n.imageChangeTriggers.push(r);
break;

case "ConfigChange":
n.configChangeTrigger = {
present: !0,
data: e
};
}
}), _.isEmpty(n.builderImageChangeTrigger) && (n.builderImageChangeTrigger = {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
present: !1,
data: {
imageChange: {},
type: "ImageChange"
}
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
}), _.isEmpty(c.configChangeTrigger) && (c.configChangeTrigger = {
=======
}), _.isEmpty(n.configChangeTrigger) && (n.configChangeTrigger = {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
present: !1,
data: {
type: "ConfigChange"
}
}), n;
};
e.aceLoaded = function(e) {
var t = e.getSession();
t.setOption("tabSize", 2), t.setOption("useSoftTabs", !0), e.$blockScrolling = 1 / 0;
};
var E = function(e) {
return _.map(f.compactEntries(e), function(e) {
return {
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
sourcePath: a.name,
destinationDir: a.value
=======
sourcePath: e.name,
destinationDir: e.value
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
};
});
}, T = function(t) {
var n = {};
switch (t.type) {
case "ImageStreamTag":
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
c = {
kind: b.type,
name: b.imageStreamTag.imageStream + ":" + b.imageStreamTag.tagObject.tag
}, b.imageStreamTag.namespace !== a.buildConfig.metadata.namespace && (c.namespace = b.imageStreamTag.namespace);
break;

case "DockerImage":
c = {
kind: b.type,
name: b.dockerImage
=======
n = {
kind: t.type,
name: t.imageStreamTag.imageStream + ":" + t.imageStreamTag.tagObject.tag
}, t.imageStreamTag.namespace !== e.buildConfig.metadata.namespace && (n.namespace = t.imageStreamTag.namespace);
break;

case "DockerImage":
n = {
kind: t.type,
name: t.dockerImage
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
};
break;

case "ImageStreamImage":
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
var d = b.imageStreamImage.split("/");
c = {
kind: b.type,
name: _.last(d)
}, c.namespace = 1 !== _.size(d) ? _.head(d) : a.buildConfig.metadata.namespace;
}
return c;
}, x = function() {
var b = [].concat(a.triggers.githubWebhooks, a.triggers.gitlabWebhooks, a.triggers.bitbucketWebhooks, a.triggers.genericWebhooks, a.triggers.imageChangeTriggers, a.triggers.builderImageChangeTrigger, a.triggers.configChangeTrigger);
return b = _.filter(b, function(a) {
return _.has(a, "disabled") && !a.disabled || a.present;
}), b = _.map(b, "data");
}, y = function() {
switch (a.secrets.picked = {
gitSecret: a.buildConfig.spec.source.sourceSecret ? [ a.buildConfig.spec.source.sourceSecret ] : [ {
name: ""
} ],
pullSecret: r(a.buildConfig).pullSecret ? [ r(a.buildConfig).pullSecret ] : [ {
name: ""
} ],
pushSecret: a.buildConfig.spec.output.pushSecret ? [ a.buildConfig.spec.output.pushSecret ] : [ {
=======
var a = t.imageStreamImage.split("/");
=======
var r = t.imageStreamImage.split("/");
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
(n = {
kind: t.type,
name: _.last(r)
}).namespace = 1 !== _.size(r) ? _.head(r) : e.buildConfig.metadata.namespace;
}
return n;
}, N = function() {
var t = [].concat(e.triggers.githubWebhooks, e.triggers.gitlabWebhooks, e.triggers.bitbucketWebhooks, e.triggers.genericWebhooks, e.triggers.imageChangeTriggers, e.triggers.builderImageChangeTrigger, e.triggers.configChangeTrigger);
return t = _.filter(t, function(e) {
return _.has(e, "disabled") && !e.disabled || e.present;
}), t = _.map(t, "data");
}, D = function() {
switch (e.secrets.picked = {
gitSecret: e.buildConfig.spec.source.sourceSecret ? [ e.buildConfig.spec.source.sourceSecret ] : [ {
name: ""
} ],
pullSecret: S(e.buildConfig).pullSecret ? [ S(e.buildConfig).pullSecret ] : [ {
name: ""
} ],
pushSecret: e.buildConfig.spec.output.pushSecret ? [ e.buildConfig.spec.output.pushSecret ] : [ {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
name: ""
} ]
}, e.strategyType) {
case "Source":
case "Docker":
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
a.secrets.picked.sourceSecrets = a.buildConfig.spec.source.secrets || [ {
=======
e.secrets.picked.sourceSecrets = e.buildConfig.spec.source.secrets || [ {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
secret: {
name: ""
},
destinationDir: ""
} ];
break;

case "Custom":
<<<<<<< 418e6421bf3361cc4fbf12f2ee2f9d6a98bcff12
<<<<<<< 3087d5859f05def6301fced3a013ac9165fd8c7a
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
a.secrets.picked.sourceSecrets = r(a.buildConfig).secrets || [ {
=======
e.secrets.picked.sourceSecrets = v(e.buildConfig).secrets || [ {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
e.secrets.picked.sourceSecrets = h(e.buildConfig).secrets || [ {
>>>>>>> Add SVG icons
=======
e.secrets.picked.sourceSecrets = S(e.buildConfig).secrets || [ {
>>>>>>> Update edit buildConfigs controller to use getPreferredVersion
secretSource: {
name: ""
},
mountPath: ""
} ];
}
<<<<<<< f4c2d5331eeb2822c057c0ccb12690cba9a8dbde
<<<<<<< 418e6421bf3361cc4fbf12f2ee2f9d6a98bcff12
<<<<<<< 1f5fb674ad14c7e78d2e82e837750bd2747349ab
<<<<<<< a19b22733566f12a68db59a49bc16848fffba594
<<<<<<< d21c662f039266e2dd235fa32bd86d3647c082ae
<<<<<<< 77ce3ebb70d0568ad8fbbb649b8a01f54552ad2c
<<<<<<< 46344541d4f20e3585d6ea01425f784292c0d84a
<<<<<<< 7d5cc388b34d6a87a5e2ae6b26f6b146dae1daa3
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
}, z = function(a, b, c) {
b.name ? a[c] = b : delete a[c];
}, A = function(b, c) {
var d = "Custom" === a.strategyType ? "secretSource" : "secret", e = _.filter(c, function(a) {
return a[d].name;
});
_.isEmpty(e) ? delete b.secrets : b.secrets = e;
}, B = function(a, b) {
return "None" === b.type ? a : (a.none = !1, angular.forEach(b, function(b, c) {
a[c] = !0;
}), a);
};
a.addWebhookTrigger = function(b) {
if (b) {
var c = {
disabled: !1,
data: {
type: b
}
}, d = _.find(a.createTriggerSelect.options, function(a) {
return a.label === b;
}).type;
c.data[d] = {
secret: f._generateSecret()
}, a.triggers[d + "Webhooks"].push(c);
=======
}, R = function(e, t, n) {
=======
}, P = function(e, t, n) {
>>>>>>> Adding Deploy Image and Import YAML / JSON functionality to catalog
=======
}, j = function(e, t, n) {
>>>>>>> Service instance details configuration and edit
=======
}, P = function(e, t, n) {
>>>>>>> Add product icons for service catalog
=======
}, j = function(e, t, n) {
>>>>>>> Handle displaying parameters when secrets are not available.
=======
}, P = function(e, t, n) {
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
}, j = function(e, t, n) {
>>>>>>> Update template service broker flag name
=======
}, E = function(e, t, n) {
>>>>>>> Update edit buildConfigs controller to use getPreferredVersion
=======
}, A = function(e, t, n) {
>>>>>>> Enable valueFrom values for build config env vars
t.name ? e[n] = t : delete e[n];
}, $ = function(t, n) {
var r = "Custom" === e.strategyType ? "secretSource" : "secret", a = _.filter(n, function(e) {
return e[r].name;
});
_.isEmpty(a) ? delete t.secrets : t.secrets = a;
}, B = function(e, t) {
return "None" === t.type ? e : (e.none = !1, angular.forEach(t, function(t, n) {
e[n] = !0;
}), e);
};
e.addWebhookTrigger = function(t) {
if (t) {
var n = {
disabled: !1,
data: {
type: t
}
}, r = _.find(e.createTriggerSelect.options, function(e) {
return e.label === t;
}).type;
n.data[r] = {
secret: i._generateSecret()
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
}, e.triggers[a + "Webhooks"].push(n);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
}, e.triggers[r + "Webhooks"].push(n);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}
}, e.save = function() {
switch (e.disableInputs = !0, v(), S(e.updatedBuildConfig).forcePull = e.options.forcePull, e.strategyType) {
case "Docker":
S(e.updatedBuildConfig).noCache = e.options.noCache;
break;

case "JenkinsPipeline":
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
"path" === a.jenkinsfileOptions.type ? delete a.updatedBuildConfig.spec.strategy.jenkinsPipelineStrategy.jenkinsfile : delete a.updatedBuildConfig.spec.strategy.jenkinsPipelineStrategy.jenkinsfilePath;
}
switch (a.sources.images && !_.isEmpty(a.sourceImages) && (a.updatedBuildConfig.spec.source.images[0].paths = v(a.imageSourcePaths), a.updatedBuildConfig.spec.source.images[0].from = w(a.imageOptions.fromSource)), "None" === a.imageOptions.from.type ? delete r(a.updatedBuildConfig).from : r(a.updatedBuildConfig).from = w(a.imageOptions.from), "None" === a.imageOptions.to.type ? delete a.updatedBuildConfig.spec.output.to : a.updatedBuildConfig.spec.output.to = w(a.imageOptions.to), r(a.updatedBuildConfig).env = n.compactEntries(a.envVars), z(a.updatedBuildConfig.spec.source, _.head(a.secrets.picked.gitSecret), "sourceSecret"), z(r(a.updatedBuildConfig), _.head(a.secrets.picked.pullSecret), "pullSecret"), z(a.updatedBuildConfig.spec.output, _.head(a.secrets.picked.pushSecret), "pushSecret"), a.strategyType) {
=======
"path" === e.jenkinsfileOptions.type ? delete e.updatedBuildConfig.spec.strategy.jenkinsPipelineStrategy.jenkinsfile : delete e.updatedBuildConfig.spec.strategy.jenkinsPipelineStrategy.jenkinsfilePath;
}
<<<<<<< f4c2d5331eeb2822c057c0ccb12690cba9a8dbde
<<<<<<< 418e6421bf3361cc4fbf12f2ee2f9d6a98bcff12
<<<<<<< 75fc56b9e42e29e1492befd08624dd0e5dade866
<<<<<<< 247459038ac366429876741dd447ec652f2f5e7d
<<<<<<< 1f5fb674ad14c7e78d2e82e837750bd2747349ab
<<<<<<< a19b22733566f12a68db59a49bc16848fffba594
<<<<<<< d21c662f039266e2dd235fa32bd86d3647c082ae
<<<<<<< 77ce3ebb70d0568ad8fbbb649b8a01f54552ad2c
<<<<<<< 46344541d4f20e3585d6ea01425f784292c0d84a
<<<<<<< 3087d5859f05def6301fced3a013ac9165fd8c7a
<<<<<<< 9bc0af8cb56dcc9609307333b9424f396867cab5
<<<<<<< 602d786018a3879a89789b1214b36a15c51b928b
<<<<<<< 7d5cc388b34d6a87a5e2ae6b26f6b146dae1daa3
switch (e.sources.images && !_.isEmpty(e.sourceImages) && (e.updatedBuildConfig.spec.source.images[0].paths = S(e.imageSourcePaths), e.updatedBuildConfig.spec.source.images[0].from = w(e.imageOptions.fromSource)), "None" === e.imageOptions.from.type ? delete v(e.updatedBuildConfig).from : v(e.updatedBuildConfig).from = w(e.imageOptions.from), "None" === e.imageOptions.to.type ? delete e.updatedBuildConfig.spec.output.to : e.updatedBuildConfig.spec.output.to = w(e.imageOptions.to), v(e.updatedBuildConfig).env = p.compactEntries(e.envVars), R(e.updatedBuildConfig.spec.source, _.head(e.secrets.picked.gitSecret), "sourceSecret"), R(v(e.updatedBuildConfig), _.head(e.secrets.picked.pullSecret), "pullSecret"), R(e.updatedBuildConfig.spec.output, _.head(e.secrets.picked.pushSecret), "pushSecret"), e.strategyType) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
switch (e.sources.images && !_.isEmpty(e.sourceImages) && (e.updatedBuildConfig.spec.source.images[0].paths = S(e.imageSourcePaths), e.updatedBuildConfig.spec.source.images[0].from = w(e.imageOptions.fromSource)), "None" === e.imageOptions.from.type ? delete v(e.updatedBuildConfig).from : v(e.updatedBuildConfig).from = w(e.imageOptions.from), "None" === e.imageOptions.to.type ? delete e.updatedBuildConfig.spec.output.to : e.updatedBuildConfig.spec.output.to = w(e.imageOptions.to), v(e.updatedBuildConfig).env = p.compactEntries(e.envVars), P(e.updatedBuildConfig.spec.source, _.head(e.secrets.picked.gitSecret), "sourceSecret"), P(v(e.updatedBuildConfig), _.head(e.secrets.picked.pullSecret), "pullSecret"), P(e.updatedBuildConfig.spec.output, _.head(e.secrets.picked.pushSecret), "pushSecret"), e.strategyType) {
>>>>>>> Adding Deploy Image and Import YAML / JSON functionality to catalog
=======
switch (e.sources.images && !_.isEmpty(e.sourceImages) && (e.updatedBuildConfig.spec.source.images[0].paths = S(e.imageSourcePaths), e.updatedBuildConfig.spec.source.images[0].from = w(e.imageOptions.fromSource)), "None" === e.imageOptions.from.type ? delete v(e.updatedBuildConfig).from : v(e.updatedBuildConfig).from = w(e.imageOptions.from), "None" === e.imageOptions.to.type ? delete e.updatedBuildConfig.spec.output.to : e.updatedBuildConfig.spec.output.to = w(e.imageOptions.to), v(e.updatedBuildConfig).env = m.compactEntries(e.envVars), P(e.updatedBuildConfig.spec.source, _.head(e.secrets.picked.gitSecret), "sourceSecret"), P(v(e.updatedBuildConfig), _.head(e.secrets.picked.pullSecret), "pullSecret"), P(e.updatedBuildConfig.spec.output, _.head(e.secrets.picked.pushSecret), "pushSecret"), e.strategyType) {
>>>>>>> Updates for Service Instance & Bindings
=======
switch (e.sources.images && !_.isEmpty(e.sourceImages) && (e.updatedBuildConfig.spec.source.images[0].paths = S(e.imageSourcePaths), e.updatedBuildConfig.spec.source.images[0].from = w(e.imageOptions.fromSource)), "None" === e.imageOptions.from.type ? delete v(e.updatedBuildConfig).from : v(e.updatedBuildConfig).from = w(e.imageOptions.from), "None" === e.imageOptions.to.type ? delete e.updatedBuildConfig.spec.output.to : e.updatedBuildConfig.spec.output.to = w(e.imageOptions.to), v(e.updatedBuildConfig).env = p.compactEntries(e.envVars), P(e.updatedBuildConfig.spec.source, _.head(e.secrets.picked.gitSecret), "sourceSecret"), P(v(e.updatedBuildConfig), _.head(e.secrets.picked.pullSecret), "pullSecret"), P(e.updatedBuildConfig.spec.output, _.head(e.secrets.picked.pushSecret), "pushSecret"), e.strategyType) {
>>>>>>> Support EnvFrom in the Env Editors
=======
switch (e.sources.images && !_.isEmpty(e.sourceImages) && (e.updatedBuildConfig.spec.source.images[0].paths = S(e.imageSourcePaths), e.updatedBuildConfig.spec.source.images[0].from = w(e.imageOptions.fromSource)), "None" === e.imageOptions.from.type ? delete h(e.updatedBuildConfig).from : h(e.updatedBuildConfig).from = w(e.imageOptions.from), "None" === e.imageOptions.to.type ? delete e.updatedBuildConfig.spec.output.to : e.updatedBuildConfig.spec.output.to = w(e.imageOptions.to), h(e.updatedBuildConfig).env = p.compactEntries(e.envVars), P(e.updatedBuildConfig.spec.source, _.head(e.secrets.picked.gitSecret), "sourceSecret"), P(h(e.updatedBuildConfig), _.head(e.secrets.picked.pullSecret), "pullSecret"), P(e.updatedBuildConfig.spec.output, _.head(e.secrets.picked.pushSecret), "pushSecret"), e.strategyType) {
>>>>>>> Add SVG icons
=======
switch (e.sources.images && !_.isEmpty(e.sourceImages) && (e.updatedBuildConfig.spec.source.images[0].paths = C(e.imageSourcePaths), e.updatedBuildConfig.spec.source.images[0].from = w(e.imageOptions.fromSource)), "None" === e.imageOptions.from.type ? delete h(e.updatedBuildConfig).from : h(e.updatedBuildConfig).from = w(e.imageOptions.from), "None" === e.imageOptions.to.type ? delete e.updatedBuildConfig.spec.output.to : e.updatedBuildConfig.spec.output.to = w(e.imageOptions.to), h(e.updatedBuildConfig).env = p.compactEntries(e.envVars), j(e.updatedBuildConfig.spec.source, _.head(e.secrets.picked.gitSecret), "sourceSecret"), j(h(e.updatedBuildConfig), _.head(e.secrets.picked.pullSecret), "pullSecret"), j(e.updatedBuildConfig.spec.output, _.head(e.secrets.picked.pushSecret), "pushSecret"), e.strategyType) {
>>>>>>> Service instance details configuration and edit
=======
switch (e.sources.images && !_.isEmpty(e.sourceImages) && (e.updatedBuildConfig.spec.source.images[0].paths = C(e.imageSourcePaths), e.updatedBuildConfig.spec.source.images[0].from = w(e.imageOptions.fromSource)), "None" === e.imageOptions.from.type ? delete h(e.updatedBuildConfig).from : h(e.updatedBuildConfig).from = w(e.imageOptions.from), "None" === e.imageOptions.to.type ? delete e.updatedBuildConfig.spec.output.to : e.updatedBuildConfig.spec.output.to = w(e.imageOptions.to), h(e.updatedBuildConfig).env = p.compactEntries(e.envVars), P(e.updatedBuildConfig.spec.source, _.head(e.secrets.picked.gitSecret), "sourceSecret"), P(h(e.updatedBuildConfig), _.head(e.secrets.picked.pullSecret), "pullSecret"), P(e.updatedBuildConfig.spec.output, _.head(e.secrets.picked.pushSecret), "pushSecret"), e.strategyType) {
>>>>>>> Add product icons for service catalog
=======
switch (e.sources.images && !_.isEmpty(e.sourceImages) && (e.updatedBuildConfig.spec.source.images[0].paths = C(e.imageSourcePaths), e.updatedBuildConfig.spec.source.images[0].from = w(e.imageOptions.fromSource)), "None" === e.imageOptions.from.type ? delete h(e.updatedBuildConfig).from : h(e.updatedBuildConfig).from = w(e.imageOptions.from), "None" === e.imageOptions.to.type ? delete e.updatedBuildConfig.spec.output.to : e.updatedBuildConfig.spec.output.to = w(e.imageOptions.to), h(e.updatedBuildConfig).env = p.compactEntries(e.envVars), j(e.updatedBuildConfig.spec.source, _.head(e.secrets.picked.gitSecret), "sourceSecret"), j(h(e.updatedBuildConfig), _.head(e.secrets.picked.pullSecret), "pullSecret"), j(e.updatedBuildConfig.spec.output, _.head(e.secrets.picked.pushSecret), "pushSecret"), e.strategyType) {
>>>>>>> Handle displaying parameters when secrets are not available.
=======
switch (e.sources.images && !_.isEmpty(e.sourceImages) && (e.updatedBuildConfig.spec.source.images[0].paths = S(e.imageSourcePaths), e.updatedBuildConfig.spec.source.images[0].from = w(e.imageOptions.fromSource)), "None" === e.imageOptions.from.type ? delete h(e.updatedBuildConfig).from : h(e.updatedBuildConfig).from = w(e.imageOptions.from), "None" === e.imageOptions.to.type ? delete e.updatedBuildConfig.spec.output.to : e.updatedBuildConfig.spec.output.to = w(e.imageOptions.to), h(e.updatedBuildConfig).env = p.compactEntries(e.envVars), P(e.updatedBuildConfig.spec.source, _.head(e.secrets.picked.gitSecret), "sourceSecret"), P(h(e.updatedBuildConfig), _.head(e.secrets.picked.pullSecret), "pullSecret"), P(e.updatedBuildConfig.spec.output, _.head(e.secrets.picked.pushSecret), "pushSecret"), e.strategyType) {
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
switch (e.sources.images && !_.isEmpty(e.sourceImages) && (e.updatedBuildConfig.spec.source.images[0].paths = S(e.imageSourcePaths), e.updatedBuildConfig.spec.source.images[0].from = w(e.imageOptions.fromSource)), "None" === e.imageOptions.from.type ? delete h(e.updatedBuildConfig).from : h(e.updatedBuildConfig).from = w(e.imageOptions.from), "None" === e.imageOptions.to.type ? delete e.updatedBuildConfig.spec.output.to : e.updatedBuildConfig.spec.output.to = w(e.imageOptions.to), h(e.updatedBuildConfig).env = p.compactEntries(e.envVars), j(e.updatedBuildConfig.spec.source, _.head(e.secrets.picked.gitSecret), "sourceSecret"), j(h(e.updatedBuildConfig), _.head(e.secrets.picked.pullSecret), "pullSecret"), j(e.updatedBuildConfig.spec.output, _.head(e.secrets.picked.pushSecret), "pushSecret"), e.strategyType) {
>>>>>>> Update template service broker flag name
=======
switch (e.sources.images && !_.isEmpty(e.sourceImages) && (e.updatedBuildConfig.spec.source.images[0].paths = C(e.imageSourcePaths), e.updatedBuildConfig.spec.source.images[0].from = w(e.imageOptions.fromSource)), "None" === e.imageOptions.from.type ? delete h(e.updatedBuildConfig).from : h(e.updatedBuildConfig).from = w(e.imageOptions.from), "None" === e.imageOptions.to.type ? delete e.updatedBuildConfig.spec.output.to : e.updatedBuildConfig.spec.output.to = w(e.imageOptions.to), h(e.updatedBuildConfig).env = p.compactEntries(e.envVars), j(e.updatedBuildConfig.spec.source, _.head(e.secrets.picked.gitSecret), "sourceSecret"), j(h(e.updatedBuildConfig), _.head(e.secrets.picked.pullSecret), "pullSecret"), j(e.updatedBuildConfig.spec.output, _.head(e.secrets.picked.pushSecret), "pushSecret"), e.strategyType) {
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
=======
switch (e.sources.images && !_.isEmpty(e.sourceImages) && (e.updatedBuildConfig.spec.source.images[0].paths = C(e.imageSourcePaths), e.updatedBuildConfig.spec.source.images[0].from = w(e.imageOptions.fromSource)), "None" === e.imageOptions.from.type ? delete h(e.updatedBuildConfig).from : h(e.updatedBuildConfig).from = w(e.imageOptions.from), "None" === e.imageOptions.to.type ? delete e.updatedBuildConfig.spec.output.to : e.updatedBuildConfig.spec.output.to = w(e.imageOptions.to), h(e.updatedBuildConfig).env = p.compactEntries(e.envVars), j(e.updatedBuildConfig.spec.source, _.head(e.secrets.picked.gitSecret), "sourceSecret"), j(h(e.updatedBuildConfig), _.head(e.secrets.picked.pullSecret), "pullSecret"), j(e.updatedBuildConfig.spec.output, _.head(e.secrets.picked.pushSecret), "pushSecret"), e.strategyType) {
>>>>>>> Adding label filter to ste secrets page
=======
switch (e.sources.images && !_.isEmpty(e.sourceImages) && (e.updatedBuildConfig.spec.source.images[0].paths = k(e.imageSourcePaths), e.updatedBuildConfig.spec.source.images[0].from = j(e.imageOptions.fromSource)), "None" === e.imageOptions.from.type ? delete S(e.updatedBuildConfig).from : S(e.updatedBuildConfig).from = j(e.imageOptions.from), "None" === e.imageOptions.to.type ? delete e.updatedBuildConfig.spec.output.to : e.updatedBuildConfig.spec.output.to = j(e.imageOptions.to), S(e.updatedBuildConfig).env = f.compactEntries(e.envVars), E(e.updatedBuildConfig.spec.source, _.head(e.secrets.picked.gitSecret), "sourceSecret"), E(S(e.updatedBuildConfig), _.head(e.secrets.picked.pullSecret), "pullSecret"), E(e.updatedBuildConfig.spec.output, _.head(e.secrets.picked.pushSecret), "pushSecret"), e.strategyType) {
>>>>>>> Update edit buildConfigs controller to use getPreferredVersion
=======
switch (e.sources.images && !_.isEmpty(e.sourceImages) && (e.updatedBuildConfig.spec.source.images[0].paths = E(e.imageSourcePaths), e.updatedBuildConfig.spec.source.images[0].from = T(e.imageOptions.fromSource)), "None" === e.imageOptions.from.type ? delete S(e.updatedBuildConfig).from : S(e.updatedBuildConfig).from = T(e.imageOptions.from), "None" === e.imageOptions.to.type ? delete e.updatedBuildConfig.spec.output.to : e.updatedBuildConfig.spec.output.to = T(e.imageOptions.to), S(e.updatedBuildConfig).env = f.compactEntries(e.envVars), A(e.updatedBuildConfig.spec.source, _.head(e.secrets.picked.gitSecret), "sourceSecret"), A(S(e.updatedBuildConfig), _.head(e.secrets.picked.pullSecret), "pullSecret"), A(e.updatedBuildConfig.spec.output, _.head(e.secrets.picked.pushSecret), "pushSecret"), e.strategyType) {
>>>>>>> Enable valueFrom values for build config env vars
case "Source":
case "Docker":
$(e.updatedBuildConfig.spec.source, e.secrets.picked.sourceSecrets);
break;

case "Custom":
$(S(e.updatedBuildConfig), e.secrets.picked.sourceSecrets);
}
<<<<<<< b4ddc9b550515059b9681d76233c34b7f7b3431c
<<<<<<< f4c2d5331eeb2822c057c0ccb12690cba9a8dbde
<<<<<<< 418e6421bf3361cc4fbf12f2ee2f9d6a98bcff12
<<<<<<< 2ce32f87748ff2fe030a6b53ff9490fcb80d856d
<<<<<<< 714c4a3ff94bc485f89078ceeb8105e8b94271be
<<<<<<< 0c40bfb0d97d474f70b5801c1312be38074c32cb
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
a.updatedBuildConfig.spec.triggers = x(), t(), h.update("buildconfigs", a.updatedBuildConfig.metadata.name, a.updatedBuildConfig, a.context).then(function() {
j.addNotification({
type: "success",
message: "Build config " + a.updatedBuildConfig.metadata.name + " was successfully updated."
}), s();
}, function(c) {
a.disableInputs = !1, j.addNotification({
id: "edit-build-config-error",
type: "error",
message: "An error occurred updating build config " + a.updatedBuildConfig.metadata.name + ".",
details: b("getErrorDetails")(c)
});
});
}, a.$on("$destroy", function() {
h.unwatchAll(q);
});
} ]), angular.module("openshiftConsole").controller("EditConfigMapController", [ "$filter", "$routeParams", "$scope", "$window", "DataService", "BreadcrumbsService", "Navigate", "NotificationsService", "ProjectsService", "gettext", "gettextCatalog", function(a, b, c, d, e, f, g, h, i, j, k) {
var l = [];
c.forms = {}, c.projectName = b.project, c.breadcrumbs = f.getBreadcrumbs({
name: b.configMap,
kind: "ConfigMap",
namespace: b.project,
subpage: "Edit Config Map"
});
var m = function(a) {
return _.get(a, "metadata.resourceVersion");
}, n = function() {
h.hideNotification("edit-config-map-error");
}, o = function() {
d.history.back();
};
c.cancel = o, i.get(b.project).then(_.spread(function(d, i) {
e.get("configmaps", b.configMap, i, {
errorNotification: !1
}).then(function(a) {
c.loaded = !0, c.breadcrumbs = f.getBreadcrumbs({
name: b.configMap,
object: a,
project: d,
subpage: k.getString(j("Edit Config Map"))
}), c.configMap = a, l.push(e.watchObject("configmaps", b.configMap, i, function(a, b) {
c.resourceChanged = m(a) !== m(c.configMap), c.resourceDeleted = "DELETED" === b;
}));
}, function(c) {
g.toErrorPage("Could not load config map " + b.configMap + ". " + a("getErrorDetails")(c));
}), c.updateConfigMap = function() {
c.forms.editConfigMapForm.$valid && (n(), c.disableInputs = !0, e.update("configmaps", c.configMap.metadata.name, c.configMap, i).then(function() {
h.addNotification({
type: "success",
message: "Config map " + c.configMap.metadata.name + " successfully updated."
}), o();
}, function(b) {
c.disableInputs = !1, h.addNotification({
id: "edit-config-map-error",
type: "error",
message: "An error occurred updating the config map.",
details: a("getErrorDetails")(b)
});
}));
}, c.$on("$destroy", function() {
e.unwatchAll(l), n();
});
}));
} ]), angular.module("openshiftConsole").controller("EditDeploymentConfigController", [ "$scope", "$filter", "$location", "$routeParams", "$uibModal", "$window", "AuthorizationService", "BreadcrumbsService", "DataService", "EnvironmentService", "Navigate", "NotificationsService", "ProjectsService", "SecretsService", "keyValueEditorUtils", function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
a.projectName = d.project, a.deploymentConfig = null, a.alerts = {}, a.view = {
advancedStrategyOptions: !1,
advancedImageOptions: !1
}, a.triggers = {}, a.breadcrumbs = h.getBreadcrumbs({
name: d.name,
kind: d.kind,
namespace: d.project,
subpage: "Edit Deployment Config"
}), a.deploymentConfigStrategyTypes = [ "Recreate", "Rolling", "Custom" ];
var p = b("orderByDisplayName"), q = b("getErrorDetails"), r = function(b, c) {
a.alerts["from-value-objects"] = {
type: "error",
message: b,
details: c
};
}, s = [], t = [], u = [];
a.valueFromObjects = [];
var v = function(a) {
switch (a) {
=======
e.updatedBuildConfig.spec.triggers = k(), b(), s.update("buildconfigs", e.updatedBuildConfig.metadata.name, e.updatedBuildConfig, e.context).then(function() {
=======
e.updatedBuildConfig.spec.triggers = P(), b(), s.update("buildconfigs", e.updatedBuildConfig.metadata.name, e.updatedBuildConfig, e.context).then(function() {
>>>>>>> Fix for adding non-builder templates to a project
=======
e.updatedBuildConfig.spec.triggers = k(), b(), s.update("buildconfigs", e.updatedBuildConfig.metadata.name, e.updatedBuildConfig, e.context).then(function() {
>>>>>>> Bug 1505281 - Improve import YAML results message
=======
e.updatedBuildConfig.spec.triggers = P(), b(), s.update("buildconfigs", e.updatedBuildConfig.metadata.name, e.updatedBuildConfig, e.context).then(function() {
>>>>>>> Update pod controller to use getPreferredVersion
l.addNotification({
=======
e.updatedBuildConfig.spec.triggers = R(), w(), c.update(h, e.updatedBuildConfig.metadata.name, e.updatedBuildConfig, e.context).then(function() {
=======
e.updatedBuildConfig.spec.triggers = N(), R(), c.update(h, e.updatedBuildConfig.metadata.name, e.updatedBuildConfig, e.context).then(function() {
>>>>>>> Enable valueFrom values for build config env vars
=======
e.updatedBuildConfig.spec.triggers = N(), I(), c.update(h, e.updatedBuildConfig.metadata.name, e.updatedBuildConfig, e.context).then(function() {
>>>>>>> Add search catalog in project context
u.addNotification({
>>>>>>> Update edit buildConfigs controller to use getPreferredVersion
type: "success",
message: "Build config " + e.updatedBuildConfig.metadata.name + " was successfully updated."
}), k();
}, function(n) {
e.disableInputs = !1, u.addNotification({
id: "edit-build-config-error",
type: "error",
message: "An error occurred updating build config " + e.updatedBuildConfig.metadata.name + ".",
details: t("getErrorDetails")(n)
});
});
}, e.$on("$destroy", function() {
c.unwatchAll(b);
});
} ]), angular.module("openshiftConsole").controller("EditConfigMapController", [ "$filter", "$routeParams", "$scope", "$window", "APIService", "DataService", "BreadcrumbsService", "Navigate", "NotificationsService", "ProjectsService", function(e, t, n, r, a, o, i, s, c, l) {
var u = [];
n.forms = {}, n.projectName = t.project, n.breadcrumbs = i.getBreadcrumbs({
name: t.configMap,
kind: "ConfigMap",
namespace: t.project,
subpage: "Edit Config Map"
});
var d = function(e) {
return _.get(e, "metadata.resourceVersion");
}, m = function() {
c.hideNotification("edit-config-map-error");
}, p = function() {
r.history.back();
};
n.cancel = p;
var f = a.getPreferredVersion("configmaps");
l.get(t.project).then(_.spread(function(r, a) {
o.get(f, t.configMap, a, {
errorNotification: !1
}).then(function(e) {
n.loaded = !0, n.breadcrumbs = i.getBreadcrumbs({
name: t.configMap,
object: e,
project: r,
subpage: "Edit Config Map"
}), n.configMap = e, u.push(o.watchObject(f, t.configMap, a, function(e, t) {
n.resourceChanged = d(e) !== d(n.configMap), n.resourceDeleted = "DELETED" === t;
}));
}, function(n) {
s.toErrorPage("Could not load config map " + t.configMap + ". " + e("getErrorDetails")(n));
}), n.updateConfigMap = function() {
n.forms.editConfigMapForm.$valid && (m(), n.disableInputs = !0, o.update(f, n.configMap.metadata.name, n.configMap, a).then(function() {
c.addNotification({
type: "success",
message: "Config map " + n.configMap.metadata.name + " successfully updated."
}), p();
}, function(t) {
n.disableInputs = !1, c.addNotification({
id: "edit-config-map-error",
type: "error",
message: "An error occurred updating the config map.",
details: e("getErrorDetails")(t)
});
}));
}, n.$on("$destroy", function() {
o.unwatchAll(u), m();
});
}));
} ]), angular.module("openshiftConsole").controller("EditDeploymentConfigController", [ "$scope", "$filter", "$location", "$routeParams", "$uibModal", "$window", "APIService", "AuthorizationService", "BreadcrumbsService", "DataService", "EnvironmentService", "Navigate", "NotificationsService", "ProjectsService", "SecretsService", "keyValueEditorUtils", function(e, t, n, r, a, o, i, s, c, l, u, d, m, p, f, g) {
e.projectName = r.project, e.deploymentConfig = null, e.alerts = {}, e.view = {
advancedStrategyOptions: !1,
advancedImageOptions: !1
}, e.triggers = {}, e.breadcrumbs = c.getBreadcrumbs({
name: r.name,
kind: r.kind,
namespace: r.project,
subpage: "Edit Deployment Config"
}), e.deploymentConfigStrategyTypes = [ "Recreate", "Rolling", "Custom" ];
var v = t("orderByDisplayName"), h = t("getErrorDetails"), y = function(t, n) {
e.alerts["from-value-objects"] = {
type: "error",
message: t,
details: n
};
}, b = i.getPreferredVersion("deploymentconfigs"), S = i.getPreferredVersion("configmaps"), C = i.getPreferredVersion("secrets"), w = [], P = [], j = [];
e.valueFromObjects = [];
var k = function(e) {
switch (e) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
case "Recreate":
return "recreateParams";

case "Rolling":
return "rollingParams";

case "Custom":
return "customParams";

default:
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
return void Logger.error("Unknown deployment strategy type: " + a);
}
};
m.get(d.project).then(_.spread(function(c, e) {
return a.project = c, a.context = e, g.canI("deploymentconfigs", "update", d.project) ? void i.get("deploymentconfigs", d.deploymentconfig, e, {
errorNotification: !1
}).then(function(b) {
a.deploymentConfig = b, a.breadcrumbs = h.getBreadcrumbs({
object: b,
project: c,
subpage: "Edit"
});
var f = function(b, c) {
var d = {}, e = _.filter(c, {
type: "ImageChange"
});
return _.each(b, function(b) {
var c = _.find(e, function(a) {
return _.includes(a.imageChangeParams.containerNames, b.name);
}), f = {};
if (b.env = b.env || [], d[b.name] = {
env: b.env,
image: b.image,
hasDeploymentTrigger: !_.isEmpty(c)
}, c) {
var g = c.imageChangeParams.from, h = g.name.split(":");
f = {
data: c,
istag: {
namespace: g.namespace || a.projectName,
imageStream: h[0],
tagObject: {
tag: h[1]
}
},
automatic: _.get(c, "imageChangeParams.automatic", !1)
};
} else f = {
=======
return void Logger.error("Unknown deployment strategy type: " + e);
}
};
p.get(r.project).then(_.spread(function(n, a) {
e.project = n, e.context = a, s.canI("deploymentconfigs", "update", r.project) ? l.get(b, r.deploymentconfig, a, {
errorNotification: !1
}).then(function(t) {
e.deploymentConfig = t, e.breadcrumbs = c.getBreadcrumbs({
object: t,
project: n,
subpage: "Edit"
});
e.updatedDeploymentConfig = angular.copy(e.deploymentConfig), e.containerNames = _.map(e.deploymentConfig.spec.template.spec.containers, "name"), e.containerConfigByName = function(t, n) {
var r = {}, a = _.filter(n, {
type: "ImageChange"
});
return _.each(t, function(t) {
var n = _.find(a, function(e) {
return _.includes(e.imageChangeParams.containerNames, t.name);
}), o = {};
if (t.env = t.env || [], r[t.name] = {
env: t.env,
image: t.image,
hasDeploymentTrigger: !_.isEmpty(n)
}, n) {
var i = n.imageChangeParams.from, s = i.name.split(":");
o = {
data: n,
istag: {
namespace: i.namespace || e.projectName,
imageStream: s[0],
tagObject: {
tag: s[1]
}
},
automatic: _.get(n, "imageChangeParams.automatic", !1)
};
} else o = {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
istag: {
namespace: "",
imageStream: ""
},
automatic: !0
};
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
_.set(d, [ b.name, "triggerData" ], f);
}), d;
};
a.updatedDeploymentConfig = angular.copy(a.deploymentConfig), a.containerNames = _.map(a.deploymentConfig.spec.template.spec.containers, "name"), a.containerConfigByName = f(a.updatedDeploymentConfig.spec.template.spec.containers, a.updatedDeploymentConfig.spec.triggers), a.secrets = {
pullSecrets: angular.copy(a.deploymentConfig.spec.template.spec.imagePullSecrets) || [ {
=======
_.set(r, [ t.name, "triggerData" ], o);
}), r;
}(e.updatedDeploymentConfig.spec.template.spec.containers, e.updatedDeploymentConfig.spec.triggers), e.secrets = {
pullSecrets: angular.copy(e.deploymentConfig.spec.template.spec.imagePullSecrets) || [ {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
name: ""
} ]
<<<<<<< 13ac2d832bc56edf6bc5e2fc652da9b188ddae32
<<<<<<< 2c4be64ddfb5ed47b9ddbc182d8e69ad483c7914
<<<<<<< 75fc56b9e42e29e1492befd08624dd0e5dade866
<<<<<<< 247459038ac366429876741dd447ec652f2f5e7d
}, a.volumeNames = _.map(a.deploymentConfig.spec.template.spec.volumes, "name"), a.strategyData = angular.copy(a.deploymentConfig.spec.strategy), a.originalStrategy = a.strategyData.type, a.strategyParamsPropertyName = v(a.strategyData.type), a.triggers.hasConfigTrigger = _.some(a.updatedDeploymentConfig.spec.triggers, {
=======
}, e.volumeNames = _.map(e.deploymentConfig.spec.template.spec.volumes, "name"), e.strategyData = angular.copy(e.deploymentConfig.spec.strategy), e.originalStrategy = e.strategyData.type, e.strategyParamsPropertyName = C(e.strategyData.type), e.triggers.hasConfigTrigger = _.some(e.updatedDeploymentConfig.spec.triggers, {
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
=======
}, e.volumeNames = _.map(e.deploymentConfig.spec.template.spec.volumes, "name"), e.strategyData = angular.copy(e.deploymentConfig.spec.strategy), e.originalStrategy = e.strategyData.type, e.strategyParamsPropertyName = C(e.strategyData.type), e.triggers.hasConfigTrigger = _.some(e.updatedDeploymentConfig.spec.triggers, {
>>>>>>> Adding label filter to ste secrets page
type: "ConfigChange"
}), "Custom" !== a.strategyData.type || _.has(a.strategyData, "customParams.environment") || (a.strategyData.customParams.environment = []), i.list("configmaps", e, null, {
=======
}, e.volumeNames = _.map(e.deploymentConfig.spec.template.spec.volumes, "name"), e.strategyData = angular.copy(e.deploymentConfig.spec.strategy), e.originalStrategy = e.strategyData.type, e.strategyParamsPropertyName = j(e.strategyData.type), e.triggers.hasConfigTrigger = _.some(e.updatedDeploymentConfig.spec.triggers, {
=======
}, e.volumeNames = _.map(e.deploymentConfig.spec.template.spec.volumes, "name"), e.strategyData = angular.copy(e.deploymentConfig.spec.strategy), e.originalStrategy = e.strategyData.type, e.strategyParamsPropertyName = k(e.strategyData.type), e.triggers.hasConfigTrigger = _.some(e.updatedDeploymentConfig.spec.triggers, {
>>>>>>> Add Browse Catalog to Project context view.
type: "ConfigChange"
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
}), "Custom" !== e.strategyData.type || _.has(e.strategyData, "customParams.environment") || (e.strategyData.customParams.environment = []), l.list(S, r, null, {
>>>>>>> Update edit/deployment-configs controller to use getPreferredVersion
=======
}), "Custom" !== e.strategyData.type || _.has(e.strategyData, "customParams.environment") || (e.strategyData.customParams.environment = []), l.list(S, a, null, {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
errorNotification: !1
<<<<<<< 247459038ac366429876741dd447ec652f2f5e7d
}).then(function(b) {
t = p(b.by("metadata.name")), a.availableConfigMaps = t, a.valueFromObjects = t.concat(u);
}, function(a) {
403 !== a.status && r("Could not load config maps", q(a));
}), i.list("secrets", e, null, {
=======
}).then(function(t) {
P = v(t.by("metadata.name")), e.availableConfigMaps = P, e.valueFromObjects = P.concat(j);
}, function(e) {
<<<<<<< 2c4be64ddfb5ed47b9ddbc182d8e69ad483c7914
403 !== e.status && h("Could not load config maps", v(e));
}), c.list("secrets", r, null, {
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
=======
403 !== e.status && y("Could not load config maps", h(e));
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
}), l.list(C, r, null, {
>>>>>>> Update edit/deployment-configs controller to use getPreferredVersion
=======
}), l.list(C, a, null, {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
errorNotification: !1
<<<<<<< 2751c43b89660d22c6785bf2aaa1cb0e72a4fb03
}).then(function(b) {
u = p(b.by("metadata.name")), a.availableSecrets = u, a.valueFromObjects = t.concat(u);
var c = n.groupSecretsByType(b), d = _.mapValues(c, function(a) {
return _.map(a, "metadata.name");
=======
}).then(function(t) {
j = v(t.by("metadata.name")), e.availableSecrets = j, e.valueFromObjects = P.concat(j);
var n = f.groupSecretsByType(t), r = _.mapValues(n, function(e) {
return _.map(e, "metadata.name");
>>>>>>> Fix problems with env valueFrom for DC hooks
});
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
a.secretsByType = _.each(d, function(a) {
a.unshift("");
=======
e.secretsByType = _.each(r, function(e) {
e.unshift("");
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
});
<<<<<<< 2c4be64ddfb5ed47b9ddbc182d8e69ad483c7914
}, function(a) {
403 !== a.status && r("Could not load secrets", q(a));
}), s.push(i.watchObject("deploymentconfigs", d.deploymentconfig, e, function(b, c) {
"MODIFIED" === c && (a.alerts["updated/deleted"] = {
=======
}, function(e) {
403 !== e.status && y("Could not load secrets", h(e));
}), w.push(l.watchObject(b, r.deploymentconfig, a, function(t, n) {
"MODIFIED" === n && (e.alerts["updated/deleted"] = {
>>>>>>> Update edit/deployment-configs controller to use getPreferredVersion
type: "warning",
message: "This deployment configuration has changed since you started editing it. You'll need to copy any changes you've made and edit again."
}), "DELETED" === c && (a.alerts["updated/deleted"] = {
type: "warning",
message: "This deployment configuration has been deleted."
}, a.disableInputs = !0), a.deploymentConfig = b;
})), a.loaded = !0;
}, function(c) {
a.loaded = !0, a.alerts.load = {
type: "error",
message: "The deployment configuration details could not be loaded.",
details: b("getErrorDetails")(c)
};
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< 2c4be64ddfb5ed47b9ddbc182d8e69ad483c7914
}) : void k.toErrorPage("You do not have authority to update deployment config " + d.deploymentconfig + ".", "access_denied");
}));
var w = function() {
return "Custom" !== a.strategyData.type && "Custom" !== a.originalStrategy && a.strategyData.type !== a.originalStrategy;
}, x = function(b) {
if (!_.has(a.strategyData, b)) {
var c = e.open({
=======
_.set(a, [ t.name, "triggerData" ], o);
}), a;
}(e.updatedDeploymentConfig.spec.template.spec.containers, e.updatedDeploymentConfig.spec.triggers), e.secrets = {
pullSecrets: angular.copy(e.deploymentConfig.spec.template.spec.imagePullSecrets) || [ {
name: ""
} ]
}, e.volumeNames = _.map(e.deploymentConfig.spec.template.spec.volumes, "name"), e.strategyData = angular.copy(e.deploymentConfig.spec.strategy), e.originalStrategy = e.strategyData.type, e.strategyParamsPropertyName = S(e.strategyData.type), e.triggers.hasConfigTrigger = _.some(e.updatedDeploymentConfig.spec.triggers, {
type: "ConfigChange"
}), "Custom" !== e.strategyData.type || _.has(e.strategyData, "customParams.environment") || (e.strategyData.customParams.environment = []), c.list("configmaps", r, null, {
errorNotification: !1
}).then(function(t) {
b = g(t.by("metadata.name")), e.availableConfigMaps = b, e.valueFromObjects = b.concat(C);
}, function(e) {
403 !== e.code && h("Could not load config maps", v(e));
}), c.list("secrets", r, null, {
errorNotification: !1
}).then(function(t) {
C = g(t.by("metadata.name")), e.availableSecrets = C, e.valueFromObjects = C.concat(b);
var n = p.groupSecretsByType(t), a = _.mapValues(n, function(e) {
return _.map(e, "metadata.name");
});
e.secretsByType = _.each(a, function(e) {
e.unshift("");
});
}, function(e) {
403 !== e.code && h("Could not load secrets", v(e));
}), y.push(c.watchObject("deploymentconfigs", a.deploymentconfig, r, function(t, n) {
"MODIFIED" === n && (e.alerts["updated/deleted"] = {
type: "warning",
message: "This deployment configuration has changed since you started editing it. You'll need to copy any changes you've made and edit again."
}), "DELETED" === n && (e.alerts["updated/deleted"] = {
type: "warning",
message: "This deployment configuration has been deleted."
}, e.disableInputs = !0), e.deploymentConfig = t;
})), e.loaded = !0;
}, function(n) {
e.loaded = !0, e.alerts.load = {
type: "error",
message: "The deployment configuration details could not be loaded.",
details: t("getErrorDetails")(n)
};
}) : u.toErrorPage("You do not have authority to update deployment config " + a.deploymentconfig + ".", "access_denied");
}));
var w = function() {
return "Custom" !== e.strategyData.type && "Custom" !== e.originalStrategy && e.strategyData.type !== e.originalStrategy;
}, P = function(t) {
_.has(e.strategyData, t) || r.open({
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
}) : d.toErrorPage("You do not have authority to update deployment config " + a.deploymentconfig + ".", "access_denied");
}));
var I = function() {
return "Custom" !== e.strategyData.type && "Custom" !== e.originalStrategy && e.strategyData.type !== e.originalStrategy;
}, R = function(t) {
_.has(e.strategyData, t) || r.open({
>>>>>>> Update edit/deployment-configs controller to use getPreferredVersion
=======
}) : d.toErrorPage("You do not have authority to update deployment config " + r.deploymentconfig + ".", "access_denied");
}));
var I = function() {
return "Custom" !== e.strategyData.type && "Custom" !== e.originalStrategy && e.strategyData.type !== e.originalStrategy;
}, R = function(t) {
_.has(e.strategyData, t) || a.open({
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
animation: !0,
templateUrl: "views/modals/confirm.html",
controller: "ConfirmModalController",
resolve: {
modalConfig: function() {
return {
<<<<<<< 2c4be64ddfb5ed47b9ddbc182d8e69ad483c7914
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
alerts: a.alerts,
message: "Some of your existing " + a.originalStrategy.toLowerCase() + " strategy parameters can be used for the " + a.strategyData.type.toLowerCase() + " strategy. Keep parameters?",
details: "The timeout parameter and any pre or post lifecycle hooks will be copied from " + a.originalStrategy.toLowerCase() + " strategy to " + a.strategyData.type.toLowerCase() + " strategy. After saving the changes, " + a.originalStrategy.toLowerCase() + " strategy parameters will be removed.",
=======
=======
>>>>>>> Update edit/deployment-configs controller to use getPreferredVersion
alerts: e.alerts,
message: "Some of your existing " + e.originalStrategy.toLowerCase() + " strategy parameters can be used for the " + e.strategyData.type.toLowerCase() + " strategy. Keep parameters?",
details: "The timeout parameter and any pre or post lifecycle hooks will be copied from " + e.originalStrategy.toLowerCase() + " strategy to " + e.strategyData.type.toLowerCase() + " strategy. After saving the changes, " + e.originalStrategy.toLowerCase() + " strategy parameters will be removed.",
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
okButtonText: "Yes",
okButtonClass: "btn-primary",
cancelButtonText: "No"
};
}
}
}).result.then(function() {
e.strategyData[t] = angular.copy(e.strategyData[k(e.originalStrategy)]);
}, function() {
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
a.strategyData[b] = {};
});
}
};
<<<<<<< 714c4a3ff94bc485f89078ceeb8105e8b94271be
a.strategyChanged = function() {
var b = v(a.strategyData.type);
w() ? x(b) : _.has(a.strategyData, b) || ("Custom" !== a.strategyData.type ? a.strategyData[b] = {} : a.strategyData[b] = {
=======
e.strategyChanged = function() {
<<<<<<< 13ac2d832bc56edf6bc5e2fc652da9b188ddae32
<<<<<<< b4ddc9b550515059b9681d76233c34b7f7b3431c
var t = C(e.strategyData.type);
w() ? k(t) : _.has(e.strategyData, t) || ("Custom" !== e.strategyData.type ? e.strategyData[t] = {} : e.strategyData[t] = {
>>>>>>> Bug 1505281 - Improve import YAML results message
=======
var t = j(e.strategyData.type);
=======
var t = k(e.strategyData.type);
>>>>>>> Add Browse Catalog to Project context view.
I() ? R(t) : _.has(e.strategyData, t) || ("Custom" !== e.strategyData.type ? e.strategyData[t] = {} : e.strategyData[t] = {
>>>>>>> Add search catalog in project context
image: "",
command: [],
environment: []
}), a.strategyParamsPropertyName = b;
};
<<<<<<< 714c4a3ff94bc485f89078ceeb8105e8b94271be
<<<<<<< 1f5fb674ad14c7e78d2e82e837750bd2747349ab
<<<<<<< d21c662f039266e2dd235fa32bd86d3647c082ae
var y = function(a, b, c, d) {
var e = {
=======
=======
>>>>>>> Update template service broker flag name
=======
>>>>>>> Bug 1505281 - Improve import YAML results message
var P = function(e, t, n, a) {
var r = {
>>>>>>> Handle displaying parameters when secrets are not available.
kind: "ImageStreamTag",
namespace: b.namespace,
name: b.imageStream + ":" + b.tagObject.tag
};
return c ? (c.imageChangeParams.from = e, c.imageChangeParams.automatic = d) : c = {
type: "ImageChange",
imageChangeParams: {
automatic: d,
containerNames: [ a ],
from: e
}
<<<<<<< 1f5fb674ad14c7e78d2e82e837750bd2747349ab
<<<<<<< d21c662f039266e2dd235fa32bd86d3647c082ae
}, c;
}, z = function() {
var b = _.reject(a.updatedDeploymentConfig.spec.triggers, function(a) {
return "ImageChange" === a.type || "ConfigChange" === a.type;
});
<<<<<<< 714c4a3ff94bc485f89078ceeb8105e8b94271be
return _.each(a.containerConfigByName, function(c, d) {
if (c.hasDeploymentTrigger) b.push(y(d, c.triggerData.istag, c.triggerData.data, c.triggerData.automatic)); else {
var e = _.find(a.updatedDeploymentConfig.spec.template.spec.containers, {
name: d
});
e.image = c.image;
}
}), a.triggers.hasConfigTrigger && b.push({
=======
return _.each(e.containerConfigByName, function(n, a) {
n.hasDeploymentTrigger ? t.push(P(a, n.triggerData.istag, n.triggerData.data, n.triggerData.automatic)) : _.find(e.updatedDeploymentConfig.spec.template.spec.containers, {
name: a
}).image = n.image;
}), e.triggers.hasConfigTrigger && t.push({
>>>>>>> Bug 1505281 - Improve import YAML results message
type: "ConfigChange"
}), b;
}, A = function() {
l.hideNotification("edit-deployment-config-error");
};
a.save = function() {
if (a.disableInputs = !0, _.each(a.containerConfigByName, function(b, c) {
var d = _.find(a.updatedDeploymentConfig.spec.template.spec.containers, {
name: c
});
d.env = o.compactEntries(b.env);
}), w() && delete a.strategyData[v(a.originalStrategy)], "Rolling" === a.strategyData.type) {
var d = a.strategyData[a.strategyParamsPropertyName].maxSurge, e = Number(d);
"" === d ? a.strategyData[a.strategyParamsPropertyName].maxSurge = null : _.isFinite(e) && (a.strategyData[a.strategyParamsPropertyName].maxSurge = e);
var f = a.strategyData[a.strategyParamsPropertyName].maxUnavailable, g = Number(f);
"" === f ? a.strategyData[a.strategyParamsPropertyName].maxUnavailable = null : _.isFinite(g) && (a.strategyData[a.strategyParamsPropertyName].maxUnavailable = g);
}
"Custom" !== a.strategyData.type && _.each([ "pre", "mid", "post" ], function(b) {
_.has(a.strategyData, [ a.strategyParamsPropertyName, b, "execNewPod", "env" ]) && (a.strategyData[a.strategyParamsPropertyName][b].execNewPod.env = o.compactEntries(a.strategyData[a.strategyParamsPropertyName][b].execNewPod.env));
}), _.has(a, "strategyData.customParams.environment") && (a.strategyData.customParams.environment = o.compactEntries(a.strategyData.customParams.environment)), a.updatedDeploymentConfig.spec.template.spec.imagePullSecrets = _.filter(a.secrets.pullSecrets, "name"), a.updatedDeploymentConfig.spec.strategy = a.strategyData, a.updatedDeploymentConfig.spec.triggers = z(), A(), i.update("deploymentconfigs", a.updatedDeploymentConfig.metadata.name, a.updatedDeploymentConfig, a.context).then(function() {
l.addNotification({
type: "success",
message: "Deployment config " + a.updatedDeploymentConfig.metadata.name + " was successfully updated."
});
var b = k.resourceURL(a.updatedDeploymentConfig);
c.url(b);
}, function(c) {
a.disableInputs = !1, l.addNotification({
id: "edit-deployment-config-error",
type: "error",
message: "An error occurred updating deployment config " + a.updatedDeploymentConfig.metadata.name + ".",
details: b("getErrorDetails")(c)
});
});
}, a.cancel = function() {
f.history.back();
}, a.$on("$destroy", function() {
i.unwatchAll(s), A();
});
} ]), angular.module("openshiftConsole").controller("EditAutoscalerController", [ "$scope", "$filter", "$routeParams", "$window", "APIService", "AuthorizationService", "BreadcrumbsService", "DataService", "HPAService", "MetricsService", "Navigate", "NotificationsService", "ProjectsService", "keyValueEditorUtils", function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
if (!c.kind || !c.name) return void k.toErrorPage("Kind or name parameter missing.");
var o = [ "Deployment", "DeploymentConfig", "HorizontalPodAutoscaler", "ReplicaSet", "ReplicationController" ];
if (!_.includes(o, c.kind)) return void k.toErrorPage("Autoscaling not supported for kind " + c.kind + ".");
a.kind = c.kind, a.name = c.name, "HorizontalPodAutoscaler" === c.kind ? a.disableInputs = !0 : (a.targetKind = c.kind, a.targetName = c.name), a.autoscaling = {
name: a.name
}, a.labels = [], j.isAvailable().then(function(b) {
a.metricsWarning = !b;
});
var p = b("getErrorDetails"), q = function() {
d.history.back();
};
a.cancel = q;
var r = function() {
l.hideNotification("edit-hpa-error");
};
a.$on("$destroy", r), m.get(c.project).then(_.spread(function(b, d) {
a.project = b;
var j = "HorizontalPodAutoscaler" === c.kind ? "update" : "create";
if (!f.canI({
resource: "horizontalpodautoscalers",
group: "autoscaling"
}, j, c.project)) return void k.toErrorPage("You do not have authority to " + j + " horizontal pod autoscalers in project " + c.project + ".", "access_denied");
var m = function() {
a.disableInputs = !0, r();
var b = {
apiVersion: "autoscaling/v1",
kind: "HorizontalPodAutoscaler",
metadata: {
name: a.autoscaling.name,
labels: n.mapEntries(n.compactEntries(a.labels))
},
spec: {
scaleTargetRef: {
kind: c.kind,
name: c.name,
apiVersion: "extensions/v1beta1",
subresource: "scale"
},
minReplicas: a.autoscaling.minReplicas,
maxReplicas: a.autoscaling.maxReplicas,
targetCPUUtilizationPercentage: a.autoscaling.targetCPU || a.autoscaling.defaultTargetCPU || null
}
};
h.create({
resource: "horizontalpodautoscalers",
group: "autoscaling"
}, null, b, d).then(function(a) {
l.addNotification({
type: "success",
message: "Horizontal pod autoscaler " + a.metadata.name + " successfully created."
}), q();
}, function(b) {
a.disableInputs = !1, l.addNotification({
id: "edit-hpa-error",
type: "error",
message: "An error occurred creating the horizontal pod autoscaler.",
details: p(b)
});
});
}, o = function(b) {
a.disableInputs = !0, b = angular.copy(b), b.metadata.labels = n.mapEntries(n.compactEntries(a.labels)), b.spec.minReplicas = a.autoscaling.minReplicas, b.spec.maxReplicas = a.autoscaling.maxReplicas, b.spec.targetCPUUtilizationPercentage = a.autoscaling.targetCPU || a.autoscaling.defaultTargetCPU || null, h.update({
resource: "horizontalpodautoscalers",
group: "autoscaling"
}, b.metadata.name, b, d).then(function(a) {
l.addNotification({
type: "success",
message: "Horizontal pod autoscaler " + a.metadata.name + " successfully updated."
}), q();
}, function(b) {
a.disableInputs = !1, l.addNotification({
id: "edit-hpa-error",
type: "error",
message: "An error occurred creating the horizontal pod autoscaler.",
details: p(b)
});
});
}, s = {};
s = "HorizontalPodAutoscaler" === c.kind ? {
=======
e.strategyData[t] = {};
});
};
e.strategyChanged = function() {
<<<<<<< 2c4be64ddfb5ed47b9ddbc182d8e69ad483c7914
<<<<<<< 75fc56b9e42e29e1492befd08624dd0e5dade866
var t = S(e.strategyData.type);
w() ? P(t) : _.has(e.strategyData, t) || ("Custom" !== e.strategyData.type ? e.strategyData[t] = {} : e.strategyData[t] = {
=======
var t = C(e.strategyData.type);
<<<<<<< 2ce32f87748ff2fe030a6b53ff9490fcb80d856d
w() ? k(t) : _.has(e.strategyData, t) || ("Custom" !== e.strategyData.type ? e.strategyData[t] = {} : e.strategyData[t] = {
>>>>>>> Adding label filter to ste secrets page
=======
w() ? P(t) : _.has(e.strategyData, t) || ("Custom" !== e.strategyData.type ? e.strategyData[t] = {} : e.strategyData[t] = {
>>>>>>> Update pod controller to use getPreferredVersion
=======
var t = j(e.strategyData.type);
R() ? I(t) : _.has(e.strategyData, t) || ("Custom" !== e.strategyData.type ? e.strategyData[t] = {} : e.strategyData[t] = {
>>>>>>> Update edit/deployment-configs controller to use getPreferredVersion
image: "",
command: [],
environment: []
}), e.strategyParamsPropertyName = t;
};
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< 2c4be64ddfb5ed47b9ddbc182d8e69ad483c7914
<<<<<<< 2ce32f87748ff2fe030a6b53ff9490fcb80d856d
<<<<<<< 0c40bfb0d97d474f70b5801c1312be38074c32cb
var j = function(e, t, n, a) {
=======
var k = function(e, t, n, a) {
>>>>>>> Fix for adding non-builder templates to a project
=======
var k = function(e, t, n, a) {
>>>>>>> Update pod controller to use getPreferredVersion
=======
var E = function(e, t, n, a) {
>>>>>>> Update edit/deployment-configs controller to use getPreferredVersion
var r = {
=======
var E = function(e, t, n, r) {
var a = {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
kind: "ImageStreamTag",
namespace: t.namespace,
name: t.imageStream + ":" + t.tagObject.tag
};
return n ? (n.imageChangeParams.from = a, n.imageChangeParams.automatic = r) : n = {
type: "ImageChange",
imageChangeParams: {
automatic: r,
containerNames: [ e ],
from: a
}
}, n;
<<<<<<< 2c4be64ddfb5ed47b9ddbc182d8e69ad483c7914
}, P = function() {
<<<<<<< a19b22733566f12a68db59a49bc16848fffba594
var t = _.reject(e.updatedDeploymentConfig.spec.triggers, function(e) {
return "ImageChange" === e.type || "ConfigChange" === e.type;
});
return _.each(e.containerConfigByName, function(n, a) {
n.hasDeploymentTrigger ? t.push(j(a, n.triggerData.istag, n.triggerData.data, n.triggerData.automatic)) : _.find(e.updatedDeploymentConfig.spec.template.spec.containers, {
=======
}, n;
}, j = function() {
=======
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
var t = _.reject(e.updatedDeploymentConfig.spec.triggers, function(e) {
return "ImageChange" === e.type || "ConfigChange" === e.type;
});
return _.each(e.containerConfigByName, function(n, a) {
<<<<<<< a19b22733566f12a68db59a49bc16848fffba594
n.hasDeploymentTrigger ? t.push(P(a, n.triggerData.istag, n.triggerData.data, n.triggerData.automatic)) : _.find(e.updatedDeploymentConfig.spec.template.spec.containers, {
>>>>>>> Handle displaying parameters when secrets are not available.
=======
n.hasDeploymentTrigger ? t.push(j(a, n.triggerData.istag, n.triggerData.data, n.triggerData.automatic)) : _.find(e.updatedDeploymentConfig.spec.template.spec.containers, {
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
}, n;
}, j = function() {
=======
}, T = function() {
>>>>>>> Update edit/deployment-configs controller to use getPreferredVersion
var t = _.reject(e.updatedDeploymentConfig.spec.triggers, function(e) {
return "ImageChange" === e.type || "ConfigChange" === e.type;
});
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
return _.each(e.containerConfigByName, function(n, a) {
<<<<<<< 2c4be64ddfb5ed47b9ddbc182d8e69ad483c7914
<<<<<<< 2ce32f87748ff2fe030a6b53ff9490fcb80d856d
<<<<<<< 0c40bfb0d97d474f70b5801c1312be38074c32cb
n.hasDeploymentTrigger ? t.push(P(a, n.triggerData.istag, n.triggerData.data, n.triggerData.automatic)) : _.find(e.updatedDeploymentConfig.spec.template.spec.containers, {
>>>>>>> Update template service broker flag name
=======
n.hasDeploymentTrigger ? t.push(k(a, n.triggerData.istag, n.triggerData.data, n.triggerData.automatic)) : _.find(e.updatedDeploymentConfig.spec.template.spec.containers, {
>>>>>>> Fix for adding non-builder templates to a project
=======
n.hasDeploymentTrigger ? t.push(k(a, n.triggerData.istag, n.triggerData.data, n.triggerData.automatic)) : _.find(e.updatedDeploymentConfig.spec.template.spec.containers, {
>>>>>>> Update pod controller to use getPreferredVersion
=======
n.hasDeploymentTrigger ? t.push(E(a, n.triggerData.istag, n.triggerData.data, n.triggerData.automatic)) : _.find(e.updatedDeploymentConfig.spec.template.spec.containers, {
>>>>>>> Update edit/deployment-configs controller to use getPreferredVersion
name: a
=======
return _.each(e.containerConfigByName, function(n, r) {
n.hasDeploymentTrigger ? t.push(E(r, n.triggerData.istag, n.triggerData.data, n.triggerData.automatic)) : _.find(e.updatedDeploymentConfig.spec.template.spec.containers, {
name: r
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}).image = n.image;
}), e.triggers.hasConfigTrigger && t.push({
type: "ConfigChange"
}), t;
}, N = function() {
m.hideNotification("edit-deployment-config-error");
};
e.save = function() {
if (e.disableInputs = !0, _.each(e.containerConfigByName, function(t, n) {
_.find(e.updatedDeploymentConfig.spec.template.spec.containers, {
name: n
}).env = g.compactEntries(t.env);
}), I() && delete e.strategyData[k(e.originalStrategy)], "Rolling" === e.strategyData.type) {
var r = e.strategyData[e.strategyParamsPropertyName].maxSurge, a = Number(r);
"" === r ? e.strategyData[e.strategyParamsPropertyName].maxSurge = null : _.isFinite(a) && (e.strategyData[e.strategyParamsPropertyName].maxSurge = a);
var o = e.strategyData[e.strategyParamsPropertyName].maxUnavailable, i = Number(o);
"" === o ? e.strategyData[e.strategyParamsPropertyName].maxUnavailable = null : _.isFinite(i) && (e.strategyData[e.strategyParamsPropertyName].maxUnavailable = i);
}
"Custom" !== e.strategyData.type && _.each([ "pre", "mid", "post" ], function(t) {
_.has(e.strategyData, [ e.strategyParamsPropertyName, t, "execNewPod", "env" ]) && (e.strategyData[e.strategyParamsPropertyName][t].execNewPod.env = g.compactEntries(e.strategyData[e.strategyParamsPropertyName][t].execNewPod.env));
}), _.has(e, "strategyData.customParams.environment") && (e.strategyData.customParams.environment = g.compactEntries(e.strategyData.customParams.environment)), e.updatedDeploymentConfig.spec.template.spec.imagePullSecrets = _.filter(e.secrets.pullSecrets, "name"), e.updatedDeploymentConfig.spec.strategy = e.strategyData, e.updatedDeploymentConfig.spec.triggers = T(), N(), l.update(b, e.updatedDeploymentConfig.metadata.name, e.updatedDeploymentConfig, e.context).then(function() {
m.addNotification({
type: "success",
message: "Deployment config " + e.updatedDeploymentConfig.metadata.name + " was successfully updated."
});
var t = d.resourceURL(e.updatedDeploymentConfig);
n.url(t);
}, function(n) {
e.disableInputs = !1, m.addNotification({
id: "edit-deployment-config-error",
type: "error",
message: "An error occurred updating deployment config " + e.updatedDeploymentConfig.metadata.name + ".",
details: t("getErrorDetails")(n)
});
});
}, e.cancel = function() {
o.history.back();
}, e.$on("$destroy", function() {
l.unwatchAll(w), N();
});
} ]), angular.module("openshiftConsole").controller("EditAutoscalerController", [ "$scope", "$filter", "$routeParams", "$window", "APIService", "AuthorizationService", "BreadcrumbsService", "DataService", "HPAService", "MetricsService", "Navigate", "NotificationsService", "ProjectsService", "keyValueEditorUtils", function(e, t, n, r, a, o, i, s, c, l, u, d, m, p) {
if (n.kind && n.name) {
var f = [ "Deployment", "DeploymentConfig", "HorizontalPodAutoscaler", "ReplicaSet", "ReplicationController" ];
if (_.includes(f, n.kind)) {
e.kind = n.kind, e.name = n.name, "HorizontalPodAutoscaler" === n.kind ? e.disableInputs = !0 : (e.targetKind = n.kind, e.targetName = n.name), e.autoscaling = {
name: e.name
}, e.labels = [], l.isAvailable().then(function(t) {
e.metricsWarning = !t;
});
var g = t("getErrorDetails"), v = function() {
r.history.back();
};
e.cancel = v;
var h = function() {
d.hideNotification("edit-hpa-error");
};
e.$on("$destroy", h);
var y = a.getPreferredVersion("horizontalpodautoscalers"), b = a.getPreferredVersion("limitranges");
m.get(n.project).then(_.spread(function(t, r) {
e.project = t;
var l = "HorizontalPodAutoscaler" === n.kind ? "update" : "create";
if (o.canI({
resource: "horizontalpodautoscalers",
group: "autoscaling"
}, l, n.project)) {
var m = function() {
e.disableInputs = !0, h();
var t = {
apiVersion: "autoscaling/v1",
kind: "HorizontalPodAutoscaler",
metadata: {
name: e.autoscaling.name,
labels: p.mapEntries(p.compactEntries(e.labels))
},
spec: {
scaleTargetRef: {
kind: n.kind,
name: n.name,
apiVersion: "extensions/v1beta1",
subresource: "scale"
},
minReplicas: e.autoscaling.minReplicas,
maxReplicas: e.autoscaling.maxReplicas,
targetCPUUtilizationPercentage: e.autoscaling.targetCPU || e.autoscaling.defaultTargetCPU || null
}
};
s.create(y, null, t, r).then(function(e) {
d.addNotification({
type: "success",
message: "Horizontal pod autoscaler " + e.metadata.name + " successfully created."
}), v();
}, function(t) {
e.disableInputs = !1, d.addNotification({
id: "edit-hpa-error",
type: "error",
message: "An error occurred creating the horizontal pod autoscaler.",
details: g(t)
});
});
}, f = function(t) {
e.disableInputs = !0, (t = angular.copy(t)).metadata.labels = p.mapEntries(p.compactEntries(e.labels)), t.spec.minReplicas = e.autoscaling.minReplicas, t.spec.maxReplicas = e.autoscaling.maxReplicas, t.spec.targetCPUUtilizationPercentage = e.autoscaling.targetCPU || e.autoscaling.defaultTargetCPU || null, s.update(y, t.metadata.name, t, r).then(function(e) {
d.addNotification({
type: "success",
message: "Horizontal pod autoscaler " + e.metadata.name + " successfully updated."
}), v();
}, function(t) {
e.disableInputs = !1, d.addNotification({
id: "edit-hpa-error",
type: "error",
message: "An error occurred creating the horizontal pod autoscaler.",
details: g(t)
});
});
<<<<<<< 880d16fe456642065ce22078359cdae04ff9fc2d
}, y = {};
y = "HorizontalPodAutoscaler" === n.kind ? {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
}, S = {};
S = "HorizontalPodAutoscaler" === n.kind ? {
>>>>>>> Update autoscaler controller to use getPreferredVersion
resource: "horizontalpodautoscalers",
group: "autoscaling",
version: "v1"
} : {
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
resource: e.kindToResource(c.kind),
group: c.group
}, h.get(s, c.name, d).then(function(e) {
if (a.labels = _.map(_.get(e, "metadata.labels", {}), function(a, b) {
return {
name: b,
value: a
};
}), "HorizontalPodAutoscaler" === c.kind) a.targetKind = _.get(e, "spec.scaleTargetRef.kind"), a.targetName = _.get(e, "spec.scaleTargetRef.name"), _.assign(a.autoscaling, {
minReplicas: _.get(e, "spec.minReplicas"),
maxReplicas: _.get(e, "spec.maxReplicas"),
targetCPU: _.get(e, "spec.targetCPUUtilizationPercentage")
}), a.disableInputs = !1, a.save = function() {
o(e);
}, a.breadcrumbs = g.getBreadcrumbs({
name: a.targetName,
kind: a.targetKind,
namespace: c.project,
project: b,
subpage: "Autoscale"
}); else {
a.breadcrumbs = g.getBreadcrumbs({
object: e,
project: b,
subpage: "Autoscale"
}), a.save = m;
var f = {}, j = function() {
var c = _.get(e, "spec.template.spec.containers", []);
a.showCPURequestWarning = !i.hasCPURequest(c, f, b);
=======
resource: r.kindToResource(n.kind),
=======
resource: a.kindToResource(n.kind),
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
group: n.group
}, s.get(S, n.name, r).then(function(a) {
if (e.labels = _.map(_.get(a, "metadata.labels", {}), function(e, t) {
return {
name: t,
value: e
};
}), "HorizontalPodAutoscaler" === n.kind) e.targetKind = _.get(a, "spec.scaleTargetRef.kind"), e.targetName = _.get(a, "spec.scaleTargetRef.name"), _.assign(e.autoscaling, {
minReplicas: _.get(a, "spec.minReplicas"),
maxReplicas: _.get(a, "spec.maxReplicas"),
targetCPU: _.get(a, "spec.targetCPUUtilizationPercentage")
}), e.disableInputs = !1, e.save = function() {
f(a);
}, e.breadcrumbs = i.getBreadcrumbs({
name: e.targetName,
kind: e.targetKind,
namespace: n.project,
project: t,
subpage: "Autoscale"
}); else {
e.breadcrumbs = i.getBreadcrumbs({
object: a,
project: t,
subpage: "Autoscale"
}), e.save = m;
var o = {}, l = function() {
var n = _.get(a, "spec.template.spec.containers", []);
e.showCPURequestWarning = !c.hasCPURequest(n, o, t);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
};
s.list(b, r).then(function(e) {
o = e.by("metadata.name"), l();
});
}
});
} else u.toErrorPage("You do not have authority to " + l + " horizontal pod autoscalers in project " + n.project + ".", "access_denied");
}));
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
} ]), angular.module("openshiftConsole").controller("EditHealthChecksController", [ "$filter", "$location", "$routeParams", "$scope", "AuthorizationService", "BreadcrumbsService", "APIService", "DataService", "Navigate", "NotificationsService", "ProjectsService", function(a, b, c, d, e, f, g, h, i, j, k) {
if (!c.kind || !c.name) return void i.toErrorPage("Kind or name parameter missing.");
var l = [ "Deployment", "DeploymentConfig", "ReplicaSet", "ReplicationController" ];
if (!_.includes(l, c.kind)) return void i.toErrorPage("Health checks are not supported for kind " + c.kind + ".");
d.name = c.name, d.resourceURL = i.resourceURL(d.name, c.kind, c.project), d.breadcrumbs = f.getBreadcrumbs({
name: c.name,
kind: c.kind,
namespace: c.project,
subpage: "Edit Health Checks"
}), d.previousProbes = {};
var m = a("getErrorDetails"), n = a("upperFirst"), o = function(a, b) {
j.addNotification({
id: "add-health-check-error",
type: "error",
message: a,
details: b
});
}, p = function() {
b.url(d.resourceURL);
};
d.cancel = p;
var q = function() {
j.hideNotification("add-health-check-error");
};
d.$on("$destroy", q), k.get(c.project).then(_.spread(function(b, k) {
var l = a("humanizeKind")(c.kind) + ' "' + d.name + '"', r = {
resource: g.kindToResource(c.kind),
group: c.group
};
return e.canI(r, "update", c.project) ? void h.get(r, d.name, k).then(function(a) {
var e = d.object = angular.copy(a);
d.breadcrumbs = f.getBreadcrumbs({
object: e,
project: b,
subpage: "Edit Health Checks"
}), d.containers = _.get(e, "spec.template.spec.containers"), d.addProbe = function(a, b) {
a[b] = _.get(d.previousProbes, [ a.name, b ], {}), d.form.$setDirty();
}, d.removeProbe = function(a, b) {
_.set(d.previousProbes, [ a.name, b ], a[b]), delete a[b], d.form.$setDirty();
}, d.save = function() {
d.disableInputs = !0, q(), h.update(g.kindToResource(c.kind), d.name, e, k).then(function() {
j.addNotification({
type: "success",
message: n(l) + " was updated."
}), p();
}, function(a) {
d.disableInputs = !1, o(n(l) + " could not be updated.", m(a));
});
};
}, function(a) {
o(n(l) + " could not be loaded.", m(a));
}) : void i.toErrorPage("You do not have authority to update " + l + ".", "access_denied");
}));
} ]), angular.module("openshiftConsole").controller("EditRouteController", [ "$filter", "$location", "$routeParams", "$scope", "AuthorizationService", "DataService", "Navigate", "NotificationsService", "ProjectsService", "RoutesService", function(a, b, c, d, e, f, g, h, i, j) {
d.renderOptions = {
hideFilterWidget: !0
}, d.projectName = c.project, d.routeName = c.route, d.loading = !0, d.routeURL = g.resourceURL(d.routeName, "Route", d.projectName), d.breadcrumbs = [ {
title: "Routes",
link: "project/" + d.projectName + "/browse/routes"
}, {
title: d.routeName,
link: d.routeURL
}, {
title: "Edit"
} ];
var k = function() {
h.hideNotification("edit-route-error");
};
d.$on("$destroy", k);
var l = function() {
b.path(d.routeURL);
};
d.cancel = l, i.get(c.project).then(_.spread(function(b, i) {
if (d.project = b, !e.canI("routes", "update", c.project)) return void g.toErrorPage("You do not have authority to update route " + c.routeName + ".", "access_denied");
var m, n = a("orderByDisplayName"), o = function() {
g.toErrorPage('Editing routes with non-service targets is unsupported. You can edit the route with the "Edit YAML" action instead.');
};
f.get("routes", d.routeName, i).then(function(a) {
if ("Service" !== a.spec.to.kind) return void o();
m = angular.copy(a);
var b = _.get(m, "spec.host"), c = "Subdomain" === _.get(m, "spec.wildcardPolicy");
c && (b = "*." + j.getSubdomain(m)), d.routing = {
host: b,
=======
} else u.toErrorPage("Autoscaling not supported for kind " + n.kind + ".");
} else u.toErrorPage("Kind or name parameter missing.");
} ]), angular.module("openshiftConsole").controller("EditHealthChecksController", [ "$filter", "$location", "$routeParams", "$scope", "AuthorizationService", "BreadcrumbsService", "APIService", "DataService", "Navigate", "NotificationsService", "ProjectsService", function(e, t, n, r, a, o, i, s, c, l, u) {
if (n.kind && n.name) {
var d = [ "Deployment", "DeploymentConfig", "ReplicaSet", "ReplicationController" ];
if (_.includes(d, n.kind)) {
r.name = n.name, r.resourceURL = c.resourceURL(r.name, n.kind, n.project), r.breadcrumbs = o.getBreadcrumbs({
name: n.name,
kind: n.kind,
namespace: n.project,
subpage: "Edit Health Checks"
}), r.previousProbes = {};
var m = e("getErrorDetails"), p = e("upperFirst"), f = function(e, t) {
l.addNotification({
id: "add-health-check-error",
type: "error",
message: e,
details: t
});
}, g = function() {
t.url(r.resourceURL);
};
r.cancel = g;
var v = function() {
l.hideNotification("add-health-check-error");
};
r.$on("$destroy", v), u.get(n.project).then(_.spread(function(t, u) {
var d = e("humanizeKind")(n.kind) + ' "' + r.name + '"', h = {
resource: i.kindToResource(n.kind),
group: n.group
};
a.canI(h, "update", n.project) ? s.get(h, r.name, u).then(function(e) {
var a = r.object = angular.copy(e);
r.breadcrumbs = o.getBreadcrumbs({
object: a,
project: t,
subpage: "Edit Health Checks"
}), r.containers = _.get(a, "spec.template.spec.containers"), r.addProbe = function(e, t) {
e[t] = _.get(r.previousProbes, [ e.name, t ], {}), r.form.$setDirty();
}, r.removeProbe = function(e, t) {
_.set(r.previousProbes, [ e.name, t ], e[t]), delete e[t], r.form.$setDirty();
}, r.save = function() {
r.disableInputs = !0, v(), s.update(i.kindToResource(n.kind), r.name, a, u).then(function() {
l.addNotification({
type: "success",
message: p(d) + " was updated."
}), g();
}, function(e) {
r.disableInputs = !1, f(p(d) + " could not be updated.", m(e));
});
};
}, function(e) {
f(p(d) + " could not be loaded.", m(e));
}) : c.toErrorPage("You do not have authority to update " + d + ".", "access_denied");
}));
} else c.toErrorPage("Health checks are not supported for kind " + n.kind + ".");
} else c.toErrorPage("Kind or name parameter missing.");
} ]), angular.module("openshiftConsole").controller("EditRouteController", [ "$filter", "$location", "$routeParams", "$scope", "APIService", "AuthorizationService", "DataService", "Navigate", "NotificationsService", "ProjectsService", "RoutesService", function(e, t, n, r, a, o, i, s, c, l, u) {
r.renderOptions = {
hideFilterWidget: !0
}, r.projectName = n.project, r.routeName = n.route, r.loading = !0, r.routeURL = s.resourceURL(r.routeName, "Route", r.projectName), r.breadcrumbs = [ {
title: "Routes",
link: "project/" + r.projectName + "/browse/routes"
}, {
title: r.routeName,
link: r.routeURL
}, {
title: "Edit"
} ];
var d = function() {
c.hideNotification("edit-route-error");
};
r.$on("$destroy", d);
var m = function() {
t.path(r.routeURL);
};
r.cancel = m;
var p = a.getPreferredVersion("routes"), f = a.getPreferredVersion("services");
l.get(n.project).then(_.spread(function(t, a) {
if (r.project = t, o.canI("routes", "update", n.project)) {
var l, g = e("orderByDisplayName"), v = function() {
s.toErrorPage('Editing routes with non-service targets is unsupported. You can edit the route with the "Edit YAML" action instead.');
};
i.get(p, r.routeName, a).then(function(e) {
if ("Service" === e.spec.to.kind) {
l = angular.copy(e);
var t = _.get(l, "spec.host");
"Subdomain" === _.get(l, "spec.wildcardPolicy") && (t = "*." + u.getSubdomain(l)), r.routing = {
host: t,
<<<<<<< 4c1726fedacee1e9102d86a53473c262eb06e303
<<<<<<< 9bc0af8cb56dcc9609307333b9424f396867cab5
<<<<<<< 602d786018a3879a89789b1214b36a15c51b928b
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
>>>>>>> Support EnvFrom in the Env Editors
wildcardPolicy: _.get(m, "spec.wildcardPolicy"),
path: _.get(m, "spec.path"),
targetPort: _.get(m, "spec.port.targetPort"),
tls: angular.copy(_.get(m, "spec.tls"))
<<<<<<< 9bc0af8cb56dcc9609307333b9424f396867cab5
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
}, f.list("services", i).then(function(a) {
d.loading = !1;
var b = a.by("metadata.name");
d.routing.to = m.spec.to, d.routing.alternateServices = [], _.each(_.get(m, "spec.alternateBackends"), function(a) {
return "Service" !== a.kind ? (o(), !1) : void d.routing.alternateServices.push(a);
}), d.services = n(b);
});
=======
=======
wildcardPolicy: _.get(p, "spec.wildcardPolicy"),
path: _.get(p, "spec.path"),
targetPort: _.get(p, "spec.port.targetPort"),
tls: angular.copy(_.get(p, "spec.tls"))
>>>>>>> Updates for Service Instance & Bindings
=======
>>>>>>> Support EnvFrom in the Env Editors
}, o.list("services", c).then(function(e) {
=======
wildcardPolicy: _.get(l, "spec.wildcardPolicy"),
path: _.get(l, "spec.path"),
targetPort: _.get(l, "spec.port.targetPort"),
tls: angular.copy(_.get(l, "spec.tls"))
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
}, i.list(f, r).then(function(e) {
>>>>>>> Update edit/route controller to use getPreferredVersion
a.loading = !1;
=======
}, i.list(f, a).then(function(e) {
r.loading = !1;
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
var t = e.by("metadata.name");
r.routing.to = l.spec.to, r.routing.alternateServices = [], _.each(_.get(l, "spec.alternateBackends"), function(e) {
if ("Service" !== e.kind) return v(), !1;
r.routing.alternateServices.push(e);
}), r.services = g(t);
});
<<<<<<< 4c1726fedacee1e9102d86a53473c262eb06e303
<<<<<<< 33eb37eab8df0c17bc226501a924a2dc2b9b2f41
} else g();
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
}, function() {
i.toErrorPage("Could not load route " + a.routeName + ".");
});
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
var p = function() {
var a = angular.copy(m), b = _.get(d, "routing.to.name");
_.set(a, "spec.to.name", b);
var c = _.get(d, "routing.to.weight");
isNaN(c) || _.set(a, "spec.to.weight", c), a.spec.path = d.routing.path;
var e = d.routing.targetPort;
e ? _.set(a, "spec.port.targetPort", e) : delete a.spec.port, _.get(d, "routing.tls.termination") ? (a.spec.tls = d.routing.tls, "passthrough" === a.spec.tls.termination && (delete a.spec.path, delete a.spec.tls.certificate, delete a.spec.tls.key, delete a.spec.tls.caCertificate), "reencrypt" !== a.spec.tls.termination && delete a.spec.tls.destinationCACertificate) : delete a.spec.tls;
var f = _.get(d, "routing.alternateServices", []);
return _.isEmpty(f) ? delete a.spec.alternateBackends : a.spec.alternateBackends = _.map(f, function(a) {
return {
kind: "Service",
name: a.name,
weight: a.weight
=======
var f = function() {
=======
} else f();
=======
} else v();
>>>>>>> Update edit/route controller to use getPreferredVersion
}, function() {
s.toErrorPage("Could not load route " + r.routeName + ".");
});
<<<<<<< 4c1726fedacee1e9102d86a53473c262eb06e303
var g = function() {
<<<<<<< 9bc0af8cb56dcc9609307333b9424f396867cab5
<<<<<<< 602d786018a3879a89789b1214b36a15c51b928b
>>>>>>> Patternfly vertical navigation and project bar
var e = angular.copy(m), t = _.get(a, "routing.to.name");
=======
var e = angular.copy(p), t = _.get(a, "routing.to.name");
>>>>>>> Updates for Service Instance & Bindings
=======
var e = angular.copy(m), t = _.get(a, "routing.to.name");
>>>>>>> Support EnvFrom in the Env Editors
=======
var h = function() {
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
var e = angular.copy(l), t = _.get(a, "routing.to.name");
>>>>>>> Update edit/route controller to use getPreferredVersion
=======
var e = angular.copy(l), t = _.get(r, "routing.to.name");
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
_.set(e, "spec.to.name", t);
var n = _.get(r, "routing.to.weight");
isNaN(n) || _.set(e, "spec.to.weight", n), e.spec.path = r.routing.path;
var a = r.routing.targetPort;
a ? _.set(e, "spec.port.targetPort", a) : delete e.spec.port, _.get(r, "routing.tls.termination") ? (e.spec.tls = r.routing.tls, "passthrough" === e.spec.tls.termination && (delete e.spec.path, delete e.spec.tls.certificate, delete e.spec.tls.key, delete e.spec.tls.caCertificate), "reencrypt" !== e.spec.tls.termination && delete e.spec.tls.destinationCACertificate) : delete e.spec.tls;
var o = _.get(r, "routing.alternateServices", []);
return _.isEmpty(o) ? delete e.spec.alternateBackends : e.spec.alternateBackends = _.map(o, function(e) {
return {
kind: "Service",
name: e.name,
weight: e.weight
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
};
}), e;
};
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
d.updateRoute = function() {
if (d.form.$valid) {
k(), d.disableInputs = !0;
var b = p();
f.update("routes", d.routeName, b, i).then(function() {
h.addNotification({
type: "success",
message: "Route " + d.routeName + " was successfully updated."
}), l();
}, function(b) {
d.disableInputs = !1, h.addNotification({
type: "error",
id: "edit-route-error",
message: "An error occurred updating route " + d.routeName + ".",
details: a("getErrorDetails")(b)
=======
a.updateRoute = function() {
if (a.form.$valid) {
d(), a.disableInputs = !0;
=======
r.updateRoute = function() {
if (r.form.$valid) {
d(), r.disableInputs = !0;
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
var t = h();
i.update(p, r.routeName, t, a).then(function() {
c.addNotification({
type: "success",
message: "Route " + r.routeName + " was successfully updated."
}), m();
}, function(t) {
r.disableInputs = !1, c.addNotification({
type: "error",
id: "edit-route-error",
message: "An error occurred updating route " + r.routeName + ".",
details: e("getErrorDetails")(t)
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
});
});
}
};
} else s.toErrorPage("You do not have authority to update route " + n.routeName + ".", "access_denied");
}));
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
} ]), angular.module("openshiftConsole").controller("EditYAMLController", [ "$scope", "$filter", "$location", "$routeParams", "$window", "APIService", "AuthorizationService", "BreadcrumbsService", "DataService", "Navigate", "NotificationsService", "ProjectsService", function(a, b, c, d, e, f, g, h, i, j, k, l) {
if (!d.kind || !d.name) return void j.toErrorPage("Kind or name parameter missing.");
var m = b("humanizeKind");
a.alerts = {}, a.name = d.name, a.resourceURL = j.resourceURL(a.name, d.kind, d.project), a.breadcrumbs = [ {
title: d.name,
link: d.returnURL
}, {
title: "Edit YAML"
} ];
var n = function() {
return a.modified = !1, d.returnURL ? void c.url(d.returnURL) : void e.history.back();
}, o = [];
l.get(d.project).then(_.spread(function(c, e) {
var h = {
resource: f.kindToResource(d.kind),
group: d.group
};
return g.canI(h, "update", d.project) ? (i.get(h, a.name, e, {
errorNotification: !1
}).then(function(c) {
var g = c;
_.set(a, "updated.resource", angular.copy(c)), a.$watch("updated.resource", function(b, c) {
b !== c && (a.modified = !0);
});
var j = function(a) {
return _.get(a, "metadata.resourceVersion");
};
a.save = function() {
var c = a.updated.resource;
if (a.modified = !1, c.kind !== g.kind) return void (a.error = {
message: "Cannot change resource kind (original: " + g.kind + ", modified: " + (c.kind || "<unspecified>") + ")."
});
var e = f.objectToResourceGroupVersion(g), h = f.objectToResourceGroupVersion(c);
return h ? h.group !== e.group ? void (a.error = {
message: "Cannot change resource group (original: " + (e.group || "<none>") + ", modified: " + (h.group || "<none>") + ")."
}) : f.apiInfo(h) ? (a.updatingNow = !0, void i.update(e, g.metadata.name, c, {
namespace: g.metadata.namespace
}).then(function(b) {
var e = _.get(c, "metadata.resourceVersion"), f = _.get(b, "metadata.resourceVersion");
return f === e ? (a.alerts["no-changes-applied"] = {
type: "warning",
message: "No changes were applied to " + m(d.kind) + " " + d.name + ".",
details: "Make sure any new fields you may have added are supported API fields."
}, void (a.updatingNow = !1)) : (k.addNotification({
type: "success",
message: m(d.kind, !0) + " " + d.name + " was successfully updated."
}), void n());
}, function(c) {
a.updatingNow = !1, a.error = {
message: b("getErrorDetails")(c)
};
})) : void (a.error = {
message: f.unsupportedObjectKindOrVersion(c)
}) : void (a.error = {
message: f.invalidObjectKindOrVersion(c)
});
}, a.cancel = function() {
n();
}, o.push(i.watchObject(h, a.name, e, function(b, c) {
a.resourceChanged = j(b) !== j(g), a.resourceDeleted = "DELETED" === c;
}, {
errorNotification: !1
}));
}, function(a) {
j.toErrorPage("Could not load " + m(d.kind) + " '" + d.name + "'. " + b("getErrorDetails")(a));
}), void a.$on("$destroy", function() {
i.unwatchAll(o);
})) : void j.toErrorPage("You do not have authority to update " + m(d.kind) + " " + d.name + ".", "access_denied");
}));
} ]), angular.module("openshiftConsole").controller("BrowseCategoryController", [ "$scope", "$filter", "$location", "$q", "$routeParams", "$uibModal", "Constants", "DataService", "LabelFilter", "Navigate", "ProjectsService", "gettext", function(a, b, c, d, e, f, g, h, i, j, k, l) {
a.projectName = e.project;
var m = function(b, c) {
var d;
return _.some(b, function(b) {
if (d = _.find(b.items, {
id: c
})) {
a.category = d;
var e = _.get(d, "subcategories", []);
return a.subcategories = [ {
id: "",
label: ""
} ].concat(e), !0;
}
return !1;
}), d;
}, n = g.CATALOG_CATEGORIES, o = "none" === e.category ? "" : e.category;
if (a.category = m(n, o), !a.category) return void j.toErrorPage("Catalog category " + e.category + " not found.");
var p, q;
return e.subcategory && (p = a.category, o = "none" === e.subcategory ? "" : e.subcategory, q = _.get(a.category, "subcategories", []), a.category = m(q, o), !a.category) ? void j.toErrorPage("Catalog category " + e.category + "/" + e.subcategory + " not found.") : (a.alerts = a.alerts || {}, void k.get(e.project).then(_.spread(function(b, c) {
a.project = b, a.context = c, h.list("imagestreams", {
namespace: "openshift"
}).then(function(b) {
a.openshiftImageStreams = b.by("metadata.name");
}), h.list("templates", {
namespace: "openshift"
}, null, {
partialObjectMetadataList: !0
}).then(function(b) {
a.openshiftTemplates = b.by("metadata.name");
}), "openshift" === e.project ? (a.projectImageStreams = [], a.projectTemplates = []) : (h.list("imagestreams", c).then(function(b) {
a.projectImageStreams = b.by("metadata.name");
}), h.list("templates", c, null, {
partialObjectMetadataList: !0
}).then(function(b) {
a.projectTemplates = b.by("metadata.name");
}));
})));
} ]), angular.module("openshiftConsole").controller("CreateFromImageController", [ "$scope", "$filter", "$parse", "$q", "$routeParams", "$uibModal", "APIService", "ApplicationGenerator", "DataService", "HPAService", "ImagesService", "LimitRangesService", "Logger", "MetricsService", "Navigate", "NotificationsService", "ProjectsService", "QuotaService", "SOURCE_URL_PATTERN", "SecretsService", "TaskList", "failureObjectNameFilter", "keyValueEditorUtils", "gettext", "gettextCatalog", function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y) {
var z = b("displayName"), A = b("humanize");
a.projectName = e.project, a.sourceURLPattern = s;
var B = e.imageStream;
if (!B) return void o.toErrorPage("Cannot create from source: a base image was not specified");
if (!e.imageTag) return void o.toErrorPage("Cannot create from source: a base image tag was not specified");
a.displayName = e.displayName, a.advancedOptions = "true" === e.advanced;
var C = {
name: "app",
value: ""
}, D = b("orderByDisplayName"), E = b("getErrorDetails"), F = {}, G = function() {
p.hideNotification("create-builder-list-config-maps-error"), p.hideNotification("create-builder-list-secrets-error"), _.each(F, function(a) {
!a.id || "error" !== a.type && "warning" !== a.type || p.hideNotification(a.id);
});
};
a.$on("$destroy", G), q.get(e.project).then(_.spread(function(b, c) {
function g(d) {
d.name = e.name, d.imageName = B, d.imageTag = e.imageTag, d.namespace = e.namespace, d.buildConfig = {
=======
} ]), angular.module("openshiftConsole").controller("EditYAMLController", [ "$scope", "$filter", "$location", "$routeParams", "$window", "APIService", "AuthorizationService", "BreadcrumbsService", "DataService", "Navigate", "NotificationsService", "ProjectsService", function(e, t, n, a, r, o, i, s, c, l, u, d) {
if (a.kind && a.name) {
=======
} ]), angular.module("openshiftConsole").controller("EditYAMLController", [ "$scope", "$filter", "$location", "$routeParams", "$window", "APIService", "AuthorizationService", "BreadcrumbsService", "DataService", "Navigate", "NotificationsService", "ProjectsService", function(e, t, n, r, a, o, i, s, c, l, u, d) {
if (r.kind && r.name) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
var m = t("humanizeKind");
e.alerts = {}, e.name = r.name, e.resourceURL = l.resourceURL(e.name, r.kind, r.project), e.breadcrumbs = [ {
title: r.name,
link: r.returnURL
}, {
title: "Edit YAML"
} ];
var p = function() {
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
e.modified = !1, a.returnURL ? n.url(a.returnURL) : r.history.back();
};
e.$watch("resource", function(t, n) {
t !== n && (e.modified = !0);
});
var f = [];
d.get(a.project).then(_.spread(function(n, r) {
=======
e.modified = !1, r.returnURL ? n.url(r.returnURL) : a.history.back();
}, f = [];
d.get(r.project).then(_.spread(function(n, a) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
var s = {
resource: o.kindToResource(r.kind),
group: r.group
};
i.canI(s, "update", r.project) ? (c.get(s, e.name, a, {
errorNotification: !1
}).then(function(n) {
var i = n;
_.set(e, "updated.resource", angular.copy(n));
var l = function(e) {
return _.get(e, "metadata.resourceVersion");
};
e.save = function() {
var n = e.updated.resource;
if (e.modified = !1, n.kind === i.kind) {
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
var r = o.objectToResourceGroupVersion(i), s = o.objectToResourceGroupVersion(n);
s ? s.group === r.group ? o.apiInfo(s) ? (e.updatingNow = !0, c.update(r, i.metadata.name, i, {
=======
var a = o.objectToResourceGroupVersion(i), s = o.objectToResourceGroupVersion(n);
s ? s.group === a.group ? o.apiInfo(s) ? (e.updatingNow = !0, c.update(a, i.metadata.name, n, {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
namespace: i.metadata.namespace
}).then(function(t) {
var a = _.get(n, "metadata.resourceVersion");
if (_.get(t, "metadata.resourceVersion") === a) return e.alerts["no-changes-applied"] = {
type: "warning",
message: "No changes were applied to " + m(r.kind) + " " + r.name + ".",
details: "Make sure any new fields you may have added are supported API fields."
}, void (e.updatingNow = !1);
u.addNotification({
type: "success",
message: m(r.kind, !0) + " " + r.name + " was successfully updated."
}), p();
}, function(n) {
e.updatingNow = !1, e.error = {
message: t("getErrorDetails")(n)
};
})) : e.error = {
message: o.unsupportedObjectKindOrVersion(n)
} : e.error = {
message: "Cannot change resource group (original: " + (a.group || "<none>") + ", modified: " + (s.group || "<none>") + ")."
} : e.error = {
message: o.invalidObjectKindOrVersion(n)
};
} else e.error = {
message: "Cannot change resource kind (original: " + i.kind + ", modified: " + (n.kind || "<unspecified>") + ")."
};
}, e.cancel = function() {
p();
}, f.push(c.watchObject(s, e.name, a, function(t, n) {
e.resourceChanged = l(t) !== l(i), e.resourceDeleted = "DELETED" === n;
}, {
errorNotification: !1
}));
}, function(e) {
l.toErrorPage("Could not load " + m(r.kind) + " '" + r.name + "'. " + t("getErrorDetails")(e));
}), e.$on("$destroy", function() {
c.unwatchAll(f);
})) : l.toErrorPage("You do not have authority to update " + m(r.kind) + " " + r.name + ".", "access_denied");
}));
} else l.toErrorPage("Kind or name parameter missing.");
} ]), angular.module("openshiftConsole").controller("BrowseCategoryController", [ "$scope", "$filter", "$location", "$q", "$routeParams", "$uibModal", "Constants", "DataService", "LabelFilter", "Navigate", "ProjectsService", function(e, t, n, r, a, o, i, s, c, l, u) {
e.projectName = a.project;
var d = function(t, n) {
var r;
return _.some(t, function(t) {
if (r = _.find(t.items, {
id: n
})) {
e.category = r;
var a = _.get(r, "subcategories", []);
return e.subcategories = [ {
id: "",
label: ""
} ].concat(a), !0;
}
return !1;
}), r;
}, m = i.CATALOG_CATEGORIES, p = "none" === a.category ? "" : a.category;
if (e.category = d(m, p), e.category) {
var f;
!a.subcategory || (e.category, p = "none" === a.subcategory ? "" : a.subcategory, f = _.get(e.category, "subcategories", []), e.category = d(f, p), e.category) ? (e.alerts = e.alerts || {}, u.get(a.project).then(_.spread(function(t, n) {
e.project = t, e.context = n, s.list("imagestreams", {
namespace: "openshift"
}).then(function(t) {
e.openshiftImageStreams = t.by("metadata.name");
}), s.list("templates", {
namespace: "openshift"
}, null, {
partialObjectMetadataList: !0
}).then(function(t) {
e.openshiftTemplates = t.by("metadata.name");
}), "openshift" === a.project ? (e.projectImageStreams = [], e.projectTemplates = []) : (s.list("imagestreams", n).then(function(t) {
e.projectImageStreams = t.by("metadata.name");
}), s.list("templates", n, null, {
partialObjectMetadataList: !0
}).then(function(t) {
e.projectTemplates = t.by("metadata.name");
}));
}))) : l.toErrorPage("Catalog category " + a.category + "/" + a.subcategory + " not found.");
} else l.toErrorPage("Catalog category " + a.category + " not found.");
} ]), angular.module("openshiftConsole").controller("CreateFromImageController", [ "$scope", "$filter", "$parse", "$q", "$routeParams", "$uibModal", "APIService", "ApplicationGenerator", "DataService", "HPAService", "ImagesService", "LimitRangesService", "Logger", "MetricsService", "Navigate", "NotificationsService", "ProjectsService", "QuotaService", "SOURCE_URL_PATTERN", "SecretsService", "TaskList", "failureObjectNameFilter", "keyValueEditorUtils", function(e, t, n, r, a, o, i, s, c, l, u, d, m, p, f, g, v, h, y, b, S, C, w) {
var P = t("displayName"), j = t("humanize");
e.projectName = a.project, e.sourceURLPattern = y;
var k = a.imageStream;
if (k) if (a.imageTag) {
e.displayName = a.displayName, e.advancedOptions = "true" === a.advanced;
var I = {
name: "app",
value: ""
}, R = t("orderByDisplayName"), E = t("getErrorDetails"), T = {}, N = function() {
g.hideNotification("create-builder-list-config-maps-error"), g.hideNotification("create-builder-list-secrets-error"), _.each(T, function(e) {
!e.id || "error" !== e.type && "warning" !== e.type || g.hideNotification(e.id);
});
};
e.$on("$destroy", N);
var D = i.getPreferredVersion("configmaps"), A = i.getPreferredVersion("limitranges"), $ = i.getPreferredVersion("imagestreams"), B = i.getPreferredVersion("imagestreamtags"), L = i.getPreferredVersion("secrets"), V = i.getPreferredVersion("resourcequotas"), U = i.getPreferredVersion("appliedclusterresourcequotas");
v.get(a.project).then(_.spread(function(t, n) {
e.project = t, a.sourceURI && (e.sourceURIinParams = !0);
var i = function() {
e.hideCPU || (e.cpuProblems = d.validatePodLimits(e.limitRanges, "cpu", [ e.container ], t)), e.memoryProblems = d.validatePodLimits(e.limitRanges, "memory", [ e.container ], t);
};
c.list(A, n).then(function(t) {
e.limitRanges = t.by("metadata.name"), _.isEmpty(e.limitRanges) || e.$watch("container", i, !0);
});
var v, y, C = function() {
e.scaling.autoscale ? e.showCPURequestWarning = !l.hasCPURequest([ e.container ], e.limitRanges, t) : e.showCPURequestWarning = !1;
};
c.list(V, n).then(function(e) {
v = e.by("metadata.name"), m.log("quotas", v);
}), c.list(U, n).then(function(e) {
y = e.by("metadata.name"), m.log("cluster quotas", y);
<<<<<<< 75fc56b9e42e29e1492befd08624dd0e5dade866
<<<<<<< 247459038ac366429876741dd447ec652f2f5e7d
<<<<<<< a19b22733566f12a68db59a49bc16848fffba594
<<<<<<< 46344541d4f20e3585d6ea01425f784292c0d84a
}), e.$watch("scaling.autoscale", S), e.$watch("container", S, !0), e.$watch("name", function(e, t) {
<<<<<<< b82d21ade915b9a1bae21ca36e0909ca0174c557
<<<<<<< 602d786018a3879a89789b1214b36a15c51b928b
<<<<<<< 579cbe4ce2e640c919f9687b5c885f661897db96
E.value && E.value !== t || (E.value = e);
<<<<<<< 33eb37eab8df0c17bc226501a924a2dc2b9b2f41
}), function(t) {
<<<<<<< 7d5cc388b34d6a87a5e2ae6b26f6b146dae1daa3
t.name = r.name, t.imageName = R, t.imageTag = r.imageTag, t.namespace = r.namespace, t.buildConfig = {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
t.name = r.name, t.imageName = P, t.imageTag = r.imageTag, t.namespace = r.namespace, t.buildConfig = {
>>>>>>> Adding Deploy Image and Import YAML / JSON functionality to catalog
=======
=======
T.value && T.value !== t || (T.value = e);
>>>>>>> Add the ability to add a secret to an application
=======
=======
}), e.$watch("scaling.autoscale", C), e.$watch("container", C, !0), e.$watch("name", function(e, t) {
>>>>>>> Service instance details configuration and edit
=======
}), e.$watch("scaling.autoscale", S), e.$watch("container", S, !0), e.$watch("name", function(e, t) {
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
I.value && I.value !== t || (I.value = e);
>>>>>>> Updates for Service Instance & Bindings
=======
=======
}), e.$watch("scaling.autoscale", C), e.$watch("container", C, !0), e.$watch("name", function(e, t) {
<<<<<<< b4ddc9b550515059b9681d76233c34b7f7b3431c
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
=======
}), e.$watch("scaling.autoscale", C), e.$watch("container", C, !0), e.$watch("name", function(e, t) {
>>>>>>> Adding label filter to ste secrets page
R.value && R.value !== t || (R.value = e);
>>>>>>> Remove breadcrumbs from catalog, create, and next-steps pages
=======
I.value && I.value !== t || (I.value = e);
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
>>>>>>> Add search catalog in project context
}), function(a) {
<<<<<<< 1f5fb674ad14c7e78d2e82e837750bd2747349ab
<<<<<<< a19b22733566f12a68db59a49bc16848fffba594
<<<<<<< d21c662f039266e2dd235fa32bd86d3647c082ae
<<<<<<< 77ce3ebb70d0568ad8fbbb649b8a01f54552ad2c
<<<<<<< 46344541d4f20e3585d6ea01425f784292c0d84a
a.name = r.name, a.imageName = P, a.imageTag = r.imageTag, a.namespace = r.namespace, a.buildConfig = {
>>>>>>> Patternfly vertical navigation and project bar
=======
a.name = r.name, a.imageName = j, a.imageTag = r.imageTag, a.namespace = r.namespace, a.buildConfig = {
>>>>>>> Service instance details configuration and edit
=======
a.name = r.name, a.imageName = P, a.imageTag = r.imageTag, a.namespace = r.namespace, a.buildConfig = {
>>>>>>> Add product icons for service catalog
=======
a.name = r.name, a.imageName = j, a.imageTag = r.imageTag, a.namespace = r.namespace, a.buildConfig = {
>>>>>>> Handle displaying parameters when secrets are not available.
=======
a.name = r.name, a.imageName = P, a.imageTag = r.imageTag, a.namespace = r.namespace, a.buildConfig = {
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
a.name = r.name, a.imageName = j, a.imageTag = r.imageTag, a.namespace = r.namespace, a.buildConfig = {
>>>>>>> Update template service broker flag name
=======
}), function(r) {
<<<<<<< 13ac2d832bc56edf6bc5e2fc652da9b188ddae32
r.name = a.name, r.imageName = j, r.imageTag = a.imageTag, r.namespace = a.namespace, r.buildConfig = {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
=======
r.name = a.name, r.imageName = k, r.imageTag = a.imageTag, r.namespace = a.namespace, r.buildConfig = {
>>>>>>> Add Browse Catalog to Project context view.
buildOnSourceChange: !0,
buildOnImageChange: !0,
buildOnConfigChange: !0,
secrets: {
gitSecret: [ {
name: ""
} ]
},
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
sourceUrl: e.sourceURI,
gitRef: e.sourceRef,
contextDir: e.contextDir
}, d.buildConfigEnvVars = [], d.deploymentConfig = {
deployOnNewImage: !0,
deployOnConfigChange: !0
}, d.DCEnvVarsFromImage, d.DCEnvVarsFromUser = [], d.routing = {
include: !0,
portOptions: []
}, d.labelArray = [ C ], d.annotations = {}, d.scaling = {
=======
sourceUrl: r.sourceURI,
gitRef: r.sourceRef,
contextDir: r.contextDir
}, a.buildConfigEnvVars = [], a.deploymentConfig = {
=======
sourceUrl: a.sourceURI,
gitRef: a.sourceRef,
contextDir: a.contextDir
}, r.buildConfigEnvVars = [], r.deploymentConfig = {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
deployOnNewImage: !0,
deployOnConfigChange: !0
}, r.DCEnvVarsFromImage, r.DCEnvVarsFromUser = [], r.routing = {
include: !0,
portOptions: []
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< b4ddc9b550515059b9681d76233c34b7f7b3431c
<<<<<<< b82d21ade915b9a1bae21ca36e0909ca0174c557
<<<<<<< 602d786018a3879a89789b1214b36a15c51b928b
<<<<<<< 579cbe4ce2e640c919f9687b5c885f661897db96
<<<<<<< 33eb37eab8df0c17bc226501a924a2dc2b9b2f41
<<<<<<< 952b26bc3acaa89a51e4aad5f965e515d3b007ae
<<<<<<< 0b6e0c0321bd8895dd0292e7e94a096ab205c99e
}, t.userDefinedLabels = [], t.systemLabels = [ T ], t.annotations = {}, t.scaling = {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
}, t.labelArray = [ T ], t.annotations = {}, t.scaling = {
>>>>>>> Let users edit app label directly for "add to project"
=======
}, t.labelArray = [ E ], t.annotations = {}, t.scaling = {
>>>>>>> Add bindings list to resource pages
=======
}, a.labelArray = [ E ], a.annotations = {}, a.scaling = {
>>>>>>> Patternfly vertical navigation and project bar
=======
}, a.labelArray = [ T ], a.annotations = {}, a.scaling = {
>>>>>>> Add the ability to add a secret to an application
=======
}, a.labelArray = [ I ], a.annotations = {}, a.scaling = {
>>>>>>> Updates for Service Instance & Bindings
=======
}, a.labelArray = [ R ], a.annotations = {}, a.scaling = {
>>>>>>> Remove breadcrumbs from catalog, create, and next-steps pages
=======
}, a.labelArray = [ I ], a.annotations = {}, a.scaling = {
>>>>>>> Add search catalog in project context
=======
}, r.labelArray = [ I ], r.annotations = {}, r.scaling = {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
replicas: 1,
autoscale: !1,
autoscaleOptions: [ {
label: "Manual",
value: !1
}, {
label: "Automatic",
value: !0
} ]
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< 33eb37eab8df0c17bc226501a924a2dc2b9b2f41
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
}, d.container = {
resources: {}
}, d.cpuRequestCalculated = l.isRequestCalculated("cpu", b), d.cpuLimitCalculated = l.isLimitCalculated("cpu", b), d.memoryRequestCalculated = l.isRequestCalculated("memory", b), d.fillSampleRepo = function() {
var a;
(d.image || d.image.metadata || d.image.metadata.annotations) && (a = d.image.metadata.annotations, d.buildConfig.sourceUrl = a.sampleRepo || "", d.buildConfig.gitRef = a.sampleRef || "", d.buildConfig.contextDir = a.sampleContextDir || "", (a.sampleRef || a.sampleContextDir) && (d.advancedSourceOptions = !0));
}, d.usingSampleRepo = function() {
return d.buildConfig.sourceUrl === _.get(d, "image.metadata.annotations.sampleRepo");
}, n.isAvailable().then(function(b) {
a.metricsWarning = !b;
});
var f = [], g = [];
a.valueFromObjects = [], i.list("configmaps", c, null, {
errorNotification: !1
}).then(function(b) {
f = D(b.by("metadata.name")), a.valueFromObjects = f.concat(g);
}, function(a) {
403 !== a.code && p.addNotification({
id: "create-builder-list-config-maps-error",
type: "error",
message: "Could not load config maps.",
details: E(a)
});
}), i.list("secrets", c, null, {
errorNotification: !1
}).then(function(b) {
g = D(b.by("metadata.name")), a.valueFromObjects = g.concat(f);
var c = t.groupSecretsByType(b), d = _.mapValues(c, function(a) {
return _.map(a, "metadata.name");
});
a.secretsByType = _.each(d, function(a) {
a.unshift("");
});
}, function(a) {
403 !== a.code && p.addNotification({
id: "create-builder-list-secrets-error",
type: "error",
message: "Could not load secrets.",
details: E(a)
});
}), i.get("imagestreams", d.imageName, {
namespace: d.namespace || e.project
}).then(function(a) {
d.imageStream = a;
var b = d.imageTag;
i.get("imagestreamtags", a.metadata.name + ":" + b, {
namespace: d.namespace
}).then(function(a) {
d.image = a.image, d.DCEnvVarsFromImage = k.getEnvironment(a);
var b = h.parsePorts(a.image);
_.isEmpty(b) ? (d.routing.include = !1, d.routing.portOptions = []) : (d.routing.portOptions = _.map(b, function(a) {
var b = h.getServicePort(a);
return {
port: b.name,
label: b.targetPort + "/" + b.protocol
};
}), d.routing.targetPort = d.routing.portOptions[0].port);
=======
}, t.container = {
=======
}, a.container = {
>>>>>>> Patternfly vertical navigation and project bar
=======
}, r.container = {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
resources: {}
}, r.cpuRequestCalculated = d.isRequestCalculated("cpu", t), r.cpuLimitCalculated = d.isLimitCalculated("cpu", t), r.memoryRequestCalculated = d.isRequestCalculated("memory", t), r.fillSampleRepo = function() {
var e;
(r.image || r.image.metadata || r.image.metadata.annotations) && (e = r.image.metadata.annotations, r.buildConfig.sourceUrl = e.sampleRepo || "", r.buildConfig.gitRef = e.sampleRef || "", r.buildConfig.contextDir = e.sampleContextDir || "", (e.sampleRef || e.sampleContextDir) && (r.advancedSourceOptions = !0));
}, r.usingSampleRepo = function() {
return r.buildConfig.sourceUrl === _.get(r, "image.metadata.annotations.sampleRepo");
}, p.isAvailable().then(function(t) {
e.metricsWarning = !t;
});
var o = [], i = [];
e.valueFromObjects = [], c.list(D, n, null, {
errorNotification: !1
}).then(function(t) {
o = R(t.by("metadata.name")), e.valueFromObjects = o.concat(i);
}, function(e) {
403 !== e.code && g.addNotification({
id: "create-builder-list-config-maps-error",
type: "error",
message: "Could not load config maps.",
details: E(e)
});
}), c.list(L, n, null, {
errorNotification: !1
}).then(function(t) {
i = R(t.by("metadata.name")), e.valueFromObjects = o.concat(i);
var n = b.groupSecretsByType(t), r = _.mapValues(n, function(e) {
return _.map(e, "metadata.name");
});
e.secretsByType = _.each(r, function(e) {
e.unshift("");
});
}, function(e) {
403 !== e.code && g.addNotification({
id: "create-builder-list-secrets-error",
type: "error",
message: "Could not load secrets.",
details: E(e)
});
}), c.get($, r.imageName, {
namespace: r.namespace || a.project
}).then(function(e) {
r.imageStream = e;
var t = r.imageTag;
c.get(B, e.metadata.name + ":" + t, {
namespace: r.namespace
}).then(function(e) {
r.image = e.image, r.DCEnvVarsFromImage = u.getEnvironment(e);
var t = s.parsePorts(e.image);
_.isEmpty(t) ? (r.routing.include = !1, r.routing.portOptions = []) : (r.routing.portOptions = _.map(t, function(e) {
var t = s.getServicePort(e);
return {
port: t.name,
label: t.targetPort + "/" + t.protocol
};
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< 33eb37eab8df0c17bc226501a924a2dc2b9b2f41
}), t.routing.targetPort = t.routing.portOptions[0].port);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
}), a.routing.targetPort = a.routing.portOptions[0].port);
>>>>>>> Patternfly vertical navigation and project bar
=======
}), r.routing.targetPort = r.routing.portOptions[0].port);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}, function() {
f.toErrorPage("Cannot create from source: the specified image could not be retrieved.");
});
}, function() {
<<<<<<< 33eb37eab8df0c17bc226501a924a2dc2b9b2f41
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
o.toErrorPage("Cannot create from source: the specified image could not be retrieved.");
});
}
a.project = b, e.sourceURI && (a.sourceURIinParams = !0);
var q = function() {
a.hideCPU || (a.cpuProblems = l.validatePodLimits(a.limitRanges, "cpu", [ a.container ], b)), a.memoryProblems = l.validatePodLimits(a.limitRanges, "memory", [ a.container ], b);
};
i.list("limitranges", c).then(function(b) {
a.limitRanges = b.by("metadata.name"), _.isEmpty(a.limitRanges) || a.$watch("container", q, !0);
});
var s, v, H = function() {
return a.scaling.autoscale ? void (a.showCPURequestWarning = !j.hasCPURequest([ a.container ], a.limitRanges, b)) : void (a.showCPURequestWarning = !1);
};
i.list("resourcequotas", c).then(function(a) {
s = a.by("metadata.name"), m.log("quotas", s);
}), i.list("appliedclusterresourcequotas", c).then(function(a) {
v = a.by("metadata.name"), m.log("cluster quotas", v);
}), a.$watch("scaling.autoscale", H), a.$watch("container", H, !0), a.$watch("name", function(a, b) {
C.value && C.value !== b || (C.value = a);
}), g(a);
var I, J = function() {
var b = {
started: y.getString(x("Creating application")) + " " + a.name + " " + y.getString(x("in project")) + " " + a.projectDisplayName(),
success: y.getString(x("Created application")) + " " + a.name + " " + y.getString(x("in project")) + " " + a.projectDisplayName(),
failure: y.getString(x("Failed to create")) + " " + a.name + " " + y.getString(x("in project")) + " " + a.projectDisplayName()
}, f = {};
u.clear(), u.add(b, f, e.project, function() {
var b = d.defer();
return i.batch(I, c).then(function(c) {
var d = [], e = !1;
_.isEmpty(c.failure) ? d.push({
type: "success",
message: "All resources for application " + a.name + " were created successfully."
}) : (e = !0, c.failure.forEach(function(a) {
d.push({
type: "error",
message: "Cannot create " + A(a.object.kind).toLowerCase() + ' "' + a.object.metadata.name + '". ',
details: a.data.message
});
}), c.success.forEach(function(a) {
d.push({
type: "success",
message: "Created " + A(a.kind).toLowerCase() + ' "' + a.metadata.name + '" successfully. '
});
})), b.resolve({
alerts: d,
hasErrors: e
});
}), b.promise;
}), o.toNextSteps(a.name, a.projectName, {
usingSampleRepo: a.usingSampleRepo()
});
}, K = function(a) {
var b = f.open({
=======
g.toErrorPage("Cannot create from source: the specified image could not be retrieved.");
=======
f.toErrorPage("Cannot create from source: the specified image could not be retrieved.");
>>>>>>> Patternfly vertical navigation and project bar
});
}(e);
var O, F = function() {
var t = {
started: "Creating application " + e.name + " in project " + e.projectDisplayName(),
success: "Created application " + e.name + " in project " + e.projectDisplayName(),
failure: "Failed to create " + e.name + " in project " + e.projectDisplayName()
}, o = {};
S.clear(), S.add(t, o, a.project, function() {
var t = r.defer();
return c.batch(O, n).then(function(n) {
var r = [], a = !1;
_.isEmpty(n.failure) ? r.push({
type: "success",
message: "All resources for application " + e.name + " were created successfully."
}) : (a = !0, n.failure.forEach(function(e) {
r.push({
type: "error",
message: "Cannot create " + j(e.object.kind).toLowerCase() + ' "' + e.object.metadata.name + '". ',
details: e.data.message
});
}), n.success.forEach(function(e) {
r.push({
type: "success",
message: "Created " + j(e.kind).toLowerCase() + ' "' + e.metadata.name + '" successfully. '
});
})), t.resolve({
alerts: r,
hasErrors: a
});
}), t.promise;
}), f.toNextSteps(e.name, e.projectName, {
usingSampleRepo: e.usingSampleRepo()
});
}, x = function(e) {
o.open({
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
animation: !0,
templateUrl: "views/modals/confirm.html",
controller: "ConfirmModalController",
resolve: {
modalConfig: function() {
return {
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
alerts: a,
=======
alerts: e,
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
message: "Problems were detected while checking your application configuration.",
okButtonText: "Create Anyway",
okButtonClass: "btn-danger",
cancelButtonText: "Cancel"
};
}
}
<<<<<<< 06fbfb52480e8cc20e5a3f4162b2ca9038ca931e
<<<<<<< b82d21ade915b9a1bae21ca36e0909ca0174c557
<<<<<<< f8cb892c3d9e864c3b7b3ba810c290ed7ce351f0
<<<<<<< 33eb37eab8df0c17bc226501a924a2dc2b9b2f41
<<<<<<< 952b26bc3acaa89a51e4aad5f965e515d3b007ae
<<<<<<< 8ab4f4a09cf53190c7bc08d260e963252c3ba6a5
<<<<<<< 9854a04a93530a5cbed260dddc4991d2b65730e5
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
});
b.result.then(J);
}, L = function(b) {
G(), F = b.quotaAlerts || [], a.nameTaken || _.some(F, {
type: "error"
}) ? (a.disableInputs = !1, _.each(F, function(a) {
a.id = _.uniqueId("create-builder-alert-"), p.addNotification(a);
})) : _.isEmpty(F) ? J() : (K(F), a.disableInputs = !1);
};
a.projectDisplayName = function() {
return z(this.project) || this.projectName;
}, a.createApp = function() {
a.disableInputs = !0, G(), a.buildConfig.envVars = w.compactEntries(a.buildConfigEnvVars), a.deploymentConfig.envVars = w.compactEntries(a.DCEnvVarsFromUser), a.labels = w.mapEntries(w.compactEntries(a.labelArray));
var b = h.generate(a);
I = [], angular.forEach(b, function(a) {
null !== a && (m.debug("Generated resource definition:", a), I.push(a));
});
var d = h.ifResourcesDontExist(I, a.projectName), e = r.getLatestQuotaAlerts(I, c), f = function(b) {
return a.nameTaken = b.nameTaken, e;
};
d.then(f, f).then(L, L);
};
})), a.cancel = function() {
o.toProjectOverview(a.projectName);
};
} ]), angular.module("openshiftConsole").controller("NextStepsController", [ "$scope", "$http", "$routeParams", "DataService", "$q", "$location", "TaskList", "$parse", "Navigate", "Logger", "$filter", "imageObjectRefFilter", "failureObjectNameFilter", "ProjectsService", "gettext", function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
var p = (k("displayName"), []);
a.alerts = [], a.loginBaseUrl = d.openshiftAPIBaseUrl(), a.buildConfigs = {}, a.projectName = c.project, a.fromSampleRepo = c.fromSample, a.name = c.name, n.get(c.project).then(_.spread(function(b, e) {
a.project = b, p.push(d.watch("buildconfigs", e, function(b) {
a.buildConfigs = b.by("metadata.name"), a.createdBuildConfig = a.buildConfigs[c.name], j.log("buildconfigs (subscribe)", a.buildConfigs);
})), a.$on("$destroy", function() {
d.unwatchAll(p);
=======
}).result.then(A);
=======
}).result.then(B);
>>>>>>> Improve YAML editor validation and feedback
=======
}).result.then(A);
>>>>>>> Upgrade to angular-patternfly v4.1.1 and patternfly v3.25.1
=======
}).result.then(B);
>>>>>>> Add bindings list to resource pages
}, U = function(t) {
=======
}).result.then(A);
=======
}).result.then($);
>>>>>>> Let administrators disable "Copy Login Command"
}, L = function(t) {
<<<<<<< 1f5fb674ad14c7e78d2e82e837750bd2747349ab
<<<<<<< a19b22733566f12a68db59a49bc16848fffba594
<<<<<<< 9bc0af8cb56dcc9609307333b9424f396867cab5
<<<<<<< 28651868c34b8ebf846f1da11eea62cc91408c4c
>>>>>>> Patternfly vertical navigation and project bar
D(), N = t.quotaAlerts || [], e.nameTaken || _.some(N, {
=======
D(), E = t.quotaAlerts || [], e.nameTaken || _.some(E, {
>>>>>>> Quota Notifications
=======
D(), N = t.quotaAlerts || [], e.nameTaken || _.some(N, {
>>>>>>> Support EnvFrom in the Env Editors
=======
D(), T = t.quotaAlerts || [], e.nameTaken || _.some(T, {
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
D(), N = t.quotaAlerts || [], e.nameTaken || _.some(N, {
>>>>>>> Update template service broker flag name
=======
}).result.then(A);
}, B = function(t) {
=======
}).result.then(F);
}, M = function(t) {
>>>>>>> Update createFromImage controller to use getPreferredVersion
N(), T = t.quotaAlerts || [], e.nameTaken || _.some(T, {
>>>>>>> Remove breadcrumbs from catalog, create, and next-steps pages
type: "error"
}) ? (e.disableInputs = !1, _.each(T, function(e) {
e.id = _.uniqueId("create-builder-alert-"), g.addNotification(e);
})) : _.isEmpty(T) ? F() : (x(T), e.disableInputs = !1);
};
e.projectDisplayName = function() {
return P(this.project) || this.projectName;
}, e.createApp = function() {
e.disableInputs = !0, N(), e.buildConfig.envVars = w.compactEntries(e.buildConfigEnvVars), e.deploymentConfig.envVars = w.compactEntries(e.DCEnvVarsFromUser), e.labels = w.mapEntries(w.compactEntries(e.labelArray));
var t = s.generate(e);
O = [], angular.forEach(t, function(e) {
null !== e && (m.debug("Generated resource definition:", e), O.push(e));
});
var r = s.ifResourcesDontExist(O, e.projectName), a = h.getLatestQuotaAlerts(O, n), o = function(t) {
return e.nameTaken = t.nameTaken, a;
};
r.then(o, o).then(M, M);
};
})), e.cancel = function() {
f.toProjectOverview(e.projectName);
};
} else f.toErrorPage("Cannot create from source: a base image tag was not specified"); else f.toErrorPage("Cannot create from source: a base image was not specified");
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< 7bf7823be61d31cbcc56164e8989102db4019779
} ]), angular.module("openshiftConsole").controller("NextStepsController", [ "$scope", "$http", "$routeParams", "DataService", "$q", "$location", "TaskList", "$parse", "Navigate", "Logger", "$filter", "imageObjectRefFilter", "failureObjectNameFilter", "ProjectsService", function(e, t, n, a, r, o, i, s, c, l, u, d, m, p) {
u("displayName");
var f = [];
e.alerts = [], e.loginBaseUrl = a.openshiftAPIBaseUrl(), e.buildConfigs = {}, e.projectName = n.project, e.fromSampleRepo = n.fromSample, e.name = n.name, p.get(n.project).then(_.spread(function(t, r) {
e.project = t, f.push(a.watch("buildconfigs", r, function(t) {
e.buildConfigs = t.by("metadata.name"), e.createdBuildConfig = e.buildConfigs[n.name], l.log("buildconfigs (subscribe)", e.buildConfigs);
})), e.$on("$destroy", function() {
<<<<<<< 33eb37eab8df0c17bc226501a924a2dc2b9b2f41
a.unwatchAll(g);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
a.unwatchAll(f);
>>>>>>> Patternfly vertical navigation and project bar
=======
} ]), angular.module("openshiftConsole").controller("NextStepsController", [ "$filter", "$routeParams", "$scope", "APIService", "DataService", "Logger", "ProjectsService", function(e, t, n, a, r, o, i) {
=======
} ]), angular.module("openshiftConsole").controller("NextStepsController", [ "$filter", "$routeParams", "$scope", "APIService", "DataService", "Logger", "ProjectsService", function(e, t, n, r, a, o, i) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
e("displayName");
var s = [];
n.alerts = [], n.loginBaseUrl = a.openshiftAPIBaseUrl(), n.buildConfigs = {}, n.projectName = t.project, n.fromSampleRepo = t.fromSample, n.name = t.name;
var c = r.getPreferredVersion("buildconfigs");
i.get(t.project).then(_.spread(function(e, r) {
n.project = e, s.push(a.watch(c, r, function(e) {
n.buildConfigs = e.by("metadata.name"), n.createdBuildConfig = n.buildConfigs[t.name], o.log("buildconfigs (subscribe)", n.buildConfigs);
})), n.$on("$destroy", function() {
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
r.unwatchAll(s);
>>>>>>> Update nextSteps controller to use getPreferredVersion
=======
a.unwatchAll(s);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
});
}));
} ]), angular.module("openshiftConsole").controller("NewFromTemplateController", [ "$filter", "$location", "$parse", "$routeParams", "$scope", "AuthorizationService", "CachedTemplateService", "DataService", "Navigate", "NotificationsService", "ProjectsService", function(e, t, n, r, a, o, i, s, c, l, u) {
function d(e, t) {
var n = _.get(e, "spec.triggers", []), r = _.find(n, function(e) {
if ("ImageChange" !== e.type) return !1;
var n = _.get(e, "imageChangeParams.containerNames", []);
return _.includes(n, t.name);
});
return _.get(r, "imageChangeParams.from.name");
}
<<<<<<< 2ce32f87748ff2fe030a6b53ff9490fcb80d856d
<<<<<<< 9cfcd8c347f6f7d2523c31df7fe5a250fecec817
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
function l(a) {
for (var b = [], c = x.exec(a); c; ) b.push(c[1]), c = x.exec(a);
return b;
}
function m() {
var a = p();
e.templateImages = _.map(y, function(b) {
if (_.isEmpty(b.usesParameters)) return b;
var c = _.template(b.name, {
interpolate: x
});
return {
name: c(a),
usesParameters: b.usesParameters
=======
function m(e) {
for (var t = [], n = P.exec(e); n; ) t.push(n[1]), n = P.exec(e);
return t;
}
function p() {
var e = v();
a.templateImages = _.map(j, function(t) {
return _.isEmpty(t.usesParameters) ? t : {
name: _.template(t.name, {
interpolate: P
})(e),
usesParameters: t.usesParameters
>>>>>>> Update pod controller to use getPreferredVersion
};
});
}
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
function n(a) {
var b = [], c = s(a);
return c && angular.forEach(c, function(c) {
var d = c.image, e = k(a, c);
e && (d = e), d && b.push(d);
}), b;
}
function o(a) {
y = [];
var b = [], c = {};
angular.forEach(a.objects, function(a) {
if ("BuildConfig" === a.kind) {
var d = v(t(a), r);
d && y.push({
name: d,
usesParameters: l(d)
});
var e = v(u(a), r);
e && (c[e] = !0);
}
"DeploymentConfig" === a.kind && (b = b.concat(n(a)));
}), b.forEach(function(a) {
c[a] || y.push({
name: a,
usesParameters: l(a)
});
}), y = _.uniqBy(y, "name");
=======
function d(e) {
for (var t = [], n = w.exec(e); n; ) t.push(n[1]), n = w.exec(e);
return t;
}
function m() {
var e = g();
r.templateImages = _.map(k, function(t) {
return _.isEmpty(t.usesParameters) ? t : {
name: _.template(t.name, {
interpolate: w
=======
function m(e) {
for (var t = [], n = k.exec(e); n; ) t.push(n[1]), n = k.exec(e);
return t;
}
function p() {
var e = v();
r.templateImages = _.map(P, function(t) {
return _.isEmpty(t.usesParameters) ? t : {
name: _.template(t.name, {
interpolate: k
>>>>>>> Bug 1510786 - Error info should be more precise when create app in project with view role
})(e),
usesParameters: t.usesParameters
};
});
}
function f(e) {
var t = [], n = b(e);
return n && angular.forEach(n, function(n) {
var a = n.image, r = d(e, n);
r && (a = r), a && t.push(a);
=======
function f(e) {
var t = [], n = b(e);
return n && angular.forEach(n, function(n) {
var r = n.image, a = d(e, n);
a && (r = a), r && t.push(r);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}), t;
}
function g(e) {
j = [];
var t = [], n = {};
angular.forEach(e.objects, function(e) {
if ("BuildConfig" === e.kind) {
var r = w(S(e), y);
r && j.push({
name: r,
usesParameters: m(r)
});
var a = w(C(e), y);
a && (n[a] = !0);
}
"DeploymentConfig" === e.kind && (t = t.concat(f(e)));
}), t.forEach(function(e) {
n[e] || j.push({
name: e,
usesParameters: m(e)
});
<<<<<<< 13ac2d832bc56edf6bc5e2fc652da9b188ddae32
<<<<<<< 2ce32f87748ff2fe030a6b53ff9490fcb80d856d
<<<<<<< 9cfcd8c347f6f7d2523c31df7fe5a250fecec817
<<<<<<< 714c4a3ff94bc485f89078ceeb8105e8b94271be
<<<<<<< 0c40bfb0d97d474f70b5801c1312be38074c32cb
<<<<<<< 33eb37eab8df0c17bc226501a924a2dc2b9b2f41
<<<<<<< 8ab4f4a09cf53190c7bc08d260e963252c3ba6a5
}), j = _.uniq(j, !1, "name");
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
}), j = _.uniqBy(j, "name");
>>>>>>> Upgrade to angular-patternfly v4.1.1 and patternfly v3.25.1
=======
}), k = _.uniqBy(k, "name");
>>>>>>> Patternfly vertical navigation and project bar
=======
}), P = _.uniqBy(P, "name");
>>>>>>> Fix for adding non-builder templates to a project
=======
}), k = _.uniqBy(k, "name");
>>>>>>> Bug 1505281 - Improve import YAML results message
=======
}), P = _.uniqBy(P, "name");
>>>>>>> Bug 1510786 - Error info should be more precise when create app in project with view role
=======
}), k = _.uniqBy(k, "name");
>>>>>>> Update pod controller to use getPreferredVersion
=======
}), j = _.uniqBy(j, "name");
>>>>>>> Add Browse Catalog to Project context view.
}
function v() {
var e = {};
return _.each(a.template.parameters, function(t) {
e[t.name] = t.value;
}), e;
}
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< 9cfcd8c347f6f7d2523c31df7fe5a250fecec817
<<<<<<< 75fc56b9e42e29e1492befd08624dd0e5dade866
<<<<<<< 247459038ac366429876741dd447ec652f2f5e7d
<<<<<<< b82d21ade915b9a1bae21ca36e0909ca0174c557
<<<<<<< a19b22733566f12a68db59a49bc16848fffba594
<<<<<<< 46344541d4f20e3585d6ea01425f784292c0d84a
<<<<<<< 3087d5859f05def6301fced3a013ac9165fd8c7a
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
var q = d.template, r = d.namespace || "", s = c("spec.template.spec.containers"), t = c("spec.strategy.sourceStrategy.from || spec.strategy.dockerStrategy.from || spec.strategy.customStrategy.from"), u = c("spec.output.to"), v = a("imageObjectRef");
if (!q) return void h.toErrorPage("Cannot create from template: a template name was not specified.");
var w = function() {
try {
return JSON.parse(d.templateParamsMap);
} catch (a) {
i.addNotification({
id: "template-params-invalid-json",
type: "error",
message: "Could not prefill parameter values.",
details: "The `templateParamsMap` URL parameter is not valid JSON. " + a
});
}
<<<<<<< 13ac2d832bc56edf6bc5e2fc652da9b188ddae32
};
d.templateParamsMap && (e.prefillParameters = w());
var x = /\${([a-zA-Z0-9\_]+)}/g, y = [];
j.get(d.project).then(_.spread(function(a) {
if (e.project = a, r) g.get("templates", q, {
namespace: r || e.project.metadata.name
}).then(function(a) {
e.template = a, o(a);
var b = function(a) {
return !_.isEmpty(a.usesParameters);
};
_.some(y, b) ? (e.parameterDisplayNames = {}, _.each(a.parameters, function(a) {
e.parameterDisplayNames[a.name] = a.displayName || a.name;
}), e.$watch("template.parameters", _.debounce(function() {
e.$apply(m);
}, 50, {
maxWait: 250
}), !0)) : e.templateImages = y;
=======
var h = a.template, v = a.namespace || "", y = n("spec.template.spec.containers"), b = n("spec.strategy.sourceStrategy.from || spec.strategy.dockerStrategy.from || spec.strategy.customStrategy.from"), C = n("spec.output.to"), S = e("imageObjectRef");
if (h) {
=======
var v = a.template, h = a.namespace || "", y = n("spec.template.spec.containers"), b = n("spec.strategy.sourceStrategy.from || spec.strategy.dockerStrategy.from || spec.strategy.customStrategy.from"), C = n("spec.output.to"), S = e("imageObjectRef");
=======
var v = a.template, h = a.namespace || "", y = n("spec.template.spec.containers"), b = n("spec.strategy.sourceStrategy.from || spec.strategy.dockerStrategy.from || spec.strategy.customStrategy.from"), S = n("spec.output.to"), C = e("imageObjectRef");
>>>>>>> Service instance details configuration and edit
=======
var v = a.template, h = a.namespace || "", y = n("spec.template.spec.containers"), b = n("spec.strategy.sourceStrategy.from || spec.strategy.dockerStrategy.from || spec.strategy.customStrategy.from"), C = n("spec.output.to"), S = e("imageObjectRef");
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
if (v) {
>>>>>>> Add SVG icons
r.breadcrumbs = [ {
title: "Add to Project",
link: "project/" + a.project + "/create"
}, {
title: "Catalog",
link: "project/" + a.project + "/create?tab=fromCatalog"
}, {
title: v
} ];
=======
var v = a.template, h = a.namespace || "", y = n("spec.template.spec.containers"), b = n("spec.strategy.sourceStrategy.from || spec.strategy.dockerStrategy.from || spec.strategy.customStrategy.from"), C = n("spec.output.to"), S = e("imageObjectRef");
=======
var v = a.template, h = a.namespace || "", y = n("spec.template.spec.containers"), b = n("spec.strategy.sourceStrategy.from || spec.strategy.dockerStrategy.from || spec.strategy.customStrategy.from"), S = n("spec.output.to"), C = e("imageObjectRef");
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
if (v) {
>>>>>>> Remove breadcrumbs from catalog, create, and next-steps pages
=======
var v = a.template, h = a.namespace || "", y = n("spec.template.spec.containers"), b = n("spec.strategy.sourceStrategy.from || spec.strategy.dockerStrategy.from || spec.strategy.customStrategy.from"), S = n("spec.output.to"), C = e("imageObjectRef");
if (v) {
>>>>>>> Adding label filter to ste secrets page
=======
var h = a.template, y = a.namespace || "", b = n("spec.template.spec.containers"), S = n("spec.strategy.sourceStrategy.from || spec.strategy.dockerStrategy.from || spec.strategy.customStrategy.from"), C = n("spec.output.to"), w = e("imageObjectRef");
if (h) {
>>>>>>> Bug 1510786 - Error info should be more precise when create app in project with view role
a.templateParamsMap && (r.prefillParameters = function() {
=======
var h = r.template, y = r.namespace || "", b = n("spec.template.spec.containers"), S = n("spec.strategy.sourceStrategy.from || spec.strategy.dockerStrategy.from || spec.strategy.customStrategy.from"), C = n("spec.output.to"), w = e("imageObjectRef");
if (h) {
r.templateParamsMap && (a.prefillParameters = function() {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
try {
return JSON.parse(r.templateParamsMap);
} catch (e) {
l.addNotification({
id: "template-params-invalid-json",
type: "error",
message: "Could not prefill parameter values.",
details: "The `templateParamsMap` URL parameter is not valid JSON. " + e
});
}
}());
var P = /\${([a-zA-Z0-9\_]+)}/g, k = [];
=======
}());
var P = /\${([a-zA-Z0-9\_]+)}/g, j = [];
>>>>>>> Add Browse Catalog to Project context view.
u.get(r.project).then(_.spread(function(e) {
if (a.project = e, o.canI("processedtemplates", "create", r.project)) if (y) s.get("templates", h, {
namespace: y || a.project.metadata.name
}).then(function(e) {
a.template = e, g(e);
_.some(j, function(e) {
return !_.isEmpty(e.usesParameters);
}) ? (a.parameterDisplayNames = {}, _.each(e.parameters, function(e) {
a.parameterDisplayNames[e.name] = e.displayName || e.name;
}), a.$watch("template.parameters", _.debounce(function() {
a.$apply(p);
}, 50, {
maxWait: 250
<<<<<<< 13ac2d832bc56edf6bc5e2fc652da9b188ddae32
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< 2ce32f87748ff2fe030a6b53ff9490fcb80d856d
<<<<<<< 9cfcd8c347f6f7d2523c31df7fe5a250fecec817
<<<<<<< 714c4a3ff94bc485f89078ceeb8105e8b94271be
<<<<<<< 0c40bfb0d97d474f70b5801c1312be38074c32cb
<<<<<<< 33eb37eab8df0c17bc226501a924a2dc2b9b2f41
}), !0)) : r.templateImages = j;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
}), !0)) : r.templateImages = k;
>>>>>>> Patternfly vertical navigation and project bar
=======
}), !0)) : r.templateImages = P;
>>>>>>> Fix for adding non-builder templates to a project
=======
}), !0)) : r.templateImages = k;
>>>>>>> Bug 1505281 - Improve import YAML results message
=======
}), !0)) : r.templateImages = P;
>>>>>>> Bug 1510786 - Error info should be more precise when create app in project with view role
=======
}), !0)) : r.templateImages = k;
>>>>>>> Update pod controller to use getPreferredVersion
}, function() {
c.toErrorPage("Cannot create from template: the specified template could not be retrieved.");
}); else {
<<<<<<< 9cfcd8c347f6f7d2523c31df7fe5a250fecec817
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
if (e.template = f.getTemplate(), _.isEmpty(e.template)) {
var c = URI("error").query({
error: "not_found",
error_description: "Template wasn't found in cache."
}).toString();
b.url(c);
=======
if (r.template = o.getTemplate(), _.isEmpty(r.template)) {
=======
if (r.template = i.getTemplate(), _.isEmpty(r.template)) {
>>>>>>> Bug 1510786 - Error info should be more precise when create app in project with view role
=======
}), !0)) : a.templateImages = k;
=======
}), !0)) : a.templateImages = j;
>>>>>>> Add Browse Catalog to Project context view.
}, function() {
c.toErrorPage("Cannot create from template: the specified template could not be retrieved.");
}); else {
if (a.template = i.getTemplate(), _.isEmpty(a.template)) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
var n = URI("error").query({
error: "not_found",
error_description: "Template wasn't found in cache."
}).toString();
<<<<<<< b82d21ade915b9a1bae21ca36e0909ca0174c557
t.url(a);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
t.url(n);
>>>>>>> Remove breadcrumbs from catalog, create, and next-steps pages
}
i.clearTemplate();
} else c.toErrorPage("You do not have authority to process templates in project " + r.project + ".", "access_denied");
}));
<<<<<<< 9cfcd8c347f6f7d2523c31df7fe5a250fecec817
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
} ]), angular.module("openshiftConsole").controller("LabelsController", [ "$scope", function(a) {
a.expanded = !0, a.toggleExpanded = function() {
a.expanded = !a.expanded;
}, a.addLabel = function() {
a.labelKey && a.labelValue && (a.labels[a.labelKey] = a.labelValue, a.labelKey = "", a.labelValue = "", a.form.$setPristine(), a.form.$setUntouched());
}, a.deleteLabel = function(b) {
a.labels[b] && delete a.labels[b];
};
} ]), angular.module("openshiftConsole").controller("TasksController", [ "$scope", "TaskList", function(a, b) {
a.tasks = function() {
return b.taskList();
}, a["delete"] = function(a) {
b.deleteTask(a);
}, a.hasTaskWithError = function() {
var a = b.taskList();
return _.some(a, {
hasErrors: !0
});
};
} ]), angular.module("openshiftConsole").controller("EventsController", [ "$routeParams", "$scope", "ProjectsService", function(a, b, c) {
b.projectName = a.project, b.renderOptions = {
hideFilterWidget: !0
}, b.breadcrumbs = [ {
title: "Monitoring",
link: "project/" + a.project + "/monitoring"
}, {
title: "Events"
} ], c.get(a.project).then(_.spread(function(a, c) {
b.project = a, b.projectContext = c;
}));
} ]), angular.module("openshiftConsole").controller("OAuthController", [ "$scope", "$location", "$q", "RedirectLoginService", "DataService", "AuthService", "Logger", function(a, b, c, d, e, f, g) {
var h = g.get("auth");
a.completeLogin = function() {}, a.cancelLogin = function() {
b.replace(), b.url("./");
}, d.finish().then(function(c) {
var d = c.token, g = c.then, i = c.verified, j = c.ttl, k = {
errorNotification: !1,
http: {
auth: {
token: d,
=======
} else s.toErrorPage("Cannot create from template: a template name was not specified.");
=======
} else c.toErrorPage("Cannot create from template: a template name was not specified.");
>>>>>>> Bug 1510786 - Error info should be more precise when create app in project with view role
} ]), angular.module("openshiftConsole").controller("LabelsController", [ "$scope", function(e) {
e.expanded = !0, e.toggleExpanded = function() {
e.expanded = !e.expanded;
}, e.addLabel = function() {
e.labelKey && e.labelValue && (e.labels[e.labelKey] = e.labelValue, e.labelKey = "", e.labelValue = "", e.form.$setPristine(), e.form.$setUntouched());
}, e.deleteLabel = function(t) {
e.labels[t] && delete e.labels[t];
};
} ]), angular.module("openshiftConsole").controller("TasksController", [ "$scope", "TaskList", function(e, t) {
e.tasks = function() {
return t.taskList();
}, e.delete = function(e) {
t.deleteTask(e);
}, e.hasTaskWithError = function() {
var e = t.taskList();
return _.some(e, {
hasErrors: !0
});
};
} ]), angular.module("openshiftConsole").controller("EventsController", [ "$routeParams", "$scope", "ProjectsService", function(e, t, n) {
t.projectName = e.project, t.renderOptions = {
hideFilterWidget: !0
}, t.breadcrumbs = [ {
title: "Monitoring",
link: "project/" + e.project + "/monitoring"
}, {
title: "Events"
} ], n.get(e.project).then(_.spread(function(e, n) {
t.project = e, t.projectContext = n;
}));
} ]), angular.module("openshiftConsole").controller("OAuthController", [ "$scope", "$location", "$q", "APIService", "AuthService", "DataService", "Logger", "RedirectLoginService", function(e, t, n, r, a, o, i, s) {
var c = i.get("auth");
e.completeLogin = function() {}, e.cancelLogin = function() {
t.replace(), t.url("./");
};
var l = r.getPreferredVersion("users");
s.finish().then(function(n) {
var r = n.token, i = n.then, s = n.verified, u = n.ttl, d = {
errorNotification: !1,
http: {
auth: {
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
token: a,
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
token: r,
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
triggerLogin: !1
}
}
};
<<<<<<< 22c7098fd862e27d31d3d4b0e715995e2880cf32
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
h.log("OAuthController, got token, fetching user", k), e.get("users", "~", {}, k).then(function(c) {
if (h.log("OAuthController, got user", c), a.completeLogin = function() {
f.setUser(c, d, j);
var a = g || "./";
URI(a).is("absolute") && (h.log("OAuthController, invalid absolute redirect", a), a = "./"), h.log("OAuthController, redirecting", a), b.replace(), b.url(a);
}, i) a.completeLogin(); else {
a.confirmUser = c;
var e = f.UserStore().getUser();
e && e.metadata.name !== c.metadata.name && (a.overriddenUser = e);
}
})["catch"](function(a) {
var c = URI("error").query({
=======
s.log("OAuthController, got token, fetching user", u), r.get("users", "~", {}, u).then(function(n) {
if (s.log("OAuthController, got user", n), e.completeLogin = function() {
o.setUser(n, a, l);
=======
c.log("OAuthController, got token, fetching user", d), o.get(l, "~", {}, d).then(function(n) {
if (c.log("OAuthController, got user", n), e.completeLogin = function() {
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
r.setUser(n, a, u);
>>>>>>> Update util/oauth controller to use getPreferredVersion
=======
a.setUser(n, r, u);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
var e = i || "./";
URI(e).is("absolute") && (c.log("OAuthController, invalid absolute redirect", e), e = "./"), c.log("OAuthController, redirecting", e), t.replace(), t.url(e);
}, s) e.completeLogin(); else {
e.confirmUser = n;
var o = a.UserStore().getUser();
o && o.metadata.name !== n.metadata.name && (e.overriddenUser = o);
}
}).catch(function(e) {
var n = URI("error").query({
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
error: "user_fetch_failed"
}).toString();
c.error("OAuthController, error fetching user", e, "redirecting", n), t.replace(), t.url(n);
});
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
})["catch"](function(a) {
var c = URI("error").query({
error: a.error || "",
error_description: a.error_description || "",
error_uri: a.error_uri || ""
=======
}).catch(function(e) {
var n = URI("error").query({
error: e.error || "",
error_description: e.error_description || "",
error_uri: e.error_uri || ""
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
}).toString();
c.error("OAuthController, error", e, "redirecting", n), t.replace(), t.url(n);
});
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
} ]), angular.module("openshiftConsole").controller("ErrorController", [ "$scope", "$window", "gettext", "gettextCatalog", function(a, b, c, d) {
var e = URI(window.location.href).query(!0), f = e.error;
switch (f) {
=======
} ]), angular.module("openshiftConsole").controller("ErrorController", [ "$scope", "$window", function(e, t) {
var n = URI(window.location.href).query(!0);
switch (n.error) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
case "access_denied":
e.errorMessage = "Access denied";
break;

case "not_found":
e.errorMessage = "Not found";
break;

case "invalid_request":
e.errorMessage = "Invalid request";
break;

case "API_DISCOVERY":
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
a.errorLinks = [ {
href: window.location.protocol + "//" + window.OPENSHIFT_CONFIG.api.openshift.hostPort + window.OPENSHIFT_CONFIG.api.openshift.prefix,
label: d.getString(c("Check Server Connection")),
=======
e.errorLinks = [ {
href: window.location.protocol + "//" + window.OPENSHIFT_CONFIG.api.openshift.hostPort + window.OPENSHIFT_CONFIG.api.openshift.prefix,
label: "Check Server Connection",
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
target: "_blank"
} ];
break;

default:
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
a.errorMessage = d.getString(c("An error has occurred"));
}
e.error_description && (a.errorDetails = e.error_description), a.reloadConsole = function() {
b.location.href = "/";
};
} ]), angular.module("openshiftConsole").controller("LogoutController", [ "$scope", "$log", "AuthService", "AUTH_CFG", "gettext", "gettextCatalog", function(a, b, c, d, e, f) {
b.debug("LogoutController"), c.isLoggedIn() ? (b.debug("LogoutController, logged in, initiating logout"), a.logoutMessage = f.getString(e("Logging out...")), c.startLogout()["finally"](function() {
c.isLoggedIn() ? (b.debug("LogoutController, logout failed, still logged in"), a.logoutMessage = 'You could not be logged out. Return to the <a href="./">console</a>.') : d.logout_uri ? (b.debug("LogoutController, logout completed, redirecting to AUTH_CFG.logout_uri", d.logout_uri), window.location.href = d.logout_uri) : (b.debug("LogoutController, logout completed, reloading the page"), window.location.reload(!1));
})) : d.logout_uri ? (b.debug("LogoutController, logout completed, redirecting to AUTH_CFG.logout_uri", d.logout_uri), a.logoutMessage = f.getString(e("Logging out...")), window.location.href = d.logout_uri) : (b.debug("LogoutController, not logged in, logout complete"), a.logoutMessage = f.getString(e('You are logged out. Return to the <a href="./">console</a>.')));
} ]), angular.module("openshiftConsole").controller("CreateController", [ "$scope", "$filter", "$location", "$q", "$routeParams", "$uibModal", "CatalogService", "Constants", "DataService", "LabelFilter", "Logger", "ProjectsService", function(a, b, c, d, e, f, g, h, i, j, k, l) {
a.projectName = e.project, a.categories = h.CATALOG_CATEGORIES, a.alerts = a.alerts || {}, l.get(e.project).then(_.spread(function(b, c) {
a.project = b, a.context = c, i.list("imagestreams", {
namespace: "openshift"
}).then(function(b) {
a.openshiftImageStreams = b.by("metadata.name");
}), i.list("templates", {
namespace: "openshift"
}, null, {
partialObjectMetadataList: !0
}).then(function(b) {
a.openshiftTemplates = b.by("metadata.name");
}), "openshift" === e.project ? (a.projectImageStreams = [], a.projectTemplates = []) : (i.list("imagestreams", c).then(function(b) {
a.projectImageStreams = b.by("metadata.name");
}), i.list("templates", c, null, {
partialObjectMetadataList: !0
}).then(function(b) {
a.projectTemplates = b.by("metadata.name");
}));
}));
} ]), angular.module("openshiftConsole").controller("CreateFromURLController", [ "$scope", "$routeParams", "$location", "$filter", "AuthService", "DataService", "Navigate", "ProjectsService", function(a, b, c, d, e, f, g, h) {
e.withUser(), a.alerts = {}, a.selected = {};
var i = function(b) {
a.alerts.invalidImageStream = {
type: "error",
message: 'The requested image stream "' + b + '" could not be loaded.'
};
}, j = function(b) {
a.alerts.invalidImageTag = {
type: "error",
message: 'The requested image stream tag "' + b + '" could not be loaded.'
};
}, k = function(b) {
a.alerts.invalidImageStream = {
type: "error",
message: 'The app name "' + b + "\" is not valid.  An app name is an alphanumeric (a-z, and 0-9) string with a maximum length of 24 characters, where the first character is a letter (a-z), and the '-' character is allowed anywhere except the first or last character."
};
}, l = function(b) {
a.alerts.invalidNamespace = {
type: "error",
message: 'Resources from the namespace "' + b + '" are not permitted.'
};
}, m = function(b) {
a.alerts.invalidTemplate = {
type: "error",
message: 'The requested template "' + b + '" could not be loaded.'
};
}, n = function() {
a.alerts.resourceRequired = {
type: "error",
message: "An image stream or template is required."
};
}, o = function() {
a.alerts.invalidResource = {
type: "error",
message: "Image streams and templates cannot be combined."
=======
e.errorMessage = "An error has occurred";
}
n.error_description && (e.errorDetails = n.error_description), e.reloadConsole = function() {
t.location.href = "/";
};
} ]), angular.module("openshiftConsole").controller("LogoutController", [ "$scope", "$log", "AuthService", "AUTH_CFG", function(e, t, n, r) {
t.debug("LogoutController"), n.isLoggedIn() ? (t.debug("LogoutController, logged in, initiating logout"), e.logoutMessage = "Logging out...", n.startLogout().finally(function() {
n.isLoggedIn() ? (t.debug("LogoutController, logout failed, still logged in"), e.logoutMessage = 'You could not be logged out. Return to the <a href="./">console</a>.') : r.logout_uri ? (t.debug("LogoutController, logout completed, redirecting to AUTH_CFG.logout_uri", r.logout_uri), window.location.href = r.logout_uri) : (t.debug("LogoutController, logout completed, reloading the page"), window.location.reload(!1));
})) : r.logout_uri ? (t.debug("LogoutController, logout completed, redirecting to AUTH_CFG.logout_uri", r.logout_uri), e.logoutMessage = "Logging out...", window.location.href = r.logout_uri) : (t.debug("LogoutController, not logged in, logout complete"), e.logoutMessage = 'You are logged out. Return to the <a href="./">console</a>.');
} ]), angular.module("openshiftConsole").controller("CreateController", [ "$scope", "$filter", "$location", "$q", "$routeParams", "$uibModal", "CatalogService", "Constants", "DataService", "LabelFilter", "Logger", "ProjectsService", function(e, t, n, r, a, o, i, s, c, l, u, d) {
e.projectName = a.project, e.categories = s.CATALOG_CATEGORIES, e.alerts = e.alerts || {}, d.get(a.project).then(_.spread(function(t, n) {
e.project = t, e.context = n, c.list("imagestreams", {
namespace: "openshift"
}).then(function(t) {
e.openshiftImageStreams = t.by("metadata.name");
}), c.list("templates", {
namespace: "openshift"
}, null, {
partialObjectMetadataList: !0
}).then(function(t) {
e.openshiftTemplates = t.by("metadata.name");
}), "openshift" === a.project ? (e.projectImageStreams = [], e.projectTemplates = []) : (c.list("imagestreams", n).then(function(t) {
e.projectImageStreams = t.by("metadata.name");
}), c.list("templates", n, null, {
partialObjectMetadataList: !0
}).then(function(t) {
e.projectTemplates = t.by("metadata.name");
}));
}));
} ]), angular.module("openshiftConsole").controller("CreateFromURLController", [ "$scope", "$routeParams", "$location", "$filter", "APIService", "AuthService", "AuthorizationService", "DataService", "Navigate", "ProjectsService", function(e, t, n, r, a, o, i, s, c, l) {
o.withUser(), e.alerts = {}, e.selected = {};
var u = function(t) {
e.alerts.invalidImageStream = {
type: "error",
message: 'The requested image stream "' + t + '" could not be loaded.'
};
}, d = function(t) {
e.alerts.invalidImageTag = {
type: "error",
message: 'The requested image stream tag "' + t + '" could not be loaded.'
};
}, m = function(t) {
e.alerts.invalidTemplate = {
type: "error",
message: 'The requested template "' + t + '" could not be loaded.'
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
};
}, p = function() {
try {
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
return b.templateParamsMap && JSON.parse(b.templateParamsMap) || {};
} catch (c) {
a.alerts.invalidTemplateParams = {
type: "error",
message: "The templateParamsMap is not valid JSON. " + c
};
}
}, q = window.OPENSHIFT_CONSTANTS.CREATE_FROM_URL_WHITELIST, r = [ "namespace", "name", "imageStream", "imageTag", "sourceURI", "sourceRef", "contextDir", "template", "templateParamsMap" ], s = _.pickBy(b, function(a, b) {
return _.includes(r, b) && _.isString(a);
});
s.namespace = s.namespace || "openshift";
var t = function(a) {
return _.size(a) < 25 && /^[a-z]([-a-z0-9]*[a-z0-9])?$/.test(a);
}, u = function() {
s.imageStream && f.get("imagestreams", s.imageStream, {
namespace: s.namespace
}, {
errorNotification: !1
}).then(function(b) {
a.imageStream = b, f.get("imagestreamtags", b.metadata.name + ":" + s.imageTag, {
namespace: s.namespace
}, {
errorNotification: !1
}).then(function(b) {
a.imageStreamTag = b, a.validationPassed = !0, a.resource = b, s.displayName = d("displayName")(b);
}, function() {
j(s.imageTag);
});
}, function() {
i(s.imageStream);
}), s.template && f.get("templates", s.template, {
namespace: s.namespace
}, {
errorNotification: !1
}).then(function(b) {
a.template = b, p() && (a.validationPassed = !0, a.resource = b);
=======
return t.templateParamsMap && JSON.parse(t.templateParamsMap) || {};
} catch (t) {
e.alerts.invalidTemplateParams = {
type: "error",
message: "The templateParamsMap is not valid JSON. " + t
};
}
}, f = a.getPreferredVersion("imagestreams"), g = a.getPreferredVersion("imagestreamtags"), v = a.getPreferredVersion("templates"), h = window.OPENSHIFT_CONSTANTS.CREATE_FROM_URL_WHITELIST, y = [ "namespace", "name", "imageStream", "imageTag", "sourceURI", "sourceRef", "contextDir", "template", "templateParamsMap" ], b = _.pickBy(t, function(e, t) {
return _.includes(y, t) && _.isString(e);
});
b.namespace = b.namespace || "openshift";
_.includes(h, b.namespace) ? b.imageStream && b.template ? e.alerts.invalidResource = {
type: "error",
message: "Image streams and templates cannot be combined."
} : b.imageStream || b.template ? b.name && !function(e) {
return _.size(e) < 25 && /^[a-z]([-a-z0-9]*[a-z0-9])?$/.test(e);
}(b.name) ? function(t) {
e.alerts.invalidImageStream = {
type: "error",
message: 'The app name "' + t + "\" is not valid.  An app name is an alphanumeric (a-z, and 0-9) string with a maximum length of 24 characters, where the first character is a letter (a-z), and the '-' character is allowed anywhere except the first or last character."
};
}(b.name) : (b.imageStream && s.get(f, b.imageStream, {
namespace: b.namespace
}, {
errorNotification: !1
}).then(function(t) {
e.imageStream = t, s.get(g, t.metadata.name + ":" + b.imageTag, {
namespace: b.namespace
}, {
errorNotification: !1
}).then(function(t) {
e.imageStreamTag = t, e.validationPassed = !0, e.resource = t, b.displayName = r("displayName")(t);
}, function() {
d(b.imageTag);
});
}, function() {
u(b.imageStream);
}), b.template && s.get(v, b.template, {
namespace: b.namespace
}, {
errorNotification: !1
}).then(function(t) {
e.template = t, p() && (e.validationPassed = !0, e.resource = t);
}, function() {
m(b.template);
})) : e.alerts.resourceRequired = {
type: "error",
message: "An image stream or template is required."
} : function(t) {
e.alerts.invalidNamespace = {
type: "error",
message: 'Resources from the namespace "' + t + '" are not permitted.'
};
}(b.namespace), angular.extend(e, {
createDetails: b,
createWithProject: function(r) {
r = r || e.selected.project.metadata.name;
var a = t.imageStream ? c.createFromImageURL(e.imageStream, b.imageTag, r, b) : c.createFromTemplateURL(e.template, r, b);
n.url(a);
}
}), e.projects = {}, e.canCreateProject = void 0, l.list().then(function(t) {
e.loaded = !0, e.projects = r("orderByDisplayName")(t.by("metadata.name")), e.noProjects = _.isEmpty(e.projects);
}), l.canCreate().then(function() {
e.canCreateProject = !0;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
}, function() {
e.canCreateProject = !1;
}), e.forms = {}, e.canIAddToProject = !0, e.canIAddToSelectedProject = function(t) {
var n = _.get(t, "metadata.name");
i.getProjectRules(n).then(function() {
e.canIAddToProject = i.canIAddToProject(n), e.forms && e.forms.selectProjectForm.selectProject.$setValidity("cannotAddToProject", e.canIAddToProject);
});
};
} ]), angular.module("openshiftConsole").controller("CreateProjectController", [ "$scope", "$location", "$window", "AuthService", "Constants", function(e, t, n, r, a) {
var o = !a.DISABLE_SERVICE_CATALOG_LANDING_PAGE;
e.onProjectCreated = function(e) {
o ? n.history.back() : t.path("project/" + e + "/create");
}, r.withUser();
} ]), angular.module("openshiftConsole").controller("EditProjectController", [ "$scope", "$routeParams", "$filter", "$location", "DataService", "ProjectsService", "Navigate", function(e, t, n, r, a, o, i) {
e.alerts = {};
var s = n("annotation"), c = n("annotationName");
o.get(t.project).then(_.spread(function(a) {
var l = function(e) {
return {
description: s(e, "description"),
displayName: s(e, "displayName")
};
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
_.includes(q, s.namespace) ? s.imageStream && s.template ? o() : s.imageStream || s.template ? s.name && !t(s.name) ? k(s.name) : u() : n() : l(s.namespace), angular.extend(a, {
createDetails: s,
createWithProject: function(d) {
d = d || a.selected.project.metadata.name;
var e = b.imageStream ? g.createFromImageURL(a.imageStream, s.imageTag, d, s) : g.createFromTemplateURL(a.template, d, s);
c.url(e);
}
}), a.projects = {}, a.canCreateProject = void 0, h.list().then(function(b) {
a.loaded = !0, a.projects = d("orderByDisplayName")(b.by("metadata.name")), a.noProjects = _.isEmpty(a.projects);
}), h.canCreate().then(function() {
a.canCreateProject = !0;
}, function() {
a.canCreateProject = !1;
});
} ]), angular.module("openshiftConsole").controller("CreateProjectController", [ "$scope", "$location", "$window", "AuthService", "Constants", function(a, b, c, d, e) {
var f = !e.DISABLE_SERVICE_CATALOG_LANDING_PAGE;
a.onProjectCreated = function(a) {
f ? c.history.back() : b.path("project/" + a + "/create");
}, d.withUser();
} ]), angular.module("openshiftConsole").controller("EditProjectController", [ "$scope", "$routeParams", "$filter", "$location", "DataService", "ProjectsService", "Navigate", "gettext", "gettextCatalog", function(a, b, c, d, e, f, g, h, i) {
a.alerts = {};
var j = c("annotation"), k = c("annotationName");
f.get(b.project).then(_.spread(function(e) {
var l = function(a) {
return {
description: j(a, "description"),
displayName: j(a, "displayName")
};
}, m = function(a, b) {
var c = angular.copy(a);
return c.metadata.annotations[k("description")] = b.description, c.metadata.annotations[k("displayName")] = b.displayName, c;
};
angular.extend(a, {
project: e,
editableFields: l(e),
=======
}, u = function(e, t) {
var n = angular.copy(e);
return n.metadata.annotations[c("description")] = t.description, n.metadata.annotations[c("displayName")] = t.displayName, n;
};
angular.extend(e, {
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
project: r,
editableFields: l(r),
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
project: a,
editableFields: l(a),
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
show: {
editing: !1
},
actions: {
canSubmit: !1
},
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
canSubmit: function(b) {
a.actions.canSubmit = b;
},
update: function() {
a.disableInputs = !0, f.update(b.project, m(e, a.editableFields)).then(function() {
b.then ? d.path(b.then) : g.toProjectOverview(e.metadata.name);
}, function(b) {
a.disableInputs = !1, a.editableFields = l(e), a.alerts.update = {
type: "error",
message: i.getString(h("An error occurred while updating the project")),
details: c("getErrorDetails")(b)
=======
canSubmit: function(t) {
e.actions.canSubmit = t;
},
update: function() {
e.disableInputs = !0, o.update(t.project, u(a, e.editableFields)).then(function() {
t.then ? r.path(t.then) : i.toProjectOverview(a.metadata.name);
}, function(t) {
e.disableInputs = !1, e.editableFields = l(a), e.alerts.update = {
type: "error",
message: "An error occurred while updating the project",
details: n("getErrorDetails")(t)
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
};
});
}
});
}));
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
} ]), angular.module("openshiftConsole").controller("CreateRouteController", [ "$filter", "$routeParams", "$scope", "$window", "APIService", "ApplicationGenerator", "AuthorizationService", "DataService", "Navigate", "NotificationsService", "ProjectsService", "keyValueEditorUtils", function(a, b, c, d, e, f, g, h, i, j, k, l) {
c.renderOptions = {
hideFilterWidget: !0
}, c.projectName = b.project, c.serviceName = b.service, c.labels = [], c.routing = {
name: c.serviceName || ""
}, c.breadcrumbs = [ {
title: "Routes",
link: "project/" + c.projectName + "/browse/routes"
}, {
title: "Create Route"
} ];
var m = e.getPreferredVersion("routes"), n = e.getPreferredVersion("services"), o = function() {
j.hideNotification("create-route-error");
};
c.$on("$destroy", o);
var p = function() {
d.history.back();
};
c.cancel = p, k.get(b.project).then(_.spread(function(d, k) {
if (c.project = d, !g.canI(m, "create", b.project)) return void i.toErrorPage("You do not have authority to create routes in project " + b.project + ".", "access_denied");
var q, r = a("orderByDisplayName");
c.routing.to = {
kind: "Service",
name: c.serviceName,
weight: 1
};
var s, t = function() {
var a = s, b = _.get(c, "routing.to.name");
s = _.get(q, [ b, "metadata", "labels" ], {});
var d = l.mapEntries(l.compactEntries(c.labels)), e = _.assign(d, s);
a && (e = _.omitBy(e, function(b, c) {
return a[c] && !s[c];
})), c.labels = _.map(e, function(a, b) {
return {
name: b,
value: a
};
});
};
h.list(n, k).then(function(a) {
q = a.by("metadata.name"), c.services = r(q), c.$watch("routing.to.name", t);
}), c.createRoute = function() {
if (c.createRouteForm.$valid) {
o(), c.disableInputs = !0;
var b = c.routing.to.name, d = l.mapEntries(l.compactEntries(c.labels)), g = f.createRoute(c.routing, b, d), i = _.get(c, "routing.alternateServices", []);
_.isEmpty(i) || (g.spec.to.weight = _.get(c, "routing.to.weight"), g.spec.alternateBackends = _.map(i, function(a) {
return {
kind: "Service",
name: a.name,
weight: a.weight
};
}));
var m = e.objectToResourceGroupVersion(g);
h.create(m, null, g, k).then(function() {
j.addNotification({
type: "success",
message: "Route " + g.metadata.name + " was successfully created."
}), p();
}, function(b) {
c.disableInputs = !1, j.addNotification({
type: "error",
id: "create-route-error",
message: "An error occurred creating the route.",
details: a("getErrorDetails")(b)
=======
} ]), angular.module("openshiftConsole").controller("CreateRouteController", [ "$filter", "$routeParams", "$scope", "$window", "ApplicationGenerator", "AuthorizationService", "DataService", "Navigate", "NotificationsService", "ProjectsService", "keyValueEditorUtils", function(e, t, n, a, r, o, i, s, c, l, u) {
=======
} ]), angular.module("openshiftConsole").controller("CreateRouteController", [ "$filter", "$routeParams", "$scope", "$window", "APIService", "ApplicationGenerator", "AuthorizationService", "DataService", "Navigate", "NotificationsService", "ProjectsService", "keyValueEditorUtils", function(e, t, n, r, a, o, i, s, c, l, u, d) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
n.renderOptions = {
hideFilterWidget: !0
}, n.projectName = t.project, n.serviceName = t.service, n.labels = [], n.routing = {
name: n.serviceName || ""
}, n.breadcrumbs = [ {
title: "Routes",
link: "project/" + n.projectName + "/browse/routes"
}, {
title: "Create Route"
} ];
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< 9bc0af8cb56dcc9609307333b9424f396867cab5
var d = function() {
c.hideNotification("create-route-error");
=======
var m = r.getPreferredVersion("routes"), p = r.getPreferredVersion("services"), f = function() {
=======
var m = a.getPreferredVersion("routes"), p = a.getPreferredVersion("services"), f = function() {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
l.hideNotification("create-route-error");
>>>>>>> Support EnvFrom in the Env Editors
};
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
n.$on("$destroy", d);
var p = function() {
a.history.back();
};
<<<<<<< 9bc0af8cb56dcc9609307333b9424f396867cab5
<<<<<<< 602d786018a3879a89789b1214b36a15c51b928b
n.cancel = m, l.get(t.project).then(_.spread(function(a, l) {
<<<<<<< 33eb37eab8df0c17bc226501a924a2dc2b9b2f41
if (n.project = a, n.breadcrumbs[0].title = e("displayName")(a), o.canI("routes", "create", t.project)) {
var p = e("orderByDisplayName");
=======
if (n.project = a, o.canI("routes", "create", t.project)) {
var p, f = e("orderByDisplayName");
>>>>>>> Patternfly vertical navigation and project bar
=======
n.cancel = p, l.get(t.project).then(_.spread(function(a, l) {
if (n.project = a, o.canI("routes", "create", t.project)) {
var m, f = e("orderByDisplayName");
>>>>>>> Updates for Service Instance & Bindings
=======
n.cancel = g, u.get(t.project).then(_.spread(function(a, u) {
if (n.project = a, i.canI(m, "create", t.project)) {
<<<<<<< 3087d5859f05def6301fced3a013ac9165fd8c7a
var h, v = e("orderByDisplayName");
>>>>>>> Support EnvFrom in the Env Editors
=======
=======
n.$on("$destroy", f);
var g = function() {
r.history.back();
};
n.cancel = g, u.get(t.project).then(_.spread(function(r, u) {
if (n.project = r, i.canI(m, "create", t.project)) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
var v, h = e("orderByDisplayName");
>>>>>>> Add SVG icons
n.routing.to = {
kind: "Service",
name: n.serviceName,
weight: 1
<<<<<<< 3087d5859f05def6301fced3a013ac9165fd8c7a
<<<<<<< 09d2a6ffdd24feb759f354588edbf74545412878
}, i.list("services", l).then(function(e) {
n.services = p(e.by("metadata.name"));
}), n.copyServiceLabels = function() {
var e = _.get(n, "routing.to.service.metadata.labels", {}), t = u.mapEntries(u.compactEntries(n.labels)), a = _.assign(t, e);
n.labels = _.map(a, function(e, t) {
=======
};
var g, h = function() {
var e = g, t = _.get(n, "routing.to.name");
g = _.get(m, [ t, "metadata", "labels" ], {});
var a = u.mapEntries(u.compactEntries(n.labels)), r = _.assign(a, g);
=======
};
var y, b = function() {
var e = y, t = _.get(n, "routing.to.name");
y = _.get(v, [ t, "metadata", "labels" ], {});
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
var a = d.mapEntries(d.compactEntries(n.labels)), r = _.assign(a, y);
>>>>>>> Add SVG icons
e && (r = _.omitBy(r, function(t, n) {
return e[n] && !g[n];
})), n.labels = _.map(r, function(e, t) {
>>>>>>> Prefill service labels when creating route
=======
var r = d.mapEntries(d.compactEntries(n.labels)), a = _.assign(r, y);
e && (a = _.omitBy(a, function(t, n) {
return e[n] && !y[n];
})), n.labels = _.map(a, function(e, t) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
return {
name: t,
value: e
};
});
};
<<<<<<< 9bc0af8cb56dcc9609307333b9424f396867cab5
i.list("services", l).then(function(e) {
m = e.by("metadata.name"), n.services = f(m), n.$watch("routing.to.name", h);
=======
s.list(p, u).then(function(e) {
<<<<<<< 3087d5859f05def6301fced3a013ac9165fd8c7a
h = e.by("metadata.name"), n.services = v(h), n.$watch("routing.to.name", b);
>>>>>>> Support EnvFrom in the Env Editors
=======
v = e.by("metadata.name"), n.services = h(v), n.$watch("routing.to.name", b);
>>>>>>> Add SVG icons
}), n.createRoute = function() {
if (n.createRouteForm.$valid) {
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
d(), n.disableInputs = !0;
var t = n.routing.to.name, a = u.mapEntries(u.compactEntries(n.labels)), o = r.createRoute(n.routing, t, a), s = _.get(n, "routing.alternateServices", []);
_.isEmpty(s) || (o.spec.to.weight = _.get(n, "routing.to.weight"), o.spec.alternateBackends = _.map(s, function(e) {
=======
f(), n.disableInputs = !0;
var t = n.routing.to.name, r = d.mapEntries(d.compactEntries(n.labels)), i = o.createRoute(n.routing, t, r), c = _.get(n, "routing.alternateServices", []);
_.isEmpty(c) || (i.spec.to.weight = _.get(n, "routing.to.weight"), i.spec.alternateBackends = _.map(c, function(e) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
return {
kind: "Service",
name: e.name,
weight: e.weight
};
<<<<<<< 9bc0af8cb56dcc9609307333b9424f396867cab5
})), i.create("routes", null, o, l).then(function() {
c.addNotification({
=======
}));
var m = a.objectToResourceGroupVersion(i);
s.create(m, null, i, u).then(function() {
l.addNotification({
>>>>>>> Support EnvFrom in the Env Editors
type: "success",
message: "Route " + o.metadata.name + " was successfully created."
}), p();
}, function(t) {
n.disableInputs = !1, c.addNotification({
type: "error",
id: "create-route-error",
message: "An error occurred creating the route.",
details: e("getErrorDetails")(t)
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
});
});
}
};
} else s.toErrorPage("You do not have authority to create routes in project " + t.project + ".", "access_denied");
}));
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< 9bc0af8cb56dcc9609307333b9424f396867cab5
<<<<<<< 602d786018a3879a89789b1214b36a15c51b928b
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
} ]), angular.module("openshiftConsole").controller("AttachPVCController", [ "$filter", "$routeParams", "$scope", "$window", "APIService", "AuthorizationService", "BreadcrumbsService", "DataService", "QuotaService", "Navigate", "NotificationsService", "ProjectsService", "StorageService", "RELATIVE_PATH_PATTERN", function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
if (!b.kind || !b.name) return void j.toErrorPage("Kind or name parameter missing.");
var o = [ "Deployment", "DeploymentConfig", "ReplicaSet", "ReplicationController" ], p = a("humanizeKind");
if (!_.includes(o, b.kind)) return void j.toErrorPage("Storage is not supported for kind " + p(b.kind) + ".");
var q = {
resource: e.kindToResource(b.kind),
group: b.group
};
c.projectName = b.project, c.kind = b.kind, c.name = b.name, c.RELATIVE_PATH_PATTERN = n, c.outOfClaims = !1, c.attach = {
=======
} ]), angular.module("openshiftConsole").controller("AttachPVCController", [ "$filter", "$routeParams", "$scope", "$window", "APIService", "AuthorizationService", "BreadcrumbsService", "DataService", "QuotaService", "Navigate", "NotificationsService", "ProjectsService", "StorageService", "RELATIVE_PATH_PATTERN", function(e, t, n, a, r, o, i, s, c, l, u, d, m, p) {
=======
} ]), angular.module("openshiftConsole").controller("AttachPVCController", [ "$filter", "$routeParams", "$scope", "$window", "APIService", "AuthorizationService", "BreadcrumbsService", "DataService", "QuotaService", "Navigate", "NotificationsService", "ProjectsService", "StorageService", "RELATIVE_PATH_PATTERN", function(e, t, n, a, r, o, i, s, c, l, u, d, p, m) {
>>>>>>> Updates for Service Instance & Bindings
=======
} ]), angular.module("openshiftConsole").controller("AttachPVCController", [ "$filter", "$routeParams", "$scope", "$window", "APIService", "AuthorizationService", "BreadcrumbsService", "DataService", "QuotaService", "Navigate", "NotificationsService", "ProjectsService", "StorageService", "RELATIVE_PATH_PATTERN", function(e, t, n, a, r, o, i, s, c, l, u, d, m, p) {
>>>>>>> Support EnvFrom in the Env Editors
=======
} ]), angular.module("openshiftConsole").controller("AttachPVCController", [ "$filter", "$routeParams", "$scope", "$window", "APIService", "AuthorizationService", "BreadcrumbsService", "DataService", "QuotaService", "Navigate", "NotificationsService", "ProjectsService", "StorageService", "RELATIVE_PATH_PATTERN", function(e, t, n, r, a, o, i, s, c, l, u, d, m, p) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
if (t.kind && t.name) {
var f = [ "Deployment", "DeploymentConfig", "ReplicaSet", "ReplicationController" ], g = e("humanizeKind");
if (_.includes(f, t.kind)) {
var v = {
resource: a.kindToResource(t.kind),
group: t.group
};
<<<<<<< 9bc0af8cb56dcc9609307333b9424f396867cab5
<<<<<<< 602d786018a3879a89789b1214b36a15c51b928b
n.projectName = t.project, n.kind = t.kind, n.name = t.name, n.RELATIVE_PATH_PATTERN = p, n.outOfClaims = !1, n.attach = {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
n.projectName = t.project, n.kind = t.kind, n.name = t.name, n.RELATIVE_PATH_PATTERN = m, n.outOfClaims = !1, n.attach = {
>>>>>>> Updates for Service Instance & Bindings
=======
n.projectName = t.project, n.kind = t.kind, n.name = t.name, n.RELATIVE_PATH_PATTERN = p, n.outOfClaims = !1, n.attach = {
>>>>>>> Support EnvFrom in the Env Editors
persistentVolumeClaim: null,
volumeName: null,
mountPath: null,
allContainers: !0,
containers: {}
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
}, c.breadcrumbs = g.getBreadcrumbs({
name: b.name,
kind: b.kind,
namespace: b.project,
subpage: "Add Storage"
}), c.pvcVersion = e.getPreferredVersion("persistentvolumeclaims");
var r = e.getPreferredVersion("resourcequotas"), s = e.getPreferredVersion("appliedclusterresourcequotas");
l.get(b.project).then(_.spread(function(e, l) {
if (c.project = e, !f.canI(q, "update", b.project)) return void j.toErrorPage("You do not have authority to update " + p(b.kind) + " " + b.name + ".", "access_denied");
var n = a("orderByDisplayName"), o = a("getErrorDetails"), t = a("generateName"), u = function(a, b) {
c.disableInputs = !0, k.addNotification({
id: "attach-pvc-error",
type: "error",
message: a,
details: b
});
}, v = function() {
k.hideNotification("attach-pvc-error");
};
c.$on("$destroy", v);
var w = function() {
d.history.back();
};
c.cancel = w;
var x = function(a) {
return c.attach.allContainers || c.attach.containers[a.name];
}, y = function() {
var a = _.get(c, "attach.resource.spec.template");
c.existingMountPaths = m.getMountPaths(a, x);
};
c.$watchGroup([ "attach.resource", "attach.allContainers" ], y), c.$watch("attach.containers", y, !0);
var z = function() {
h.get(q, b.name, l).then(function(a) {
c.attach.resource = a, c.breadcrumbs = g.getBreadcrumbs({
object: a,
project: e,
subpage: "Add Storage"
});
var b = _.get(a, "spec.template");
c.existingVolumeNames = m.getVolumeNames(b);
}, function(a) {
u(b.name + " could not be loaded.", o(a));
}), h.list(c.pvcVersion, l).then(function(a) {
c.pvcs = n(a.by("metadata.name")), _.isEmpty(c.pvcs) || c.attach.persistentVolumeClaim || (c.attach.persistentVolumeClaim = _.head(c.pvcs));
}), h.list(r, {
namespace: c.projectName
}, function(a) {
c.quotas = a.by("metadata.name"), c.outOfClaims = i.isAnyStorageQuotaExceeded(c.quotas, c.clusterQuotas);
}), h.list(s, {
namespace: c.projectName
}, function(a) {
c.clusterQuotas = a.by("metadata.name"), c.outOfClaims = i.isAnyStorageQuotaExceeded(c.quotas, c.clusterQuotas);
});
};
z(), c.attachPVC = function() {
if (c.disableInputs = !0, v(), c.attachPVCForm.$valid) {
c.attach.volumeName || (c.attach.volumeName = t("volume-"));
var a = c.attach.resource, d = _.get(a, "spec.template"), e = c.attach.persistentVolumeClaim, f = c.attach.volumeName, g = c.attach.mountPath, i = c.attach.subPath, j = c.attach.readOnly;
g && angular.forEach(d.spec.containers, function(a) {
if (x(a)) {
var b = m.createVolumeMount(f, g, i, j);
a.volumeMounts || (a.volumeMounts = []), a.volumeMounts.push(b);
}
});
var n = m.createVolume(f, e);
d.spec.volumes || (d.spec.volumes = []), d.spec.volumes.push(n), h.update(q, a.metadata.name, c.attach.resource, l).then(function() {
var a;
g || (a = "No mount path was provided. The volume reference was added to the configuration, but it will not be mounted into running pods."), k.addNotification({
type: "success",
message: "Persistent volume claim " + e.metadata.name + " added to " + p(b.kind) + " " + b.name + ".",
details: a
}), w();
}, function(a) {
u("An error occurred attaching the persistent volume claim to the " + p(b.kind) + ".", o(a)), c.disableInputs = !1;
=======
}, n.breadcrumbs = i.getBreadcrumbs({
name: t.name,
kind: t.kind,
namespace: t.project,
subpage: "Add Storage"
}), n.pvcVersion = a.getPreferredVersion("persistentvolumeclaims");
var h = a.getPreferredVersion("resourcequotas"), y = a.getPreferredVersion("appliedclusterresourcequotas");
d.get(t.project).then(_.spread(function(a, d) {
if (n.project = a, o.canI(v, "update", t.project)) {
var p = e("orderByDisplayName"), f = e("getErrorDetails"), b = e("generateName"), S = function(e, t) {
n.disableInputs = !0, u.addNotification({
id: "attach-pvc-error",
type: "error",
message: e,
details: t
});
}, C = function() {
u.hideNotification("attach-pvc-error");
};
n.$on("$destroy", C);
var w = function() {
r.history.back();
};
n.cancel = w;
var P = function(e) {
return n.attach.allContainers || n.attach.containers[e.name];
}, j = function() {
var e = _.get(n, "attach.resource.spec.template");
n.existingMountPaths = m.getMountPaths(e, P);
};
n.$watchGroup([ "attach.resource", "attach.allContainers" ], j), n.$watch("attach.containers", j, !0);
s.get(v, t.name, d).then(function(e) {
n.attach.resource = e, n.breadcrumbs = i.getBreadcrumbs({
object: e,
project: a,
subpage: "Add Storage"
});
var t = _.get(e, "spec.template");
n.existingVolumeNames = m.getVolumeNames(t);
}, function(e) {
S(t.name + " could not be loaded.", f(e));
}), s.list(n.pvcVersion, d).then(function(e) {
n.pvcs = p(e.by("metadata.name")), _.isEmpty(n.pvcs) || n.attach.persistentVolumeClaim || (n.attach.persistentVolumeClaim = _.head(n.pvcs));
}), s.list(h, {
namespace: n.projectName
}, function(e) {
n.quotas = e.by("metadata.name"), n.outOfClaims = c.isAnyStorageQuotaExceeded(n.quotas, n.clusterQuotas);
}), s.list(y, {
namespace: n.projectName
}, function(e) {
n.clusterQuotas = e.by("metadata.name"), n.outOfClaims = c.isAnyStorageQuotaExceeded(n.quotas, n.clusterQuotas);
}), n.attachPVC = function() {
if (n.disableInputs = !0, C(), n.attachPVCForm.$valid) {
n.attach.volumeName || (n.attach.volumeName = b("volume-"));
var e = n.attach.resource, r = _.get(e, "spec.template"), a = n.attach.persistentVolumeClaim, o = n.attach.volumeName, i = n.attach.mountPath, c = n.attach.subPath, l = n.attach.readOnly;
i && angular.forEach(r.spec.containers, function(e) {
if (P(e)) {
var t = m.createVolumeMount(o, i, c, l);
e.volumeMounts || (e.volumeMounts = []), e.volumeMounts.push(t);
}
});
var p = m.createVolume(o, a);
r.spec.volumes || (r.spec.volumes = []), r.spec.volumes.push(p), s.update(v, e.metadata.name, n.attach.resource, d).then(function() {
var e;
i || (e = "No mount path was provided. The volume reference was added to the configuration, but it will not be mounted into running pods."), u.addNotification({
type: "success",
message: "Persistent volume claim " + a.metadata.name + " added to " + g(t.kind) + " " + t.name + ".",
details: e
}), w();
}, function(e) {
<<<<<<< 75fc56b9e42e29e1492befd08624dd0e5dade866
<<<<<<< 247459038ac366429876741dd447ec652f2f5e7d
<<<<<<< a19b22733566f12a68db59a49bc16848fffba594
<<<<<<< 46344541d4f20e3585d6ea01425f784292c0d84a
<<<<<<< 97d9546fb581e8780615092428adff6ae55c6143
<<<<<<< 33eb37eab8df0c17bc226501a924a2dc2b9b2f41
y("An error occurred attaching the persistent volume claim to the " + f(t.kind) + ".", g(e)), n.disableInputs = !1;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
y("An error occurred attaching the persistent volume claim to the " + g(t.kind) + ".", f(e)), n.disableInputs = !1;
>>>>>>> Patternfly vertical navigation and project bar
=======
C("An error occurred attaching the persistent volume claim to the " + g(t.kind) + ".", f(e)), n.disableInputs = !1;
>>>>>>> Update attachPVC controller to use getPreferredVersion
=======
S("An error occurred attaching the persistent volume claim to the " + g(t.kind) + ".", f(e)), n.disableInputs = !1;
>>>>>>> Service instance details configuration and edit
=======
C("An error occurred attaching the persistent volume claim to the " + g(t.kind) + ".", f(e)), n.disableInputs = !1;
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
S("An error occurred attaching the persistent volume claim to the " + g(t.kind) + ".", f(e)), n.disableInputs = !1;
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
=======
S("An error occurred attaching the persistent volume claim to the " + g(t.kind) + ".", f(e)), n.disableInputs = !1;
>>>>>>> Adding label filter to ste secrets page
});
}
};
} else l.toErrorPage("You do not have authority to update " + g(t.kind) + " " + t.name + ".", "access_denied");
}));
<<<<<<< 33eb37eab8df0c17bc226501a924a2dc2b9b2f41
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
} ]), angular.module("openshiftConsole").controller("AddConfigVolumeController", [ "$filter", "$location", "$routeParams", "$scope", "$window", "APIService", "AuthorizationService", "BreadcrumbsService", "DataService", "Navigate", "NotificationsService", "ProjectsService", "StorageService", "RELATIVE_PATH_PATTERN", "gettextCatalog", function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
if (!c.kind || !c.name) return void j.toErrorPage("Kind or name parameter missing.");
var p = [ "Deployment", "DeploymentConfig", "ReplicaSet", "ReplicationController" ];
if (!_.includes(p, c.kind)) return void j.toErrorPage("Volumes are not supported for kind " + c.kind + ".");
var q = {
resource: f.kindToResource(c.kind),
group: c.group
};
d.projectName = c.project, d.kind = c.kind, d.name = c.name, d.attach = {
allContainers: !0,
pickKeys: !1
}, d.forms = {}, d.RELATIVE_PATH_PATTERN = n, d.breadcrumbs = h.getBreadcrumbs({
name: c.name,
kind: c.kind,
namespace: c.project,
subpage: "Add Config Files"
}), d.configMapVersion = f.getPreferredVersion("configmaps"), d.secretVersion = f.getPreferredVersion("secrets");
var r = a("humanizeKind");
d.groupByKind = function(a) {
return o.getString(r(a.kind));
};
var s = function() {
_.set(d, "attach.items", [ {} ]);
};
d.$watch("attach.source", s);
var t = function() {
d.forms.addConfigVolumeForm.$setDirty();
}, u = function() {
e.history.back();
};
d.cancel = u;
var v = function(a, b) {
k.addNotification({
id: "add-config-volume-error",
type: "error",
message: a,
details: b
});
}, w = function() {
k.hideNotification("add-config-volume-error");
};
d.$on("$destroy", w), d.addItem = function() {
d.attach.items.push({}), t();
}, d.removeItem = function(a) {
d.attach.items.splice(a, 1), t();
}, l.get(c.project).then(_.spread(function(b, e) {
if (d.project = b, !g.canI(q, "update", c.project)) return void j.toErrorPage("You do not have authority to update " + r(c.kind) + " " + c.name + ".", "access_denied");
var f = a("orderByDisplayName"), l = a("getErrorDetails"), n = a("generateName");
i.get(q, c.name, e, {
errorNotification: !1
}).then(function(a) {
d.targetObject = a, d.breadcrumbs = h.getBreadcrumbs({
object: a,
project: b,
subpage: "Add Config Files"
});
}, function(a) {
d.error = a;
}), i.list(d.configMapVersion, e, null, {
errorNotification: !1
}).then(function(a) {
d.configMaps = f(a.by("metadata.name"));
}, function(a) {
return 403 === a.status ? void (d.configMaps = []) : void v("Could not load config maps", l(a));
}), i.list(d.secretVersion, e, null, {
errorNotification: !1
}).then(function(a) {
d.secrets = f(a.by("metadata.name"));
}, function(a) {
return 403 === a.status ? void (d.secrets = []) : void v("Could not load secrets", l(a));
});
var o = function(a) {
return d.attach.allContainers || d.attach.containers[a.name];
}, p = function() {
var a = _.get(d, "targetObject.spec.template");
d.existingMountPaths = m.getMountPaths(a, o);
};
d.$watchGroup([ "targetObject", "attach.allContainers" ], p), d.$watch("attach.containers", p, !0);
var s = function() {
var a = _.map(d.attach.items, "path");
d.itemPaths = _.compact(a);
};
d.$watch("attach.items", s, !0), d.addVolume = function() {
if (!d.forms.addConfigVolumeForm.$invalid) {
var b = d.targetObject, f = _.get(d, "attach.source"), g = _.get(b, "spec.template"), h = n("volume-"), j = _.get(d, "attach.mountPath"), m = {
name: h,
mountPath: j
=======
} else l.toErrorPage("Storage is not supported for kind " + f(t.kind) + ".");
=======
} else l.toErrorPage("Storage is not supported for kind " + g(t.kind) + ".");
>>>>>>> Patternfly vertical navigation and project bar
} else l.toErrorPage("Kind or name parameter missing.");
} ]), angular.module("openshiftConsole").controller("AddConfigVolumeController", [ "$filter", "$location", "$routeParams", "$scope", "$window", "APIService", "AuthorizationService", "BreadcrumbsService", "DataService", "Navigate", "NotificationsService", "ProjectsService", "StorageService", "RELATIVE_PATH_PATTERN", function(e, t, n, r, a, o, i, s, c, l, u, d, m, p) {
if (n.kind && n.name) {
var f = [ "Deployment", "DeploymentConfig", "ReplicaSet", "ReplicationController" ];
if (_.includes(f, n.kind)) {
var g = {
resource: o.kindToResource(n.kind),
group: n.group
};
r.projectName = n.project, r.kind = n.kind, r.name = n.name, r.attach = {
allContainers: !0,
pickKeys: !1
}, r.forms = {}, r.RELATIVE_PATH_PATTERN = p, r.breadcrumbs = s.getBreadcrumbs({
name: n.name,
kind: n.kind,
namespace: n.project,
subpage: "Add Config Files"
}), r.configMapVersion = o.getPreferredVersion("configmaps"), r.secretVersion = o.getPreferredVersion("secrets");
var v = e("humanizeKind");
r.groupByKind = function(e) {
return v(e.kind);
};
r.$watch("attach.source", function() {
_.set(r, "attach.items", [ {} ]);
});
var h = function() {
r.forms.addConfigVolumeForm.$setDirty();
}, y = function() {
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
r.history.back();
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
a.history.back();
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
};
r.cancel = y;
var b = function(e, t) {
u.addNotification({
id: "add-config-volume-error",
type: "error",
message: e,
details: t
});
<<<<<<< 75fc56b9e42e29e1492befd08624dd0e5dade866
<<<<<<< 247459038ac366429876741dd447ec652f2f5e7d
<<<<<<< a19b22733566f12a68db59a49bc16848fffba594
<<<<<<< 46344541d4f20e3585d6ea01425f784292c0d84a
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
var p, r = {
name: h
};
switch (d.attach.pickKeys && (p = d.attach.items), f.kind) {
case "ConfigMap":
r.configMap = {
name: f.metadata.name,
items: p
=======
}, C = function() {
=======
}, S = function() {
>>>>>>> Service instance details configuration and edit
=======
}, C = function() {
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
}, S = function() {
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
=======
}, S = function() {
>>>>>>> Adding label filter to ste secrets page
u.hideNotification("add-config-volume-error");
};
r.$on("$destroy", S), r.addItem = function() {
r.attach.items.push({}), h();
}, r.removeItem = function(e) {
r.attach.items.splice(e, 1), h();
}, d.get(n.project).then(_.spread(function(t, a) {
if (r.project = t, i.canI(g, "update", n.project)) {
var o = e("orderByDisplayName"), d = e("getErrorDetails"), p = e("generateName");
c.get(g, n.name, a, {
errorNotification: !1
}).then(function(e) {
r.targetObject = e, r.breadcrumbs = s.getBreadcrumbs({
object: e,
project: t,
subpage: "Add Config Files"
});
}, function(e) {
r.error = e;
}), c.list(r.configMapVersion, a, null, {
errorNotification: !1
}).then(function(e) {
r.configMaps = o(e.by("metadata.name"));
}, function(e) {
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
403 !== e.code ? b("Could not load config maps", d(e)) : a.configMaps = [];
}), c.list(a.secretVersion, r, null, {
=======
403 !== e.status ? b("Could not load config maps", d(e)) : r.configMaps = [];
}), c.list(r.secretVersion, a, null, {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
errorNotification: !1
}).then(function(e) {
r.secrets = o(e.by("metadata.name"));
}, function(e) {
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
403 !== e.code ? b("Could not load secrets", d(e)) : a.secrets = [];
=======
403 !== e.status ? b("Could not load secrets", d(e)) : r.secrets = [];
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
});
var f = function(e) {
return r.attach.allContainers || r.attach.containers[e.name];
}, h = function() {
var e = _.get(r, "targetObject.spec.template");
r.existingMountPaths = m.getMountPaths(e, f);
};
r.$watchGroup([ "targetObject", "attach.allContainers" ], h), r.$watch("attach.containers", h, !0);
r.$watch("attach.items", function() {
var e = _.map(r.attach.items, "path");
r.itemPaths = _.compact(e);
}, !0), r.addVolume = function() {
if (!r.forms.addConfigVolumeForm.$invalid) {
var t = r.targetObject, o = _.get(r, "attach.source"), i = _.get(t, "spec.template"), s = p("volume-"), l = {
name: s,
mountPath: _.get(r, "attach.mountPath")
};
"Secret" === o.kind && (l.readOnly = !0), _.each(i.spec.containers, function(e) {
f(e) && (e.volumeMounts = e.volumeMounts || [], e.volumeMounts.push(l));
});
var m, v = {
name: s
};
switch (r.attach.pickKeys && (m = r.attach.items), o.kind) {
case "ConfigMap":
v.configMap = {
name: o.metadata.name,
<<<<<<< 9bc0af8cb56dcc9609307333b9424f396867cab5
<<<<<<< 602d786018a3879a89789b1214b36a15c51b928b
items: m
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
items: p
>>>>>>> Updates for Service Instance & Bindings
=======
items: m
>>>>>>> Support EnvFrom in the Env Editors
};
break;

case "Secret":
<<<<<<< 3087d5859f05def6301fced3a013ac9165fd8c7a
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
r.secret = {
secretName: f.metadata.name,
items: p
};
}
g.spec.volumes = g.spec.volumes || [], g.spec.volumes.push(r), d.disableInputs = !0, w();
var s = a("humanizeKind"), t = s(f.kind), x = s(c.kind);
i.update(q, b.metadata.name, d.targetObject, e).then(function() {
k.addNotification({
type: "success",
message: "Successfully added " + t + " " + f.metadata.name + " to " + x + " " + c.name + "."
}), u();
}, function(a) {
d.disableInputs = !1, v("An error occurred attaching the " + t + " to the " + x + ".", l(a));
=======
h.secret = {
=======
v.secret = {
>>>>>>> Add SVG icons
secretName: o.metadata.name,
items: m
};
}
i.spec.volumes = i.spec.volumes || [], i.spec.volumes.push(v), r.disableInputs = !0, S();
var h = e("humanizeKind"), C = h(o.kind), w = h(n.kind);
c.update(g, t.metadata.name, r.targetObject, a).then(function() {
u.addNotification({
type: "success",
<<<<<<< 75fc56b9e42e29e1492befd08624dd0e5dade866
<<<<<<< 247459038ac366429876741dd447ec652f2f5e7d
<<<<<<< a19b22733566f12a68db59a49bc16848fffba594
<<<<<<< 46344541d4f20e3585d6ea01425f784292c0d84a
message: "Succesfully added " + S + " " + o.metadata.name + " to " + w + " " + n.name + "."
}), y();
}, function(e) {
a.disableInputs = !1, b("An error occurred attaching the " + S + " to the " + w + ".", d(e));
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
message: "Successfully added " + C + " " + o.metadata.name + " to " + w + " " + n.name + "."
}), y();
}, function(e) {
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
a.disableInputs = !1, b("An error occurred attaching the " + C + " to the " + w + ".", d(e));
>>>>>>> Service instance details configuration and edit
=======
message: "Successfully added " + S + " " + o.metadata.name + " to " + w + " " + n.name + "."
}), y();
}, function(e) {
a.disableInputs = !1, b("An error occurred attaching the " + S + " to the " + w + ".", d(e));
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
message: "Successfully added " + C + " " + o.metadata.name + " to " + w + " " + n.name + "."
}), y();
}, function(e) {
a.disableInputs = !1, b("An error occurred attaching the " + C + " to the " + w + ".", d(e));
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
=======
message: "Successfully added " + C + " " + o.metadata.name + " to " + w + " " + n.name + "."
}), y();
}, function(e) {
a.disableInputs = !1, b("An error occurred attaching the " + C + " to the " + w + ".", d(e));
>>>>>>> Adding label filter to ste secrets page
=======
r.disableInputs = !1, b("An error occurred attaching the " + C + " to the " + w + ".", d(e));
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
});
}
};
} else l.toErrorPage("You do not have authority to update " + v(n.kind) + " " + n.name + ".", "access_denied");
}));
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
} ]), angular.module("openshiftConsole").controller("CreateSecretModalController", [ "$scope", "$uibModalInstance", function(a, b) {
a.onCreate = function(a) {
b.close(a);
}, a.onCancel = function() {
b.dismiss("cancel");
};
} ]), angular.module("openshiftConsole").controller("ConfirmModalController", [ "$scope", "$uibModalInstance", "modalConfig", function(a, b, c) {
_.extend(a, c), a.confirm = function() {
b.close("confirm");
}, a.cancel = function() {
b.dismiss("cancel");
};
} ]), angular.module("openshiftConsole").controller("ConfirmScaleController", [ "$scope", "$uibModalInstance", "resource", "type", function(a, b, c, d) {
a.resource = c, a.type = d, a.confirmScale = function() {
b.close("confirmScale");
}, a.cancel = function() {
b.dismiss("cancel");
};
} ]), angular.module("openshiftConsole").controller("ConfirmSaveLogController", [ "$scope", "$uibModalInstance", "object", "CLIHelp", function(a, b, c, d) {
a.object = c, a.command = d.getLogsCommand(c), a.save = function() {
b.close("save");
}, a.cancel = function() {
b.dismiss("cancel");
};
} ]), angular.module("openshiftConsole").controller("DeleteModalController", [ "$scope", "$uibModalInstance", function(a, b) {
a["delete"] = function() {
b.close("delete");
}, a.cancel = function() {
b.dismiss("cancel");
};
} ]), angular.module("openshiftConsole").controller("DebugTerminalModalController", [ "$scope", "$filter", "$uibModalInstance", "container", "image", function(a, b, c, d, e) {
a.container = d, a.image = e, a.$watch("debugPod.status.containerStatuses", function() {
a.containerState = _.get(a, "debugPod.status.containerStatuses[0].state");
}), a.close = function() {
c.close("close");
};
} ]), angular.module("openshiftConsole").controller("ConfirmReplaceModalController", [ "$scope", "$uibModalInstance", function(a, b) {
a.replace = function() {
b.close("replace");
}, a.cancel = function() {
b.dismiss("cancel");
};
} ]), angular.module("openshiftConsole").controller("ProcessOrSaveTemplateModalController", [ "$scope", "$uibModalInstance", function(a, b) {
a["continue"] = function() {
b.close("create");
}, a.cancel = function() {
b.dismiss("cancel");
};
} ]), angular.module("openshiftConsole").controller("LinkServiceModalController", [ "$scope", "$uibModalInstance", "ServicesService", function(a, b, c) {
a.$watch("services", function(b) {
var d = c.getDependentServices(a.service);
a.options = _.filter(b, function(b) {
return b !== a.service && !_.includes(d, b.metadata.name);
}), 1 === _.size(a.options) && _.set(a, "link.selectedService", _.head(a.options));
}), a.link = function() {
b.close(_.get(a, "link.selectedService"));
}, a.cancel = function() {
b.dismiss();
};
} ]), angular.module("openshiftConsole").controller("JenkinsfileExamplesModalController", [ "$scope", "$uibModalInstance", function(a, b) {
a.ok = function() {
b.close("ok");
};
} ]), angular.module("openshiftConsole").controller("AboutComputeUnitsModalController", [ "$scope", "$uibModalInstance", function(a, b) {
a.ok = function() {
b.close("ok");
};
} ]), angular.module("openshiftConsole").controller("AboutController", [ "$scope", "AuthService", "Constants", function(a, b, c) {
b.withUser(), a.version = {
master: {
openshift: c.VERSION.openshift,
kubernetes: c.VERSION.kubernetes
}
};
} ]), angular.module("openshiftConsole").controller("CommandLineController", [ "$scope", "DataService", "AuthService", "Constants", function(a, b, c, d) {
c.withUser(), a.cliDownloadURL = d.CLI, a.cliDownloadURLPresent = a.cliDownloadURL && !_.isEmpty(a.cliDownloadURL), a.loginBaseURL = b.openshiftAPIBaseUrl(), d.DISABLE_COPY_LOGIN_COMMAND || (a.sessionToken = c.UserStore().getToken());
} ]), angular.module("openshiftConsole").controller("CreatePersistentVolumeClaimController", [ "$filter", "$routeParams", "$scope", "$window", "APIService", "ApplicationGenerator", "AuthorizationService", "DataService", "Navigate", "NotificationsService", "ProjectsService", "keyValueEditorUtils", function(a, b, c, d, e, f, g, h, i, j, k, l) {
c.projectName = b.project, c.accessModes = "ReadWriteOnce", c.claim = {}, c.breadcrumbs = [ {
title: "Storage",
link: "project/" + c.projectName + "/browse/storage"
}, {
title: "Create Storage"
} ];
var m = {
kind: "PersistentVolumeClaim",
apiVersion: "v1",
metadata: {
name: void 0,
=======
} else l.toErrorPage("Volumes are not supported for kind " + n.kind + ".");
} else l.toErrorPage("Kind or name parameter missing.");
} ]), angular.module("openshiftConsole").controller("CreateSecretModalController", [ "$scope", "$uibModalInstance", function(e, t) {
e.onCreate = function(e) {
t.close(e);
}, e.onCancel = function() {
t.dismiss("cancel");
};
} ]), angular.module("openshiftConsole").controller("ConfirmModalController", [ "$scope", "$uibModalInstance", "modalConfig", function(e, t, n) {
_.extend(e, n), e.confirm = function() {
t.close("confirm");
}, e.cancel = function() {
t.dismiss("cancel");
};
} ]), angular.module("openshiftConsole").controller("ConfirmScaleController", [ "$scope", "$uibModalInstance", "resource", "type", function(e, t, n, r) {
e.resource = n, e.type = r, e.confirmScale = function() {
t.close("confirmScale");
}, e.cancel = function() {
t.dismiss("cancel");
};
} ]), angular.module("openshiftConsole").controller("ConfirmSaveLogController", [ "$scope", "$uibModalInstance", "object", "CLIHelp", function(e, t, n, r) {
e.object = n, e.command = r.getLogsCommand(n), e.save = function() {
t.close("save");
}, e.cancel = function() {
t.dismiss("cancel");
};
} ]), angular.module("openshiftConsole").controller("DeleteModalController", [ "$scope", "$uibModalInstance", function(e, t) {
e.delete = function() {
t.close("delete");
}, e.cancel = function() {
t.dismiss("cancel");
};
} ]), angular.module("openshiftConsole").controller("DebugTerminalModalController", [ "$scope", "$filter", "$uibModalInstance", "container", "image", function(e, t, n, r, a) {
e.container = r, e.image = a, e.$watch("debugPod.status.containerStatuses", function() {
e.containerState = _.get(e, "debugPod.status.containerStatuses[0].state");
}), e.close = function() {
n.close("close");
};
} ]), angular.module("openshiftConsole").controller("ConfirmReplaceModalController", [ "$scope", "$uibModalInstance", function(e, t) {
e.replace = function() {
t.close("replace");
}, e.cancel = function() {
t.dismiss("cancel");
};
} ]), angular.module("openshiftConsole").controller("ProcessOrSaveTemplateModalController", [ "$scope", "$uibModalInstance", function(e, t) {
e.continue = function() {
t.close("create");
}, e.cancel = function() {
t.dismiss("cancel");
};
} ]), angular.module("openshiftConsole").controller("LinkServiceModalController", [ "$scope", "$uibModalInstance", "ServicesService", function(e, t, n) {
e.$watch("services", function(t) {
var r = n.getDependentServices(e.service);
e.options = _.filter(t, function(t) {
return t !== e.service && !_.includes(r, t.metadata.name);
}), 1 === _.size(e.options) && _.set(e, "link.selectedService", _.head(e.options));
}), e.link = function() {
t.close(_.get(e, "link.selectedService"));
}, e.cancel = function() {
t.dismiss();
};
} ]), angular.module("openshiftConsole").controller("JenkinsfileExamplesModalController", [ "$scope", "$uibModalInstance", function(e, t) {
e.ok = function() {
t.close("ok");
};
} ]), angular.module("openshiftConsole").controller("AboutComputeUnitsModalController", [ "$scope", "$uibModalInstance", function(e, t) {
e.ok = function() {
t.close("ok");
};
} ]), angular.module("openshiftConsole").controller("AboutController", [ "$scope", "AuthService", "Constants", function(e, t, n) {
t.withUser(), e.version = {
master: {
openshift: n.VERSION.openshift,
kubernetes: n.VERSION.kubernetes
}
};
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
} ]), angular.module("openshiftConsole").controller("CommandLineController", [ "$scope", "DataService", "AuthService", "Constants", function(e, t, n, a) {
n.withUser(), e.cliDownloadURL = a.CLI, e.cliDownloadURLPresent = e.cliDownloadURL && !_.isEmpty(e.cliDownloadURL), e.loginBaseURL = t.openshiftAPIBaseUrl(), a.DISABLE_COPY_LOGIN_COMMAND || (e.sessionToken = n.UserStore().getToken());
} ]), angular.module("openshiftConsole").controller("CreatePersistentVolumeClaimController", [ "$filter", "$routeParams", "$scope", "$window", "ApplicationGenerator", "AuthorizationService", "DataService", "Navigate", "NotificationsService", "ProjectsService", "keyValueEditorUtils", function(e, t, n, a, r, o, i, s, c, l, u) {
=======
} ]), angular.module("openshiftConsole").controller("CommandLineController", [ "$scope", "DataService", "AuthService", "Constants", function(e, t, n, r) {
n.withUser(), e.cliDownloadURL = r.CLI, e.cliDownloadURLPresent = e.cliDownloadURL && !_.isEmpty(e.cliDownloadURL), e.loginBaseURL = t.openshiftAPIBaseUrl(), r.DISABLE_COPY_LOGIN_COMMAND || (e.sessionToken = n.UserStore().getToken());
} ]), angular.module("openshiftConsole").controller("CreatePersistentVolumeClaimController", [ "$filter", "$routeParams", "$scope", "$window", "APIService", "ApplicationGenerator", "AuthorizationService", "DataService", "Navigate", "NotificationsService", "ProjectsService", "keyValueEditorUtils", function(e, t, n, r, a, o, i, s, c, l, u, d) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
n.projectName = t.project, n.accessModes = "ReadWriteOnce", n.claim = {}, n.breadcrumbs = [ {
title: "Storage",
link: "project/" + n.projectName + "/browse/storage"
}, {
title: "Create Storage"
} ];
<<<<<<< 9bc0af8cb56dcc9609307333b9424f396867cab5
var d = function() {
c.hideNotification("create-pvc-error");
};
n.$on("$destroy", d);
var p = function() {
a.history.back();
};
n.cancel = p, l.get(t.project).then(_.spread(function(a, r) {
function l() {
var e = {
=======
var m = {
>>>>>>> Support EnvFrom in the Env Editors
kind: "PersistentVolumeClaim",
apiVersion: "v1",
metadata: {
name: n.claim.name,
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
labels: {},
annotations: {}
},
spec: {
resources: {
requests: {}
}
}
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< 9bc0af8cb56dcc9609307333b9424f396867cab5
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
}, n = e.objectToResourceGroupVersion(m), o = function() {
j.hideNotification("create-pvc-error");
=======
}, p = r.objectToResourceGroupVersion(m), f = function() {
=======
}, p = a.objectToResourceGroupVersion(m), f = function() {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
l.hideNotification("create-pvc-error");
>>>>>>> Support EnvFrom in the Env Editors
};
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
c.$on("$destroy", o);
var p = function() {
d.history.back();
};
<<<<<<< 9bc0af8cb56dcc9609307333b9424f396867cab5
c.cancel = p, k.get(b.project).then(_.spread(function(d, e) {
function f() {
var a = angular.copy(m);
a.metadata.name = c.claim.name, a.spec.accessModes = [ c.claim.accessModes || "ReadWriteOnce" ];
var b = c.claim.unit || "Mi";
if (a.spec.resources.requests.storage = c.claim.amount + b, c.claim.selectedLabels) {
var d = l.mapEntries(l.compactEntries(c.claim.selectedLabels));
_.isEmpty(d) || _.set(a, "spec.selector.matchLabels", d);
}
return c.claim.storageClass && "No Storage Class" !== c.claim.storageClass.metadata.name && (a.metadata.annotations["volume.beta.kubernetes.io/storage-class"] = c.claim.storageClass.metadata.name), a;
}
return c.project = d, g.canI(n, "create", b.project) ? void (c.createPersistentVolumeClaim = function() {
if (o(), c.createPersistentVolumeClaimForm.$valid) {
c.disableInputs = !0;
var b = f();
h.create(n, null, b, e).then(function(a) {
j.addNotification({
type: "success",
message: "Persistent volume claim " + a.metadata.name + " successfully created."
}), p();
}, function(b) {
c.disableInputs = !1, j.addNotification({
id: "create-pvc-error",
type: "error",
message: "An error occurred requesting storage.",
details: a("getErrorDetails")(b)
});
});
}
}) : void i.toErrorPage("You do not have authority to create persistent volume claims in project " + b.project + ".", "access_denied");
=======
};
e.spec.accessModes = [ n.claim.accessModes || "ReadWriteOnce" ];
=======
n.cancel = g, u.get(t.project).then(_.spread(function(a, r) {
=======
n.$on("$destroy", f);
var g = function() {
r.history.back();
};
n.cancel = g, u.get(t.project).then(_.spread(function(r, a) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
function o() {
var e = angular.copy(m);
e.metadata.name = n.claim.name, e.spec.accessModes = [ n.claim.accessModes || "ReadWriteOnce" ];
>>>>>>> Support EnvFrom in the Env Editors
var t = n.claim.unit || "Mi";
if (e.spec.resources.requests.storage = n.claim.amount + t, n.claim.selectedLabels) {
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
var a = u.mapEntries(u.compactEntries(n.claim.selectedLabels));
_.isEmpty(a) || _.set(e, "spec.selector.matchLabels", a);
}
return n.claim.storageClass && "No Storage Class" !== n.claim.storageClass.metadata.name && (e.metadata.annotations["volume.beta.kubernetes.io/storage-class"] = n.claim.storageClass.metadata.name), e;
}
<<<<<<< 9bc0af8cb56dcc9609307333b9424f396867cab5
n.project = a, o.canI("persistentvolumeclaims", "create", t.project) ? n.createPersistentVolumeClaim = function() {
if (d(), n.createPersistentVolumeClaimForm.$valid) {
n.disableInputs = !0;
var t = l();
i.create("persistentvolumeclaims", null, t, r).then(function(e) {
c.addNotification({
=======
n.project = a, i.canI(p, "create", t.project) ? n.createPersistentVolumeClaim = function() {
=======
var r = d.mapEntries(d.compactEntries(n.claim.selectedLabels));
_.isEmpty(r) || _.set(e, "spec.selector.matchLabels", r);
}
return n.claim.storageClass && "No Storage Class" !== n.claim.storageClass.metadata.name && (e.metadata.annotations["volume.beta.kubernetes.io/storage-class"] = n.claim.storageClass.metadata.name), e;
}
n.project = r, i.canI(p, "create", t.project) ? n.createPersistentVolumeClaim = function() {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
if (f(), n.createPersistentVolumeClaimForm.$valid) {
n.disableInputs = !0;
var t = o();
s.create(p, null, t, a).then(function(e) {
l.addNotification({
>>>>>>> Support EnvFrom in the Env Editors
type: "success",
message: "Persistent volume claim " + e.metadata.name + " successfully created."
}), p();
}, function(t) {
n.disableInputs = !1, c.addNotification({
id: "create-pvc-error",
type: "error",
message: "An error occurred requesting storage.",
details: e("getErrorDetails")(t)
});
});
}
} : s.toErrorPage("You do not have authority to create persistent volume claims in project " + t.project + ".", "access_denied");
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
}));
} ]), angular.module("openshiftConsole").directive("buildClose", [ "$window", function(e) {
var t = function(e) {
return "hide/build/" + e.metadata.uid;
}, n = function(e) {
var n = t(e);
return "true" === sessionStorage.getItem(n);
};
return {
restrict: "AE",
scope: {
build: "=",
hideBuild: "="
},
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
controller: [ "$scope", function(a) {
a.onHideBuild = function() {
var c = b(a.build);
a.hideBuild = !0, sessionStorage.setItem(c, "true");
};
} ],
link: function(a, b, d, e) {
a.hideBuild = !1, a.$watch("build", function(b) {
a.hideBuild = c(b);
=======
controller: [ "$scope", function(e) {
e.onHideBuild = function() {
var n = t(e.build);
e.hideBuild = !0, sessionStorage.setItem(n, "true");
};
} ],
link: function(e, t, r, a) {
e.hideBuild = !1, e.$watch("build", function(t) {
e.hideBuild = n(t);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
});
},
templateUrl: "views/directives/_build-close.html"
};
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< 1662285d137195d1bed7822ef13b73b8f6812d23
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
} ]), angular.module("openshiftConsole").directive("createSecret", [ "$filter", "AuthorizationService", "DataService", "NotificationsService", "DNS1123_SUBDOMAIN_VALIDATION", "gettext", "gettextCatalog", function(a, b, c, d, e, f, g) {
=======
} ]), angular.module("openshiftConsole").directive("createSecret", [ "$filter", "AuthorizationService", "DataService", "NotificationsService", "DNS1123_SUBDOMAIN_VALIDATION", function(e, t, n, a, r) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
} ]), angular.module("openshiftConsole").directive("createSecret", [ "$filter", "AuthorizationService", "APIService", "DataService", "NotificationsService", "DNS1123_SUBDOMAIN_VALIDATION", function(e, t, n, a, r, o) {
=======
} ]), angular.module("openshiftConsole").directive("createSecret", [ "$filter", "AuthorizationService", "APIService", "DataService", "NotificationsService", "DNS1123_SUBDOMAIN_VALIDATION", function(e, t, n, r, a, o) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
var i = n.getPreferredVersion("serviceaccounts"), s = n.getPreferredVersion("secrets");
>>>>>>> Update directives/createSecret to use getPreferredVersion
return {
restrict: "E",
scope: {
type: "=",
serviceAccountToLink: "=?",
namespace: "=",
onCreate: "&",
onCancel: "&"
},
templateUrl: "views/directives/create-secret.html",
<<<<<<< 54fd2fbbc13bc9ca6203880fcea399383443bb5d
<<<<<<< 1662285d137195d1bed7822ef13b73b8f6812d23
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
link: function(h) {
h.nameValidation = e, h.secretAuthTypeMap = {
image: {
label: g.getString(f("Image Secret")),
authTypes: [ {
id: "kubernetes.io/dockercfg",
label: g.getString(f("Image Registry Credentials"))
}, {
id: "kubernetes.io/dockerconfigjson",
label: g.getString(f("Configuration File"))
} ]
},
source: {
label: g.getString(f("Source Secret")),
authTypes: [ {
id: "kubernetes.io/basic-auth",
label: g.getString(f("Basic Authentication"))
}, {
id: "kubernetes.io/ssh-auth",
label: g.getString(f("SSH Key"))
} ]
}
}, h.secretTypes = _.keys(h.secretAuthTypeMap), h.type ? h.newSecret = {
type: h.type,
authType: h.secretAuthTypeMap[h.type].authTypes[0].id,
data: {},
linkSecret: !_.isEmpty(h.serviceAccountToLink),
pickedServiceAccountToLink: h.serviceAccountToLink || ""
} : h.newSecret = {
=======
link: function(o) {
o.nameValidation = r, o.secretAuthTypeMap = {
=======
link: function(n) {
n.nameValidation = o, n.secretAuthTypeMap = {
>>>>>>> Update directives/createSecret to use getPreferredVersion
=======
link: function(c) {
c.nameValidation = o, c.secretAuthTypeMap = {
>>>>>>> Fix start build & deploy via correct instantiateVersions, add $filter to build group/resource string
image: {
label: "Image Secret",
authTypes: [ {
id: "kubernetes.io/dockercfg",
label: "Image Registry Credentials"
}, {
id: "kubernetes.io/dockerconfigjson",
label: "Configuration File"
} ]
},
source: {
label: "Source Secret",
authTypes: [ {
id: "kubernetes.io/basic-auth",
label: "Basic Authentication"
}, {
id: "kubernetes.io/ssh-auth",
label: "SSH Key"
} ]
}
}, c.secretTypes = _.keys(c.secretAuthTypeMap), c.type ? c.newSecret = {
type: c.type,
authType: c.secretAuthTypeMap[c.type].authTypes[0].id,
data: {},
<<<<<<< 54fd2fbbc13bc9ca6203880fcea399383443bb5d
<<<<<<< 1662285d137195d1bed7822ef13b73b8f6812d23
linkSecret: !_.isEmpty(o.serviceAccountToLink),
pickedServiceAccountToLink: o.serviceAccountToLink || ""
} : o.newSecret = {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
linkSecret: !_.isEmpty(n.serviceAccountToLink),
pickedServiceAccountToLink: n.serviceAccountToLink || ""
} : n.newSecret = {
>>>>>>> Update directives/createSecret to use getPreferredVersion
=======
linkSecret: !_.isEmpty(c.serviceAccountToLink),
pickedServiceAccountToLink: c.serviceAccountToLink || ""
} : c.newSecret = {
>>>>>>> Fix start build & deploy via correct instantiateVersions, add $filter to build group/resource string
type: "source",
authType: "kubernetes.io/basic-auth",
data: {},
linkSecret: !1,
pickedServiceAccountToLink: ""
<<<<<<< 54fd2fbbc13bc9ca6203880fcea399383443bb5d
<<<<<<< 1662285d137195d1bed7822ef13b73b8f6812d23
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
}, h.add = {
gitconfig: !1,
cacert: !1
}, b.canI("serviceaccounts", "list") && b.canI("serviceaccounts", "update") && c.list("serviceaccounts", h, function(a) {
h.serviceAccounts = a.by("metadata.name"), h.serviceAccountsNames = _.keys(h.serviceAccounts);
});
var i = function(a, b) {
var c = {
apiVersion: "v1",
kind: "Secret",
metadata: {
name: h.newSecret.data.secretName
},
type: b,
data: {}
};
switch (b) {
case "kubernetes.io/basic-auth":
a.passwordToken ? c.data = {
password: window.btoa(a.passwordToken)
} : c.type = "Opaque", a.username && (c.data.username = window.btoa(a.username)), a.gitconfig && (c.data[".gitconfig"] = window.btoa(a.gitconfig)), a.cacert && (c.data["ca.crt"] = window.btoa(a.cacert));
break;

case "kubernetes.io/ssh-auth":
c.data = {
"ssh-privatekey": window.btoa(a.privateKey)
}, a.gitconfig && (c.data[".gitconfig"] = window.btoa(a.gitconfig));
break;

case "kubernetes.io/dockerconfigjson":
var d = window.btoa(a.dockerConfig);
JSON.parse(a.dockerConfig).auths ? c.data[".dockerconfigjson"] = d : (c.type = "kubernetes.io/dockercfg", c.data[".dockercfg"] = d);
break;

case "kubernetes.io/dockercfg":
var e = window.btoa(a.dockerUsername + ":" + a.dockerPassword), f = {};
f[a.dockerServer] = {
username: a.dockerUsername,
password: a.dockerPassword,
email: a.dockerMail,
auth: e
}, c.data[".dockercfg"] = window.btoa(JSON.stringify(f));
}
return c;
}, j = function() {
d.hideNotification("create-secret-error");
}, k = function(b) {
var e = angular.copy(h.serviceAccounts[h.newSecret.pickedServiceAccountToLink]);
switch (h.newSecret.type) {
case "source":
e.secrets.push({
name: b.metadata.name
=======
}, o.add = {
=======
}, n.add = {
>>>>>>> Update directives/createSecret to use getPreferredVersion
=======
}, c.add = {
>>>>>>> Fix start build & deploy via correct instantiateVersions, add $filter to build group/resource string
gitconfig: !1,
cacert: !1
}, t.canI("serviceaccounts", "list") && t.canI("serviceaccounts", "update") && r.list(i, c, function(e) {
c.serviceAccounts = e.by("metadata.name"), c.serviceAccountsNames = _.keys(c.serviceAccounts);
});
var l = function(e, t) {
var n = {
apiVersion: "v1",
kind: "Secret",
metadata: {
name: c.newSecret.data.secretName
},
type: t,
data: {}
};
switch (t) {
case "kubernetes.io/basic-auth":
e.passwordToken ? n.data = {
password: window.btoa(e.passwordToken)
} : n.type = "Opaque", e.username && (n.data.username = window.btoa(e.username)), e.gitconfig && (n.data[".gitconfig"] = window.btoa(e.gitconfig)), e.cacert && (n.data["ca.crt"] = window.btoa(e.cacert));
break;

case "kubernetes.io/ssh-auth":
n.data = {
"ssh-privatekey": window.btoa(e.privateKey)
}, e.gitconfig && (n.data[".gitconfig"] = window.btoa(e.gitconfig));
break;

case "kubernetes.io/dockerconfigjson":
var r = window.btoa(e.dockerConfig);
JSON.parse(e.dockerConfig).auths ? n.data[".dockerconfigjson"] = r : (n.type = "kubernetes.io/dockercfg", n.data[".dockercfg"] = r);
break;

case "kubernetes.io/dockercfg":
var a = window.btoa(e.dockerUsername + ":" + e.dockerPassword), o = {};
o[e.dockerServer] = {
username: e.dockerUsername,
password: e.dockerPassword,
email: e.dockerMail,
auth: a
}, n.data[".dockercfg"] = window.btoa(JSON.stringify(o));
}
return n;
}, u = function() {
a.hideNotification("create-secret-error");
}, d = function(t) {
var o = angular.copy(c.serviceAccounts[c.newSecret.pickedServiceAccountToLink]), i = n.objectToResourceGroupVersion(o);
switch (c.newSecret.type) {
case "source":
o.secrets.push({
name: t.metadata.name
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
});
break;

case "image":
<<<<<<< 1662285d137195d1bed7822ef13b73b8f6812d23
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
e.imagePullSecrets.push({
name: b.metadata.name
});
}
c.update("serviceaccounts", h.newSecret.pickedServiceAccountToLink, e, h).then(function(a) {
d.addNotification({
type: "success",
message: "Secret " + b.metadata.name + " was created and linked with service account " + a.metadata.name + "."
}), h.onCreate({
newSecret: b
});
}, function(c) {
d.addNotification({
type: "success",
message: "Secret " + b.metadata.name + " was created."
}), h.serviceAccountToLink || d.addNotification({
id: "secret-sa-link-error",
type: "error",
message: "An error occurred while linking the secret with service account " + h.newSecret.pickedServiceAccountToLink + ".",
details: a("getErrorDetails")(c)
}), h.onCreate({
newSecret: b
=======
r.imagePullSecrets.push({
=======
o.imagePullSecrets.push({
>>>>>>> Update directives/createSecret to use getPreferredVersion
name: t.metadata.name
});
}
r.update(i, c.newSecret.pickedServiceAccountToLink, o, c).then(function(e) {
a.addNotification({
type: "success",
message: "Secret " + t.metadata.name + " was created and linked with service account " + e.metadata.name + "."
}), c.onCreate({
newSecret: t
});
}, function(n) {
a.addNotification({
type: "success",
message: "Secret " + t.metadata.name + " was created."
}), c.serviceAccountToLink || a.addNotification({
id: "secret-sa-link-error",
type: "error",
message: "An error occurred while linking the secret with service account " + c.newSecret.pickedServiceAccountToLink + ".",
details: e("getErrorDetails")(n)
}), c.onCreate({
newSecret: t
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
});
});
}, m = _.debounce(function() {
try {
<<<<<<< 54fd2fbbc13bc9ca6203880fcea399383443bb5d
<<<<<<< 1662285d137195d1bed7822ef13b73b8f6812d23
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
JSON.parse(h.newSecret.data.dockerConfig), h.invalidConfigFormat = !1;
} catch (a) {
h.invalidConfigFormat = !0;
=======
JSON.parse(o.newSecret.data.dockerConfig), o.invalidConfigFormat = !1;
} catch (e) {
o.invalidConfigFormat = !0;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
JSON.parse(n.newSecret.data.dockerConfig), n.invalidConfigFormat = !1;
} catch (e) {
n.invalidConfigFormat = !0;
>>>>>>> Update directives/createSecret to use getPreferredVersion
=======
JSON.parse(c.newSecret.data.dockerConfig), c.invalidConfigFormat = !1;
} catch (e) {
c.invalidConfigFormat = !0;
>>>>>>> Fix start build & deploy via correct instantiateVersions, add $filter to build group/resource string
}
}, 300, {
leading: !0
});
<<<<<<< 54fd2fbbc13bc9ca6203880fcea399383443bb5d
<<<<<<< 1662285d137195d1bed7822ef13b73b8f6812d23
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
h.aceChanged = l, h.nameChanged = function() {
h.nameTaken = !1;
}, h.create = function() {
j();
var e = i(h.newSecret.data, h.newSecret.authType);
c.create("secrets", null, e, h).then(function(a) {
h.newSecret.linkSecret && h.serviceAccountsNames.contains(h.newSecret.pickedServiceAccountToLink) && b.canI("serviceaccounts", "update") ? k(a) : (d.addNotification({
type: "success",
message: "Secret " + e.metadata.name + " was created."
}), h.onCreate({
newSecret: a
}));
}, function(b) {
var c = b.data || {};
return "AlreadyExists" === c.reason ? void (h.nameTaken = !0) : void d.addNotification({
id: "create-secret-error",
type: "error",
message: "An error occurred while creating the secret.",
details: a("getErrorDetails")(b)
});
});
}, h.cancel = function() {
j(), h.onCancel();
=======
o.aceChanged = l, o.nameChanged = function() {
o.nameTaken = !1;
}, o.create = function() {
s();
var r = i(o.newSecret.data, o.newSecret.authType);
n.create("secrets", null, r, o).then(function(e) {
o.newSecret.linkSecret && o.serviceAccountsNames.contains(o.newSecret.pickedServiceAccountToLink) && t.canI("serviceaccounts", "update") ? c(e) : (a.addNotification({
=======
n.aceChanged = d, n.nameChanged = function() {
n.nameTaken = !1;
}, n.create = function() {
l();
var o = c(n.newSecret.data, n.newSecret.authType);
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
a.create(s, null, o, n).then(function(e) {
n.newSecret.linkSecret && n.serviceAccountsNames.contains(n.newSecret.pickedServiceAccountToLink) && t.canI("serviceaccounts", "update") ? u(e) : (r.addNotification({
>>>>>>> Update directives/createSecret to use getPreferredVersion
=======
r.create(s, null, o, n).then(function(e) {
n.newSecret.linkSecret && n.serviceAccountsNames.contains(n.newSecret.pickedServiceAccountToLink) && t.canI("serviceaccounts", "update") ? u(e) : (a.addNotification({
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
=======
c.aceChanged = m, c.nameChanged = function() {
c.nameTaken = !1;
}, c.create = function() {
u();
var n = l(c.newSecret.data, c.newSecret.authType);
r.create(s, null, n, c).then(function(e) {
c.newSecret.linkSecret && c.serviceAccountsNames.contains(c.newSecret.pickedServiceAccountToLink) && t.canI("serviceaccounts", "update") ? d(e) : (a.addNotification({
>>>>>>> Fix start build & deploy via correct instantiateVersions, add $filter to build group/resource string
type: "success",
message: "Secret " + n.metadata.name + " was created."
}), c.onCreate({
newSecret: e
}));
}, function(t) {
"AlreadyExists" !== (t.data || {}).reason ? a.addNotification({
id: "create-secret-error",
type: "error",
message: "An error occurred while creating the secret.",
details: e("getErrorDetails")(t)
}) : c.nameTaken = !0;
});
<<<<<<< 54fd2fbbc13bc9ca6203880fcea399383443bb5d
<<<<<<< 1662285d137195d1bed7822ef13b73b8f6812d23
}, o.cancel = function() {
s(), o.onCancel();
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
}, n.cancel = function() {
l(), n.onCancel();
>>>>>>> Update directives/createSecret to use getPreferredVersion
=======
}, c.cancel = function() {
u(), c.onCancel();
>>>>>>> Fix start build & deploy via correct instantiateVersions, add $filter to build group/resource string
};
}
};
} ]), angular.module("openshiftConsole").directive("timeOnlyDurationUntilNow", function() {
return {
restrict: "E",
scope: {
timestamp: "=",
omitSingle: "=?",
precision: "=?"
},
template: '<span data-timestamp="{{timestamp}}" data-time-only="true" class="duration">{{timestamp | timeOnlyDurationFromTimestamps : null}}</span>'
};
}).directive("durationUntilNow", function() {
return {
restrict: "E",
scope: {
timestamp: "=",
omitSingle: "=?",
precision: "=?"
},
template: '<span data-timestamp="{{timestamp}}" data-omit-single="{{omitSingle}}" data-precision="{{precision}}" class="duration">{{timestamp | duration : null : omitSingle : precision}}</span>'
};
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
}), angular.module("openshiftConsole").directive("deleteLink", [ "$uibModal", "$location", "$filter", "$q", "hashSizeFilter", "APIService", "DataService", "Navigate", "NotificationsService", "Logger", function(a, b, c, d, e, f, g, h, i, j) {
=======
}), angular.module("openshiftConsole").directive("deleteLink", [ "$uibModal", "$location", "$filter", "$q", "hashSizeFilter", "APIService", "DataService", "Navigate", "NotificationsService", "Logger", function(e, t, n, a, r, o, i, s, c, l) {
<<<<<<< fe2845a1014ecc7e4182707b1f7cc193c684d169
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
=======
}), angular.module("openshiftConsole").directive("deleteLink", [ "$uibModal", "$location", "$filter", "$q", "hashSizeFilter", "APIService", "DataService", "Navigate", "NotificationsService", "Logger", function(e, t, n, r, a, o, i, s, c, l) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
var u = o.getPreferredVersion("horizontalpodautoscalers");
>>>>>>> Update deleteLink directive to use getPreferredVersion
return {
restrict: "E",
scope: {
kind: "@",
group: "@?",
typeDisplayName: "@?",
resourceName: "@",
projectName: "@",
alerts: "=",
displayName: "@",
disableDelete: "=?",
typeNameToConfirm: "=?",
label: "@?",
buttonOnly: "@",
stayOnCurrentPage: "=?",
hpaList: "=?",
success: "=?",
redirectUrl: "@?"
},
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
templateUrl: function(a, b) {
return angular.isDefined(b.buttonOnly) ? "views/directives/delete-button.html" : "views/directives/delete-link.html";
},
replace: !0,
link: function(d, e, k) {
"Project" === k.kind && (d.isProject = !0), d.options = {
deleteHPAs: !0,
deleteImmediately: !1
};
var l = function(a) {
d.stayOnCurrentPage && d.alerts ? d.alerts[a.name] = a.data : i.addNotification(a.data);
}, m = function(a) {
return g["delete"]({
resource: "horizontalpodautoscalers",
group: "autoscaling"
}, a.metadata.name, {
namespace: d.projectName
}).then(function() {
i.addNotification({
type: "success",
message: "Horizontal pod autoscaler " + a.metadata.name + " was marked for deletion."
});
})["catch"](function(b) {
l({
name: a.metadata.name,
data: {
type: "error",
message: "Horizontal pod autoscaler " + a.metadata.name + " could not be deleted."
}
}), j.error("HPA " + a.metadata.name + " could not be deleted.", b);
});
}, n = function() {
if (!d.stayOnCurrentPage) {
if (d.redirectUrl) return void b.url(d.redirectUrl);
if ("Project" !== d.kind) return void h.toResourceList(f.kindToResource(d.kind), d.projectName);
if ("/" === b.path()) return void d.$emit("deleteProject");
var a = URI("/");
b.url(a);
}
};
d.openDeleteModal = function() {
if (!d.disableDelete) {
var b = a.open({
animation: !0,
templateUrl: "views/modals/delete-resource.html",
controller: "DeleteModalController",
scope: d
});
b.result.then(function() {
var a = d.kind, b = d.resourceName, e = d.typeDisplayName || c("humanizeKind")(a), h = _.capitalize(e) + " '" + (d.displayName ? d.displayName : b) + "'", k = "Project" === d.kind ? {} : {
namespace: d.projectName
}, o = {};
d.options.deleteImmediately && (o.gracePeriodSeconds = 0, o.propagationPolicy = null), "servicecatalog.k8s.io" === d.group && (o.propagationPolicy = null), g["delete"]({
resource: f.kindToResource(a),
group: d.group
}, b, k, o).then(function() {
i.addNotification({
type: "success",
message: h + " was marked for deletion."
}), d.success && d.success(), d.options.deleteHPAs && _.each(d.hpaList, m), n();
})["catch"](function(a) {
l({
name: b,
data: {
type: "error",
message: _.capitalize(h) + "' could not be deleted.",
details: c("getErrorDetails")(a)
}
}), j.error(h + " could not be deleted.", a);
});
=======
templateUrl: function(e, t) {
return angular.isDefined(t.buttonOnly) ? "views/directives/delete-button.html" : "views/directives/delete-link.html";
},
replace: !0,
link: function(r, a, d) {
"Project" === d.kind && (r.isProject = !0), r.options = {
deleteHPAs: !0,
deleteImmediately: !1
};
var m = function(e) {
r.stayOnCurrentPage && r.alerts ? r.alerts[e.name] = e.data : c.addNotification(e.data);
}, p = function(e) {
return i.delete(u, e.metadata.name, {
namespace: r.projectName
}).then(function() {
c.addNotification({
type: "success",
message: "Horizontal pod autoscaler " + e.metadata.name + " was marked for deletion."
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
});
}).catch(function(t) {
m({
name: e.metadata.name,
data: {
type: "error",
message: "Horizontal pod autoscaler " + e.metadata.name + " could not be deleted."
}
}), l.error("HPA " + e.metadata.name + " could not be deleted.", t);
});
}, f = function() {
if (!r.stayOnCurrentPage) if (r.redirectUrl) t.url(r.redirectUrl); else if ("Project" === r.kind) if ("/" !== t.path()) {
var e = URI("/");
t.url(e);
} else r.$emit("deleteProject"); else s.toResourceList(o.kindToResource(r.kind), r.projectName);
};
r.openDeleteModal = function() {
r.disableDelete || e.open({
animation: !0,
templateUrl: "views/modals/delete-resource.html",
controller: "DeleteModalController",
scope: r
}).result.then(function() {
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
var e = a.kind, t = a.resourceName, r = (a.typeDisplayName || n("humanizeKind")(e)) + " '" + (a.displayName ? a.displayName : t) + "'", s = "Project" === a.kind ? {} : {
namespace: a.projectName
<<<<<<< fe2845a1014ecc7e4182707b1f7cc193c684d169
<<<<<<< 33eb37eab8df0c17bc226501a924a2dc2b9b2f41
<<<<<<< 952b26bc3acaa89a51e4aad5f965e515d3b007ae
}, u = {};
a.options.deleteImmediately && (u.gracePeriodSeconds = 0, u.propagationPolicy = null), "servicecatalog.k8s.io" === a.group && (u.propagationPolicy = null), i.delete({
resource: o.kindToResource(e),
group: a.group
}, t, s, u).then(function() {
=======
}, g = {};
a.options.deleteImmediately && (g.gracePeriodSeconds = 0, g.propagationPolicy = null), "servicecatalog.k8s.io" === a.group && (g.propagationPolicy = null), i.delete({
resource: o.kindToResource(e),
group: a.group
}, t, u, g).then(function() {
>>>>>>> Add bindings list to resource pages
=======
}, f = {};
a.options.deleteImmediately && (f.gracePeriodSeconds = 0, f.propagationPolicy = null), "servicecatalog.k8s.io" === a.group && (f.propagationPolicy = null), i.delete({
resource: o.kindToResource(e),
group: a.group
}, t, u, f).then(function() {
>>>>>>> Patternfly vertical navigation and project bar
=======
=======
var e = r.kind, t = r.resourceName, a = r.typeDisplayName || n("humanizeKind")(e), s = _.capitalize(a) + " '" + (r.displayName ? r.displayName : t) + "'", u = "Project" === r.kind ? {} : {
namespace: r.projectName
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}, d = {};
r.options.deleteImmediately && (d.gracePeriodSeconds = 0, d.propagationPolicy = null), "servicecatalog.k8s.io" === r.group && (d.propagationPolicy = null), i.delete({
resource: o.kindToResource(e),
group: r.group
}, t, u, d).then(function() {
>>>>>>> Update deleteLink directive to use getPreferredVersion
c.addNotification({
type: "success",
<<<<<<< 602d786018a3879a89789b1214b36a15c51b928b
message: _.capitalize(r) + " was marked for deletion."
}), a.success && a.success(), a.options.deleteHPAs && _.each(a.hpaList, m), p();
=======
message: s + " was marked for deletion."
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< fe2845a1014ecc7e4182707b1f7cc193c684d169
<<<<<<< 9bc0af8cb56dcc9609307333b9424f396867cab5
}), a.success && a.success(), a.options.deleteHPAs && _.each(a.hpaList, p), m();
>>>>>>> Updates for Service Instance & Bindings
=======
}), a.success && a.success(), a.options.deleteHPAs && _.each(a.hpaList, m), p();
>>>>>>> Support EnvFrom in the Env Editors
=======
}), a.success && a.success(), a.options.deleteHPAs && _.each(a.hpaList, p), f();
>>>>>>> Update deleteLink directive to use getPreferredVersion
=======
}), r.success && r.success(), r.options.deleteHPAs && _.each(r.hpaList, p), f();
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}).catch(function(e) {
m({
name: t,
data: {
type: "error",
<<<<<<< 952b26bc3acaa89a51e4aad5f965e515d3b007ae
message: _.capitalize(r) + "' could not be deleted.",
details: n("getErrorDetails")(e)
}, l.error(r + " could not be deleted.", e);
=======
message: _.capitalize(s) + "' could not be deleted.",
details: n("getErrorDetails")(e)
}
}), l.error(s + " could not be deleted.", e);
>>>>>>> Add bindings list to resource pages
});
});
};
}
};
} ]), angular.module("openshiftConsole").directive("editWebhookTriggers", function() {
return {
restrict: "E",
scope: {
type: "@",
typeInfo: "@",
triggers: "=",
bcName: "=",
projectName: "=",
form: "="
},
templateUrl: "views/directives/edit-webhook-triggers.html"
};
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
}), angular.module("openshiftConsole").directive("editConfigMap", [ "DNS1123_SUBDOMAIN_VALIDATION", function(a) {
=======
}), angular.module("openshiftConsole").directive("editConfigMap", [ "DNS1123_SUBDOMAIN_VALIDATION", function(e) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
return {
require: "^form",
restrict: "E",
scope: {
configMap: "=model",
showNameInput: "="
},
templateUrl: "views/directives/edit-config-map.html",
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
link: function(b, c, d, e) {
b.form = e, b.nameValidation = a, b.addItem = function() {
b.data.push({
key: "",
value: ""
}), b.form.$setDirty();
}, b.removeItem = function(a) {
b.data.splice(a, 1), b.form.$setDirty();
}, b.getKeys = function() {
return _.map(b.data, "key");
};
var f = b.$watch("configMap.data", function(a) {
a && (b.data = _.map(a, function(a, b) {
return {
key: b,
value: a
};
}), _.sortBy(b.data, "key"), _.isEmpty(b.data) && b.addItem(), f(), b.$watch("data", function(a) {
var c = {};
_.each(a, function(a) {
c[a.key] = a.value;
}), _.set(b, "configMap.data", c);
=======
link: function(t, n, a, r) {
t.form = r, t.nameValidation = e, t.addItem = function() {
=======
link: function(t, n, r, a) {
t.form = a, t.nameValidation = e, t.addItem = function() {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
t.data.push({
key: "",
value: ""
}), t.form.$setDirty();
}, t.removeItem = function(e) {
t.data.splice(e, 1), t.form.$setDirty();
}, t.getKeys = function() {
return _.map(t.data, "key");
};
var o = t.$watch("configMap.data", function(e) {
e && (t.data = _.map(e, function(e, t) {
return {
key: t,
value: e
};
}), _.sortBy(t.data, "key"), _.isEmpty(t.data) && t.addItem(), o(), t.$watch("data", function(e) {
var n = {};
_.each(e, function(e) {
n[e.key] = e.value;
}), _.set(t, "configMap.data", n);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
}, !0));
});
}
};
<<<<<<< 9bc0af8cb56dcc9609307333b9424f396867cab5
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
} ]), function() {
function a(a, b, c, d) {
var e = this, f = b("canI"), g = b("humanizeKind"), h = _.uniqueId();
e.setFocusClass = "edit-environment-from-set-focus-" + h, e.viewOverlayPanel = function(a) {
e.decodedData = a.data, e.overlayPaneEntryDetails = a, "Secret" === a.kind && (e.decodedData = d.decodeSecretData(a.data)), e.overlayPanelVisible = !0;
}, e.closeOverlayPanel = function() {
e.showSecret = !1, e.overlayPanelVisible = !1;
};
var i = function(a, b) {
a && a.push(b || {});
};
e.onAddRow = function() {
i(e.envFromEntries), c.setFocusOn("." + e.setFocusClass);
}, e.deleteEntry = function(a, b) {
e.envFromEntries && !e.envFromEntries.length || (e.envFromEntries.splice(a, b), e.envFromEntries.length || i(e.envFromEntries), e.updateEntries(e.envFromEntries), e.editEnvironmentFromForm.$setDirty());
}, e.hasOptions = function() {
return !_.isEmpty(e.envFromSelectorOptions);
}, e.hasEntries = function() {
return _.some(e.entries, function(a) {
return _.get(a, "configMapRef.name") || _.get(a, "secretRef.name");
});
}, e.isEnvFromReadonly = function(a) {
return e.isReadonly === !0 || a && a.isReadonly === !0;
}, e.groupByKind = function(a) {
return g(a.kind);
}, e.dragControlListeners = {
accept: function(a, b) {
return a.itemScope.sortableScope.$id === b.$id;
},
orderChanged: function() {
e.editEnvironmentFromForm.$setDirty();
}
}, e.envFromObjectSelected = function(a, b, c) {
var d = {};
switch (c.kind) {
case "Secret":
d.secretRef = {
name: c.metadata.name
}, delete e.envFromEntries[a].configMapRef;
break;

case "ConfigMap":
d.configMapRef = {
name: c.metadata.name
}, delete e.envFromEntries[a].secretRef;
}
b.prefix && (d.prefix = b.prefix), _.assign(e.envFromEntries[a], d), e.updateEntries(e.envFromEntries);
}, e.updateEntries = function(a) {
e.entries = _.filter(a, function(a) {
return a.secretRef || a.configMapRef;
});
};
var j = function() {
var a = {}, b = {};
e.envFromEntries = e.entries || [], e.envFromEntries.length || i(e.envFromEntries), _.each(e.envFromSelectorOptions, function(c) {
switch (c.kind) {
case "ConfigMap":
a[c.metadata.name] = c;
break;

case "Secret":
b[c.metadata.name] = c;
}
}), _.each(e.envFromEntries, function(c) {
var d, e;
if (c.configMapRef && (d = "configMapRef", e = "configmaps"), c.secretRef && (d = "secretRef", e = "secrets"), d && e) {
var g = c[d].name;
c.configMapRef && g in a && (c.selectedEnvFrom = a[g]), c.secretRef && g in b && (c.selectedEnvFrom = b[g]), f(e, "get") || (c.isReadonly = !0);
}
});
};
e.$onInit = function() {
j(), "cannotDelete" in a && (e.cannotDeleteAny = !0), "cannotSort" in a && (e.cannotSort = !0), "showHeader" in a && (e.showHeader = !0), e.envFromEntries && !e.envFromEntries.length && i(e.envFromEntries);
}, e.$onChanges = function(a) {
(a.entries || a.envFromSelectorOptions) && j();
};
}
angular.module("openshiftConsole").component("editEnvironmentFrom", {
controller: [ "$attrs", "$filter", "keyValueEditorUtils", "SecretsService", a ],
bindings: {
entries: "=",
envFromSelectorOptions: "<",
isReadonly: "<?"
},
templateUrl: "views/directives/edit-environment-from.html"
});
}(), angular.module("openshiftConsole").directive("events", [ "$routeParams", "$filter", "DataService", "KeywordService", "ProjectsService", "Logger", "gettext", "gettextCatalog", function(a, b, c, d, e, f, g, h) {
return {
restrict: "E",
scope: {
apiObjects: "=?",
projectContext: "="
},
templateUrl: "views/directives/events.html",
controller: [ "$scope", function(a) {
var b, e = {}, i = [];
a.filter = {
text: ""
};
var j = function(a) {
return _.isEmpty(e) ? a : _.filter(a, function(a) {
return e[a.involvedObject.uid];
});
}, k = [], l = _.get(a, "sortConfig.currentField.id"), m = {
lastTimestamp: !0
}, n = function() {
var b = _.get(a, "sortConfig.currentField.id", "lastTimestamp");
l !== b && (l = b, a.sortConfig.isAscending = !m[l]);
var c = a.sortConfig.isAscending ? "asc" : "desc";
k = _.orderBy(a.events, [ b, "metadata.resourceVersion" ], [ c, c ]);
}, o = [], p = function() {
a.filterExpressions = o = d.generateKeywords(_.get(a, "filter.text"));
}, q = [ "reason", "message", "type" ];
a.resourceKind && a.resourceName || q.splice(0, 0, "involvedObject.name", "involvedObject.kind");
var r = function() {
a.filteredEvents = d.filterForKeywords(k, q, o);
};
a.$watch("filter.text", _.debounce(function() {
p(), a.$evalAsync(r);
}, 50, {
maxWait: 250
}));
var s = function() {
n(), r();
}, t = _.debounce(function() {
b && a.$evalAsync(function() {
a.events = j(b), s();
=======
} ]), angular.module("openshiftConsole").directive("events", [ "$routeParams", "$filter", "DataService", "KeywordService", "ProjectsService", "Logger", function(e, t, n, a, r, o) {
=======
} ]), function() {
angular.module("openshiftConsole").component("editEnvironmentFrom", {
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< a529e89e7735ca9b5ebc96c781b39eb73a4302b8
<<<<<<< 4bdfc5346f158d79461ae79781718a557897b98f
controller: [ "$attrs", "$filter", "keyValueEditorUtils", function(e, t, n) {
var a = this, r = t("canI"), o = t("humanizeKind"), i = _.uniqueId();
a.setFocusClass = "edit-environment-from-set-focus-" + i;
var s = function(e, t) {
e && e.push(t || {});
};
a.onAddRow = function() {
s(a.envFromEntries), n.setFocusOn("." + a.setFocusClass);
}, a.deleteEntry = function(e, t) {
a.envFromEntries && !a.envFromEntries.length || (a.envFromEntries.splice(e, t), !a.envFromEntries.length && a.addRowLink && s(a.envFromEntries), a.updateEntries(a.envFromEntries), a.editEnvironmentFromForm.$setDirty());
}, a.isEnvFromReadonly = function(e) {
return a.isReadonlyAny || !0 === e.isReadonlyValue || (e.secretRef || e.configMapRef) && !e.selectedEnvFrom || _.isEmpty(a.envFromSelectorOptions);
}, a.groupByKind = function(e) {
return o(e.kind);
}, a.dragControlListeners = {
=======
controller: [ "$attrs", "$filter", "keyValueEditorUtils", "SecretsService", function(e, t, n, a) {
var r = this, o = t("canI"), i = t("humanizeKind"), s = _.uniqueId(), c = /^[A-Za-z_][A-Za-z0-9_]*$/;
r.setFocusClass = "edit-environment-from-set-focus-" + s, r.isEnvVarInvalid = function(e) {
return !c.test(e);
}, r.hasInvalidEnvVar = function(e) {
=======
controller: [ "$attrs", "$filter", "$scope", "keyValueEditorUtils", "SecretsService", function(e, t, n, a, r) {
=======
controller: [ "$attrs", "$filter", "$scope", "keyValueEditorUtils", "SecretsService", function(e, t, n, r, a) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
var o = this, i = t("canI"), s = t("humanizeKind"), c = _.uniqueId(), l = /^[A-Za-z_][A-Za-z0-9_]*$/, u = !1;
o.setFocusClass = "edit-environment-from-set-focus-" + c, o.isEnvVarInvalid = function(e) {
return !l.test(e);
}, o.hasInvalidEnvVar = function(e) {
>>>>>>> Bug 1515527 - Correctly clear envFrom changes
return _.some(e, function(e, t) {
return o.isEnvVarInvalid(t);
});
}, o.viewOverlayPanel = function(e) {
o.decodedData = e.data, o.overlayPaneEntryDetails = e, "Secret" === e.kind && (o.decodedData = a.decodeSecretData(e.data)), o.overlayPanelVisible = !0;
}, o.closeOverlayPanel = function() {
o.showSecret = !1, o.overlayPanelVisible = !1;
};
var d = function(e, t) {
e && e.push(t || {});
};
o.onAddRow = function() {
d(o.envFromEntries), r.setFocusOn("." + o.setFocusClass);
}, o.deleteEntry = function(e, t) {
o.envFromEntries && !o.envFromEntries.length || (o.envFromEntries.splice(e, t), o.envFromEntries.length || d(o.envFromEntries), o.updateEntries(o.envFromEntries), o.editEnvironmentFromForm.$setDirty());
}, o.hasOptions = function() {
return !_.isEmpty(o.envFromSelectorOptions);
}, o.hasEntries = function() {
return _.some(o.entries, function(e) {
return _.get(e, "configMapRef.name") || _.get(e, "secretRef.name");
});
<<<<<<< a529e89e7735ca9b5ebc96c781b39eb73a4302b8
}, r.isEnvFromReadonly = function(e) {
return !0 === r.isReadonly || e && !0 === e.isReadonly;
}, r.groupByKind = function(e) {
return i(e.kind);
}, r.dragControlListeners = {
>>>>>>> Reveal and hide secrets
=======
}, o.isEnvFromReadonly = function(e) {
return !0 === o.isReadonly || e && !0 === e.isReadonly;
}, o.groupByKind = function(e) {
return s(e.kind);
}, o.dragControlListeners = {
>>>>>>> Bug 1515527 - Correctly clear envFrom changes
accept: function(e, t) {
return e.itemScope.sortableScope.$id === t.$id;
},
orderChanged: function() {
o.editEnvironmentFromForm.$setDirty();
}
}, o.envFromObjectSelected = function(e, t, n) {
var r = {};
switch (n.kind) {
case "Secret":
r.secretRef = {
name: n.metadata.name
}, delete o.envFromEntries[e].configMapRef;
break;

case "ConfigMap":
r.configMapRef = {
name: n.metadata.name
}, delete o.envFromEntries[e].secretRef;
}
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< a529e89e7735ca9b5ebc96c781b39eb73a4302b8
<<<<<<< 4bdfc5346f158d79461ae79781718a557897b98f
_.assign(a.envFromEntries[e], r), a.updateEntries(a.envFromEntries);
}, a.updateEntries = function(e) {
a.entries = _.filter(e, function(e) {
return e.secretRef || e.configMapRef;
});
};
var c = function(e) {
a.envFromEntries = e || [], a.envFromEntries.length || s(a.envFromEntries), _.each(a.envFromEntries, function(e) {
e && (e.configMapRef && !r("configmaps", "get") && (e.isReadonlyValue = !0), e.secretRef && !r("secrets", "get") && (e.isReadonlyValue = !0));
});
}, l = function(e) {
var t;
switch (e.kind) {
=======
t.prefix && (a.prefix = t.prefix), _.assign(r.envFromEntries[e], a), r.updateEntries(r.envFromEntries);
}, r.updateEntries = function(e) {
r.entries = _.filter(e, function(e) {
=======
t.prefix && (a.prefix = t.prefix), _.assign(o.envFromEntries[e], a), o.updateEntries(o.envFromEntries);
=======
t.prefix && (r.prefix = t.prefix), _.assign(o.envFromEntries[e], r), o.updateEntries(o.envFromEntries);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}, o.updateEntries = function(e) {
u = !0, o.entries = _.filter(e, function(e) {
>>>>>>> Bug 1515527 - Correctly clear envFrom changes
return e.secretRef || e.configMapRef;
});
};
var m = function() {
var e = {}, t = {};
o.envFromEntries = o.entries || [], o.envFromEntries.length || d(o.envFromEntries), _.each(o.envFromSelectorOptions, function(n) {
switch (n.kind) {
>>>>>>> Reveal and hide secrets
case "ConfigMap":
t = _.find(a.envFromEntries, {
configMapRef: {
name: e.metadata.name
}
});
break;

case "Secret":
t = _.find(a.envFromEntries, {
secretRef: {
name: e.metadata.name
}
<<<<<<< a529e89e7735ca9b5ebc96c781b39eb73a4302b8
<<<<<<< 4bdfc5346f158d79461ae79781718a557897b98f
});
=======
}), _.each(r.envFromEntries, function(n) {
var a, r;
if (n.configMapRef && (a = "configMapRef", r = "configmaps"), n.secretRef && (a = "secretRef", r = "secrets"), a && r) {
var i = n[a].name;
n.configMapRef && i in e && (n.selectedEnvFrom = e[i]), n.secretRef && i in t && (n.selectedEnvFrom = t[i]), o(r, "get") || (n.isReadonly = !0);
>>>>>>> Reveal and hide secrets
=======
}), _.each(o.envFromEntries, function(n) {
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
var a, r;
if (n.configMapRef && (a = "configMapRef", r = "configmaps"), n.secretRef && (a = "secretRef", r = "secrets"), a && r) {
var o = n[a].name;
n.configMapRef && o in e && (n.selectedEnvFrom = e[o]), n.secretRef && o in t && (n.selectedEnvFrom = t[o]), i(r, "get") || (n.isReadonly = !0);
>>>>>>> Bug 1515527 - Correctly clear envFrom changes
=======
var r, a;
if (n.configMapRef && (r = "configMapRef", a = "configmaps"), n.secretRef && (r = "secretRef", a = "secrets"), r && a) {
var o = n[r].name;
n.configMapRef && o in e && (n.selectedEnvFrom = e[o]), n.secretRef && o in t && (n.selectedEnvFrom = t[o]), i(a, "get") || (n.isReadonly = !0);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}
return t;
};
a.checkEntries = function(e) {
return !!l(e);
};
var u = function(e, t) {
a.cannotAdd = a.isReadonlyAny || _.isEmpty(t), t && _.each(t, function(e) {
var t = l(e);
t && _.set(t, "selectedEnvFrom", e);
});
};
<<<<<<< a529e89e7735ca9b5ebc96c781b39eb73a4302b8
<<<<<<< 4bdfc5346f158d79461ae79781718a557897b98f
a.$onInit = function() {
c(a.entries), u(a.entries, a.envFromSelectorOptions), "cannotDelete" in e && (a.cannotDeleteAny = !0), "cannotSort" in e && (a.cannotSort = !0), "isReadonly" in e && (a.isReadonlyAny = !0), "showHeader" in e && (a.showHeader = !0), a.envFromEntries && !a.envFromEntries.length && s(a.envFromEntries);
}, a.$onChanges = function(e) {
e.entries && c(e.entries.currentValue), e.envFromSelectorOptions && u(a.envFromEntries, e.envFromSelectorOptions.currentValue);
=======
r.$onInit = function() {
u(), "cannotDelete" in e && (r.cannotDeleteAny = !0), "cannotSort" in e && (r.cannotSort = !0), "showHeader" in e && (r.showHeader = !0), r.envFromEntries && !r.envFromEntries.length && l(r.envFromEntries);
}, r.$onChanges = function(e) {
<<<<<<< 0933cf1365f93cd28f584ec4cc173ec5bf00b351
(e.entries || e.envFromSelectorOptions) && l();
>>>>>>> Reveal and hide secrets
=======
(e.entries || e.envFromSelectorOptions) && u();
>>>>>>> Bug 1506998 - DC's environment tab not showing image secrets properly
=======
o.$onInit = function() {
m(), "cannotDelete" in e && (o.cannotDeleteAny = !0), "cannotSort" in e && (o.cannotSort = !0), "showHeader" in e && (o.showHeader = !0), o.envFromEntries && !o.envFromEntries.length && d(o.envFromEntries);
}, n.$watch("$ctrl.entries", function() {
u ? u = !1 : m();
}), o.$onChanges = function(e) {
e.envFromSelectorOptions && m();
>>>>>>> Bug 1515527 - Correctly clear envFrom changes
};
} ],
bindings: {
addRowLink: "@",
entries: "=",
envFromSelectorOptions: "<",
selectorPlaceholder: "@"
},
templateUrl: "views/directives/edit-environment-from.html"
});
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< 88b8cf7a2bcae1a2c99560ddfbd223b41c7bc95c
}(), angular.module("openshiftConsole").directive("events", [ "$routeParams", "$filter", "DataService", "KeywordService", "ProjectsService", "Logger", function(e, t, n, a, r, o) {
>>>>>>> Support EnvFrom in the Env Editors
=======
}(), angular.module("openshiftConsole").directive("events", [ "$routeParams", "$filter", "APIService", "DataService", "KeywordService", "Logger", function(e, t, n, a, r, o) {
>>>>>>> Update events directive to use getPreferredVersion
=======
}(), angular.module("openshiftConsole").directive("events", [ "$routeParams", "$filter", "APIService", "DataService", "KeywordService", "Logger", function(e, t, n, r, a, o) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
return {
restrict: "E",
scope: {
apiObjects: "=?",
projectContext: "="
},
templateUrl: "views/directives/events.html",
controller: [ "$scope", function(e) {
var t, i = {}, s = [], c = n.getPreferredVersion("events");
e.filter = {
text: ""
};
var l = function(e) {
return _.isEmpty(i) ? e : _.filter(e, function(e) {
return i[e.involvedObject.uid];
});
}, u = [], d = _.get(e, "sortConfig.currentField.id"), m = {
lastTimestamp: !0
}, p = function() {
var t = _.get(e, "sortConfig.currentField.id", "lastTimestamp");
d !== t && (d = t, e.sortConfig.isAscending = !m[d]);
var n = e.sortConfig.isAscending ? "asc" : "desc";
<<<<<<< 88b8cf7a2bcae1a2c99560ddfbd223b41c7bc95c
c = _.orderBy(e.events, [ t ], [ n ]);
}, m = [], p = function() {
e.filterExpressions = m = a.generateKeywords(_.get(e, "filter.text"));
}, f = [ "reason", "message", "type" ];
e.resourceKind && e.resourceName || f.splice(0, 0, "involvedObject.name", "involvedObject.kind");
var g = function() {
e.filteredEvents = a.filterForKeywords(c, f, m);
=======
u = _.orderBy(e.events, [ t, "metadata.resourceVersion" ], [ n, n ]);
}, f = [], g = function() {
e.filterExpressions = f = a.generateKeywords(_.get(e, "filter.text"));
}, v = [ "reason", "message", "type" ];
e.resourceKind && e.resourceName || v.splice(0, 0, "involvedObject.name", "involvedObject.kind");
var h = function() {
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
e.filteredEvents = r.filterForKeywords(u, v, f);
>>>>>>> Update events directive to use getPreferredVersion
=======
e.filteredEvents = a.filterForKeywords(u, v, f);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
};
e.$watch("filter.text", _.debounce(function() {
g(), e.$evalAsync(h);
}, 50, {
maxWait: 250
}));
var y = function() {
p(), h();
}, b = _.debounce(function() {
t && e.$evalAsync(function() {
<<<<<<< 88b8cf7a2bcae1a2c99560ddfbd223b41c7bc95c
<<<<<<< 3087d5859f05def6301fced3a013ac9165fd8c7a
e.events = s(t), h();
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
e.events = s(t), v();
>>>>>>> Add SVG icons
=======
e.events = l(t), y();
>>>>>>> Update events directive to use getPreferredVersion
});
}, 250, {
leading: !0,
trailing: !0,
maxWait: 1e3
});
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
a.$watch("apiObjects", function(c) {
e = {}, _.each(c, function(a) {
var b = _.get(a, "metadata.uid");
b && (e[a.metadata.uid] = !0);
}), a.showKindAndName = 1 !== _.size(e), b && t();
}), a.$watch("showKindAndName", function(b) {
a.sortConfig = {
fields: [ {
id: "lastTimestamp",
title: h.getString(g("Time")),
sortType: "alpha"
}, {
id: "type",
title: h.getString(g("Severity")),
sortType: "alpha"
}, {
id: "reason",
title: h.getString(g("Reason")),
sortType: "alpha"
}, {
id: "message",
title: h.getString(g("Message")),
sortType: "alpha"
}, {
id: "count",
title: h.getString(g("Count")),
sortType: "numeric"
} ],
isAscending: !0,
onSortChange: s
}, b && a.sortConfig.fields.splice(1, 0, {
id: "involvedObject.name",
title: h.getString(g("Name")),
sortType: "alpha"
}, {
id: "involvedObject.kind",
title: h.getString(g("Kind")),
sortType: "alpha"
});
}), i.push(c.watch("events", a.projectContext, function(c) {
b = c.by("metadata.name"), t(), f.log("events (subscribe)", a.filteredEvents);
}, {
skipDigest: !0
})), a.$on("$destroy", function() {
c.unwatchAll(i);
=======
e.$watch("apiObjects", function(n) {
i = {}, _.each(n, function(e) {
_.get(e, "metadata.uid") && (i[e.metadata.uid] = !0);
}), e.showKindAndName = 1 !== _.size(i), t && b();
}), e.$watch("showKindAndName", function(t) {
e.sortConfig = {
fields: [ {
id: "lastTimestamp",
title: "Time",
sortType: "alpha"
}, {
id: "type",
title: "Severity",
sortType: "alpha"
}, {
id: "reason",
title: "Reason",
sortType: "alpha"
}, {
id: "message",
title: "Message",
sortType: "alpha"
}, {
id: "count",
title: "Count",
sortType: "numeric"
} ],
isAscending: !0,
onSortChange: y
}, t && e.sortConfig.fields.splice(1, 0, {
id: "involvedObject.name",
title: "Name",
sortType: "alpha"
}, {
id: "involvedObject.kind",
title: "Kind",
sortType: "alpha"
});
}), s.push(r.watch(c, e.projectContext, function(n) {
t = n.by("metadata.name"), b(), o.log("events (subscribe)", e.filteredEvents);
}, {
skipDigest: !0
})), e.$on("$destroy", function() {
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< 88b8cf7a2bcae1a2c99560ddfbd223b41c7bc95c
n.unwatchAll(i);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
a.unwatchAll(s);
>>>>>>> Update events directive to use getPreferredVersion
=======
r.unwatchAll(s);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
});
} ]
};
} ]), angular.module("openshiftConsole").directive("eventsSidebar", [ "$rootScope", "APIService", "DataService", "Logger", function(e, t, n, r) {
var a = t.getPreferredVersion("events");
return {
restrict: "E",
scope: {
projectContext: "=",
collapsed: "="
},
templateUrl: "views/directives/events-sidebar.html",
<<<<<<< d68e7ad5932979ce26fc42422767fc0acd95bd44
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
controller: [ "$scope", function(d) {
var e = [];
e.push(a.watch("events", d.projectContext, function(a) {
var c = a.by("metadata.name");
d.events = _.orderBy(c, [ "lastTimestamp" ], [ "desc" ]), d.warningCount = _.size(_.filter(c, {
type: "Warning"
})), b.log("events (subscribe)", d.events);
})), d.highlightedEvents = {}, d.collapseSidebar = function() {
d.collapsed = !0;
=======
controller: [ "$scope", function(a) {
var r = [];
r.push(e.watch("events", a.projectContext, function(e) {
=======
controller: [ "$scope", function(t) {
var o = [];
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
o.push(n.watch(r, t.projectContext, function(e) {
>>>>>>> Update directives/eventsSidebar to use getPreferredVersion
var n = e.by("metadata.name");
t.events = _.orderBy(n, [ "lastTimestamp" ], [ "desc" ]), t.warningCount = _.size(_.filter(n, {
type: "Warning"
<<<<<<< d68e7ad5932979ce26fc42422767fc0acd95bd44
})), t.log("events (subscribe)", a.events);
})), a.highlightedEvents = {}, a.collapseSidebar = function() {
a.collapsed = !0;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
})), a.log("events (subscribe)", t.events);
=======
o.push(n.watch(a, t.projectContext, function(e) {
var n = e.by("metadata.name");
t.events = _.orderBy(n, [ "lastTimestamp" ], [ "desc" ]), t.warningCount = _.size(_.filter(n, {
type: "Warning"
})), r.log("events (subscribe)", t.events);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
})), t.highlightedEvents = {}, t.collapseSidebar = function() {
t.collapsed = !0;
>>>>>>> Update directives/eventsSidebar to use getPreferredVersion
};
var i = [];
i.push(e.$on("event.resource.highlight", function(e, n) {
var r = _.get(n, "kind"), a = _.get(n, "metadata.name");
r && a && _.each(t.events, function(e) {
e.involvedObject.kind === r && e.involvedObject.name === a && (t.highlightedEvents[r + "/" + a] = !0);
});
})), i.push(e.$on("event.resource.clear-highlight", function(e, n) {
var r = _.get(n, "kind"), a = _.get(n, "metadata.name");
r && a && _.each(t.events, function(e) {
e.involvedObject.kind === r && e.involvedObject.name === a && (t.highlightedEvents[r + "/" + a] = !1);
});
})), t.$on("$destroy", function() {
n.unwatchAll(o), _.each(i, function(e) {
e();
}), i = null;
});
} ]
};
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< 298808b20c66df2b25a69a00c3517d94084f9ead
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
} ]), angular.module("openshiftConsole").directive("eventsBadge", [ "$filter", "DataService", "Logger", function(a, b, c) {
=======
} ]), angular.module("openshiftConsole").directive("eventsBadge", [ "$filter", "DataService", "Logger", function(e, t, n) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
} ]), angular.module("openshiftConsole").directive("eventsBadge", [ "$filter", "APIService", "DataService", "Logger", function(e, t, n, a) {
var r = t.getPreferredVersion("events");
>>>>>>> Update direcives/eventsBadge to use getPreferredVersion
=======
} ]), angular.module("openshiftConsole").directive("eventsBadge", [ "$filter", "APIService", "DataService", "Logger", function(e, t, n, r) {
var a = t.getPreferredVersion("events");
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
return {
restrict: "E",
scope: {
projectContext: "=",
sidebarCollapsed: "="
},
templateUrl: "views/directives/events-badge.html",
<<<<<<< 298808b20c66df2b25a69a00c3517d94084f9ead
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
controller: [ "$scope", function(d) {
var e = [], f = a("orderObjectsByDate");
e.push(b.watch("events", d.projectContext, function(a) {
var b = a.by("metadata.name");
d.events = f(b, !0), d.warningCount = _.size(_.filter(b, {
type: "Warning"
})), d.normalCount = _.size(_.filter(b, {
type: "Normal"
})), c.log("events (subscribe)", d.events);
})), d.expandSidebar = function() {
d.sidebarCollapsed = !1;
}, d.$on("$destroy", function() {
b.unwatchAll(e);
});
} ]
};
} ]), angular.module("openshiftConsole").directive("fromFile", [ "$filter", "$location", "$q", "$uibModal", "APIService", "CachedTemplateService", "DataService", "Navigate", "NotificationsService", "QuotaService", "SecurityCheckService", "TaskList", "ProjectsService", "gettext", "gettextCatalog", function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
return {
restrict: "E",
scope: {
=======
controller: [ "$scope", function(a) {
var r = [], o = e("orderObjectsByDate");
r.push(t.watch("events", a.projectContext, function(e) {
var t = e.by("metadata.name");
a.events = o(t, !0), a.warningCount = _.size(_.filter(t, {
=======
controller: [ "$scope", function(t) {
var o = [], i = e("orderObjectsByDate");
o.push(n.watch(a, t.projectContext, function(e) {
var n = e.by("metadata.name");
t.events = i(n, !0), t.warningCount = _.size(_.filter(n, {
>>>>>>> Update direcives/eventsBadge to use getPreferredVersion
type: "Warning"
})), t.normalCount = _.size(_.filter(n, {
type: "Normal"
})), r.log("events (subscribe)", t.events);
})), t.expandSidebar = function() {
t.sidebarCollapsed = !1;
}, t.$on("$destroy", function() {
n.unwatchAll(o);
});
} ]
};
} ]), angular.module("openshiftConsole").directive("fromFile", [ "$filter", "$location", "$q", "$uibModal", "APIService", "CachedTemplateService", "DataService", "Navigate", "NotificationsService", "QuotaService", "SecurityCheckService", "TaskList", "ProjectsService", function(e, t, n, r, a, o, i, s, c, l, u, d, m) {
return {
restrict: "E",
scope: {
<<<<<<< 7d5cc388b34d6a87a5e2ae6b26f6b146dae1daa3
context: "=",
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
>>>>>>> Adding Deploy Image and Import YAML / JSON functionality to catalog
project: "=",
isDialog: "="
},
templateUrl: "views/directives/from-file.html",
<<<<<<< 9bc0af8cb56dcc9609307333b9424f396867cab5
<<<<<<< 602d786018a3879a89789b1214b36a15c51b928b
<<<<<<< 7d5cc388b34d6a87a5e2ae6b26f6b146dae1daa3
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
controller: [ "$scope", function(p) {
function q(a) {
return !!a.kind || (p.error = {
message: "Resource is missing kind field."
}, !1);
}
function r(a) {
return !!p.isList || (a.metadata ? a.metadata.name ? !a.metadata.namespace || a.metadata.namespace === p.input.selectedProject.metadata.name || (p.error = {
message: a.kind + " " + a.metadata.name + " can't be created in project " + a.metadata.namespace + ". Can't create resource in different projects."
}, !1) : (p.error = {
message: "Resource name is missing in metadata field."
}, !1) : (p.error = {
message: "Resource is missing metadata field."
}, !1));
}
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
function s() {
var a = d.open({
=======
function v() {
r.open({
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
animation: !0,
templateUrl: "views/modals/process-or-save-template.html",
controller: "ProcessOrSaveTemplateModalController",
scope: p
});
a.result.then(function() {
p.templateOptions.add ? u() : (f.setTemplate(p.resourceList[0]), v());
});
}
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
function t() {
var a = d.open({
=======
function h() {
r.open({
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
animation: !0,
templateUrl: "views/modals/confirm-replace.html",
controller: "ConfirmReplaceModalController",
scope: p
});
a.result.then(function() {
j.getLatestQuotaAlerts(p.createResources, {
namespace: p.input.selectedProject.metadata.name
}).then(G);
});
}
function u() {
var a = p.createResources.length, b = p.updateResources.length;
if (p.resourceKind.endsWith("List")) {
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< 247459038ac366429876741dd447ec652f2f5e7d
var d = [];
b > 0 && d.push(z()), a > 0 && d.push(y()), c.all(d).then(v);
} else x();
=======
var a = [];
t > 0 && a.push(P()), e > 0 && a.push(w()), n.all(a).then(b);
=======
var r = [];
t > 0 && r.push(P()), e > 0 && r.push(w()), n.all(r).then(b);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
} else C();
<<<<<<< 75fc56b9e42e29e1492befd08624dd0e5dade866
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
=======
>>>>>>> Adding label filter to ste secrets page
}
function v() {
var a, c;
F(), "Template" === p.resourceKind && p.templateOptions.process && !p.errorOccurred ? p.isDialog ? p.$emit("fileImportedFromYAMLOrJSON", {
project: p.input.selectedProject,
template: p.resource
}) : (c = p.templateOptions.add || p.updateResources.length > 0 ? p.input.selectedProject.metadata.name : "", a = h.createFromTemplateURL(p.resource, p.input.selectedProject.metadata.name, {
namespace: c
}), b.url(a)) : p.isDialog ? p.$emit("fileImportedFromYAMLOrJSON", {
project: p.input.selectedProject,
resource: p.resource,
isList: p.isList
}) : (a = h.projectOverviewURL(p.input.selectedProject.metadata.name), b.url(a));
}
<<<<<<< 75fc56b9e42e29e1492befd08624dd0e5dade866
<<<<<<< 247459038ac366429876741dd447ec652f2f5e7d
function w(a) {
var b = e.objectToResourceGroupVersion(a);
return b ? e.apiInfo(b) ? g.get(b, a.metadata.name, {
=======
=======
>>>>>>> Adding label filter to ste secrets page
function S(e) {
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
var t = r.objectToResourceGroupVersion(e);
return t ? r.apiInfo(t) ? i.get(t, e.metadata.name, {
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
namespace: p.input.selectedProject.metadata.name
}, {
errorNotification: !1
}).then(function(b) {
var c = angular.copy(a), d = angular.copy(b.metadata);
d.annotations = a.metadata.annotations, d.labels = a.metadata.labels, c.metadata = d, p.updateResources.push(c);
=======
var t = a.objectToResourceGroupVersion(e);
return t ? a.apiInfo(t) ? i.get(t, e.metadata.name, {
namespace: p.input.selectedProject.metadata.name
}, {
errorNotification: !1
}).then(function(t) {
var n = angular.copy(e), r = angular.copy(t.metadata);
r.annotations = e.metadata.annotations, r.labels = e.metadata.labels, n.metadata = r, p.updateResources.push(n);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}, function() {
p.createResources.push(a);
}) : (p.errorOccurred = !0, void (p.error = {
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
message: e.unsupportedObjectKindOrVersion(a)
})) : (p.errorOccurred = !0, void (p.error = {
message: e.invalidObjectKindOrVersion(a)
=======
message: a.unsupportedObjectKindOrVersion(e)
})) : (p.errorOccurred = !0, void (p.error = {
message: a.invalidObjectKindOrVersion(e)
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}));
}
<<<<<<< 75fc56b9e42e29e1492befd08624dd0e5dade866
<<<<<<< 247459038ac366429876741dd447ec652f2f5e7d
function x() {
var b;
_.isEmpty(p.createResources) ? (b = _.head(p.updateResources), g.update(e.kindToResource(b.kind), b.metadata.name, b, {
=======
=======
>>>>>>> Adding label filter to ste secrets page
function C() {
var t;
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
_.isEmpty(p.createResources) ? (t = _.head(p.updateResources), i.update(r.kindToResource(t.kind), t.metadata.name, t, {
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
=======
_.isEmpty(p.createResources) ? (t = _.head(p.updateResources), i.update(a.kindToResource(t.kind), t.metadata.name, t, {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
namespace: p.input.selectedProject.metadata.name
}).then(function() {
if (!p.isDialog) {
var a = B(b.kind);
i.addNotification({
type: "success",
message: _.capitalize(a) + " " + b.metadata.name + " was successfully updated."
});
}
v();
}, function(c) {
i.addNotification({
id: "from-file-error",
type: "error",
message: "Unable to update the " + B(b.kind) + " '" + b.metadata.name + "'.",
details: a("getErrorDetails")(c)
});
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
})) : (b = _.head(p.createResources), g.create(e.kindToResource(b.kind), null, b, {
namespace: p.input.selectedProject.metadata.name
}).then(function() {
if (!p.isDialog) {
var a = B(b.kind);
i.addNotification({
type: "success",
message: _.capitalize(a) + " " + b.metadata.name + " was successfully created."
});
}
v();
}, function(c) {
i.addNotification({
id: "from-file-error",
type: "error",
message: "Unable to create the " + B(b.kind) + " '" + b.metadata.name + "'.",
details: a("getErrorDetails")(c)
});
}));
}
function y() {
var a = {
started: o.getString(n("Creating resources in project ")) + I(p.input.selectedProject),
success: o.getString(n("Creating resources in project ")) + I(p.input.selectedProject),
failure: o.getString(n("Failed to create some resources in project ")) + I(p.input.selectedProject)
}, b = {};
l.add(a, b, p.input.selectedProject.metadata.name, function() {
var a = c.defer();
return g.batch(p.createResources, {
namespace: p.input.selectedProject.metadata.name
}, "create").then(function(b) {
var c = [], d = !1;
if (b.failure.length > 0) d = !0, p.errorOccurred = !0, b.failure.forEach(function(a) {
c.push({
type: "error",
message: "Cannot create " + B(a.object.kind) + ' "' + a.object.metadata.name + '". ',
details: a.data.message
});
}), b.success.forEach(function(a) {
c.push({
type: "success",
message: "Created " + B(a.kind) + ' "' + a.metadata.name + '" successfully. '
});
}); else {
var e;
e = p.isList ? "All items in list were created successfully." : B(p.resourceKind) + " " + p.resourceName + " was successfully created.", c.push({
type: "success",
message: e
});
}
a.resolve({
alerts: c,
hasErrors: d
=======
controller: [ "$scope", function(m) {
function p(e) {
return !!e.kind || (m.error = {
=======
controller: [ "$scope", function(p) {
function f(e) {
return !!e.kind || (p.error = {
>>>>>>> Adding Deploy Image and Import YAML / JSON functionality to catalog
=======
controller: [ "$scope", function(m) {
function f(e) {
return !!e.kind || (m.error = {
>>>>>>> Updates for Service Instance & Bindings
=======
controller: [ "$scope", function(p) {
function f(e) {
return !!e.kind || (p.error = {
>>>>>>> Support EnvFrom in the Env Editors
message: "Resource is missing kind field."
}, !1);
}
function g(e) {
return !!p.isList || (e.metadata ? e.metadata.name ? !e.metadata.namespace || e.metadata.namespace === p.input.selectedProject.metadata.name || (p.error = {
message: e.kind + " " + e.metadata.name + " can't be created in project " + e.metadata.namespace + ". Can't create resource in different projects."
}, !1) : (p.error = {
message: "Resource name is missing in metadata field."
}, !1) : (p.error = {
message: "Resource is missing metadata field."
}, !1));
}
function v() {
a.open({
animation: !0,
templateUrl: "views/modals/process-or-save-template.html",
controller: "ProcessOrSaveTemplateModalController",
scope: p
}).result.then(function() {
p.templateOptions.add ? y() : (o.setTemplate(p.resourceList[0]), b());
});
}
function h() {
a.open({
animation: !0,
templateUrl: "views/modals/confirm-replace.html",
controller: "ConfirmReplaceModalController",
scope: p
}).result.then(function() {
l.getLatestQuotaAlerts(p.createResources, {
namespace: p.input.selectedProject.metadata.name
}).then(N);
});
}
function y() {
var e = p.createResources.length, t = p.updateResources.length;
if (p.resourceKind.endsWith("List")) {
var a = [];
t > 0 && a.push(k()), e > 0 && a.push(w()), n.all(a).then(b);
} else S();
}
function b() {
var e, n;
T(), "Template" === p.resourceKind && p.templateOptions.process && !p.errorOccurred ? p.isDialog ? p.$emit("fileImportedFromYAMLOrJSON", {
project: p.input.selectedProject,
template: p.resource
}) : (n = p.templateOptions.add || p.updateResources.length > 0 ? p.input.selectedProject.metadata.name : "", e = s.createFromTemplateURL(p.resource, p.input.selectedProject.metadata.name, {
namespace: n
}), t.url(e)) : p.isDialog ? p.$emit("fileImportedFromYAMLOrJSON", {
project: p.input.selectedProject,
resource: p.resource,
isList: p.isList
}) : (e = s.projectOverviewURL(p.input.selectedProject.metadata.name), t.url(e));
}
function C(e) {
var t = r.objectToResourceGroupVersion(e);
return t ? r.apiInfo(t) ? i.get(t, e.metadata.name, {
namespace: p.input.selectedProject.metadata.name
}, {
errorNotification: !1
}).then(function(t) {
var n = angular.copy(e), a = angular.copy(t.metadata);
a.annotations = e.metadata.annotations, a.labels = e.metadata.labels, n.metadata = a, p.updateResources.push(n);
}, function() {
p.createResources.push(e);
}) : (p.errorOccurred = !0, void (p.error = {
message: r.unsupportedObjectKindOrVersion(e)
})) : (p.errorOccurred = !0, void (p.error = {
message: r.invalidObjectKindOrVersion(e)
}));
}
function S() {
var t;
_.isEmpty(p.createResources) ? (t = _.head(p.updateResources), i.update(r.kindToResource(t.kind), t.metadata.name, t, {
namespace: p.input.selectedProject.metadata.name
}).then(function() {
if (!p.isDialog) {
var e = k(t.kind);
c.addNotification({
type: "success",
message: _.capitalize(e) + " " + t.metadata.name + " was successfully updated."
});
}
b();
}, function(n) {
c.addNotification({
id: "from-file-error",
type: "error",
message: "Unable to update the " + k(t.kind) + " '" + t.metadata.name + "'.",
details: e("getErrorDetails")(n)
});
})) : (t = _.head(p.createResources), i.create(r.kindToResource(t.kind), null, t, {
=======
})) : (t = _.head(p.createResources), i.create(a.kindToResource(t.kind), null, t, {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
namespace: p.input.selectedProject.metadata.name
}).then(function() {
if (!p.isDialog) {
var e = k(t.kind);
c.addNotification({
type: "success",
message: _.capitalize(e) + " " + t.metadata.name + " was successfully created."
});
}
b();
}, function(n) {
c.addNotification({
id: "from-file-error",
type: "error",
message: "Unable to create the " + k(t.kind) + " '" + t.metadata.name + "'.",
details: e("getErrorDetails")(n)
});
}));
}
function w() {
var e = {
started: "Creating resources in project " + A(p.input.selectedProject),
success: "Creating resources in project " + A(p.input.selectedProject),
failure: "Failed to create some resources in project " + A(p.input.selectedProject)
}, t = {};
d.add(e, t, p.input.selectedProject.metadata.name, function() {
var e = n.defer();
return i.batch(p.createResources, {
namespace: p.input.selectedProject.metadata.name
}, "create").then(function(t) {
var n = [], r = !1;
if (t.failure.length > 0) r = !0, p.errorOccurred = !0, t.failure.forEach(function(e) {
n.push({
type: "error",
message: "Cannot create " + k(e.object.kind) + ' "' + e.object.metadata.name + '". ',
details: e.data.message
});
}), t.success.forEach(function(e) {
n.push({
type: "success",
message: "Created " + k(e.kind) + ' "' + e.metadata.name + '" successfully. '
});
}); else {
var a;
a = p.isList ? "All items in list were created successfully." : k(p.resourceKind) + " " + p.resourceName + " was successfully created.", n.push({
type: "success",
message: a
});
}
e.resolve({
alerts: n,
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
hasErrors: a
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
hasErrors: r
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
});
}), e.promise;
});
}
<<<<<<< 2ce32f87748ff2fe030a6b53ff9490fcb80d856d
<<<<<<< 714c4a3ff94bc485f89078ceeb8105e8b94271be
<<<<<<< 0c40bfb0d97d474f70b5801c1312be38074c32cb
<<<<<<< 7d5cc388b34d6a87a5e2ae6b26f6b146dae1daa3
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
function z() {
var a = {
started: o.getString(n("Updating resources in project ")) + I(p.input.selectedProject),
success: o.getString(n("Updated resources in project ")) + I(p.input.selectedProject),
failure: o.getString(n("Failed to update some resources in project ")) + I(p.input.selectedProject)
}, b = {};
l.add(a, b, p.input.selectedProject.metadata.name, function() {
var a = c.defer();
return g.batch(p.updateResources, {
=======
function P() {
=======
function k() {
>>>>>>> Bug 1505281 - Improve import YAML results message
var e = {
started: "Updating resources in project " + A(p.input.selectedProject),
success: "Updated resources in project " + A(p.input.selectedProject),
failure: "Failed to update some resources in project " + A(p.input.selectedProject)
}, t = {};
d.add(e, t, p.input.selectedProject.metadata.name, function() {
var e = n.defer();
return i.batch(p.updateResources, {
>>>>>>> Fix for adding non-builder templates to a project
namespace: p.input.selectedProject.metadata.name
}, "update").then(function(b) {
var c = [], d = !1;
if (b.failure.length > 0) d = !0, p.errorOccurred = !0, b.failure.forEach(function(a) {
c.push({
type: "error",
message: "Cannot update " + B(a.object.kind) + ' "' + a.object.metadata.name + '". ',
details: a.data.message
});
}), b.success.forEach(function(a) {
c.push({
type: "success",
message: "Updated " + B(a.kind) + ' "' + a.metadata.name + '" successfully. '
});
}); else {
var e;
e = p.isList ? "All items in list were updated successfully." : B(p.resourceKind) + " " + p.resourceName + " was successfully updated.", c.push({
type: "success",
message: e
});
}
a.resolve({
alerts: c,
hasErrors: d
});
}, function(b) {
var c = [];
c.push({
type: "error",
message: "An error occurred updating the resources.",
details: "Status: " + b.status + ". " + b.data
}), a.resolve({
alerts: c
=======
function w() {
=======
function k() {
>>>>>>> Adding Deploy Image and Import YAML / JSON functionality to catalog
=======
function P() {
>>>>>>> Update pod controller to use getPreferredVersion
var e = {
started: "Updating resources in project " + A(p.input.selectedProject),
success: "Updated resources in project " + A(p.input.selectedProject),
failure: "Failed to update some resources in project " + A(p.input.selectedProject)
}, t = {};
d.add(e, t, p.input.selectedProject.metadata.name, function() {
var e = n.defer();
return i.batch(p.updateResources, {
namespace: p.input.selectedProject.metadata.name
}, "update").then(function(t) {
var n = [], r = !1;
if (t.failure.length > 0) r = !0, p.errorOccurred = !0, t.failure.forEach(function(e) {
n.push({
type: "error",
message: "Cannot update " + k(e.object.kind) + ' "' + e.object.metadata.name + '". ',
details: e.data.message
});
}), t.success.forEach(function(e) {
n.push({
type: "success",
message: "Updated " + k(e.kind) + ' "' + e.metadata.name + '" successfully. '
});
}); else {
var a;
a = p.isList ? "All items in list were updated successfully." : k(p.resourceKind) + " " + p.resourceName + " was successfully updated.", n.push({
type: "success",
message: a
});
}
e.resolve({
alerts: n,
hasErrors: r
});
}, function(t) {
var n = [];
n.push({
type: "error",
message: "An error occurred updating the resources.",
details: "Status: " + t.status + ". " + t.data
}), e.resolve({
alerts: n
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
});
}), e.promise;
});
}
<<<<<<< 13ac2d832bc56edf6bc5e2fc652da9b188ddae32
<<<<<<< 2ce32f87748ff2fe030a6b53ff9490fcb80d856d
<<<<<<< 714c4a3ff94bc485f89078ceeb8105e8b94271be
<<<<<<< 0c40bfb0d97d474f70b5801c1312be38074c32cb
<<<<<<< 1f5fb674ad14c7e78d2e82e837750bd2747349ab
<<<<<<< a19b22733566f12a68db59a49bc16848fffba594
<<<<<<< d21c662f039266e2dd235fa32bd86d3647c082ae
<<<<<<< 77ce3ebb70d0568ad8fbbb649b8a01f54552ad2c
<<<<<<< 46344541d4f20e3585d6ea01425f784292c0d84a
<<<<<<< 7d5cc388b34d6a87a5e2ae6b26f6b146dae1daa3
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
var A;
p.noProjectsCantCreate = !1;
var B = a("humanizeKind"), C = a("getErrorDetails");
l.clear(), p.$on("no-projects-cannot-create", function() {
p.noProjectsCantCreate = !0;
}), p.input = {
selectedProject: p.project
}, p.$watch("input.selectedProject.metadata.name", function() {
p.projectNameTaken = !1;
}), p.aceLoaded = function(a) {
A = a.getSession(), A.setOption("tabSize", 2), A.setOption("useSoftTabs", !0), a.setDragDelay = 0, a.$blockScrolling = 1 / 0;
};
var D = function(a) {
var b = d.open({
=======
var k, j = e("humanizeKind");
d.clear(), m.aceLoaded = function(e) {
(k = e.getSession()).setOption("tabSize", 2), k.setOption("useSoftTabs", !0), e.setDragDelay = 0, e.$blockScrolling = 1 / 0;
=======
var j, P = e("humanizeKind"), R = e("getErrorDetails");
d.clear(), p.input = {
selectedProject: p.project
}, p.aceLoaded = function(e) {
(j = e.getSession()).setOption("tabSize", 2), j.setOption("useSoftTabs", !0), e.setDragDelay = 0, e.$blockScrolling = 1 / 0;
>>>>>>> Adding Deploy Image and Import YAML / JSON functionality to catalog
=======
var P, j = e("humanizeKind"), R = e("getErrorDetails");
d.clear(), p.input = {
selectedProject: p.project
}, p.aceLoaded = function(e) {
(P = e.getSession()).setOption("tabSize", 2), P.setOption("useSoftTabs", !0), e.setDragDelay = 0, e.$blockScrolling = 1 / 0;
>>>>>>> Service instance details configuration and edit
=======
var j, P = e("humanizeKind"), R = e("getErrorDetails");
d.clear(), p.input = {
selectedProject: p.project
}, p.aceLoaded = function(e) {
(j = e.getSession()).setOption("tabSize", 2), j.setOption("useSoftTabs", !0), e.setDragDelay = 0, e.$blockScrolling = 1 / 0;
>>>>>>> Add product icons for service catalog
=======
var P, j = e("humanizeKind"), R = e("getErrorDetails");
d.clear(), p.input = {
selectedProject: p.project
}, p.aceLoaded = function(e) {
(P = e.getSession()).setOption("tabSize", 2), P.setOption("useSoftTabs", !0), e.setDragDelay = 0, e.$blockScrolling = 1 / 0;
>>>>>>> Handle displaying parameters when secrets are not available.
=======
var j;
=======
var P;
>>>>>>> Update template service broker flag name
=======
var k;
>>>>>>> Fix for adding non-builder templates to a project
=======
var P;
>>>>>>> Bug 1505281 - Improve import YAML results message
=======
var k;
>>>>>>> Update pod controller to use getPreferredVersion
=======
var j;
>>>>>>> Add Browse Catalog to Project context view.
p.noProjectsCantCreate = !1;
var k = e("humanizeKind"), I = e("getErrorDetails");
d.clear(), p.$on("no-projects-cannot-create", function() {
p.noProjectsCantCreate = !0;
}), p.input = {
selectedProject: p.project
<<<<<<< 0a63ff3eb6cc8e59249ea875eb290dafbf03cad2
}, p.aceLoaded = function(e) {
<<<<<<< 714c4a3ff94bc485f89078ceeb8105e8b94271be
<<<<<<< 0c40bfb0d97d474f70b5801c1312be38074c32cb
<<<<<<< 1f5fb674ad14c7e78d2e82e837750bd2747349ab
(j = e.getSession()).setOption("tabSize", 2), j.setOption("useSoftTabs", !0), e.setDragDelay = 0, e.$blockScrolling = 1 / 0;
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
=======
}, p.$watch("input.selectedProject.metadata.name", function() {
p.projectNameTaken = !1;
}), p.aceLoaded = function(e) {
<<<<<<< 13ac2d832bc56edf6bc5e2fc652da9b188ddae32
<<<<<<< 2ce32f87748ff2fe030a6b53ff9490fcb80d856d
>>>>>>> Correct ProjectNameTaken error handling in deployImage, processTemplate, and fromFile wizards
(P = e.getSession()).setOption("tabSize", 2), P.setOption("useSoftTabs", !0), e.setDragDelay = 0, e.$blockScrolling = 1 / 0;
>>>>>>> Update template service broker flag name
=======
(k = e.getSession()).setOption("tabSize", 2), k.setOption("useSoftTabs", !0), e.setDragDelay = 0, e.$blockScrolling = 1 / 0;
>>>>>>> Fix for adding non-builder templates to a project
=======
(P = e.getSession()).setOption("tabSize", 2), P.setOption("useSoftTabs", !0), e.setDragDelay = 0, e.$blockScrolling = 1 / 0;
>>>>>>> Bug 1505281 - Improve import YAML results message
=======
(k = e.getSession()).setOption("tabSize", 2), k.setOption("useSoftTabs", !0), e.setDragDelay = 0, e.$blockScrolling = 1 / 0;
>>>>>>> Update pod controller to use getPreferredVersion
=======
(j = e.getSession()).setOption("tabSize", 2), j.setOption("useSoftTabs", !0), e.setDragDelay = 0, e.$blockScrolling = 1 / 0;
>>>>>>> Add Browse Catalog to Project context view.
};
var R = function(e) {
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
a.open({
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
r.open({
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
animation: !0,
templateUrl: "views/modals/confirm.html",
controller: "ConfirmModalController",
resolve: {
modalConfig: function() {
return {
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
alerts: a,
message: o.getString(n("We checked your application for potential problems. Please confirm you still want to create this application.")),
okButtonText: o.getString(n("Create Anyway")),
okButtonClass: "btn-danger",
cancelButtonText: o.getString(n("Cancel"))
};
}
}
});
b.result.then(u);
}, E = {}, F = function() {
i.hideNotification("from-file-error"), _.each(E, function(a) {
!a.id || "error" !== a.type && "warning" !== a.type || i.hideNotification(a.id);
});
}, G = function(a) {
F(), E = k.getSecurityAlerts(p.createResources, p.input.selectedProject.metadata.name);
var b = a.quotaAlerts || [];
E = E.concat(b);
var c = _.filter(E, {
type: "error"
});
c.length ? (_.each(E, function(a) {
a.id = _.uniqueId("from-file-alert-"), i.addNotification(a);
}), p.disableInputs = !1) : E.length ? (D(E), p.disableInputs = !1) : u();
}, H = function() {
if (_.has(p.input.selectedProject, "metadata.uid")) return c.when(p.input.selectedProject);
var b = p.input.selectedProject.metadata.name, d = p.input.selectedProject.metadata.annotations["new-display-name"], e = a("description")(p.input.selectedProject);
return m.create(b, d, e);
};
p.create = function() {
if (delete p.error, q(p.resource) && (p.resourceKind = p.resource.kind, p.resourceKind.endsWith("List") ? p.isList = !0 : p.isList = !1, r(p.resource))) {
p.isList ? (p.resourceList = p.resource.items, p.resourceName = "") : (p.resourceList = [ p.resource ], p.resourceName = p.resource.metadata.name, "Template" === p.resourceKind && (p.templateOptions = {
process: !0,
add: !1
})), p.updateResources = [], p.createResources = [];
var a = [];
p.errorOccurred = !1, _.forEach(p.resourceList, function(b) {
return r(b) ? void a.push(w(b)) : (p.errorOccurred = !0, !1);
}), H().then(function(b) {
p.input.selectedProject = b, c.all(a).then(function() {
p.errorOccurred || (1 === p.createResources.length && "Template" === p.resourceList[0].kind ? s() : _.isEmpty(p.updateResources) ? j.getLatestQuotaAlerts(p.createResources, {
namespace: p.input.selectedProject.metadata.name
}).then(G) : (p.updateTemplate = 1 === p.updateResources.length && "Template" === p.updateResources[0].kind, p.updateTemplate ? s() : t()));
});
}, function(a) {
"AlreadyExists" === a.data.reason ? p.projectNameTaken = !0 : i.addNotification({
id: "import-create-project-error",
type: "error",
message: "An error occurred creating project.",
details: C(a)
});
});
}
}, p.cancel = function() {
F(), h.toProjectOverview(p.input.selectedProject.metadata.name);
};
var I = a("displayName");
p.$on("importFileFromYAMLOrJSON", p.create), p.$on("$destroy", F);
} ]
};
} ]), angular.module("openshiftConsole").directive("oscFileInput", [ "Logger", function(a) {
=======
alerts: e,
message: "We checked your application for potential problems. Please confirm you still want to create this application.",
okButtonText: "Create Anyway",
okButtonClass: "btn-danger",
cancelButtonText: "Cancel"
};
}
}
}).result.then(y);
}, E = {}, T = function() {
c.hideNotification("from-file-error"), _.each(E, function(e) {
!e.id || "error" !== e.type && "warning" !== e.type || c.hideNotification(e.id);
});
}, N = function(e) {
T(), E = u.getSecurityAlerts(p.createResources, p.input.selectedProject.metadata.name);
var t = e.quotaAlerts || [];
E = E.concat(t), _.filter(E, {
type: "error"
}).length ? (_.each(E, function(e) {
e.id = _.uniqueId("from-file-alert-"), c.addNotification(e);
}), p.disableInputs = !1) : E.length ? (R(E), p.disableInputs = !1) : y();
}, D = function() {
if (_.has(p.input.selectedProject, "metadata.uid")) return n.when(p.input.selectedProject);
var t = p.input.selectedProject.metadata.name, r = p.input.selectedProject.metadata.annotations["new-display-name"], a = e("description")(p.input.selectedProject);
return m.create(t, r, a);
};
p.create = function() {
if (delete p.error, f(p.resource) && (p.resourceKind = p.resource.kind, p.resourceKind.endsWith("List") ? p.isList = !0 : p.isList = !1, g(p.resource))) {
p.isList ? (p.resourceList = p.resource.items, p.resourceName = "") : (p.resourceList = [ p.resource ], p.resourceName = p.resource.metadata.name, "Template" === p.resourceKind && (p.templateOptions = {
process: !0,
add: !1
})), p.updateResources = [], p.createResources = [];
var e = [];
p.errorOccurred = !1, _.forEach(p.resourceList, function(t) {
if (!g(t)) return p.errorOccurred = !0, !1;
e.push(S(t));
}), D().then(function(t) {
p.input.selectedProject = t, n.all(e).then(function() {
p.errorOccurred || (1 === p.createResources.length && "Template" === p.resourceList[0].kind ? v() : _.isEmpty(p.updateResources) ? l.getLatestQuotaAlerts(p.createResources, {
namespace: p.input.selectedProject.metadata.name
}).then(N) : (p.updateTemplate = 1 === p.updateResources.length && "Template" === p.updateResources[0].kind, p.updateTemplate ? v() : h()));
});
}, function(e) {
"AlreadyExists" === e.data.reason ? p.projectNameTaken = !0 : c.addNotification({
id: "import-create-project-error",
type: "error",
message: "An error occurred creating project.",
details: I(e)
});
});
}
}, p.cancel = function() {
T(), s.toProjectOverview(p.input.selectedProject.metadata.name);
};
var A = e("displayName");
p.$on("importFileFromYAMLOrJSON", p.create), p.$on("$destroy", T);
} ]
};
} ]), angular.module("openshiftConsole").directive("oscFileInput", [ "Logger", function(e) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
return {
restrict: "E",
scope: {
model: "=",
<<<<<<< 7c399b18a06396e2c66b77172f775a350cb378dd
required: "=",
disabled: "=ngDisabled",
<<<<<<< 32ce7dc9188e66a92552db029fc5fde74d2e4f63
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
readonly: "=ngReadonly",
showTextArea: "=",
hideClear: "=?",
=======
=======
readonly: "=ngReadonly",
>>>>>>> Add canI checks for route custom hosts
showTextArea: "=",
<<<<<<< 9854a04a93530a5cbed260dddc4991d2b65730e5
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
hideClear: "=?",
>>>>>>> Improve YAML editor validation and feedback
=======
required: "<",
disabled: "<ngDisabled",
readonly: "<ngReadonly",
showTextArea: "<",
hideClear: "<?",
>>>>>>> Bug 1526538 - Allow users to clear edits by uploading same file
helpText: "@?",
dropZoneId: "@?",
onFileAdded: "<?"
},
templateUrl: "views/directives/osc-file-input.html",
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
link: function(b, c) {
function d() {
var a = c.find(".drag-and-drop-zone");
a.on("dragover", function() {
b.disabled || (a.addClass("highlight-drag-and-drop-zone"), i = !0);
}), c.find(".drag-and-drop-zone p").on("dragover", function() {
b.disabled || (i = !0);
}), a.on("dragleave", function() {
b.disabled || (i = !1, _.delay(function() {
i || a.removeClass("highlight-drag-and-drop-zone");
}, 200));
}), a.on("drop", function(a) {
if (!b.disabled) {
var c = _.get(a, "originalEvent.dataTransfer.files", []);
return c.length > 0 && (b.file = _.head(c), e(b.file)), f(), $(".drag-and-drop-zone").trigger("putDropZoneFront", !1), $(".drag-and-drop-zone").trigger("reset"), !1;
}
});
var d = function(a, b) {
var c = b.offset(), d = b.outerWidth(), e = b.outerHeight();
a.css({
height: e + 6,
width: d + 6,
top: c.top,
left: c.left,
position: "fixed",
"z-index": 100
});
};
a.on("putDropZoneFront", function(a, e) {
if (!b.disabled) {
var f, g = c.find(".drag-and-drop-zone");
return e ? (f = b.dropZoneId ? $("#" + b.dropZoneId) : c, d(g, f)) : g.css("z-index", "-1"), !1;
}
}), a.on("reset", function() {
if (!b.disabled) return j = !1, !1;
});
=======
link: function(t, n) {
function r(n) {
var r = new FileReader();
r.onloadend = function() {
t.$apply(function() {
t.fileName = n.name, t.model = r.result;
var e = t.onFileAdded;
_.isFunction(e) && e(r.result);
});
}, r.onerror = function(n) {
t.supportsFileUpload = !1, t.uploadError = !0, e.error("Could not read file", n);
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
}, a.readAsText(n);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
}, r.readAsText(n);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}
function a() {
n.find(".drag-and-drop-zone").removeClass("show-drag-and-drop-zone highlight-drag-and-drop-zone");
}
var o = _.uniqueId("osc-file-input-");
t.dropMessageID = o + "-drop-message", t.helpID = o + "-help", t.supportsFileUpload = window.File && window.FileReader && window.FileList && window.Blob, t.uploadError = !1;
var i = "#" + t.dropMessageID, s = !1, c = !1, l = n.find("input[type=file]");
setTimeout(function() {
var e = n.find(".drag-and-drop-zone");
e.on("dragover", function() {
t.disabled || (e.addClass("highlight-drag-and-drop-zone"), s = !0);
}), n.find(".drag-and-drop-zone p").on("dragover", function() {
t.disabled || (s = !0);
}), e.on("dragleave", function() {
t.disabled || (s = !1, _.delay(function() {
s || e.removeClass("highlight-drag-and-drop-zone");
}, 200));
}), e.on("drop", function(e) {
if (!t.disabled) {
var n = _.get(e, "originalEvent.dataTransfer.files", []);
return n.length > 0 && (t.file = _.head(n), r(t.file)), a(), $(".drag-and-drop-zone").trigger("putDropZoneFront", !1), $(".drag-and-drop-zone").trigger("reset"), !1;
}
});
var o = function(e, t) {
var n = t.offset(), r = t.outerWidth(), a = t.outerHeight();
e.css({
height: a + 6,
width: r + 6,
top: n.top,
left: n.left,
position: "fixed",
"z-index": 100
});
};
e.on("putDropZoneFront", function(e, r) {
if (!t.disabled) {
var a, i = n.find(".drag-and-drop-zone");
return r ? (a = t.dropZoneId ? $("#" + t.dropZoneId) : n, o(i, a)) : i.css("z-index", "-1"), !1;
}
}), e.on("reset", function() {
if (!t.disabled) return c = !1, !1;
});
}), $(document).on("drop." + o, function() {
return a(), n.find(".drag-and-drop-zone").trigger("putDropZoneFront", !1), !1;
}), $(document).on("dragenter." + o, function() {
if (!t.disabled) return c = !0, n.find(".drag-and-drop-zone").addClass("show-drag-and-drop-zone"), n.find(".drag-and-drop-zone").trigger("putDropZoneFront", !0), !1;
}), $(document).on("dragover." + o, function() {
if (!t.disabled) return c = !0, n.find(".drag-and-drop-zone").addClass("show-drag-and-drop-zone"), !1;
}), $(document).on("dragleave." + o, function() {
return c = !1, _.delay(function() {
c || n.find(".drag-and-drop-zone").removeClass("show-drag-and-drop-zone");
}, 200), !1;
}), t.cleanInputValues = function() {
t.model = "", t.fileName = "", l[0].value = "";
}, l.change(function() {
r(l[0].files[0]), l[0].value = "";
}), t.$on("$destroy", function() {
$(i).off(), $(document).off("drop." + o).off("dragenter." + o).off("dragover." + o).off("dragleave." + o);
});
}
};
} ]), angular.module("openshiftConsole").directive("oscFormSection", function() {
return {
restrict: "E",
transclude: !0,
scope: {
header: "@",
about: "@",
aboutTitle: "@",
editText: "@",
expand: "=?",
canToggle: "=?"
},
templateUrl: "views/directives/osc-form-section.html",
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
link: function(a, b, c) {
c.editText || (c.editText = "Edit"), angular.isDefined(c.canToggle) || (a.canToggle = !0), a.toggle = function() {
a.expand = !a.expand;
=======
link: function(e, t, n) {
n.editText || (n.editText = "Edit"), angular.isDefined(n.canToggle) || (e.canToggle = !0), e.toggle = function() {
e.expand = !e.expand;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
};
}
};
}), angular.module("openshiftConsole").directive("oscGitLink", [ "$filter", function(e) {
return {
restrict: "E",
scope: {
uri: "=",
ref: "=",
contextDir: "="
},
transclude: !0,
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
link: function(b) {
var c = a("isAbsoluteURL"), d = a("githubLink");
b.$watchGroup([ "uri", "ref", "contextDir" ], function() {
b.gitLink = d(b.uri, b.ref, b.contextDir), b.isLink = c(b.gitLink);
=======
link: function(t) {
var n = e("isAbsoluteURL"), r = e("githubLink");
t.$watchGroup([ "uri", "ref", "contextDir" ], function() {
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
t.gitLink = a(t.uri, t.ref, t.contextDir), t.isLink = n(t.gitLink);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
t.gitLink = r(t.uri, t.ref, t.contextDir), t.isLink = n(t.gitLink);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
});
},
template: '<a ng-if="isLink" ng-href="{{gitLink}}" ng-transclude target="_blank"></a><span ng-if="!isLink" ng-transclude></span>'
};
} ]), angular.module("openshiftConsole").directive("oscImageSummary", function() {
return {
restrict: "E",
scope: {
resource: "=",
name: "=",
tag: "="
},
templateUrl: "views/directives/osc-image-summary.html"
};
<<<<<<< 32ce7dc9188e66a92552db029fc5fde74d2e4f63
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
}), angular.module("openshiftConsole").directive("oscRouting", [ "$filter", "Constants", "gettextCatalog", "gettext", "DNS1123_SUBDOMAIN_VALIDATION", function(a, b, c, d, e) {
=======
}), angular.module("openshiftConsole").directive("oscRouting", [ "Constants", "DNS1123_SUBDOMAIN_VALIDATION", function(e, t) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
}), angular.module("openshiftConsole").directive("oscRouting", [ "$filter", "Constants", "DNS1123_SUBDOMAIN_VALIDATION", function(e, t, n) {
>>>>>>> Add canI checks for route custom hosts
return {
require: "^form",
restrict: "E",
scope: {
route: "=model",
services: "=",
showNameInput: "=",
routingDisabled: "=",
<<<<<<< 32ce7dc9188e66a92552db029fc5fde74d2e4f63
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
existingRoute: "="
},
templateUrl: "views/directives/osc-routing.html",
link: function(f, g, h, i) {
f.form = i, f.controls = {}, f.options = {
secureRoute: !1,
alternateServices: !1
};
var j = {
group: "route.openshift.io",
resource: "routes/custom-host"
};
f.canICreateCustomHosts = a("canI")(j, "create"), f.canIUpdateCustomHosts = a("canI")(j, "update");
var k = function() {
return f.existingRoute ? f.canIUpdateCustomHosts : f.canICreateCustomHosts;
};
f.isHostnameReadOnly = function() {
return !k();
}, f.disableWildcards = b.DISABLE_WILDCARD_ROUTES, f.areCertificateInputsReadOnly = function() {
return !k();
}, f.areCertificateInputsDisabled = function() {
var a = _.get(f, "route.tls.termination");
return !a || "passthrough" === a;
}, f.isDestinationCACertInputDisabled = function() {
return "reencrypt" !== _.get(f, "route.tls.termination");
}, f.insecureTrafficOptions = [ {
value: "",
label: c.getString(d("None"))
}, {
value: "Allow",
label: c.getString(d("Allow"))
}, {
value: "Redirect",
label: c.getString(d("Redirect"))
} ], _.has(f, "route.tls.insecureEdgeTerminationPolicy") || _.set(f, "route.tls.insecureEdgeTerminationPolicy", "");
var l = function() {
var a = "passthrough" !== _.get(f, "route.tls.termination") || "Allow" !== _.get(f, "route.tls.insecureEdgeTerminationPolicy");
f.routeForm.insecureTraffic.$setValidity("passthrough", a);
};
f.$watchGroup([ "route.tls.termination", "route.tls.insecureEdgeTerminationPolicy" ], l), f.nameValidation = e, f.disableWildcards ? f.hostnamePattern = e.pattern : f.hostnamePattern = /^(\*(\.[a-z0-9]([-a-z0-9]*[a-z0-9]))+|[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*)$/, f.hostnameMaxLength = e.maxlength;
var m = function(a) {
if (a) {
var b = _.get(a, "spec.ports", []);
f.unnamedServicePort = 1 === b.length && !b[0].name, b.length && !f.unnamedServicePort ? f.route.portOptions = _.map(b, function(a) {
return {
port: a.name,
label: a.port + " → " + a.targetPort + " (" + a.protocol + ")"
};
}) : f.route.portOptions = [];
}
};
f.services && !f.route.service && (f.route.service = _.find(f.services)), f.servicesByName, f.services ? f.servicesByName = _.keyBy(f.services, "metadata.name") : f.servicesByName = {}, f.$watch("route.to.name", function(a, b) {
m(f.servicesByName[a]), a === b && f.route.targetPort || (f.route.targetPort = _.get(f, "route.portOptions[0].port")), f.services && (f.alternateServiceOptions = _.reject(f.services, function(b) {
return a === b.metadata.name;
}));
}), f.$watch("route.alternateServices", function(a) {
f.duplicateServices = _(a).map("name").filter(function(a, b, c) {
return _.includes(c, a, b + 1);
}).value(), i.$setValidity("duplicateServices", !f.duplicateServices.length), f.options.alternateServices = !_.isEmpty(a);
}, !0);
var n = function() {
return !!f.route.tls && ((!f.route.tls.termination || "passthrough" === f.route.tls.termination) && (f.route.tls.certificate || f.route.tls.key || f.route.tls.caCertificate || f.route.tls.destinationCACertificate));
};
f.$watch("route.tls.termination", function() {
f.options.secureRoute = !!_.get(f, "route.tls.termination"), f.showCertificatesNotUsedWarning = n();
});
var o;
f.$watch("options.secureRoute", function(a, b) {
if (a !== b) {
var c = _.get(f, "route.tls.termination");
!f.securetRoute && c && (o = c, delete f.route.tls.termination), f.options.secureRoute && !c && _.set(f, "route.tls.termination", o || "edge");
}
}), f.$watch("options.alternateServices", function(a, b) {
a !== b && (a || (f.route.alternateServices = []), a && _.isEmpty(f.route.alternateServices) && f.addAlternateService());
}), f.addAlternateService = function() {
f.route.alternateServices = f.route.alternateServices || [];
var a = _.find(f.services, function(a) {
return a.metadata.name !== f.route.to.service && !_.some(f.route.alternateServices, {
service: a.metadata.name
});
});
_.has(f, "route.to.weight") || _.set(f, "route.to.weight", 1), f.route.alternateServices.push({
service: a.metadata.name,
weight: 1
});
}, f.weightAsPercentage = function(a, b) {
a = a || 0;
var c = _.get(f, "route.to.weight", 0);
if (_.each(f.route.alternateServices, function(a) {
c += _.get(a, "weight", 0);
}), !c) return "";
var d = a / c * 100;
return b ? d3.round(d, 1) + "%" : d;
};
var p = !1;
f.$watch("route.alternateServices.length", function(a) {
if (0 === a && _.has(f, "route.to.weight") && delete f.route.to.weight, 1 === a) {
if (0 === f.route.to.weight && 0 === f.route.alternateServices[0].weight) return void (f.controls.hideSlider = !0);
p = !0, f.controls.rangeSlider = f.weightAsPercentage(f.route.to.weight);
}
}), f.$watch("controls.rangeSlider", function(a, b) {
return p ? void (p = !1) : void (a !== b && (a = parseInt(a, 10), _.set(f, "route.to.weight", a), _.set(f, "route.alternateServices[0].weight", 100 - a)));
=======
hostReadOnly: "="
=======
existingRoute: "="
>>>>>>> Add canI checks for route custom hosts
},
templateUrl: "views/directives/osc-routing.html",
link: function(r, a, o, i) {
r.form = i, r.controls = {}, r.options = {
secureRoute: !1,
alternateServices: !1
};
var s = {
group: "route.openshift.io",
resource: "routes/custom-host"
};
r.canICreateCustomHosts = e("canI")(s, "create"), r.canIUpdateCustomHosts = e("canI")(s, "update");
var c = function() {
return r.existingRoute ? r.canIUpdateCustomHosts : r.canICreateCustomHosts;
};
r.isHostnameReadOnly = function() {
return !c();
}, r.disableWildcards = t.DISABLE_WILDCARD_ROUTES, r.areCertificateInputsReadOnly = function() {
return !c();
}, r.areCertificateInputsDisabled = function() {
var e = _.get(r, "route.tls.termination");
return !e || "passthrough" === e;
}, r.isDestinationCACertInputDisabled = function() {
return "reencrypt" !== _.get(r, "route.tls.termination");
}, r.insecureTrafficOptions = [ {
value: "",
label: "None"
}, {
value: "Allow",
label: "Allow"
}, {
value: "Redirect",
label: "Redirect"
} ], _.has(r, "route.tls.insecureEdgeTerminationPolicy") || _.set(r, "route.tls.insecureEdgeTerminationPolicy", "");
r.$watchGroup([ "route.tls.termination", "route.tls.insecureEdgeTerminationPolicy" ], function() {
var e = "passthrough" !== _.get(r, "route.tls.termination") || "Allow" !== _.get(r, "route.tls.insecureEdgeTerminationPolicy");
r.routeForm.insecureTraffic.$setValidity("passthrough", e);
}), r.nameValidation = n, r.disableWildcards ? r.hostnamePattern = n.pattern : r.hostnamePattern = /^(\*(\.[a-z0-9]([-a-z0-9]*[a-z0-9]))+|[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*)$/, r.hostnameMaxLength = n.maxlength;
var l = function(e) {
if (e) {
var t = _.get(e, "spec.ports", []);
r.unnamedServicePort = 1 === t.length && !t[0].name, t.length && !r.unnamedServicePort ? r.route.portOptions = _.map(t, function(e) {
return {
port: e.name,
label: e.port + " → " + e.targetPort + " (" + e.protocol + ")"
};
}) : r.route.portOptions = [];
}
};
r.services && !r.route.service && (r.route.service = _.find(r.services)), r.servicesByName, r.services ? r.servicesByName = _.keyBy(r.services, "metadata.name") : r.servicesByName = {}, r.$watch("route.to.name", function(e, t) {
l(r.servicesByName[e]), e === t && r.route.targetPort || (r.route.targetPort = _.get(r, "route.portOptions[0].port")), r.services && (r.alternateServiceOptions = _.reject(r.services, function(t) {
return e === t.metadata.name;
}));
}), r.$watch("route.alternateServices", function(e) {
r.duplicateServices = _(e).map("name").filter(function(e, t, n) {
return _.includes(n, e, t + 1);
}).value(), i.$setValidity("duplicateServices", !r.duplicateServices.length), r.options.alternateServices = !_.isEmpty(e);
}, !0);
var u = function() {
return !!r.route.tls && ((!r.route.tls.termination || "passthrough" === r.route.tls.termination) && (r.route.tls.certificate || r.route.tls.key || r.route.tls.caCertificate || r.route.tls.destinationCACertificate));
};
r.$watch("route.tls.termination", function() {
r.options.secureRoute = !!_.get(r, "route.tls.termination"), r.showCertificatesNotUsedWarning = u();
});
var d;
r.$watch("options.secureRoute", function(e, t) {
if (e !== t) {
var n = _.get(r, "route.tls.termination");
!r.securetRoute && n && (d = n, delete r.route.tls.termination), r.options.secureRoute && !n && _.set(r, "route.tls.termination", d || "edge");
}
}), r.$watch("options.alternateServices", function(e, t) {
e !== t && (e || (r.route.alternateServices = []), e && _.isEmpty(r.route.alternateServices) && r.addAlternateService());
}), r.addAlternateService = function() {
r.route.alternateServices = r.route.alternateServices || [];
var e = _.find(r.services, function(e) {
return e.metadata.name !== r.route.to.service && !_.some(r.route.alternateServices, {
service: e.metadata.name
});
});
_.has(r, "route.to.weight") || _.set(r, "route.to.weight", 1), r.route.alternateServices.push({
service: e.metadata.name,
weight: 1
});
}, r.weightAsPercentage = function(e, t) {
e = e || 0;
var n = _.get(r, "route.to.weight", 0);
if (_.each(r.route.alternateServices, function(e) {
n += _.get(e, "weight", 0);
}), !n) return "";
var a = e / n * 100;
return t ? d3.round(a, 1) + "%" : a;
};
var m = !1;
r.$watch("route.alternateServices.length", function(e) {
if (0 === e && _.has(r, "route.to.weight") && delete r.route.to.weight, 1 === e) {
if (0 === r.route.to.weight && 0 === r.route.alternateServices[0].weight) return void (r.controls.hideSlider = !0);
m = !0, r.controls.rangeSlider = r.weightAsPercentage(r.route.to.weight);
}
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< 32ce7dc9188e66a92552db029fc5fde74d2e4f63
}), n.$watch("controls.rangeSlider", function(e, t) {
l ? l = !1 : e !== t && (e = parseInt(e, 10), _.set(n, "route.to.weight", e), _.set(n, "route.alternateServices[0].weight", 100 - e));
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
}), a.$watch("controls.rangeSlider", function(e, t) {
<<<<<<< 9bc0af8cb56dcc9609307333b9424f396867cab5
<<<<<<< 602d786018a3879a89789b1214b36a15c51b928b
m ? m = !1 : e !== t && (e = parseInt(e, 10), _.set(a, "route.to.weight", e), _.set(a, "route.alternateServices[0].weight", 100 - e));
>>>>>>> Add canI checks for route custom hosts
=======
p ? p = !1 : e !== t && (e = parseInt(e, 10), _.set(a, "route.to.weight", e), _.set(a, "route.alternateServices[0].weight", 100 - e));
>>>>>>> Updates for Service Instance & Bindings
=======
m ? m = !1 : e !== t && (e = parseInt(e, 10), _.set(a, "route.to.weight", e), _.set(a, "route.alternateServices[0].weight", 100 - e));
>>>>>>> Support EnvFrom in the Env Editors
=======
}), r.$watch("controls.rangeSlider", function(e, t) {
m ? m = !1 : e !== t && (e = parseInt(e, 10), _.set(r, "route.to.weight", e), _.set(r, "route.alternateServices[0].weight", 100 - e));
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
});
}
};
} ]).directive("oscRoutingService", function() {
return {
restrict: "E",
scope: {
model: "=",
serviceOptions: "=",
allServices: "=",
isAlternate: "=?",
showWeight: "=?",
warnUnnamedPort: "=?"
},
templateUrl: "views/directives/osc-routing-service.html",
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
link: function(a, b, c, d) {
a.form = d, a.id = _.uniqueId("osc-routing-service-"), a.$watchGroup([ "model.name", "serviceOptions" ], function() {
if (_.isEmpty(a.serviceOptions)) return void (a.optionsNames = []);
var b = _.get(a, "model.name");
a.optionNames = [], a.selectedExists = !1, a.optionNames = _.map(a.serviceOptions, "metadata.name"), b && !a.allServices[b] && a.optionNames.push(b), b || _.set(a, "model.name", _.head(a.optionNames));
});
}
};
}), angular.module("openshiftConsole").directive("oscPersistentVolumeClaim", [ "$filter", "DataService", "LimitRangesService", "QuotaService", "ModalsService", "gettextCatalog", "gettext", "DNS1123_SUBDOMAIN_VALIDATION", function(a, b, c, d, e, f, g, h) {
=======
link: function(e, t, n, a) {
e.form = a, e.id = _.uniqueId("osc-routing-service-"), e.$watchGroup([ "model.name", "serviceOptions" ], function() {
=======
link: function(e, t, n, r) {
e.form = r, e.id = _.uniqueId("osc-routing-service-"), e.$watchGroup([ "model.name", "serviceOptions" ], function() {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
if (_.isEmpty(e.serviceOptions)) e.optionsNames = []; else {
var t = _.get(e, "model.name");
e.optionNames = [], e.selectedExists = !1, e.optionNames = _.map(e.serviceOptions, "metadata.name"), t && !e.allServices[t] && e.optionNames.push(t), t || _.set(e, "model.name", _.head(e.optionNames));
}
});
}
};
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< efac32e4a13e2aac92238d69168ae1212cab677f
}), angular.module("openshiftConsole").directive("oscPersistentVolumeClaim", [ "$filter", "DataService", "LimitRangesService", "QuotaService", "ModalsService", "DNS1123_SUBDOMAIN_VALIDATION", function(e, t, n, a, r, o) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
}), angular.module("openshiftConsole").directive("oscPersistentVolumeClaim", [ "$filter", "APIService", "DataService", "LimitRangesService", "QuotaService", "ModalsService", "DNS1123_SUBDOMAIN_VALIDATION", function(e, t, n, a, r, o, i) {
=======
}), angular.module("openshiftConsole").directive("oscPersistentVolumeClaim", [ "$filter", "APIService", "DataService", "LimitRangesService", "QuotaService", "ModalsService", "DNS1123_SUBDOMAIN_VALIDATION", function(e, t, n, r, a, o, i) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
var s = t.getPreferredVersion("storageclasses"), c = t.getPreferredVersion("limitranges"), l = t.getPreferredVersion("resourcequotas"), u = t.getPreferredVersion("appliedclusterresourcequotas");
>>>>>>> Update directives/oscPersistentVolumeClaim to use getPreferredVersion
return {
restrict: "E",
scope: {
claim: "=model",
projectName: "="
},
templateUrl: "views/directives/osc-persistent-volume-claim.html",
<<<<<<< efac32e4a13e2aac92238d69168ae1212cab677f
link: function(i) {
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
var j = a("amountAndUnit"), k = a("usageValue");
i.nameValidation = h, i.storageClasses = [], i.defaultStorageClass = "", i.claim.unit = "Gi", i.units = [ {
=======
var s = e("amountAndUnit"), c = e("usageValue");
i.nameValidation = o, i.storageClasses = [], i.defaultStorageClass = "", i.claim.unit = "Gi", i.units = [ {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
link: function(t) {
var d = e("amountAndUnit"), m = e("usageValue");
t.nameValidation = i, t.storageClasses = [], t.defaultStorageClass = "", t.claim.unit = "Gi", t.units = [ {
>>>>>>> Update directives/oscPersistentVolumeClaim to use getPreferredVersion
value: "Mi",
label: "MiB"
}, {
value: "Gi",
label: "GiB"
}, {
value: "Ti",
label: "TiB"
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
} ], i.claim.selectedLabels = [];
var l = [];
i.$watch("useLabels", function(a, b) {
a !== b && (a ? i.claim.selectedLabels = l : (l = i.claim.selectedLabels, i.claim.selectedLabels = []));
}), i.groupUnits = function(a) {
switch (a.value) {
=======
}, {
value: "M",
label: "MB"
}, {
value: "G",
label: "GB"
}, {
value: "T",
label: "TB"
} ], t.claim.selectedLabels = [];
var p = [];
t.$watch("useLabels", function(e, n) {
e !== n && (e ? t.claim.selectedLabels = p : (p = t.claim.selectedLabels, t.claim.selectedLabels = []));
}), t.groupUnits = function(e) {
switch (e.value) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
case "Mi":
case "Gi":
case "Ti":
return f.getString(g("Binary Units"));

case "M":
case "G":
case "T":
return f.getString(g("Decimal Units"));
}
return "";
<<<<<<< efac32e4a13e2aac92238d69168ae1212cab677f
}, i.showComputeUnitsHelp = function() {
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
e.showComputeUnitsHelp();
};
var m = function() {
var a = i.claim.amount && k(i.claim.amount + i.claim.unit), b = _.has(i, "limits.min") && k(i.limits.min), c = _.has(i, "limits.max") && k(i.limits.max), d = !0, e = !0;
a && b && (d = a >= b), a && c && (e = a <= c), i.persistentVolumeClaimForm.capacity.$setValidity("limitRangeMin", d), i.persistentVolumeClaimForm.capacity.$setValidity("limitRangeMax", e);
}, n = function() {
var a = d.isAnyStorageQuotaExceeded(i.quotas, i.clusterQuotas), b = d.willRequestExceedQuota(i.quotas, i.clusterQuotas, "requests.storage", i.claim.amount + i.claim.unit);
i.persistentVolumeClaimForm.capacity.$setValidity("willExceedStorage", !b), i.persistentVolumeClaimForm.capacity.$setValidity("outOfClaims", !a);
};
b.list({
group: "storage.k8s.io",
resource: "storageclasses"
}, {}, function(b) {
var c = b.by("metadata.name");
if (!_.isEmpty(c)) {
i.storageClasses = _.sortBy(c, "metadata.name");
var d = a("annotation");
if (i.defaultStorageClass = _.find(i.storageClasses, function(a) {
return "true" === d(a, "storageclass.beta.kubernetes.io/is-default-class");
}), i.defaultStorageClass) i.claim.storageClass = i.defaultStorageClass; else {
var e = {
metadata: {
name: "No Storage Class",
labels: {},
annotations: {
description: "No storage class will be assigned"
}
}
};
i.storageClasses.unshift(e);
=======
r.showComputeUnitsHelp();
=======
}, t.showComputeUnitsHelp = function() {
o.showComputeUnitsHelp();
>>>>>>> Update directives/oscPersistentVolumeClaim to use getPreferredVersion
};
var f = function() {
var e = t.claim.amount && m(t.claim.amount + t.claim.unit), n = _.has(t, "limits.min") && m(t.limits.min), r = _.has(t, "limits.max") && m(t.limits.max), a = !0, o = !0;
e && n && (a = e >= n), e && r && (o = e <= r), t.persistentVolumeClaimForm.capacity.$setValidity("limitRangeMin", a), t.persistentVolumeClaimForm.capacity.$setValidity("limitRangeMax", o);
}, g = function() {
var e = a.isAnyStorageQuotaExceeded(t.quotas, t.clusterQuotas), n = a.willRequestExceedQuota(t.quotas, t.clusterQuotas, "requests.storage", t.claim.amount + t.claim.unit);
t.persistentVolumeClaimForm.capacity.$setValidity("willExceedStorage", !n), t.persistentVolumeClaimForm.capacity.$setValidity("outOfClaims", !e);
};
n.list(s, {}, function(n) {
var r = n.by("metadata.name");
if (!_.isEmpty(r)) {
t.storageClasses = _.sortBy(r, "metadata.name");
var a = e("annotation");
if (t.defaultStorageClass = _.find(t.storageClasses, function(e) {
return "true" === a(e, "storageclass.beta.kubernetes.io/is-default-class");
}), t.defaultStorageClass) t.claim.storageClass = t.defaultStorageClass; else {
var o = {
metadata: {
name: "No Storage Class",
labels: {},
annotations: {
description: "No storage class will be assigned"
}
}
};
<<<<<<< efac32e4a13e2aac92238d69168ae1212cab677f
i.storageClasses.unshift(r);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
t.storageClasses.unshift(o);
>>>>>>> Update directives/oscPersistentVolumeClaim to use getPreferredVersion
}
}
}, {
errorNotification: !1
<<<<<<< efac32e4a13e2aac92238d69168ae1212cab677f
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
}), b.list("limitranges", {
namespace: i.projectName
}, function(a) {
var b = a.by("metadata.name");
if (!_.isEmpty(b)) {
i.limits = c.getEffectiveLimitRange(b, "storage", "PersistentVolumeClaim");
var d;
if (i.limits.min && i.limits.max) {
var e = k(i.limits.min), f = k(i.limits.max);
e === f && (d = j(i.limits.max), i.claim.amount = Number(d[0]), i.claim.unit = d[1], i.capacityReadOnly = !0);
}
i.$watchGroup([ "claim.amount", "claim.unit" ], m);
}
}), b.list("resourcequotas", {
namespace: i.projectName
}, function(a) {
i.quotas = a.by("metadata.name"), i.$watchGroup([ "claim.amount", "claim.unit" ], n);
}), b.list("appliedclusterresourcequotas", {
namespace: i.projectName
}, function(a) {
i.clusterQuotas = a.by("metadata.name");
});
}
};
} ]), angular.module("openshiftConsole").directive("oscAutoscaling", [ "HPAService", "LimitRangesService", "DNS1123_SUBDOMAIN_VALIDATION", function(a, b, c) {
=======
}), t.list("limitranges", {
namespace: i.projectName
=======
}), n.list(c, {
namespace: t.projectName
>>>>>>> Update directives/oscPersistentVolumeClaim to use getPreferredVersion
}, function(e) {
var n = e.by("metadata.name");
if (!_.isEmpty(n)) {
t.limits = r.getEffectiveLimitRange(n, "storage", "PersistentVolumeClaim");
var a;
t.limits.min && t.limits.max && m(t.limits.min) === m(t.limits.max) && (a = d(t.limits.max), t.claim.amount = Number(a[0]), t.claim.unit = a[1], t.capacityReadOnly = !0), t.$watchGroup([ "claim.amount", "claim.unit" ], f);
}
}), n.list(l, {
namespace: t.projectName
}, function(e) {
t.quotas = e.by("metadata.name"), t.$watchGroup([ "claim.amount", "claim.unit" ], g);
}), n.list(u, {
namespace: t.projectName
}, function(e) {
t.clusterQuotas = e.by("metadata.name");
});
}
};
} ]), angular.module("openshiftConsole").directive("oscAutoscaling", [ "HPAService", "LimitRangesService", "DNS1123_SUBDOMAIN_VALIDATION", function(e, t, n) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
return {
restrict: "E",
scope: {
autoscaling: "=model",
project: "=",
showNameInput: "=?",
nameReadOnly: "=?"
},
templateUrl: "views/directives/osc-autoscaling.html",
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
link: function(d) {
d.nameValidation = c, d.$watch("project", function() {
if (d.project) {
d.isRequestCalculated = b.isRequestCalculated("cpu", d.project);
var c = window.OPENSHIFT_CONSTANTS.DEFAULT_HPA_CPU_TARGET_PERCENT;
d.isRequestCalculated && (c = a.convertLimitPercentToRequest(c, d.project)), _.set(d, "autoscaling.defaultTargetCPU", c), d.defaultTargetCPUDisplayValue = window.OPENSHIFT_CONSTANTS.DEFAULT_HPA_CPU_TARGET_PERCENT;
var e = !1, f = function(b) {
return e ? void (e = !1) : (b && d.isRequestCalculated && (b = a.convertRequestPercentToLimit(b, d.project)), void _.set(d, "targetCPUInput.percent", b));
};
d.$watch("autoscaling.targetCPU", f);
var g = function(b) {
b && d.isRequestCalculated && (b = a.convertLimitPercentToRequest(b, d.project)), e = !0, _.set(d, "autoscaling.targetCPU", b);
};
d.$watch("targetCPUInput.percent", function(a, b) {
a !== b && g(a);
=======
link: function(a) {
a.nameValidation = n, a.$watch("project", function() {
if (a.project) {
a.isRequestCalculated = t.isRequestCalculated("cpu", a.project);
=======
link: function(r) {
r.nameValidation = n, r.$watch("project", function() {
if (r.project) {
r.isRequestCalculated = t.isRequestCalculated("cpu", r.project);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
var n = window.OPENSHIFT_CONSTANTS.DEFAULT_HPA_CPU_TARGET_PERCENT;
r.isRequestCalculated && (n = e.convertLimitPercentToRequest(n, r.project)), _.set(r, "autoscaling.defaultTargetCPU", n), r.defaultTargetCPUDisplayValue = window.OPENSHIFT_CONSTANTS.DEFAULT_HPA_CPU_TARGET_PERCENT;
var a = !1;
r.$watch("autoscaling.targetCPU", function(t) {
a ? a = !1 : (t && r.isRequestCalculated && (t = e.convertRequestPercentToLimit(t, r.project)), _.set(r, "targetCPUInput.percent", t));
});
var o = function(t) {
t && r.isRequestCalculated && (t = e.convertLimitPercentToRequest(t, r.project)), a = !0, _.set(r, "autoscaling.targetCPU", t);
};
r.$watch("targetCPUInput.percent", function(e, t) {
e !== t && o(e);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
});
}
});
}
};
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< 24a5ee2032408906cd9beac22fa6d367e656f677
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
} ]), angular.module("openshiftConsole").directive("oscSecrets", [ "$uibModal", "$filter", "DataService", "SecretsService", function(a, b, c, d) {
=======
} ]), angular.module("openshiftConsole").directive("oscSecrets", [ "$uibModal", "$filter", "DataService", "SecretsService", function(e, t, n, a) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
} ]), angular.module("openshiftConsole").directive("oscSecrets", [ "$uibModal", "$filter", "APIService", "DataService", "SecretsService", function(e, t, n, a, r) {
>>>>>>> Update directives/oscSecrets to use getPreferredVersion
=======
} ]), angular.module("openshiftConsole").directive("oscSecrets", [ "$uibModal", "$filter", "APIService", "DataService", "SecretsService", function(e, t, n, r, a) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
return {
restrict: "E",
scope: {
pickedSecrets: "=model",
secretsByType: "=",
namespace: "=",
displayType: "@",
type: "@",
alerts: "=",
disableInput: "=",
serviceAccountToLink: "@?",
allowMultipleSecrets: "=?"
},
templateUrl: "views/directives/osc-secrets.html",
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
link: function(b) {
b.canAddSourceSecret = function() {
if (!b.allowMultipleSecrets) return !1;
var a = _.last(b.pickedSecrets);
return !!a && a.name;
}, b.setLastSecretsName = function(a) {
var c = _.last(b.pickedSecrets);
c.name = a;
}, b.addSourceSecret = function() {
b.pickedSecrets.push({
name: ""
});
}, b.removeSecret = function(a) {
1 === b.pickedSecrets.length ? b.pickedSecrets = [ {
name: ""
} ] : b.pickedSecrets.splice(a, 1), b.secretsForm.$setDirty();
}, b.openCreateSecretModal = function() {
b.newSecret = {};
var e = a.open({
=======
link: function(t) {
t.secretsVersion = n.getPreferredVersion("secrets"), t.canAddSourceSecret = function() {
if (!t.allowMultipleSecrets) return !1;
var e = _.last(t.pickedSecrets);
return !!e && e.name;
}, t.setLastSecretsName = function(e) {
_.last(t.pickedSecrets).name = e;
}, t.addSourceSecret = function() {
t.pickedSecrets.push({
name: ""
});
}, t.removeSecret = function(e) {
1 === t.pickedSecrets.length ? t.pickedSecrets = [ {
name: ""
} ] : t.pickedSecrets.splice(e, 1), t.secretsForm.$setDirty();
}, t.openCreateSecretModal = function() {
t.newSecret = {}, e.open({
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
animation: !0,
backdrop: "static",
templateUrl: "views/modals/create-secret.html",
controller: "CreateSecretModalController",
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
scope: b
});
e.result.then(function(a) {
c.list("secrets", {
namespace: b.namespace
}, function(c) {
var e = d.groupSecretsByType(c), f = _.mapValues(e, function(a) {
return _.map(a, "metadata.name");
});
b.secretsByType = _.each(f, function(a) {
a.unshift("");
}), b.setLastSecretsName(a.metadata.name), b.secretsForm.$setDirty();
=======
scope: t
}).result.then(function(e) {
r.list(t.secretsVersion, {
namespace: t.namespace
}, function(n) {
var r = a.groupSecretsByType(n), o = _.mapValues(r, function(e) {
return _.map(e, "metadata.name");
});
t.secretsByType = _.each(o, function(e) {
e.unshift("");
}), t.setLastSecretsName(e.metadata.name), t.secretsForm.$setDirty();
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
});
});
};
}
};
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< 16cfb770c780c9f5092ca1fc2fc68e124d02156a
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
} ]), angular.module("openshiftConsole").directive("oscSourceSecrets", [ "$uibModal", "$filter", "DataService", "SecretsService", function(a, b, c, d) {
=======
} ]), angular.module("openshiftConsole").directive("oscSourceSecrets", [ "$uibModal", "$filter", "DataService", "SecretsService", function(e, t, n, a) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
} ]), angular.module("openshiftConsole").directive("oscSourceSecrets", [ "$uibModal", "$filter", "APIService", "DataService", "SecretsService", function(e, t, n, a, r) {
>>>>>>> Update oscSourceSecrets directive to use getPreferredVersion
=======
} ]), angular.module("openshiftConsole").directive("oscSourceSecrets", [ "$uibModal", "$filter", "APIService", "DataService", "SecretsService", function(e, t, n, r, a) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
return {
restrict: "E",
scope: {
pickedSecrets: "=model",
secretsByType: "=",
strategyType: "=",
type: "@",
displayType: "@",
namespace: "=",
alerts: "=",
serviceAccountToLink: "@?"
},
templateUrl: "views/directives/osc-source-secrets.html",
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
link: function(b) {
b.canAddSourceSecret = function() {
var a = _.last(b.pickedSecrets);
switch (b.strategyType) {
=======
link: function(t) {
t.secretsVersion = n.getPreferredVersion("secrets"), t.canAddSourceSecret = function() {
var e = _.last(t.pickedSecrets);
switch (t.strategyType) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
case "Custom":
return _.get(e, "secretSource.name");

default:
return _.get(e, "secret.name");
}
}, t.setLastSecretsName = function(e) {
var n = _.last(t.pickedSecrets);
switch (t.strategyType) {
case "Custom":
return void (n.secretSource.name = e);

default:
return void (n.secret.name = e);
}
}, t.addSourceSecret = function() {
switch (t.strategyType) {
case "Custom":
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
return void b.pickedSecrets.push({
=======
return void t.pickedSecrets.push({
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
secretSource: {
name: ""
},
mountPath: ""
});

default:
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
return void b.pickedSecrets.push({
=======
return void t.pickedSecrets.push({
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
secret: {
name: ""
},
destinationDir: ""
});
}
}, t.removeSecret = function(e) {
if (1 === t.pickedSecrets.length) switch (t.strategyType) {
case "Custom":
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
b.pickedSecrets = [ {
=======
t.pickedSecrets = [ {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
secretSource: {
name: ""
},
mountPath: ""
} ];
break;

default:
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
b.pickedSecrets = [ {
=======
t.pickedSecrets = [ {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
secret: {
name: ""
},
destinationDir: ""
} ];
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
} else b.pickedSecrets.splice(a, 1);
b.secretsForm.$setDirty();
}, b.openCreateSecretModal = function() {
var e = a.open({
animation: !0,
templateUrl: "views/modals/create-secret.html",
controller: "CreateSecretModalController",
scope: b
});
e.result.then(function(a) {
c.list("secrets", {
namespace: b.namespace
}, function(c) {
var e = d.groupSecretsByType(c), f = _.mapValues(e, function(a) {
return _.map(a, "metadata.name");
});
b.secretsByType = _.each(f, function(a) {
a.unshift("");
}), b.setLastSecretsName(a.metadata.name);
=======
} else t.pickedSecrets.splice(e, 1);
t.secretsForm.$setDirty();
}, t.openCreateSecretModal = function() {
e.open({
animation: !0,
templateUrl: "views/modals/create-secret.html",
controller: "CreateSecretModalController",
scope: t
}).result.then(function(e) {
r.list(t.secretsVersion, {
namespace: t.namespace
}, function(n) {
var r = a.groupSecretsByType(n), o = _.mapValues(r, function(e) {
return _.map(e, "metadata.name");
});
t.secretsByType = _.each(o, function(e) {
e.unshift("");
}), t.setLastSecretsName(e.metadata.name);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
});
});
};
}
};
} ]), angular.module("openshiftConsole").directive("replicas", function() {
return {
restrict: "E",
scope: {
status: "=?",
spec: "=",
disableScaling: "=?",
scaleFn: "&?",
deployment: "="
},
templateUrl: "views/directives/replicas.html",
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
link: function(a) {
a.model = {
editing: !1
}, a.scale = function() {
a.form.scaling.$valid && (a.scaleFn({
replicas: a.model.desired
}), a.model.editing = !1);
}, a.cancel = function() {
a.model.editing = !1;
};
}
};
}), angular.module("openshiftConsole").directive("containerStatuses", [ "$filter", function(a) {
=======
link: function(e) {
e.model = {
editing: !1
}, e.scale = function() {
e.form.scaling.$valid && (e.scaleFn({
replicas: e.model.desired
}), e.model.editing = !1);
}, e.cancel = function() {
e.model.editing = !1;
};
}
};
<<<<<<< b93368d5a70197ced8017a127baac07189b78e00
<<<<<<< d9c1ba9365376e5c306f93631894ae94f151efb3
}), angular.module("openshiftConsole").directive("containerStatuses", [ "$filter", function(e) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
}), angular.module("openshiftConsole").component("initContainersSummary", {
bindings: {
apiObject: "<"
},
templateUrl: "views/_init-containers-summary.html",
controller: function(e) {
var t = this;
t.$onChanges = function(n) {
var a = _.get(n.apiObject, "currentValue");
if (a) switch (t.podTemplate = e("podTemplate")(a), a.kind) {
case "DeploymentConfig":
case "Deployment":
t.tab = "configuration";
break;

default:
t.tab = "details";
}
};
}
}).directive("containerStatuses", function(e) {
>>>>>>> Init Container Display & Link
=======
}), angular.module("openshiftConsole").directive("containerStatuses", [ "$filter", function(e) {
>>>>>>> Bug 1476157 - Fix minification problems due to dependency injection
return {
restrict: "E",
scope: {
pod: "=",
onDebugTerminal: "=?",
detailed: "=?"
},
templateUrl: "views/_container-statuses.html",
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
link: function(b) {
b.hasDebugTerminal = angular.isFunction(b.onDebugTerminal);
var c = a("isContainerTerminatedSuccessfully"), d = function(a) {
return _.every(a, c);
};
b.$watch("pod", function(a) {
b.initContainersTerminated = d(a.status.initContainerStatuses), b.expandInitContainers !== !1 && (b.expandInitContainers = !b.initContainersTerminated);
}), b.toggleInitContainer = function() {
b.expandInitContainers = !b.expandInitContainers;
}, b.showDebugAction = function(c) {
if ("Completed" === _.get(b.pod, "status.phase")) return !1;
if (a("annotation")(b.pod, "openshift.io/build.name")) return !1;
if (a("isDebugPod")(b.pod)) return !1;
var d = _.get(c, "state.waiting.reason");
return "ImagePullBackOff" !== d && "ErrImagePull" !== d && (!_.get(c, "state.running") || !c.ready);
}, b.debugTerminal = function(a) {
if (b.hasDebugTerminal) return b.onDebugTerminal.call(this, a);
=======
link: function(t) {
t.hasDebugTerminal = angular.isFunction(t.onDebugTerminal);
var n = e("isContainerTerminatedSuccessfully"), r = function(e) {
return _.every(e, n);
};
t.$watch("pod", function(e) {
t.initContainersTerminated = r(e.status.initContainerStatuses), !1 !== t.expandInitContainers && (t.expandInitContainers = !t.initContainersTerminated);
}), t.toggleInitContainer = function() {
t.expandInitContainers = !t.expandInitContainers;
}, t.showDebugAction = function(n) {
if ("Completed" === _.get(t.pod, "status.phase")) return !1;
if (e("annotation")(t.pod, "openshift.io/build.name")) return !1;
if (e("isDebugPod")(t.pod)) return !1;
var r = _.get(n, "state.waiting.reason");
return "ImagePullBackOff" !== r && "ErrImagePull" !== r && (!_.get(n, "state.running") || !n.ready);
}, t.debugTerminal = function(e) {
if (t.hasDebugTerminal) return t.onDebugTerminal.call(this, e);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
};
}
};
} ]).directive("podTemplate", function() {
return {
restrict: "E",
scope: {
podTemplate: "=",
imagesByDockerReference: "=",
builds: "=",
detailed: "=?",
addHealthCheckUrl: "@?"
},
templateUrl: "views/_pod-template.html"
};
}).directive("podTemplateContainer", function() {
return {
restrict: "E",
scope: {
container: "=podTemplateContainer",
imagesByDockerReference: "=",
builds: "=",
detailed: "=?",
labelPrefix: "@?"
},
templateUrl: "views/_pod-template-container.html"
};
}).directive("annotations", function() {
return {
restrict: "E",
scope: {
annotations: "="
},
templateUrl: "views/directives/annotations.html",
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
link: function(a) {
a.expandAnnotations = !1, a.toggleAnnotations = function() {
a.expandAnnotations = !a.expandAnnotations;
=======
link: function(e) {
e.expandAnnotations = !1, e.toggleAnnotations = function() {
e.expandAnnotations = !e.expandAnnotations;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
};
}
};
}).directive("registryAnnotations", function() {
return {
restrict: "E",
priority: 1,
terminal: !0,
scope: {
annotations: "="
},
templateUrl: "views/directives/annotations.html",
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
link: function(a) {
a.expandAnnotations = !1, a.toggleAnnotations = function() {
a.expandAnnotations = !a.expandAnnotations;
=======
link: function(e) {
e.expandAnnotations = !1, e.toggleAnnotations = function() {
e.expandAnnotations = !e.expandAnnotations;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
};
}
};
}).directive("volumes", function() {
return {
restrict: "E",
scope: {
volumes: "=",
namespace: "=",
canRemove: "=?",
removeFn: "&?"
},
templateUrl: "views/_volumes.html"
};
}).directive("volumeClaimTemplates", function() {
return {
restrict: "E",
scope: {
templates: "="
},
templateUrl: "views/_volume-claim-templates.html"
};
}).directive("hpa", function() {
return {
restrict: "E",
scope: {
hpa: "=",
project: "=",
showScaleTarget: "=?",
alerts: "="
},
templateUrl: "views/directives/hpa.html"
};
}).directive("probe", function() {
return {
restrict: "E",
scope: {
probe: "="
},
templateUrl: "views/directives/_probe.html"
};
}).directive("podsTable", [ "$filter", function(e) {
return {
restrict: "E",
scope: {
pods: "=",
activePods: "=?",
emptyMessage: "=?",
customNameHeader: "=?",
podFailureReasons: "=?"
},
templateUrl: "views/directives/pods-table.html",
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
link: function(b) {
var c = a("orderObjectsByDate"), d = _.debounce(function(a) {
b.$evalAsync(function() {
b.sortedPods = c(a, !0);
=======
link: function(t) {
var n = e("orderObjectsByDate"), r = _.debounce(function(e) {
t.$evalAsync(function() {
t.sortedPods = n(e, !0);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
});
}, 150, {
maxWait: 500
});
t.$watch("pods", r);
}
};
} ]).directive("trafficTable", function() {
return {
restrict: "E",
scope: {
routes: "=",
services: "=",
portsByRoute: "=",
showNodePorts: "=?",
customNameHeader: "=?"
},
templateUrl: "views/directives/traffic-table.html"
};
<<<<<<< 952b26bc3acaa89a51e4aad5f965e515d3b007ae
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
}), angular.module("openshiftConsole").component("resourceServiceBindings", {
controller: [ "$filter", "APIService", "BindingService", "CatalogService", "DataService", ResourceServiceBindings ],
=======
}), angular.module("openshiftConsole").component("resourceServiceBindings", {
<<<<<<< 0ba73cbc37b88f92a6380ccc93fc8e3d978020aa
controller: [ "$filter", "DataService", "BindingService", "CatalogService", ResourceServiceBindings ],
>>>>>>> Add bindings list to resource pages
=======
controller: [ "$filter", "APIService", "BindingService", "CatalogService", "DataService", ResourceServiceBindings ],
>>>>>>> Adopt service catalog API changes
controllerAs: "$ctrl",
bindings: {
project: "<",
projectContext: "<",
apiObject: "<",
createBinding: "&"
},
templateUrl: "views/directives/resource-service-bindings.html"
<<<<<<< ed7141d71afeea314ad6d1183c760dedc6ee73fe
<<<<<<< 24676ebc00eb5b230c956cee1909dd4c3e3fad1a
<<<<<<< 33eb37eab8df0c17bc226501a924a2dc2b9b2f41
<<<<<<< 952b26bc3acaa89a51e4aad5f965e515d3b007ae
=======
>>>>>>> Fix issues with bindings widget for service instances
}), angular.module("openshiftConsole").component("serviceInstanceBindings", {
controller: [ "$filter", "APIService", "BindingService", ServiceInstanceBindings ],
controllerAs: "$ctrl",
bindings: {
<<<<<<< ed7141d71afeea314ad6d1183c760dedc6ee73fe
isOverview: "<?",
=======
>>>>>>> Fix issues with bindings widget for service instances
showHeader: "<?",
project: "<",
bindings: "<",
serviceInstance: "<",
serviceClass: "<",
servicePlan: "<"
},
templateUrl: "views/directives/service-instance-bindings.html"
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< ed7141d71afeea314ad6d1183c760dedc6ee73fe
}), angular.module("openshiftConsole").directive("sidebar", [ "$location", "$filter", "$timeout", "$rootScope", "$routeParams", "AuthorizationService", "Constants", "HTMLService", function(a, b, c, d, e, f, g, h) {
var i = function(a, b) {
return a.href === b || _.some(a.prefixes, function(a) {
return _.startsWith(b, a);
=======
=======
>>>>>>> Add bindings list to resource pages
}), angular.module("openshiftConsole").directive("sidebar", [ "$location", "$filter", "Constants", function(e, t, n) {
var a = t("canI"), r = function(e, t) {
=======
}), angular.module("openshiftConsole").directive("sidebar", [ "$location", "$filter", "$timeout", "$rootScope", "AuthorizationService", "Constants", "HTMLService", function(e, t, n, a, r, o, i) {
var s = function(e, t) {
>>>>>>> Patternfly vertical navigation and project bar
=======
=======
>>>>>>> Fix issues with bindings widget for service instances
}), angular.module("openshiftConsole").directive("sidebar", [ "$location", "$filter", "$timeout", "$rootScope", "$routeParams", "AuthorizationService", "Constants", "HTMLService", function(e, t, n, a, r, o, i, s) {
=======
}), angular.module("openshiftConsole").directive("sidebar", [ "$location", "$filter", "$timeout", "$rootScope", "$routeParams", "AuthorizationService", "Constants", "HTMLService", function(e, t, n, r, a, o, i, s) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
var c = function(e, t) {
>>>>>>> Make sure there's always a menu item for the current project
return e.href === t || _.some(e.prefixes, function(e) {
return _.startsWith(t, e);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
});
};
return {
restrict: "E",
templateUrl: "views/_sidebar.html",
<<<<<<< 24676ebc00eb5b230c956cee1909dd4c3e3fad1a
<<<<<<< 33eb37eab8df0c17bc226501a924a2dc2b9b2f41
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
controller: [ "$scope", function(j) {
var k, l = 200, m = l + 100;
j.navItems = g.PROJECT_NAVIGATION, j.sidebar = {};
var n = function() {
j.projectName = e.project, _.set(j, "sidebar.secondaryOpen", !1), _.set(d, "nav.showMobileNav", !1), j.activeSecondary = null, j.activePrimary = _.find(j.navItems, function(b) {
return k = a.path().replace("/project/" + j.projectName, ""), i(b, k) ? (j.activeSecondary = null, !0) : _.some(b.secondaryNavSections, function(a) {
var b = _.find(a.items, function(a) {
return i(a, k);
});
return !!b && (j.activeSecondary = b, !0);
});
});
};
n(), j.$on("$routeChangeSuccess", n);
var o = function() {
_.each(j.navItems, function(a) {
a.isHover = !1;
});
};
j.navURL = function(a) {
return a ? b("isAbsoluteURL")(a) ? a : "project/" + j.projectName + a : "";
}, j.show = function(a) {
var b = !a.isValid || a.isValid();
return !!b && (!a.canI || f.canI({
resource: a.canI.resource,
group: a.canI.group
}, a.canI.verb, j.projectName));
}, j.itemClicked = function(a) {
return o(), a.href ? (j.nav.showMobileNav = !1, void (j.sidebar.secondaryOpen = !1)) : (a.isHover = !0, a.mobileSecondary = j.isMobile, j.sidebar.showMobileSecondary = j.isMobile, void (j.sidebar.secondaryOpen = !0));
}, j.onMouseEnter = function(a) {
a.mouseLeaveTimeout && (c.cancel(a.mouseLeaveTimeout), a.mouseLeaveTimeout = null), a.mouseEnterTimeout = c(function() {
a.isHover = !0, a.mouseEnterTimeout = null, j.sidebar.secondaryOpen = !_.isEmpty(a.secondaryNavSections);
}, l);
}, j.onMouseLeave = function(a) {
a.mouseEnterTimeout && (c.cancel(a.mouseEnterTimeout), a.mouseEnterTimeout = null), a.mouseLeaveTimeout = c(function() {
a.isHover = !1, a.mouseLeaveTimeout = null, j.sidebar.secondaryOpen = _.some(j.navItems, function(a) {
return a.isHover && !_.isEmpty(a.secondaryNavSections);
});
}, m);
}, j.closeNav = function() {
o(), j.nav.showMobileNav = !1, j.sidebar.secondaryOpen = !1;
}, j.collapseMobileSecondary = function(a, b) {
a.mobileSecondary = !1, b.stopPropagation();
};
var p = function() {
return h.isWindowBelowBreakpoint(h.WINDOW_SIZE_SM);
=======
controller: [ "$scope", function(o) {
var i = e.path().replace("/project/" + o.projectName, "");
o.activeSecondary, o.navItems = n.PROJECT_NAVIGATION, o.activePrimary = _.find(o.navItems, function(e) {
return r(e, i) ? (o.activeSecondary = null, !0) : _.some(e.secondaryNavSections, function(e) {
=======
controller: [ "$scope", function(c) {
var l;
c.navItems = o.PROJECT_NAVIGATION, c.sidebar = {};
var u = function() {
_.set(c, "sidebar.secondaryOpen", !1), _.set(a, "nav.showMobileNav", !1), c.activeSecondary = null, c.activePrimary = _.find(c.navItems, function(t) {
return l = e.path().replace("/project/" + c.projectName, ""), s(t, l) ? (c.activeSecondary = null, !0) : _.some(t.secondaryNavSections, function(e) {
>>>>>>> Patternfly vertical navigation and project bar
=======
controller: [ "$scope", function(l) {
var u;
l.navItems = i.PROJECT_NAVIGATION, l.sidebar = {};
var d = function() {
l.projectName = a.project, _.set(l, "sidebar.secondaryOpen", !1), _.set(r, "nav.showMobileNav", !1), l.activeSecondary = null, l.activePrimary = _.find(l.navItems, function(t) {
return u = e.path().replace("/project/" + l.projectName, ""), c(t, u) ? (l.activeSecondary = null, !0) : _.some(t.secondaryNavSections, function(e) {
>>>>>>> Make sure there's always a menu item for the current project
var t = _.find(e.items, function(e) {
return c(e, u);
});
return !!t && (l.activeSecondary = t, !0);
});
});
};
d(), l.$on("$routeChangeSuccess", d);
var m = function() {
_.each(l.navItems, function(e) {
e.isHover = !1;
});
};
l.navURL = function(e) {
return e ? t("isAbsoluteURL")(e) ? e : "project/" + l.projectName + e : "";
}, l.show = function(e) {
return !(e.isValid && !e.isValid()) && (!e.canI || (e.canI.addToProject ? l.canIAddToProject : o.canI({
resource: e.canI.resource,
group: e.canI.group
}, e.canI.verb, l.projectName)));
}, l.itemClicked = function(e) {
if (e.href) return l.nav.showMobileNav = !1, void (l.sidebar.secondaryOpen = !1);
m(), e.isHover = !0, e.mobileSecondary = l.isMobile, l.sidebar.showMobileSecondary = l.isMobile, l.sidebar.secondaryOpen = !0;
}, l.onMouseEnter = function(e) {
_.isEmpty(e.secondaryNavSections) || (e.mouseLeaveTimeout && (n.cancel(e.mouseLeaveTimeout), e.mouseLeaveTimeout = null), e.mouseEnterTimeout = n(function() {
e.isHover = !0, e.mouseEnterTimeout = null, l.sidebar.secondaryOpen = !0;
}, 300));
}, l.onMouseLeave = function(e) {
_.isEmpty(e.secondaryNavSections) || (e.mouseEnterTimeout && (n.cancel(e.mouseEnterTimeout), e.mouseEnterTimeout = null), e.mouseLeaveTimeout = n(function() {
e.isHover = !1, e.mouseLeaveTimeout = null, l.sidebar.secondaryOpen = _.some(l.navItems, function(e) {
return e.isHover && !_.isEmpty(e.secondaryNavSections);
});
<<<<<<< 33eb37eab8df0c17bc226501a924a2dc2b9b2f41
}), o.navURL = function(e) {
return e ? t("isAbsoluteURL")(e) ? e : "project/" + o.projectName + e : "";
}, o.show = function(e) {
return !(e.isValid && !e.isValid()) && (!e.canI || a(e.canI.resource, e.canI.verb, e.canI.group));
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
};
j.isMobile = p();
var q = _.throttle(function() {
var a = p();
a !== j.isMobile && j.$evalAsync(function() {
j.isMobile = a, a || (_.set(d, "nav.showMobileNav", !1), _.each(j.navItems, function(a) {
a.mobileSecondary = !1;
}));
});
}, 50);
$(window).on("resize.verticalnav", q), j.$on("$destroy", function() {
=======
}, 500));
}, l.closeNav = function() {
m(), l.nav.showMobileNav = !1, l.sidebar.secondaryOpen = !1;
}, l.collapseMobileSecondary = function(e, t) {
e.mobileSecondary = !1, t.stopPropagation();
};
var p = function() {
return s.isWindowBelowBreakpoint(s.WINDOW_SIZE_SM);
};
l.isMobile = p();
var f = _.throttle(function() {
var e = p();
e !== l.isMobile && l.$evalAsync(function() {
l.isMobile = e, e || (_.set(r, "nav.showMobileNav", !1), _.each(l.navItems, function(e) {
e.mobileSecondary = !1;
}));
});
}, 50);
<<<<<<< 24676ebc00eb5b230c956cee1909dd4c3e3fad1a
$(window).on("resize.verticalnav", p), c.$on("$destroy", function() {
>>>>>>> Patternfly vertical navigation and project bar
=======
$(window).on("resize.verticalnav", f), l.$on("$destroy", function() {
>>>>>>> Make sure there's always a menu item for the current project
$(window).off(".verticalnav");
});
} ]
};
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< fc7258c29d770efe2753fac029ffa236e078e495
<<<<<<< b4ddc9b550515059b9681d76233c34b7f7b3431c
<<<<<<< 33eb37eab8df0c17bc226501a924a2dc2b9b2f41
<<<<<<< 7fc0bb75a45e57cf2098d66ed317a3123741a3d2
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
} ]).directive("oscHeader", [ "$filter", "$location", "$rootScope", "$routeParams", "$timeout", "AuthorizationService", "Constants", "ProjectsService", "projectOverviewURLFilter", "gettext", "gettextCatalog", function(a, b, c, d, e, f, g, h, i, j, k) {
var l = {}, m = [], n = a("displayName"), o = a("uniqueDisplayName");
return {
restrict: "EA",
templateUrl: "views/directives/header/header.html",
link: function(e, p) {
var q = 100, r = "openshift/vertical-nav-collapsed";
e.currentProject = l[d.project];
var s = function(a, b) {
var d;
_.set(c, "nav.collapsed", a), b && (d = a ? "true" : "false", localStorage.setItem(r, d));
}, t = function() {
var a = "true" === localStorage.getItem(r);
s(a);
};
t();
var u = function() {
return _.get(c, "nav.collapsed", !1);
}, v = function(a) {
_.set(c, "nav.showMobileNav", a);
};
e.toggleNav = function() {
var a = u();
s(!a, !0);
}, e.toggleMobileNav = function() {
var a = _.get(c, "nav.showMobileNav");
v(!a);
}, e.closeMobileNav = function() {
v(!1);
}, e.closeOrderingPanel = function() {
_.set(e, "ordering.panelName", "");
}, e.showOrderingPanel = function(a) {
_.set(e, "ordering.panelName", a);
}, e.catalogLandingPageEnabled = !g.DISABLE_SERVICE_CATALOG_LANDING_PAGE;
var w = p.find(".selectpicker"), x = [], y = function() {
var b = e.currentProjectName;
if (b) {
var c = function(a, c) {
var d = $("<option>").attr("value", a.metadata.name).attr("selected", a.metadata.name === b);
return c ? d.text(n(a)) : d.text(o(a, m)), d;
};
_.size(l) <= q ? (m = a("orderByDisplayName")(l), x = _.map(m, function(a) {
return c(a, !1);
})) : x = [ c(l[b], !0) ], w.empty(), w.append(x), w.append($('<option data-divider="true"></option>')), w.append($('<option value="">' + k.getString(j("View All Projects")) + "</option>")), w.selectpicker("refresh");
}
}, z = function() {
return h.list().then(function(a) {
l = a.by("metadata.name");
});
}, A = function() {
var a = d.project;
e.currentProjectName !== a && (e.currentProjectName = a, e.chromeless = "chromeless" === d.view, a && !e.chromeless ? (_.set(c, "view.hasProject", !0), e.canIAddToProject = !1, f.getProjectRules(a).then(function() {
e.currentProjectName === a && (e.canIAddToProject = f.canIAddToProject(a));
}), z().then(function() {
e.currentProjectName && l && (l[e.currentProjectName] || (l[e.currentProjectName] = {
metadata: {
name: e.currentProjectName
}
}), e.currentProject = l[e.currentProjectName], y());
})) : _.set(c, "view.hasProject", !1));
};
A(), e.$on("$routeChangeSuccess", A), w.selectpicker({
iconBase: "fa",
tickIcon: "fa-check"
}).change(function() {
var a = $(this).val(), c = "" === a ? "projects" : i(a);
e.$apply(function() {
b.url(c);
});
});
}
};
} ]).directive("projectFilter", [ "LabelFilter", "gettext", "gettextCatalog", function(a, b, c) {
return {
restrict: "E",
templateUrl: "views/directives/_project-filter.html",
link: function(d, e) {
a.setupFilterWidget(e.find(".navbar-filter-widget"), e.find(".active-filters"), {
addButtonText: c.getString(b("Add"))
}), a.toggleFilterWidget(!d.renderOptions || !d.renderOptions.hideFilterWidget), d.$watch("renderOptions", function(b) {
a.toggleFilterWidget(!b || !b.hideFilterWidget);
});
}
};
<<<<<<< 13ac2d832bc56edf6bc5e2fc652da9b188ddae32
} ]).directive("navbarUtility", function() {
=======
} ]).directive("projectHeader", [ "$timeout", "$location", "$filter", "DataService", "projectOverviewURLFilter", "Constants", function(e, t, n, a, r, o) {
var i = {}, s = [];
=======
} ]).directive("projectHeader", [ "$timeout", "$location", "$filter", "ProjectsService", "projectOverviewURLFilter", "Constants", function(e, t, n, a, r, o) {
var i = {}, s = [], c = n("displayName"), l = n("uniqueDisplayName");
>>>>>>> Bug 1481127 - More robust handling of large project lists
=======
} ]).directive("oscHeader", [ "$filter", "$location", "$rootScope", "$routeParams", "$timeout", "AuthorizationService", "Constants", "ProjectsService", "projectOverviewURLFilter", function(e, t, n, a, r, o, i, s, c) {
<<<<<<< 9bc0af8cb56dcc9609307333b9424f396867cab5
<<<<<<< 602d786018a3879a89789b1214b36a15c51b928b
var l = {}, u = [], d = e("displayName"), m = e("uniqueDisplayName");
>>>>>>> Patternfly vertical navigation and project bar
=======
var l = {}, u = [], d = e("displayName"), p = e("uniqueDisplayName");
>>>>>>> Updates for Service Instance & Bindings
=======
var l = {}, u = [], d = e("displayName"), m = e("uniqueDisplayName");
>>>>>>> Support EnvFrom in the Env Editors
=======
} ]).directive("oscHeader", [ "$filter", "$location", "$q", "$rootScope", "$routeParams", "$timeout", "AuthorizationService", "Catalog", "CatalogService", "Constants", "DataService", "NotificationsService", "ProjectsService", "projectOverviewURLFilter", "RecentlyViewedServiceItems", function(e, t, n, a, r, o, i, s, c, l, u, d, m, p, f) {
var g = {}, v = [], h = e("displayName"), y = e("uniqueDisplayName");
>>>>>>> Add search catalog in project context
=======
} ]).directive("oscHeader", [ "$filter", "$location", "$q", "$rootScope", "$routeParams", "$timeout", "APIService", "AuthorizationService", "Catalog", "CatalogService", "Constants", "DataService", "NotificationsService", "ProjectsService", "projectOverviewURLFilter", "RecentlyViewedServiceItems", function(e, t, n, a, r, o, i, s, c, l, u, d, m, p, f, g) {
=======
} ]).directive("oscHeader", [ "$filter", "$location", "$q", "$rootScope", "$routeParams", "$timeout", "APIService", "AuthorizationService", "Catalog", "CatalogService", "Constants", "DataService", "NotificationsService", "ProjectsService", "projectOverviewURLFilter", "RecentlyViewedServiceItems", function(e, t, n, r, a, o, i, s, c, l, u, d, m, p, f, g) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
var v = {}, h = [], y = e("displayName"), b = e("uniqueDisplayName"), S = i.getPreferredVersion("templates");
>>>>>>> Update directives/nav oscHeader to use getPreferredVersion
=======
} ]).directive("oscHeader", [ "$filter", "$location", "$q", "$rootScope", "$routeParams", "$timeout", "APIService", "AuthorizationService", "Catalog", "CatalogService", "Constants", "DataService", "Navigate", "NotificationsService", "ProjectsService", "projectOverviewURLFilter", "RecentlyViewedServiceItems", function(e, t, n, r, a, o, i, s, c, l, u, d, m, p, f, g, v) {
var h = {}, y = [], b = e("displayName"), S = e("uniqueDisplayName"), C = i.getPreferredVersion("templates");
>>>>>>> Add Browse Catalog to Project context view.
return {
restrict: "EA",
templateUrl: "views/directives/header/header.html",
link: function(i, p) {
i.currentProject = h[a.project];
var w = function(e, t) {
var n;
_.set(r, "nav.collapsed", e), t && (n = e ? "true" : "false", localStorage.setItem("openshift/vertical-nav-collapsed", n));
};
!function() {
var e = "true" === localStorage.getItem("openshift/vertical-nav-collapsed");
w(e);
}();
var P = function() {
return _.get(r, "nav.collapsed", !1);
}, j = function(e) {
_.set(r, "nav.showMobileNav", e);
};
i.toggleNav = function() {
var e = P();
w(!e, !0);
}, i.toggleMobileNav = function() {
var e = _.get(r, "nav.showMobileNav");
j(!e);
}, i.closeMobileNav = function() {
j(!1);
}, i.closeOrderingPanel = function() {
i.orderingPanelVisible = !1;
}, i.showOrderingPanel = function(e) {
i.orderingPanelVisible = !0, i.orderKind = e;
}, i.onSearchToggle = function(e) {
_.set(r, "view.hasProjectSearch", e);
}, i.catalogLandingPageEnabled = !u.DISABLE_SERVICE_CATALOG_LANDING_PAGE;
var k = p.find(".selectpicker"), I = [], R = function() {
var t = i.currentProjectName;
if (t) {
var n = function(e, n) {
var r = $("<option>").attr("value", e.metadata.name).attr("selected", e.metadata.name === t);
return n ? r.text(b(e)) : r.text(S(e, y)), r;
};
_.size(h) <= 100 ? (y = e("orderByDisplayName")(h), I = _.map(y, function(e) {
return n(e, !1);
<<<<<<< 9247fa4ce3717d81dc49860eaea335b356698bdd
<<<<<<< 13ac2d832bc56edf6bc5e2fc652da9b188ddae32
<<<<<<< fc7258c29d770efe2753fac029ffa236e078e495
<<<<<<< b4ddc9b550515059b9681d76233c34b7f7b3431c
<<<<<<< 3087d5859f05def6301fced3a013ac9165fd8c7a
})) : y = [ n(l[t], !0) ], v.empty(), v.append(y), v.append($('<option data-divider="true"></option>')), v.append($('<option value="">View all Projects</option>')), v.selectpicker("refresh");
=======
})) : y = [ n(l[t], !0) ], h.empty(), h.append(y), h.append($('<option data-divider="true"></option>')), h.append($('<option value="">View All Projects</option>')), h.selectpicker("refresh");
>>>>>>> Add SVG icons
=======
})) : P = [ n(g[t], !0) ], w.empty(), w.append(P), w.append($('<option data-divider="true"></option>')), w.append($('<option value="">View All Projects</option>')), w.selectpicker("refresh");
>>>>>>> Add search catalog in project context
=======
})) : k = [ n(v[t], !0) ], P.empty(), P.append(k), P.append($('<option data-divider="true"></option>')), P.append($('<option value="">View All Projects</option>')), P.selectpicker("refresh");
>>>>>>> Update directives/nav oscHeader to use getPreferredVersion
=======
})) : k = [ n(h[t], !0) ], j.empty(), j.append(k), j.append($('<option data-divider="true"></option>')), j.append($('<option value="">View All Projects</option>')), j.selectpicker("refresh");
>>>>>>> Add Browse Catalog to Project context view.
=======
})) : I = [ n(h[t], !0) ], k.empty(), k.append(I), k.append($('<option data-divider="true"></option>')), k.append($('<option value="">View All Projects</option>')), k.selectpicker("refresh");
>>>>>>> Fix flicker showing builder dialog
}
}, E = function() {
return f.list().then(function(e) {
h = e.by("metadata.name");
});
}, T = function() {
var e = a.project;
i.currentProjectName !== e && (i.currentProjectName = e, i.chromeless = "chromeless" === a.view, e && !i.chromeless ? (_.set(r, "view.hasProject", !0), i.canIAddToProject = !1, s.getProjectRules(e).then(function() {
i.currentProjectName === e && (i.canIAddToProject = s.canIAddToProject(e), i.canIAddToProject && l.getCatalogItems().then(function(e) {
i.catalogItems = e;
}));
}), E().then(function() {
i.currentProjectName && h && (h[i.currentProjectName] || (h[i.currentProjectName] = {
metadata: {
name: i.currentProjectName
}
}), i.currentProject = h[i.currentProjectName], R());
})) : _.set(r, "view.hasProject", !1));
}, N = function() {
i.orderingPanelVisible && v.addItem(_.get(i.selectedItem, "resource.metadata.uid"));
}, D = function(e) {
return "PartialObjectMetadata" === e.kind;
}, A = function(e) {
return D(e) ? d.get(C, e.metadata.name, {
namespace: e.metadata.namespace
}) : n.when(e);
};
i.$on("open-overlay-panel", function(e, t) {
i.currentProjectName && (i.servicePlansForItem = null, i.orderKind = _.get(t, "kind"), "Template" !== i.orderKind ? "ClusterServiceClass" !== i.orderKind ? o(function() {
i.selectedItem = t, i.orderingPanelVisible = !0;
}) : c.getServicePlansForServiceClass(_.get(t, "resource.metadata.name")).then(function(e) {
i.servicePlansForItem = _.reject(e.by("metadata.name"), {
status: {
removedFromBrokerCatalog: !0
}
}), i.selectedItem = t, i.orderingPanelVisible = !0;
}) : A(t.resource).then(function(e) {
i.selectedItem = e, i.orderingPanelVisible = !0, i.orderKind = "Template";
}));
});
var B = r.$on("filter-catalog-items", function(e, t) {
if (i.currentProjectName) {
var n = {
filter: t.searchText
};
m.toProjectCatalog(i.currentProjectName, n);
}
});
i.closeOrderingPanel = function() {
v.addItem(_.get(i.selectedItem, "resource.metadata.uid")), i.orderingPanelVisible = !1;
}, T(), i.$on("$routeChangeSuccess", T), k.selectpicker({
iconBase: "fa",
tickIcon: "fa-check"
}).change(function() {
var e = $(this).val(), n = "" === e ? "projects" : g(e);
i.$apply(function() {
t.url(n);
});
}), i.$on("$destroy", function() {
B(), N();
});
}
};
} ]).directive("projectFilter", [ "LabelFilter", function(e) {
return {
restrict: "E",
templateUrl: "views/directives/_project-filter.html",
link: function(t, n) {
e.setupFilterWidget(n.find(".navbar-filter-widget"), n.find(".active-filters"), {
addButtonText: "Add"
}), e.toggleFilterWidget(!t.renderOptions || !t.renderOptions.hideFilterWidget), t.$watch("renderOptions", function(t) {
e.toggleFilterWidget(!t || !t.hideFilterWidget);
});
}
};
<<<<<<< 33eb37eab8df0c17bc226501a924a2dc2b9b2f41
} ]).directive("projectPage", function() {
return {
restrict: "E",
transclude: !0,
templateUrl: "views/_project-page.html"
};
}).directive("navbarUtility", function() {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
} ]).directive("navbarUtility", function() {
>>>>>>> Patternfly vertical navigation and project bar
return {
restrict: "E",
transclude: !0,
templateUrl: "views/directives/header/_navbar-utility.html",
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
controller: [ "$scope", "Constants", function(a, b) {
a.launcherApps = b.APP_LAUNCHER_NAVIGATION;
=======
controller: [ "$scope", "Constants", function(e, t) {
e.launcherApps = t.APP_LAUNCHER_NAVIGATION;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
} ]
};
<<<<<<< 33eb37eab8df0c17bc226501a924a2dc2b9b2f41
}).directive("navbarUtilityMobile", [ "$timeout", function(a) {
return {
restrict: "E",
transclude: !0,
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
templateUrl: "views/directives/header/_navbar-utility-mobile.html",
link: function(b, c) {
a(function() {
var a = c.find("li");
a.addClass("list-group-item");
var d = {};
a.each(function(a, b) {
var c = $(b).find("a");
c.each(function(a, c) {
c.href && (d[c.href] = b);
}), c.contents().filter(function() {
return 3 === this.nodeType && $.trim(this.nodeValue).length;
}).wrap('<span class="list-group-item-value"/>');
});
var e = function() {
a.removeClass("active");
var b = d[window.location.href];
b && $(b).addClass("active");
};
e(), b.$on("$routeChangeSuccess", e);
});
}
=======
templateUrl: "views/directives/header/_navbar-utility-mobile.html"
};
}).directive("defaultHeader", function() {
return {
restrict: "E",
transclude: !0,
templateUrl: "views/directives/header/default-header.html"
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
}).directive("navbarUtilityMobile", [ "$timeout", function(e) {
return {
restrict: "E",
transclude: !0,
templateUrl: "views/directives/header/_navbar-utility-mobile.html",
link: function(t, n) {
e(function() {
var e = n.find("li");
e.addClass("list-group-item");
var r = {};
e.each(function(e, t) {
var n = $(t).find("a");
n.each(function(e, n) {
n.href && (r[n.href] = t);
}), n.contents().filter(function() {
return 3 === this.nodeType && $.trim(this.nodeValue).length;
}).wrap('<span class="list-group-item-value"/>');
});
var a = function() {
e.removeClass("active");
var t = r[window.location.href];
t && $(t).addClass("active");
};
a(), t.$on("$routeChangeSuccess", a);
});
}
>>>>>>> Patternfly vertical navigation and project bar
};
} ]).directive("navPfVerticalAlt", function() {
return {
restrict: "EAC",
link: function() {
$.fn.navigation();
}
};
}).directive("breadcrumbs", function() {
return {
restrict: "E",
scope: {
breadcrumbs: "="
},
templateUrl: "views/directives/breadcrumbs.html"
};
}).directive("back", [ "$window", function(e) {
return {
restrict: "A",
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
link: function(b, c) {
c.bind("click", function() {
a.history.back();
=======
link: function(t, n) {
n.bind("click", function() {
e.history.back();
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
});
}
};
} ]), angular.module("openshiftConsole").component("alerts", {
bindings: {
alerts: "=",
filter: "<?",
hideCloseButton: "<?"
},
<<<<<<< 81d3a6f792ee69e29140010534221ebcbab63c04
templateUrl: "views/_alerts.html",
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
link: function(a) {
a.close = function(a) {
a.hidden = !0, _.isFunction(a.onClose) && a.onClose();
}, a.onClick = function(a, b) {
if (_.isFunction(b.onClick)) {
var c = b.onClick();
c && (a.hidden = !0);
}
=======
link: function(e) {
e.close = function(e) {
e.hidden = !0, _.isFunction(e.onClose) && e.onClose();
}, e.onClick = function(e, t) {
_.isFunction(t.onClick) && t.onClick() && (e.hidden = !0);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
templateUrl: "components/alerts/alerts.html",
controller: function() {
var e = this;
e.close = function(e) {
e.hidden = !0, _.isFunction(e.onClose) && e.onClose();
}, e.onClick = function(t, n) {
_.isFunction(n.onClick) && n.onClick() && e.close(t);
>>>>>>> Convert alerts directive to component and add spec test.
};
}
}), angular.module("openshiftConsole").directive("parseError", function() {
return {
restrict: "E",
scope: {
error: "="
},
templateUrl: "views/_parse-error.html",
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
link: function(a) {
a.$watch("error", function() {
a.hidden = !1;
=======
link: function(e) {
e.$watch("error", function() {
e.hidden = !1;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
});
}
};
}), angular.module("openshiftConsole").directive("podWarnings", [ "podWarningsFilter", function(e) {
return {
restrict: "E",
scope: {
pod: "="
},
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
link: function(b) {
var c, d = "", e = a(b.pod);
for (c = 0; c < _.size(e); c++) d && (d += "<br>"), "error" === e[c].severity && (b.hasError = !0), d += e[c].message;
b.content = d;
=======
link: function(t) {
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
var n, a = "", r = e(t.pod);
for (n = 0; n < _.size(r); n++) a && (a += "<br>"), "error" === r[n].severity && (t.hasError = !0), a += r[n].message;
t.content = a;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
var n, r = "", a = e(t.pod);
for (n = 0; n < _.size(a); n++) r && (r += "<br>"), "error" === a[n].severity && (t.hasError = !0), r += a[n].message;
t.content = r;
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
},
templateUrl: "views/directives/_warnings-popover.html"
};
} ]).directive("routeWarnings", [ "RoutesService", function(e) {
return {
restrict: "E",
scope: {
route: "=",
services: "="
},
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
link: function(b) {
var c = function() {
var c = a.getRouteWarnings(b.route, b.services);
b.content = _.map(c, _.escape).join("<br>");
};
b.$watchGroup([ "route", "services" ], c);
=======
link: function(t) {
t.$watchGroup([ "route", "services" ], function() {
var n = e.getRouteWarnings(t.route, t.services);
t.content = _.map(n, _.escape).join("<br>");
});
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
},
templateUrl: "views/directives/_warnings-popover.html"
};
} ]), angular.module("openshiftConsole").directive("takeFocus", [ "$timeout", function(e) {
return {
restrict: "A",
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
link: function(b, c) {
a(function() {
$(c).focus();
=======
link: function(t, n) {
e(function() {
$(n).focus();
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
}, 300);
}
};
} ]).directive("selectOnFocus", function() {
return {
restrict: "A",
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
link: function(a, b) {
$(b).focus(function() {
=======
link: function(e, t) {
$(t).focus(function() {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
$(this).select();
});
}
};
}).directive("focusWhen", [ "$timeout", function(e) {
return {
restrict: "A",
scope: {
trigger: "@focusWhen"
},
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
link: function(b, c) {
b.$watch("trigger", function(b) {
b && a(function() {
$(c).focus();
=======
link: function(t, n) {
t.$watch("trigger", function(t) {
t && e(function() {
$(n).focus();
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
});
});
}
};
} ]).directive("clickToReveal", function() {
return {
restrict: "A",
transclude: !0,
scope: {
linkText: "@"
},
templateUrl: "views/directives/_click-to-reveal.html",
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
link: function(a, b) {
$(".reveal-contents-link", b).click(function() {
$(this).hide(), $(".reveal-contents", b).show();
=======
link: function(e, t) {
$(".reveal-contents-link", t).click(function() {
$(this).hide(), $(".reveal-contents", t).show();
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
});
}
};
}).directive("copyToClipboard", function() {
return {
restrict: "E",
scope: {
clipboardText: "=",
isDisabled: "=?",
displayWide: "=?",
inputText: "=?",
multiline: "=?"
},
templateUrl: "views/directives/_copy-to-clipboard.html",
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
controller: [ "$scope", function(a) {
a.id = _.uniqueId("clipboardJs");
} ],
link: function(a, b) {
var c = $("a", b), d = c.get(0);
a.inputText && (d = c.get(1));
var e = new Clipboard(d);
e.on("success", function(a) {
$(a.trigger).attr("title", "Copied!").tooltip("fixTitle").tooltip("show").attr("title", "Copy to Clipboard").tooltip("fixTitle"), a.clearSelection();
}), e.on("error", function(a) {
var b = /Mac/i.test(navigator.userAgent) ? "Press ⌘C to copy" : "Press Ctrl-C to copy";
$(a.trigger).attr("title", b).tooltip("fixTitle").tooltip("show").attr("title", "Copy to Clipboard").tooltip("fixTitle");
}), b.on("$destroy", function() {
e.destroy();
=======
controller: [ "$scope", function(e) {
e.id = _.uniqueId("clipboardJs");
} ],
link: function(e, t) {
var n = $("a", t), r = n.get(0);
e.inputText && (r = n.get(1));
var a = new Clipboard(r);
a.on("success", function(e) {
$(e.trigger).attr("title", "Copied!").tooltip("fixTitle").tooltip("show").attr("title", "Copy to Clipboard").tooltip("fixTitle"), e.clearSelection();
}), a.on("error", function(e) {
var t = /Mac/i.test(navigator.userAgent) ? "Press ⌘C to copy" : "Press Ctrl-C to copy";
$(e.trigger).attr("title", t).tooltip("fixTitle").tooltip("show").attr("title", "Copy to Clipboard").tooltip("fixTitle");
}), t.on("$destroy", function() {
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
r.destroy();
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
a.destroy();
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
});
}
};
}).directive("copyLoginToClipboard", [ "NotificationsService", function(a) {
return {
restrict: "E",
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
replace: !0,
scope: {
clipboardText: "@"
},
template: '<a href="" data-clipboard-text="">Copy Login Command</a>',
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
link: function(b, c) {
var d = new Clipboard(c.get(0));
d.on("success", function() {
a.addNotification({
=======
link: function(t, n) {
var r = new Clipboard(n.get(0));
r.on("success", function() {
e.addNotification({
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
id: "copy-login-command-success",
type: "success",
message: "Login command copied."
});
var b = "openshift/token-warning";
a.addNotification({
id: b,
type: "warning",
message: "A token is a form of a password. Do not share your API token.",
links: [ {
href: "",
label: "Don't Show Me Again",
onClick: function() {
return a.permanentlyHideNotification(b), !0;
}
} ]
});
}), d.on("error", function() {
a.addNotification({
id: "copy-login-command-error",
type: "error",
message: "Unable to copy the login command."
});
}), c.on("$destroy", function() {
d.destroy();
});
}
=======
scope: {
id: "@"
},
template: '<code class="short-id" title="{{id}}">{{id.substring(0, 6)}}</code>'
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
};
<<<<<<< f8cb892c3d9e864c3b7b3ba810c290ed7ce351f0
<<<<<<< 9584ba84e2ebc7958f341c9fa08e753d6aeb232e
=======
}).directive("copyLoginToClipboard", [ "NotificationsService", function(e) {
=======
}).directive("copyLoginToClipboard", [ "AlertMessageService", "NotificationsService", function(e, t) {
>>>>>>> Let administrators disable "Copy Login Command"
return {
restrict: "E",
replace: !0,
scope: {
clipboardText: "="
},
template: '<a href="" data-clipboard-text="">Copy Login Command</a>',
link: function(n, a) {
var r = new Clipboard(a.get(0));
r.on("success", function() {
t.addNotification({
id: "copy-login-command-success",
type: "success",
message: "Login command copied."
});
e.isAlertPermanentlyHidden("openshift/token-warning") || t.addNotification({
id: "openshift/token-warning",
type: "warning",
message: "A token is a form of a password. Do not share your API token.",
links: [ {
href: "",
label: "Don't Show Me Again",
onClick: function() {
return e.permanentlyHideAlert("openshift/token-warning"), !0;
}
} ]
});
}), r.on("error", function() {
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
t.addNotification({
=======
e.addNotification({
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
id: "copy-login-command-error",
type: "error",
message: "Unable to copy the login command."
});
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
}), a.on("$destroy", function() {
=======
}), n.on("$destroy", function() {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
r.destroy();
});
}
};
>>>>>>> Add quick command to help dropdown
} ]).directive("shortId", function() {
return {
restrict: "E",
scope: {
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
id: "@"
},
template: '<code class="short-id" title="{{id}}">{{id.substring(0, 6)}}</code>'
};
<<<<<<< 3087d5859f05def6301fced3a013ac9165fd8c7a
}).directive("customIcon", [ "$filter", function(a) {
=======
}).directive("customIcon", [ "$filter", function(e) {
>>>>>>> Add SVG icons
return {
restrict: "E",
scope: {
resource: "=",
kind: "@",
tag: "=?"
},
<<<<<<< 3087d5859f05def6301fced3a013ac9165fd8c7a
controller: [ "$scope", function(b) {
b.$watchGroup([ "resource", "tag" ], function() {
b.tag ? b.icon = a("imageStreamTagAnnotation")(b.resource, "icon", b.tag) : b.icon = a("annotation")(b.resource, "icon");
var c = b.icon && 0 === b.icon.indexOf("data:");
c ? b.image = b.icon : (b.tag ? b.icon = a("imageStreamTagIconClass")(b.resource, b.tag) : b.icon = a("iconClass")(b.resource, b.kind), b.image = a("imageForIconClass")(b.icon));
=======
resource: "=",
kind: "@",
tag: "=?"
},
controller: [ "$scope", "$filter", function(e, t) {
e.$watchGroup([ "resource", "tag" ], function() {
e.tag ? e.icon = t("imageStreamTagAnnotation")(e.resource, "icon", e.tag) : e.icon = t("annotation")(e.resource, "icon"), e.isDataIcon = e.icon && 0 === e.icon.indexOf("data:"), e.isDataIcon || (e.tag ? e.icon = t("imageStreamTagIconClass")(e.resource, e.tag) : e.icon = t("iconClass")(e.resource, e.kind));
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
controller: [ "$scope", function(t) {
t.$watchGroup([ "resource", "tag" ], function() {
t.tag ? t.icon = e("imageStreamTagAnnotation")(t.resource, "icon", t.tag) : t.icon = e("annotation")(t.resource, "icon"), t.icon && 0 === t.icon.indexOf("data:") ? t.image = t.icon : (t.tag ? t.icon = e("imageStreamTagIconClass")(t.resource, t.tag) : t.icon = e("iconClass")(t.resource, t.kind), t.image = e("imageForIconClass")(t.icon));
>>>>>>> Add SVG icons
});
} ],
templateUrl: "views/directives/_custom-icon.html"
};
} ]).directive("bottomOfWindow", function() {
return {
restrict: "A",
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
link: function(a, b) {
function c() {
var a = $(window).height() - b[0].getBoundingClientRect().top;
b.css("height", a - 10 + "px");
=======
link: function(e, t) {
function n() {
var e = $(window).height() - t[0].getBoundingClientRect().top;
t.css("height", e - 10 + "px");
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
}
$(window).on("resize", n), n(), t.on("$destroy", function() {
$(window).off("resize", n);
});
}
};
}).directive("onEnter", function() {
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
return function(a, b, c) {
b.bind("keydown keypress", function(b) {
13 === b.which && (a.$apply(function() {
a.$eval(c.onEnter);
}), b.preventDefault());
});
};
}).directive("onEsc", function() {
return function(a, b, c) {
b.bind("keydown keypress", function(b) {
27 === b.which && (a.$apply(function() {
a.$eval(c.onEsc);
}), b.preventDefault());
});
};
}).directive("persistTabState", [ "$routeParams", "$location", function(a, b) {
return {
restrict: "A",
scope: !1,
link: function(c) {
c.selectedTab = c.selectedTab || {}, c.$watch(function() {
return a.tab;
}, function(a) {
a && (c.selectedTab[a] = !0);
}), c.$watch("selectedTab", function() {
var a = _.keys(_.pickBy(c.selectedTab, function(a) {
return a;
=======
return function(e, t, n) {
t.bind("keydown keypress", function(t) {
13 === t.which && (e.$apply(function() {
e.$eval(n.onEnter);
}), t.preventDefault());
});
};
}).directive("onEsc", function() {
return function(e, t, n) {
t.bind("keydown keypress", function(t) {
27 === t.which && (e.$apply(function() {
e.$eval(n.onEsc);
}), t.preventDefault());
});
};
}).directive("persistTabState", [ "$routeParams", "$location", function(e, t) {
return {
restrict: "A",
scope: !1,
link: function(n) {
n.selectedTab = n.selectedTab || {}, n.$watch(function() {
return e.tab;
}, function(e) {
e && (n.selectedTab[e] = !0);
}), n.$watch("selectedTab", function() {
var e = _.keys(_.pickBy(n.selectedTab, function(e) {
return e;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
}));
if (1 === e.length) {
var r = t.search();
r.tab = e[0], t.replace().search(r);
}
}, !0);
}
};
} ]), angular.module("openshiftConsole").directive("labels", [ "$location", "$timeout", "LabelFilter", function(e, t, n) {
return {
restrict: "E",
scope: {
labels: "=",
clickable: "@?",
kind: "@?",
projectName: "@?",
limit: "=?",
titleKind: "@?",
navigateUrl: "@?",
filterCurrentPage: "=?"
},
templateUrl: "views/directives/labels.html",
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
link: function(d) {
d.filterAndNavigate = function(e, f) {
d.kind && d.projectName && (d.filterCurrentPage || a.url(d.navigateUrl || "/project/" + d.projectName + "/browse/" + d.kind), b(function() {
var a = {};
a[e] = f, c.setLabelSelector(new LabelSelector(a, (!0)));
=======
link: function(a) {
a.filterAndNavigate = function(r, o) {
a.kind && a.projectName && (a.filterCurrentPage || e.url(a.navigateUrl || "/project/" + a.projectName + "/browse/" + a.kind), t(function() {
var e = {};
e[r] = o, n.setLabelSelector(new LabelSelector(e, !0));
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
link: function(r) {
r.filterAndNavigate = function(a, o) {
r.kind && r.projectName && (r.filterCurrentPage || e.url(r.navigateUrl || "/project/" + r.projectName + "/browse/" + r.kind), t(function() {
var e = {};
e[a] = o, n.setLabelSelector(new LabelSelector(e, !0));
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}, 1));
};
}
};
} ]).directive("labelEditor", function() {
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
function a(a) {
return !(a.length > f) && e.test(a);
}
function b(a) {
return !(a.length > d) && c.test(a);
}
var c = /^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?$/, d = 63, e = /^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$/, f = 253;
=======
function e(e) {
return !(e.length > o) && a.test(e);
}
function t(e) {
return !(e.length > r) && n.test(e);
}
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
var n = /^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?$/, a = 63, r = /^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$/, o = 253;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
var n = /^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?$/, r = 63, a = /^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$/, o = 253;
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
return {
restrict: "E",
scope: {
labels: "=",
<<<<<<< 0b6e0c0321bd8895dd0292e7e94a096ab205c99e
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
=======
systemLabels: "=",
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
>>>>>>> Let users edit app label directly for "add to project"
expand: "=?",
canToggle: "=?",
helpText: "@?"
},
templateUrl: "views/directives/label-editor.html",
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
link: function(a, b, c) {
angular.isDefined(c.canToggle) || (a.canToggle = !0);
},
controller: [ "$scope", function(c) {
var d = {
test: function(c) {
var d = c.split("/");
switch (d.length) {
=======
link: function(e, t, n) {
angular.isDefined(n.canToggle) || (e.canToggle = !0);
},
controller: [ "$scope", function(n) {
var r = {
test: function(n) {
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
var a = n.split("/");
switch (a.length) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
var r = n.split("/");
switch (r.length) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
case 1:
return t(r[0]);

case 2:
return e(r[0]) && t(r[1]);
}
return !1;
}
};
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
angular.extend(c, {
validator: {
key: d,
value: d
=======
angular.extend(n, {
validator: {
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
key: a,
value: a
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
key: r,
value: r
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}
});
} ]
};
}), angular.module("openshiftConsole").directive("editLifecycleHook", function() {
return {
restrict: "E",
scope: {
type: "@",
hookParams: "=model",
availableVolumes: "=",
availableContainers: "=",
availableSecrets: "=",
availableConfigMaps: "=",
namespace: "="
},
templateUrl: "views/directives/edit-lifecycle-hook.html",
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
controller: [ "$scope", function(a) {
a.view = {
isDisabled: !1
}, a.lifecycleHookFailurePolicyTypes = [ "Abort", "Retry", "Ignore" ], a.istagHook = {}, a.removedHookParams = {}, a.action = {
type: _.has(a.hookParams, "tagImages") ? "tagImages" : "execNewPod"
};
var b = {
command: [],
env: [],
volumes: [],
containerName: a.availableContainers[0] || ""
}, c = {
to: {},
containerName: a.availableContainers[0] || ""
}, d = function(b) {
var c = {};
if (_.isEmpty(b)) c = {
namespace: a.namespace,
imageStream: "",
tagObject: null
}; else {
var d = b.name.split(":");
c = {
namespace: b.namespace || a.namespace,
imageStream: d[0],
tagObject: {
tag: d[1]
}
};
}
return c;
}, e = function() {
"execNewPod" === a.action.type ? (_.has(a.removedHookParams, "execNewPod") ? a.hookParams.execNewPod = a.removedHookParams.execNewPod : a.hookParams.execNewPod = _.get(a, "hookParams.execNewPod", {}), a.hookParams.execNewPod = _.merge(angular.copy(b), a.hookParams.execNewPod)) : (_.has(a.removedHookParams, "tagImages") ? a.hookParams.tagImages = a.removedHookParams.tagImages : a.hookParams.tagImages = _.get(a, "hookParams.tagImages", [ {} ]), a.hookParams.tagImages = [ _.merge(angular.copy(c), a.hookParams.tagImages[0]) ], a.istagHook = d(_.head(a.hookParams.tagImages).to)), a.hookParams.failurePolicy = _.get(a.hookParams, "failurePolicy", "Abort");
};
a.addHook = function() {
return _.isEmpty(a.removedHookParams) ? (a.hookParams = {}, void e()) : void (a.hookParams = a.removedHookParams);
}, a.removeHook = function() {
a.removedHookParams = a.hookParams, delete a.hookParams, a.editForm.$setDirty();
};
var f = function() {
a.hookParams && ("execNewPod" === a.action.type ? (a.hookParams.tagImages && (a.removedHookParams.tagImages = a.hookParams.tagImages, delete a.hookParams.tagImages), e()) : "tagImages" === a.action.type && (a.hookParams.execNewPod && (a.removedHookParams.execNewPod = a.hookParams.execNewPod, delete a.hookParams.execNewPod), e()));
};
a.$watchGroup([ "hookParams", "action.type" ], f), a.valueFromObjects = [], a.$watchGroup([ "availableSecrets", "availableConfigMaps" ], function() {
var b = a.availableConfigMaps || [], c = a.availableSecrets || [];
a.valueFromObjects = b.concat(c);
}), a.$watch("istagHook.tagObject.tag", function() {
_.has(a.istagHook, [ "tagObject", "tag" ]) && (_.set(a.hookParams, "tagImages[0].to.kind", "ImageStreamTag"), _.set(a.hookParams, "tagImages[0].to.namespace", a.istagHook.namespace), _.set(a.hookParams, "tagImages[0].to.name", a.istagHook.imageStream + ":" + a.istagHook.tagObject.tag));
=======
controller: [ "$scope", function(e) {
e.view = {
isDisabled: !1
}, e.lifecycleHookFailurePolicyTypes = [ "Abort", "Retry", "Ignore" ], e.istagHook = {}, e.removedHookParams = {}, e.action = {
type: _.has(e.hookParams, "tagImages") ? "tagImages" : "execNewPod"
};
var t = {
command: [],
env: [],
volumes: [],
containerName: e.availableContainers[0] || ""
}, n = {
to: {},
containerName: e.availableContainers[0] || ""
}, r = function(t) {
var n = {};
if (_.isEmpty(t)) n = {
namespace: e.namespace,
imageStream: "",
tagObject: null
}; else {
var r = t.name.split(":");
n = {
namespace: t.namespace || e.namespace,
imageStream: r[0],
tagObject: {
tag: r[1]
}
};
}
return n;
}, a = function() {
"execNewPod" === e.action.type ? (_.has(e.removedHookParams, "execNewPod") ? e.hookParams.execNewPod = e.removedHookParams.execNewPod : e.hookParams.execNewPod = _.get(e, "hookParams.execNewPod", {}), e.hookParams.execNewPod = _.merge(angular.copy(t), e.hookParams.execNewPod)) : (_.has(e.removedHookParams, "tagImages") ? e.hookParams.tagImages = e.removedHookParams.tagImages : e.hookParams.tagImages = _.get(e, "hookParams.tagImages", [ {} ]), e.hookParams.tagImages = [ _.merge(angular.copy(n), e.hookParams.tagImages[0]) ], e.istagHook = r(_.head(e.hookParams.tagImages).to)), e.hookParams.failurePolicy = _.get(e.hookParams, "failurePolicy", "Abort");
};
e.addHook = function() {
_.isEmpty(e.removedHookParams) ? (e.hookParams = {}, a()) : e.hookParams = e.removedHookParams;
}, e.removeHook = function() {
e.removedHookParams = e.hookParams, delete e.hookParams, e.editForm.$setDirty();
};
e.$watchGroup([ "hookParams", "action.type" ], function() {
e.hookParams && ("execNewPod" === e.action.type ? (e.hookParams.tagImages && (e.removedHookParams.tagImages = e.hookParams.tagImages, delete e.hookParams.tagImages), a()) : "tagImages" === e.action.type && (e.hookParams.execNewPod && (e.removedHookParams.execNewPod = e.hookParams.execNewPod, delete e.hookParams.execNewPod), a()));
}), e.valueFromObjects = [], e.$watchGroup([ "availableSecrets", "availableConfigMaps" ], function() {
var t = e.availableConfigMaps || [], n = e.availableSecrets || [];
e.valueFromObjects = t.concat(n);
}), e.$watch("istagHook.tagObject.tag", function() {
_.has(e.istagHook, [ "tagObject", "tag" ]) && (_.set(e.hookParams, "tagImages[0].to.kind", "ImageStreamTag"), _.set(e.hookParams, "tagImages[0].to.namespace", e.istagHook.namespace), _.set(e.hookParams, "tagImages[0].to.name", e.istagHook.imageStream + ":" + e.istagHook.tagObject.tag));
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
});
} ]
};
}).directive("lifecycleHook", [ "$filter", function(e) {
return {
restrict: "E",
scope: {
deploymentConfig: "=",
type: "@"
},
templateUrl: "views/directives/lifecycle-hook.html",
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
link: function(b) {
b.$watch("deploymentConfig", function(c) {
b.strategyParams = a("deploymentStrategyParams")(c);
=======
link: function(t) {
t.$watch("deploymentConfig", function(n) {
t.strategyParams = e("deploymentStrategyParams")(n);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
});
}
};
} ]), angular.module("openshiftConsole").directive("actionChip", function() {
return {
restrict: "E",
scope: {
key: "=?",
value: "=?",
keyHelp: "=?",
valueHelp: "=",
action: "&?",
actionIcon: "=?",
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
actionTitle: "@",
=======
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
showAction: "=?"
},
templateUrl: "views/directives/action-chip.html"
};
<<<<<<< 579cbe4ce2e640c919f9687b5c885f661897db96
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
}), function() {
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
function a(a, b, c, d, e, f, g, h) {
var i = this, j = a("humanizeKind"), k = function(a) {
var b = i.apiObject.metadata.name;
return "ConfigMap" === i.apiObject.kind ? _.some(a.envFrom, {
=======
angular.module("openshiftConsole").component("addConfigToApplication", {
controller: [ "$filter", "$scope", "APIService", "ApplicationsService", "DataService", "Navigate", "NotificationsService", "StorageService", function(e, t, n, r, a, o, i, s) {
var c = this, l = e("humanizeKind"), u = function(e) {
var t = c.apiObject.metadata.name;
return "ConfigMap" === c.apiObject.kind ? _.some(e.envFrom, {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
configMapRef: {
name: b
}
}) : _.some(a.envFrom, {
secretRef: {
name: b
}
});
};
i.checkApplicationContainersRefs = function(a) {
var b = _.get(a, "spec.template.spec.containers");
i.canAddRefToApplication = !_.every(b, k);
};
var l = function() {
var a = {
namespace: i.project.metadata.name
};
d.getApplications(a).then(function(a) {
i.applications = a, i.updating = !1;
});
};
i.$onInit = function() {
i.addType = "env", i.disableInputs = !1, l(), i.canAddRefToApplication = !0;
var a = new RegExp("^[A-Za-z_][A-Za-z0-9_]*$");
i.hasInvalidEnvVars = _.some(i.apiObject.data, function(b, c) {
return !a.test(c);
});
};
var m = function(a) {
return i.attachAllContainers || i.attachContainers[a.name];
};
i.$postLink = function() {
b.$watch(function() {
return i.application;
}, function() {
var a = _.get(i.application, "spec.template");
i.existingMountPaths = h.getMountPaths(a), i.attachAllContainers = !0;
});
}, i.groupByKind = function(a) {
return j(a.kind);
}, i.addToApplication = function() {
var b = angular.copy(i.application), d = _.get(b, "spec.template");
if (i.disableInputs = !0, "env" === i.addType) {
var h = {};
switch (i.apiObject.kind) {
case "Secret":
h.secretRef = {
name: i.apiObject.metadata.name
};
break;

case "ConfigMap":
h.configMapRef = {
name: i.apiObject.metadata.name
};
}
_.each(d.spec.containers, function(a) {
m(a) && !k(a) && (a.envFrom = a.envFrom || [], a.envFrom.push(h));
});
} else {
var j = a("generateName"), l = j(i.apiObject.metadata.name + "-"), n = {
name: l,
mountPath: i.mountVolume,
readOnly: !0
};
_.each(d.spec.containers, function(a) {
m(a) && (a.volumeMounts = a.volumeMounts || [], a.volumeMounts.push(n));
});
var o = {
name: l
};
switch (i.apiObject.kind) {
case "Secret":
o.secret = {
secretName: i.apiObject.metadata.name
};
break;

case "ConfigMap":
o.configMap = {
name: i.apiObject.metadata.name
=======
}), angular.module("openshiftConsole").directive("templateOptions", function() {
=======
}), function() {
angular.module("openshiftConsole").component("addConfigToApplication", {
controller: [ "$filter", "$scope", "APIService", "ApplicationsService", "DataService", "Navigate", "NotificationsService", "StorageService", function(e, t, n, a, r, o, i, s) {
var c = this, l = e("humanizeKind"), u = function() {
var e = {
namespace: c.project.metadata.name
};
r.getApplications(e).then(function(e) {
c.applications = e, c.updating = !1;
});
};
<<<<<<< 974ec410f422a21b1aa09a77ba11e3c0cdbfe9fa
m.$onInit = function() {
m.addType = "env", m.disableInputs = !1, f();
<<<<<<< a8e13079948a1153dd52ad0ff49228eb68945806
}, m.$postLink = function() {
=======
=======
c.$onInit = function() {
<<<<<<< 487a4537f7801eb3b7805112505ac2fba069d737
c.addType = "env", c.disableInputs = !1, l();
<<<<<<< 6d5e9a5aa4a6d93c06a5519a2feb6650bd482f4a
>>>>>>> Use new ApplicationsService.getApplications utility
var e = new RegExp("^[A-Za-z_]{1}[A-Za-z0-9_]*$");
c.hasInvalidEnvVars = _.some(c.secret.data, function(t, n) {
=======
=======
c.addType = "env", c.disableInputs = !1, u();
>>>>>>> Show application kind when add to application dropdown is open
var e = new RegExp("^[A-Za-z_][A-Za-z0-9_]*$");
c.hasInvalidEnvVars = _.some(c.apiObject.data, function(t, n) {
>>>>>>> "Add to Application" for config maps
return !e.test(n);
});
};
var d = function(e) {
return c.attachAllContainers || c.attachContainers[e.name];
};
<<<<<<< 974ec410f422a21b1aa09a77ba11e3c0cdbfe9fa
m.$postLink = function() {
>>>>>>> Allow the user to select containers when adding a secret to an application
=======
c.$postLink = function() {
>>>>>>> Use new ApplicationsService.getApplications utility
t.$watch(function() {
return c.application;
}, function() {
var e = _.get(c.application, "spec.template");
c.existingMountPaths = s.getMountPaths(e), c.attachAllContainers = !0;
});
}, c.groupByKind = function(e) {
return l(e.kind);
}, c.addToApplication = function() {
var t = angular.copy(c.application), r = _.get(t, "spec.template");
if (c.disableInputs = !0, "env" === c.addType) {
var s = {};
switch (c.apiObject.kind) {
case "Secret":
s.secretRef = {
name: c.apiObject.metadata.name
};
break;

case "ConfigMap":
s.configMapRef = {
name: c.apiObject.metadata.name
};
}
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< 8cadcc21048d8859b23e157e6bb9565b9e14728a
_.each(a.spec.containers, function(e) {
d(e) && (e.envFrom = e.envFrom || [], e.envFrom.push(s));
=======
c.envPrefix && (s.prefix = c.envPrefix), _.each(a.spec.containers, function(e) {
=======
c.envPrefix && (s.prefix = c.envPrefix), _.each(r.spec.containers, function(e) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
m(e) && !u(e) && (e.envFrom = e.envFrom || [], e.envFrom.push(s));
>>>>>>> Allow setting environment variable prefix when adding secret to application
});
} else {
var l = e("generateName")(c.apiObject.metadata.name + "-"), u = {
name: l,
mountPath: c.mountVolume,
readOnly: !0
};
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
_.each(a.spec.containers, function(e) {
d(e) && (e.volumeMounts = e.volumeMounts || [], e.volumeMounts.push(u));
=======
_.each(r.spec.containers, function(e) {
m(e) && (e.volumeMounts = e.volumeMounts || [], e.volumeMounts.push(d));
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
});
var m = {
name: l
};
switch (c.apiObject.kind) {
case "Secret":
m.secret = {
secretName: c.apiObject.metadata.name
};
break;

case "ConfigMap":
m.configMap = {
name: c.apiObject.metadata.name
};
}
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
a.spec.volumes = a.spec.volumes || [], a.spec.volumes.push(m);
=======
r.spec.volumes = r.spec.volumes || [], r.spec.volumes.push(p);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}
var p = e("humanizeKind"), f = p(c.apiObject.kind), g = p(t.kind), v = {
namespace: c.project.metadata.name
};
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
r.update(n.kindToResource(t.kind), t.metadata.name, t, v).then(function() {
=======
a.update(n.kindToResource(t.kind), t.metadata.name, t, h).then(function() {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
i.addNotification({
type: "success",
message: "Successfully added " + f + " " + c.apiObject.metadata.name + " to " + g + " " + t.metadata.name + ".",
links: [ {
href: o.resourceURL(t),
label: "View " + p(t.kind, !0)
} ]
}), angular.isFunction(c.onComplete) && c.onComplete();
}, function(n) {
var r = e("getErrorDetails");
i.addNotification({
type: "error",
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
message: "An error occurred  adding " + f + " " + c.apiObject.metadata.name + " to " + g + " " + t.metadata.name + ". " + a(n)
=======
message: "An error occurred  adding " + g + " " + c.apiObject.metadata.name + " to " + v + " " + t.metadata.name + ". " + r(n)
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
});
}).finally(function() {
<<<<<<< 974ec410f422a21b1aa09a77ba11e3c0cdbfe9fa
m.disableInputs = !1;
});
};
} ],
controllerAs: "ctrl",
bindings: {
project: "<",
apiObject: "<",
onComplete: "<",
onCancel: "<"
},
templateUrl: "views/directives/add-config-to-application.html"
});
}(), angular.module("openshiftConsole").directive("templateOptions", function() {
>>>>>>> Add the ability to add a secret to an application
return {
restrict: "E",
templateUrl: "views/_templateopt.html",
transclude: !0,
scope: {
parameters: "=",
expand: "=?",
canToggle: "=?",
isDialog: "=?"
},
link: function(e, t, n) {
angular.isDefined(n.canToggle) || (e.canToggle = !0), e.isOnlyWhitespace = function(e) {
return /^\s+$/.test(e);
}, e.focus = function(e) {
angular.element("#" + e).focus();
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
};
}
d.spec.volumes = d.spec.volumes || [], d.spec.volumes.push(o);
}
var p = a("humanizeKind"), q = p(i.apiObject.kind), r = p(b.kind), s = {
namespace: i.project.metadata.name
};
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
e.update(c.kindToResource(b.kind), b.metadata.name, b, s).then(function() {
g.addNotification({
type: "success",
message: "Successfully added " + q + " " + i.apiObject.metadata.name + " to " + r + " " + b.metadata.name + ".",
links: [ {
href: f.resourceURL(b),
label: "View " + p(b.kind, !0)
} ]
}), angular.isFunction(i.onComplete) && i.onComplete();
}, function(c) {
var d = a("getErrorDetails");
g.addNotification({
type: "error",
message: "An error occurred  adding " + q + " " + i.apiObject.metadata.name + " to " + r + " " + b.metadata.name + ". " + d(c)
});
})["finally"](function() {
i.disableInputs = !1;
=======
c.disableInputs = !1;
>>>>>>> Use new ApplicationsService.getApplications utility
});
};
<<<<<<< daacfa8335cad520ada64404e0071f82c5fc81ce
}
angular.module("openshiftConsole").component("addConfigToApplication", {
controller: [ "$filter", "$scope", "APIService", "ApplicationsService", "DataService", "Navigate", "NotificationsService", "StorageService", a ],
controllerAs: "ctrl",
bindings: {
project: "<",
apiObject: "<",
onComplete: "<",
onCancel: "<"
},
templateUrl: "views/directives/add-config-to-application.html"
});
}(), angular.module("openshiftConsole").directive("templateOptions", [ "gettext", function(a) {
=======
}), angular.module("openshiftConsole").directive("catalog", [ "CatalogService", "Constants", "KeywordService", "Logger", function(e, t, n, r) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
return {
restrict: "E",
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
templateUrl: "views/_templateopt.html",
transclude: !0,
scope: {
parameters: "=",
expand: "=?",
canToggle: "=?",
isDialog: "=?"
},
link: function(b, c, d) {
angular.isDefined(d.canToggle) || (b.canToggle = !0), b.isOnlyWhitespace = function(a) {
return /^\s+$/.test(a);
}, b.focus = function(a) {
angular.element("#" + a).focus();
}, b.singleText = a("Collapse to a single line input This may strip any new lines you have entered."), b.multiText = a("Expand to enter multiple lines of content. This is required if you need to include newline characters.");
}
};
} ]), angular.module("openshiftConsole").directive("catalog", [ "CatalogService", "Constants", "KeywordService", "Logger", function(a, b, c, d) {
=======
templateUrl: "views/_tasks.html"
};
=======
>>>>>>> Improving display of results status messages and removing orphaned tasks directive
}), angular.module("openshiftConsole").directive("catalog", [ "CatalogService", "Constants", "KeywordService", "Logger", function(e, t, n, a) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
return {
restrict: "E",
scope: {
projectImageStreams: "=",
openshiftImageStreams: "=",
projectTemplates: "=",
openshiftTemplates: "=",
projectName: "=",
parentCategory: "=category"
},
templateUrl: "views/catalog/catalog.html",
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
link: function(e) {
function f() {
var b = e.keywords = c.generateKeywords(e.filter.keyword);
return _.isEmpty(b) ? (e.filterActive = !1, e.filteredBuildersByCategory = e.buildersByCategory, void (e.filteredTemplatesByCategory = e.templatesByCategory)) : (e.filterActive = !0, e.filteredBuildersByCategory = {}, _.each(e.buildersByCategory, function(c, d) {
var f = a.getCategoryItem(d), g = function(a) {
return a.test(f.label);
}, h = _.reject(b, g);
e.filteredBuildersByCategory[d] = a.filterImageStreams(c, h);
}), e.filteredBuildersNoSubcategory = a.filterImageStreams(e.buildersNoSubcategory, b), e.filteredTemplatesByCategory = {}, _.each(e.templatesByCategory, function(c, d) {
var f = a.getCategoryItem(d), g = function(a) {
return a.test(f.label);
}, h = _.reject(b, g);
e.filteredTemplatesByCategory[d] = a.filterTemplates(c, h);
}), void (e.filteredTemplatesNoSubcategory = a.filterTemplates(e.templatesNoSubcategory, b)));
}
function g(a) {
var b = _.get(e, "parentCategory.subcategories", []);
if (_.isEmpty(b)) return [];
var c = {};
_.each(b, function(b) {
_.each(b.items, function(b) {
_.each(a[b.id], function(a) {
var b = _.get(a, "metadata.uid");
c[b] = !0;
});
});
});
var d = function(a) {
var b = _.get(a, "metadata.uid");
return !!c[b];
}, f = e.parentCategory.id;
return _.reject(a[f], d);
}
function h() {
if (e.projectImageStreams && e.openshiftImageStreams) {
var b = _.toArray(e.projectImageStreams).concat(_.toArray(e.openshiftImageStreams));
e.buildersByCategory = a.categorizeImageStreams(b), e.buildersNoSubcategory = g(e.buildersByCategory), e.emptyCatalog = e.emptyCatalog && _.every(e.buildersByCategory, _.isEmpty) && _.isEmpty(e.buildersNoSubcategory), l();
}
}
function i() {
if (e.projectTemplates && e.openshiftTemplates) {
var b = _.toArray(e.projectTemplates).concat(_.toArray(e.openshiftTemplates));
e.templatesByCategory = a.categorizeTemplates(b), e.templatesNoSubcategory = g(e.templatesByCategory), e.emptyCatalog = e.emptyCatalog && _.every(e.templatesByCategory, _.isEmpty) && _.isEmpty(e.templatesNoSubcategory), l();
=======
link: function(r) {
=======
link: function(a) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
function o() {
var t = a.keywords = n.generateKeywords(a.filter.keyword);
if (_.isEmpty(t)) return a.filterActive = !1, a.filteredBuildersByCategory = a.buildersByCategory, void (a.filteredTemplatesByCategory = a.templatesByCategory);
a.filterActive = !0, a.filteredBuildersByCategory = {}, _.each(a.buildersByCategory, function(n, r) {
var o = e.getCategoryItem(r), i = _.reject(t, function(e) {
return e.test(o.label);
});
a.filteredBuildersByCategory[r] = e.filterImageStreams(n, i);
}), a.filteredBuildersNoSubcategory = e.filterImageStreams(a.buildersNoSubcategory, t), a.filteredTemplatesByCategory = {}, _.each(a.templatesByCategory, function(n, r) {
var o = e.getCategoryItem(r), i = _.reject(t, function(e) {
return e.test(o.label);
});
a.filteredTemplatesByCategory[r] = e.filterTemplates(n, i);
}), a.filteredTemplatesNoSubcategory = e.filterTemplates(a.templatesNoSubcategory, t);
}
function i(e) {
var t = _.get(a, "parentCategory.subcategories", []);
if (_.isEmpty(t)) return [];
var n = {};
_.each(t, function(t) {
_.each(t.items, function(t) {
_.each(e[t.id], function(e) {
var t = _.get(e, "metadata.uid");
n[t] = !0;
});
});
});
var r = a.parentCategory.id;
return _.reject(e[r], function(e) {
var t = _.get(e, "metadata.uid");
return !!n[t];
});
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
}
function s() {
a.noFilterMatches = !0, u = [];
var e = {};
_.each(a.filteredBuildersByCategory, function(t, n) {
e[n] = _.size(t);
}), _.each(a.filteredTemplatesByCategory, function(t, n) {
e[n] = (e[n] || 0) + _.size(t);
}), a.allContentHidden = !0, _.each(a.categories, function(t) {
var n = !1;
_.each(t.items, function(t) {
e[t.id] && (u.push(t), n = !0);
}), _.set(a, [ "hasContent", t.id ], n), n && (a.allContentHidden = !1);
}), a.countByCategory = e, a.hasItemsNoSubcategory = !_.isEmpty(a.buildersNoSubcategory) || !_.isEmpty(a.templatesNoSubcategory), a.countFilteredNoSubcategory = _.size(a.filteredBuildersNoSubcategory) + _.size(a.filteredTemplatesNoSubcategory), a.countFilteredNoSubcategory && (a.allContentHidden = !1);
}
function c() {
return !!a.parentCategory && (1 === u.length && !a.hasItemsNoSubcategory);
}
function l() {
a.loaded = a.projectTemplates && a.openshiftTemplates && a.projectImageStreams && a.openshiftImageStreams, o(), s(), a.loaded && (c() && (a.singleCategory = _.head(u)), r.log("templates by category", a.templatesByCategory), r.log("builder images", a.buildersByCategory));
}
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
e.categories = _.get(e, "parentCategory.subcategories", b.CATALOG_CATEGORIES), e.loaded = !1, e.emptyCatalog = !0, e.filter = {
keyword: ""
}, e.$watch("filter.keyword", _.debounce(function() {
e.$apply(function() {
f(), j();
=======
r.categories = _.get(r, "parentCategory.subcategories", t.CATALOG_CATEGORIES), r.loaded = !1, r.emptyCatalog = !0, r.filter = {
=======
a.categories = _.get(a, "parentCategory.subcategories", t.CATALOG_CATEGORIES), a.loaded = !1, a.emptyCatalog = !0, a.filter = {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
keyword: ""
}, a.$watch("filter.keyword", _.debounce(function() {
a.$apply(function() {
o(), s();
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
});
}, 200, {
maxWait: 1e3,
trailing: !0
}));
var u;
a.$watchGroup([ "openshiftImageStreams", "projectImageStreams" ], function() {
if (a.projectImageStreams && a.openshiftImageStreams) {
var t = _.toArray(a.projectImageStreams).concat(_.toArray(a.openshiftImageStreams));
a.buildersByCategory = e.categorizeImageStreams(t), a.buildersNoSubcategory = i(a.buildersByCategory), a.emptyCatalog = a.emptyCatalog && _.every(a.buildersByCategory, _.isEmpty) && _.isEmpty(a.buildersNoSubcategory), l();
}
}), a.$watchGroup([ "openshiftTemplates", "projectTemplates" ], function() {
if (a.projectTemplates && a.openshiftTemplates) {
var t = _.toArray(a.projectTemplates).concat(_.toArray(a.openshiftTemplates));
a.templatesByCategory = e.categorizeTemplates(t), a.templatesNoSubcategory = i(a.templatesByCategory), a.emptyCatalog = a.emptyCatalog && _.every(a.templatesByCategory, _.isEmpty) && _.isEmpty(a.templatesNoSubcategory), l();
}
});
}
};
} ]), angular.module("openshiftConsole").directive("categoryContent", [ "CatalogService", "Constants", "KeywordService", "Logger", function(e, t, n, r) {
return {
restrict: "E",
scope: {
projectImageStreams: "=",
openshiftImageStreams: "=",
projectTemplates: "=",
openshiftTemplates: "=",
projectName: "=",
category: "="
},
templateUrl: "views/catalog/category-content.html",
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
link: function(b) {
function e() {
var d = b.keywords = c.generateKeywords(b.filter.keyword);
b.filteredBuilderImages = a.filterImageStreams(k, d), b.filteredTemplates = a.filterTemplates(l, d);
}
function f() {
return b.projectImageStreams && b.openshiftImageStreams ? _.toArray(b.projectImageStreams).concat(_.toArray(b.openshiftImageStreams)) : [];
}
function g() {
var c = a.categorizeImageStreams(f());
k = _.get(c, [ b.category.id ], []), j();
}
function h() {
return b.projectTemplates && b.openshiftTemplates ? _.toArray(b.projectTemplates).concat(_.toArray(b.openshiftTemplates)) : [];
=======
link: function(t) {
function a() {
var r = t.keywords = n.generateKeywords(t.filter.keyword);
t.filteredBuilderImages = e.filterImageStreams(c, r), t.filteredTemplates = e.filterTemplates(l, r);
}
function o() {
return t.projectImageStreams && t.openshiftImageStreams ? _.toArray(t.projectImageStreams).concat(_.toArray(t.openshiftImageStreams)) : [];
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
}
function i() {
return t.projectTemplates && t.openshiftTemplates ? _.toArray(t.projectTemplates).concat(_.toArray(t.openshiftTemplates)) : [];
}
function s() {
t.loaded = t.projectTemplates && t.openshiftTemplates && t.projectImageStreams && t.openshiftImageStreams, a(), t.emptyCategory = _.isEmpty(c) && _.isEmpty(l), t.loaded && (r.log("templates", l), r.log("builder images", c));
}
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
var k = [], l = [];
b.filteredTemplates = [], b.filteredBuilderImages = [], b.loaded = !1, b.filter = {
keyword: ""
}, b.$watch("filter.keyword", e), b.$watchGroup([ "openshiftImageStreams", "projectImageStreams" ], g), b.$watchGroup([ "openshiftTemplates", "projectTemplates" ], i);
=======
var c = [], l = [];
t.filteredTemplates = [], t.filteredBuilderImages = [], t.loaded = !1, t.filter = {
keyword: ""
}, t.$watch("filter.keyword", a), t.$watchGroup([ "openshiftImageStreams", "projectImageStreams" ], function() {
var n = e.categorizeImageStreams(o());
c = _.get(n, [ t.category.id ], []), s();
}), t.$watchGroup([ "openshiftTemplates", "projectTemplates" ], function() {
var n = e.categorizeTemplates(i());
l = _.get(n, [ t.category.id ], []), s();
});
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
}
};
} ]), angular.module("openshiftConsole").directive("catalogImage", [ "$filter", "CatalogService", function(e, t) {
return {
restrict: "E",
replace: !0,
scope: {
image: "=",
imageStream: "=",
project: "@",
isBuilder: "=?",
keywords: "="
},
templateUrl: "views/catalog/_image.html",
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
link: function(c) {
var d = a("imageStreamTagTags"), e = {};
c.referencedBy = {};
var f = _.get(c, "imageStream.spec.tags", []), g = {};
_.each(f, function(a) {
g[a.name] = d(c.imageStream, a.name), b.referencesSameImageStream(a) && (e[a.name] = !0, c.referencedBy[a.from.name] = c.referencedBy[a.from.name] || [], c.referencedBy[a.from.name].push(a.name));
=======
link: function(n) {
var r = e("imageStreamTagTags"), a = {};
n.referencedBy = {};
var o = _.get(n, "imageStream.spec.tags", []), i = {};
_.each(o, function(e) {
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
i[e.name] = a(n.imageStream, e.name), t.referencesSameImageStream(e) && (r[e.name] = !0, n.referencedBy[e.from.name] = n.referencedBy[e.from.name] || [], n.referencedBy[e.from.name].push(e.name));
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
i[e.name] = r(n.imageStream, e.name), t.referencesSameImageStream(e) && (a[e.name] = !0, n.referencedBy[e.from.name] = n.referencedBy[e.from.name] || [], n.referencedBy[e.from.name].push(e.name));
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
});
var s = function(e) {
var t = _.get(i, [ e ], []);
return _.includes(t, "builder") && !_.includes(t, "hidden");
};
n.$watch("imageStream.status.tags", function(e) {
n.tags = _.filter(e, function(e) {
return s(e.tag) && !a[e.tag];
});
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
var b = _.get(c, "is.tag.tag");
b && _.some(c.tags, {
tag: b
}) || _.set(c, "is.tag", _.head(c.tags));
=======
var t = _.get(n, "is.tag.tag");
t && _.some(n.tags, {
tag: t
}) || _.set(n, "is.tag", _.head(n.tags));
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
});
}
};
} ]), angular.module("openshiftConsole").directive("catalogTemplate", function() {
return {
restrict: "E",
replace: !0,
scope: {
template: "=",
project: "@",
keywords: "="
},
templateUrl: "views/catalog/_template.html"
};
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
}), angular.module("openshiftConsole").directive("podMetrics", [ "$filter", "$interval", "$parse", "$timeout", "$q", "$rootScope", "ChartsService", "ConversionService", "MetricsCharts", "MetricsService", "ModalsService", "usageValueFilter", "gettext", function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
=======
}), angular.module("openshiftConsole").directive("podMetrics", [ "$filter", "$interval", "$parse", "$timeout", "$q", "$rootScope", "ChartsService", "ConversionService", "MetricsCharts", "MetricsService", "ModalsService", "usageValueFilter", function(e, t, n, a, r, o, i, s, c, l, u, d) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
}), angular.module("openshiftConsole").directive("podMetrics", [ "$filter", "$interval", "$parse", "$timeout", "$q", "$rootScope", "ChartsService", "ConversionService", "MetricsCharts", "MetricsService", "ModalsService", "usageValueFilter", function(e, t, n, r, a, o, i, s, c, l, u, d) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
return {
restrict: "E",
scope: {
pod: "=",
includedMetrics: "=?",
stackDonut: "=?",
alerts: "=?"
},
templateUrl: "views/directives/pod-metrics.html",
<<<<<<< 9bc0af8cb56dcc9609307333b9424f396867cab5
<<<<<<< 602d786018a3879a89789b1214b36a15c51b928b
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
link: function(n) {
function o(a) {
if (!n.pod) return null;
var b = n.options.selectedContainer;
switch (a) {
case "memory/usage":
var c = F(b);
if (c) return h.bytesToMiB(l(c));
break;

case "cpu/usage_rate":
var d = G(b);
if (d) return l(d);
}
return null;
}
function p(a) {
var b = _.head(a.datasets);
if (b.total) {
var c, e = {
type: "donut",
columns: [ [ "Used", b.used ], [ "Available", Math.max(b.available, 0) ] ],
colors: {
Used: b.available > 0 ? "#0088ce" : "#ec7a08",
Available: "#d1d1d1"
}
};
D[b.id] ? D[b.id].load(e) : (c = K(a), c.data = e, d(function() {
I || (D[b.id] = c3.generate(c));
}));
}
}
function q(a) {
var b = _.some(a.datasets, function(a) {
return !a.data;
});
if (!b) {
var c = {};
_.each(a.datasets, function(a) {
c[a.id] = a.data;
});
var e, f = i.getSparklineData(c), g = a.chartPrefix + "sparkline";
E[g] ? E[g].load(f) : (e = L(a), e.data = f, a.chartDataColors && (e.color = {
pattern: a.chartDataColors
}), d(function() {
I || (E[g] = c3.generate(e));
}));
}
}
function r() {
return "-" + n.options.timeRange.value + "mn";
}
function s() {
return 60 * n.options.timeRange.value * 1e3;
}
function t() {
return Math.floor(s() / H) + "ms";
}
function u(a, b, c) {
var d, e = {
metric: b.id,
type: b.type,
bucketDuration: t()
};
return b.data && b.data.length ? (d = _.last(b.data), e.start = d.end) : e.start = c, n.pod ? _.assign(e, {
namespace: n.pod.metadata.namespace,
pod: n.pod,
containerName: a.containerMetric ? n.options.selectedContainer.name : "pod"
}) : null;
}
function v() {
I || (M = 0, _.each(n.metrics, function(a) {
q(a), p(a);
}));
}
function w(a) {
if (!I) {
if (M++, n.noData) return void (n.metricsError = {
status: _.get(a, "status", 0),
details: _.get(a, "data.errorMsg") || _.get(a, "statusText") || "Status code " + _.get(a, "status", 0)
});
if (!(M < 2)) {
var b = "metrics-failed-" + n.uniqueID;
n.alerts[b] = {
type: "error",
message: "An error occurred updating metrics for pod " + _.get(n, "pod.metadata.name", "<unknown>") + ".",
=======
=======
>>>>>>> Support EnvFrom in the Env Editors
link: function(m) {
function p(e) {
if (!m.pod) return null;
var t = m.options.selectedContainer;
<<<<<<< 9bc0af8cb56dcc9609307333b9424f396867cab5
=======
link: function(p) {
function m(e) {
if (!p.pod) return null;
var t = p.options.selectedContainer;
>>>>>>> Updates for Service Instance & Bindings
=======
>>>>>>> Support EnvFrom in the Env Editors
switch (e) {
case "memory/usage":
var n = T(t);
if (n) return s.bytesToMiB(d(n));
break;

case "cpu/usage_rate":
var r = N(t);
if (r) return d(r);
}
return null;
}
function f(e) {
var t = _.head(e.datasets);
if (t.total) {
var n, a = {
type: "donut",
columns: [ [ "Used", t.used ], [ "Available", Math.max(t.available, 0) ] ],
colors: {
Used: t.available > 0 ? "#0088ce" : "#ec7a08",
Available: "#d1d1d1"
}
};
R[t.id] ? R[t.id].load(a) : ((n = B(e)).data = a, r(function() {
A || (R[t.id] = c3.generate(n));
}));
}
}
function g(e) {
if (!_.some(e.datasets, function(e) {
return !e.data;
})) {
var t = {};
_.each(e.datasets, function(e) {
t[e.id] = e.data;
});
var n, a = c.getSparklineData(t), o = e.chartPrefix + "sparkline";
E[o] ? E[o].load(a) : ((n = L(e)).data = a, e.chartDataColors && (n.color = {
pattern: e.chartDataColors
}), r(function() {
A || (E[o] = c3.generate(n));
}));
}
}
function v() {
return "-" + m.options.timeRange.value + "mn";
}
function h() {
return 60 * m.options.timeRange.value * 1e3;
}
function y() {
return Math.floor(h() / D) + "ms";
}
function b(e, t, n) {
var r, a = {
metric: t.id,
type: t.type,
bucketDuration: y()
};
return t.data && t.data.length ? (r = _.last(t.data), a.start = r.end) : a.start = n, m.pod ? _.assign(a, {
namespace: m.pod.metadata.namespace,
pod: m.pod,
containerName: e.containerMetric ? m.options.selectedContainer.name : "pod"
}) : null;
}
function S() {
A || (V = 0, _.each(m.metrics, function(e) {
g(e), f(e);
}));
}
function C(e) {
if (!A) if (V++, m.noData) m.metricsError = {
status: _.get(e, "status", 0),
details: _.get(e, "data.errorMsg") || _.get(e, "statusText") || "Status code " + _.get(e, "status", 0)
}; else if (!(V < 2)) {
var t = "metrics-failed-" + m.uniqueID;
m.alerts[t] = {
type: "error",
<<<<<<< 9bc0af8cb56dcc9609307333b9424f396867cab5
<<<<<<< 602d786018a3879a89789b1214b36a15c51b928b
message: "An error occurred updating metrics for pod " + _.get(m, "pod.metadata.name", "<unknown>") + ".",
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
message: "An error occurred updating metrics for pod " + _.get(p, "pod.metadata.name", "<unknown>") + ".",
>>>>>>> Updates for Service Instance & Bindings
=======
message: "An error occurred updating metrics for pod " + _.get(m, "pod.metadata.name", "<unknown>") + ".",
>>>>>>> Support EnvFrom in the Env Editors
links: [ {
href: "",
label: "Retry",
onClick: function() {
<<<<<<< 03048c83a11138780b80c1ac333639429e2925cd
<<<<<<< 13ac2d832bc56edf6bc5e2fc652da9b188ddae32
<<<<<<< 1f5fb674ad14c7e78d2e82e837750bd2747349ab
<<<<<<< a19b22733566f12a68db59a49bc16848fffba594
<<<<<<< d21c662f039266e2dd235fa32bd86d3647c082ae
<<<<<<< 77ce3ebb70d0568ad8fbbb649b8a01f54552ad2c
<<<<<<< 46344541d4f20e3585d6ea01425f784292c0d84a
<<<<<<< 9bc0af8cb56dcc9609307333b9424f396867cab5
<<<<<<< 602d786018a3879a89789b1214b36a15c51b928b
<<<<<<< 7d5cc388b34d6a87a5e2ae6b26f6b146dae1daa3
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
delete n.alerts[b], M = 1, B();
=======
delete m.alerts[t], U = 1, R();
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
delete m.alerts[t], U = 1, P();
>>>>>>> Adding Deploy Image and Import YAML / JSON functionality to catalog
=======
delete p.alerts[t], U = 1, P();
>>>>>>> Updates for Service Instance & Bindings
=======
delete m.alerts[t], U = 1, P();
>>>>>>> Support EnvFrom in the Env Editors
=======
delete m.alerts[t], U = 1, j();
>>>>>>> Service instance details configuration and edit
=======
delete m.alerts[t], U = 1, P();
>>>>>>> Add product icons for service catalog
=======
delete m.alerts[t], U = 1, j();
>>>>>>> Handle displaying parameters when secrets are not available.
=======
delete m.alerts[t], U = 1, P();
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
delete m.alerts[t], U = 1, j();
>>>>>>> Update template service broker flag name
=======
delete m.alerts[t], U = 1, k();
>>>>>>> Add Browse Catalog to Project context view.
=======
delete m.alerts[t], V = 1, k();
>>>>>>> Update membership to use new rbac endpoints
}
} ]
};
}
}
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
}
function x() {
return window.OPENSHIFT_CONSTANTS.DISABLE_CUSTOM_METRICS ? e.when({}) : j.getCustomMetrics(n.pod).then(function(a) {
angular.forEach(a, function(a) {
var b = a.description || a.name, c = a.unit || "", d = "custom/" + a.id.replace(/.*\/custom\//, "");
n.metrics.push({
label: b,
units: c,
chartPrefix: "custom-" + _.uniqueId("custom-metric-"),
chartType: "spline",
datasets: [ {
id: d,
label: b,
type: a.type,
data: []
} ]
});
});
});
}
function y() {
return !(n.metricsError || M > 1) && (n.pod && _.get(n, "options.selectedContainer"));
}
function z(a, b, c) {
b.total = o(b.id), b.total && (n.hasLimits = !0);
var d = _.get(c, "usage.value");
isNaN(d) && (d = 0), a.convert && (d = a.convert(d)), b.used = d3.round(d, a.usagePrecision), b.total && (b.available = d3.round(b.total - d, a.usagePrecision)), a.totalUsed += b.used;
}
function A(a, b) {
n.noData = !1;
var c = _.initial(b.data);
return a.data ? void (a.data = _.chain(a.data).takeRight(H).concat(c).value()) : void (a.data = c);
}
function B() {
if (y()) {
var a = r(), b = [];
angular.forEach(n.metrics, function(c) {
var d = [];
c.totalUsed = 0, angular.forEach(c.datasets, function(e) {
var f = u(c, e, a);
if (f) {
var g = j.get(f);
d.push(g);
var h = o(e.id);
h && b.push(j.getCurrentUsage(f).then(function(a) {
z(c, e, a);
}));
}
}), b = b.concat(d), e.all(d).then(function(a) {
I || angular.forEach(a, function(a) {
if (a) {
var b = _.find(c.datasets, {
id: a.metricID
});
A(b, a);
=======
function w() {
return !(m.metricsError || V > 1) && (m.pod && _.get(m, "options.selectedContainer"));
}
function P(e, t, n) {
t.total = p(t.id), t.total && (m.hasLimits = !0);
var r = _.get(n, "usage.value");
isNaN(r) && (r = 0), e.convert && (r = e.convert(r)), t.used = d3.round(r, e.usagePrecision), t.total && (t.available = d3.round(t.total - r, e.usagePrecision)), e.totalUsed += t.used;
}
function j(e, t) {
m.noData = !1;
var n = _.initial(t.data);
e.data ? e.data = _.chain(e.data).takeRight(D).concat(n).value() : e.data = n;
}
function k() {
if (w()) {
var e = v(), t = [];
angular.forEach(m.metrics, function(n) {
var r = [];
n.totalUsed = 0, angular.forEach(n.datasets, function(a) {
var o = b(n, a, e);
if (o) {
var i = l.get(o);
r.push(i), p(a.id) && t.push(l.getCurrentUsage(o).then(function(e) {
P(n, a, e);
}));
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
}
}), t = t.concat(r), a.all(r).then(function(e) {
A || angular.forEach(e, function(e) {
e && j(_.find(n.datasets, {
id: e.metricID
}), e);
});
});
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< 75fc56b9e42e29e1492befd08624dd0e5dade866
<<<<<<< 247459038ac366429876741dd447ec652f2f5e7d
<<<<<<< a19b22733566f12a68db59a49bc16848fffba594
<<<<<<< 46344541d4f20e3585d6ea01425f784292c0d84a
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
}), e.all(b).then(v, w)["finally"](function() {
n.loaded = !0;
});
}
}
n.includedMetrics = n.includedMetrics || [ "cpu", "memory", "network" ];
var C, D = {}, E = {}, F = c("resources.limits.memory"), G = c("resources.limits.cpu"), H = 30, I = !1;
n.uniqueID = i.uniqueID(), n.metrics = [], _.includes(n.includedMetrics, "memory") && n.metrics.push({
label: "Memory",
units: "MiB",
chartPrefix: "memory-",
convert: h.bytesToMiB,
containerMetric: !0,
datasets: [ {
id: "memory/usage",
label: m("Memory"),
data: []
} ]
}), _.includes(n.includedMetrics, "cpu") && n.metrics.push({
label: "CPU",
units: "cores",
chartPrefix: "cpu-",
convert: h.millicoresToCores,
=======
}), r.all(t).then(C, S).finally(function() {
=======
}), r.all(t).then(S, C).finally(function() {
>>>>>>> Service instance details configuration and edit
=======
}), r.all(t).then(C, S).finally(function() {
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
}), r.all(t).then(S, C).finally(function() {
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
=======
}), r.all(t).then(S, C).finally(function() {
>>>>>>> Adding label filter to ste secrets page
=======
}), a.all(t).then(S, C).finally(function() {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
m.loaded = !0;
});
}
}
m.includedMetrics = m.includedMetrics || [ "cpu", "memory", "network" ];
var I, R = {}, E = {}, T = n("resources.limits.memory"), N = n("resources.limits.cpu"), D = 30, A = !1;
m.uniqueID = c.uniqueID(), m.metrics = [], _.includes(m.includedMetrics, "memory") && m.metrics.push({
label: "Memory",
units: "MiB",
chartPrefix: "memory-",
convert: s.bytesToMiB,
containerMetric: !0,
datasets: [ {
id: "memory/usage",
label: "Memory",
data: []
} ]
}), _.includes(m.includedMetrics, "cpu") && m.metrics.push({
label: "CPU",
units: "cores",
chartPrefix: "cpu-",
convert: s.millicoresToCores,
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
usagePrecision: 3,
containerMetric: !0,
datasets: [ {
id: "cpu/usage_rate",
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
label: m("CPU"),
data: []
} ]
}), _.includes(n.includedMetrics, "network") && n.metrics.push({
label: m("Network"),
units: "KiB/s",
chartPrefix: "network-",
chartType: "spline",
convert: h.bytesToKiB,
datasets: [ {
id: "network/tx_rate",
label: m("Sent"),
data: []
}, {
id: "network/rx_rate",
label: m("Received"),
data: []
} ]
}), n.loaded = !1, n.noData = !0, n.showComputeUnitsHelp = function() {
k.showComputeUnitsHelp();
}, j.getMetricsURL().then(function(a) {
n.metricsURL = a;
}), n.options = {
rangeOptions: i.getTimeRangeOptions()
}, n.options.timeRange = _.head(n.options.rangeOptions);
var J = a("upperFirst"), K = function(a) {
var b = "#" + a.chartPrefix + n.uniqueID + "-donut";
return {
bindto: b,
onrendered: function() {
g.updateDonutCenterText(b, a.datasets[0].used, J(a.units) + " Used");
=======
label: "CPU",
data: []
} ]
}), _.includes(m.includedMetrics, "network") && m.metrics.push({
label: "Network",
units: "KiB/s",
chartPrefix: "network-",
chartType: "spline",
convert: s.bytesToKiB,
datasets: [ {
id: "network/tx_rate",
label: "Sent",
data: []
}, {
id: "network/rx_rate",
label: "Received",
data: []
} ]
}), m.loaded = !1, m.noData = !0, m.showComputeUnitsHelp = function() {
u.showComputeUnitsHelp();
}, l.getMetricsURL().then(function(e) {
m.metricsURL = e;
}), m.options = {
rangeOptions: c.getTimeRangeOptions()
}, m.options.timeRange = _.head(m.options.rangeOptions);
var $ = e("upperFirst"), B = function(e) {
var t = "#" + e.chartPrefix + m.uniqueID + "-donut";
return {
bindto: t,
onrendered: function() {
<<<<<<< f8cb892c3d9e864c3b7b3ba810c290ed7ce351f0
<<<<<<< 952b26bc3acaa89a51e4aad5f965e515d3b007ae
<<<<<<< 8ab4f4a09cf53190c7bc08d260e963252c3ba6a5
<<<<<<< 9854a04a93530a5cbed260dddc4991d2b65730e5
i.updateDonutCenterText(t, e.datasets[0].used, B(e.units) + " Used");
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
i.updateDonutCenterText(t, e.datasets[0].used, A(e.units) + " Used");
>>>>>>> Improve YAML editor validation and feedback
=======
i.updateDonutCenterText(t, e.datasets[0].used, B(e.units) + " Used");
>>>>>>> Upgrade to angular-patternfly v4.1.1 and patternfly v3.25.1
=======
i.updateDonutCenterText(t, e.datasets[0].used, A(e.units) + " Used");
>>>>>>> Add bindings list to resource pages
=======
i.updateDonutCenterText(t, e.datasets[0].used, $(e.units) + " Used");
>>>>>>> Let administrators disable "Copy Login Command"
},
donut: {
label: {
show: !1
},
width: 10
},
legend: {
show: !1
},
size: {
height: 175,
widht: 175
}
};
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
}, L = function(a) {
var b = a.chartPrefix + n.uniqueID + "-sparkline", c = i.getDefaultSparklineConfig(b, a.units);
return 1 === a.datasets.length && _.set(c, "legend.show", !1), c;
}, M = 0;
x()["finally"](function() {
n.$watch("options", function() {
_.each(n.metrics, function(a) {
_.each(a.datasets, function(a) {
delete a.data;
});
}), delete n.metricsError, B();
}, !0), C = b(B, i.getDefaultUpdateInterval(), !1);
});
var N = f.$on("metrics.charts.resize", function() {
i.redraw(D), i.redraw(E);
});
n.$on("$destroy", function() {
C && (b.cancel(C), C = null), N && (N(), N = null), angular.forEach(D, function(a) {
a.destroy();
}), D = null, angular.forEach(E, function(a) {
a.destroy();
}), E = null, I = !0;
});
}
};
} ]), angular.module("openshiftConsole").directive("deploymentMetrics", [ "$interval", "$parse", "$timeout", "$q", "$rootScope", "ChartsService", "ConversionService", "MetricsCharts", "MetricsService", "ModalsService", function(a, b, c, d, e, f, g, h, i, j) {
=======
}, L = function(e) {
var t = e.chartPrefix + m.uniqueID + "-sparkline", n = c.getDefaultSparklineConfig(t, e.units);
return 1 === e.datasets.length && _.set(n, "legend.show", !1), n;
}, V = 0;
(window.OPENSHIFT_CONSTANTS.DISABLE_CUSTOM_METRICS ? a.when({}) : l.getCustomMetrics(m.pod).then(function(e) {
angular.forEach(e, function(e) {
var t = e.description || e.name, n = e.unit || "", r = "custom/" + e.id.replace(/.*\/custom\//, "");
m.metrics.push({
label: t,
units: n,
chartPrefix: "custom-" + _.uniqueId("custom-metric-"),
chartType: "spline",
datasets: [ {
id: r,
label: t,
type: e.type,
data: []
} ]
});
});
})).finally(function() {
m.$watch("options", function() {
_.each(m.metrics, function(e) {
_.each(e.datasets, function(e) {
delete e.data;
});
}), delete m.metricsError, k();
}, !0), I = t(k, c.getDefaultUpdateInterval(), !1);
});
var U = o.$on("metrics.charts.resize", function() {
c.redraw(R), c.redraw(E);
});
m.$on("$destroy", function() {
I && (t.cancel(I), I = null), U && (U(), U = null), angular.forEach(R, function(e) {
e.destroy();
}), R = null, angular.forEach(E, function(e) {
e.destroy();
}), E = null, A = !0;
});
}
};
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
} ]), angular.module("openshiftConsole").directive("deploymentMetrics", [ "$interval", "$parse", "$timeout", "$q", "$rootScope", "ChartsService", "ConversionService", "MetricsCharts", "MetricsService", "ModalsService", function(e, t, n, a, r, o, i, s, c, l) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
} ]), angular.module("openshiftConsole").directive("deploymentMetrics", [ "$interval", "$parse", "$timeout", "$q", "$rootScope", "ChartsService", "ConversionService", "MetricsCharts", "MetricsService", "ModalsService", function(e, t, n, r, a, o, i, s, c, l) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
return {
restrict: "E",
scope: {
pods: "=",
containers: "=",
profile: "@",
alerts: "=?"
},
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
templateUrl: function(a, b) {
return "compact" === b.profile ? "views/directives/metrics-compact.html" : "views/directives/deployment-metrics.html";
},
link: function(b) {
function c(a) {
return null === a.value || void 0 === a.value;
}
function d(a) {
var b;
b = w ? a.compactDatasetLabel || a.label : "Average Usage";
var d = {}, e = [ "Date" ], f = [ b ], g = [ e, f ], h = function(a) {
var b = "" + a.start;
return d[b] || (d[b] = {
total: 0,
count: 0
}), d[b];
};
return _.each(A[a.descriptor], function(a) {
_.each(a, function(a) {
var b = h(a);
(!y || y < a.end) && (y = a.end), c(a) || (b.total += a.value, b.count = b.count + 1);
});
}), _.each(d, function(b, c) {
var d;
d = b.count ? b.total / b.count : null, e.push(Number(c)), f.push(a.convert ? a.convert(d) : d);
}), f.length > 1 && (a.lastValue = _.last(f) || 0), g;
}
function f(a, e) {
var f = [], g = {
type: "spline"
};
return b.showAverage ? (_.each(a[e.descriptor], function(a, b) {
r(e.descriptor, b, a);
}), g.type = "area-spline", w && e.compactType && (g.type = e.compactType), g.x = "Date", g.columns = d(e), g) : (_.each(a[e.descriptor], function(a, b) {
r(e.descriptor, b, a);
var d = b + "-dates";
_.set(g, [ "xs", b ], d);
var h = [ d ], i = [ b ];
f.push(h), f.push(i), _.each(A[e.descriptor][b], function(a) {
if (h.push(a.start), (!y || y < a.end) && (y = a.end), c(a)) i.push(a.value); else {
var b = e.convert ? e.convert(a.value) : a.value;
i.push(b);
}
});
}), g.columns = _.sortBy(f, function(a) {
return a[0];
}), g);
}
function k(a) {
x || (E = 0, b.showAverage = _.size(b.pods) > 5 || w, _.each(b.metrics, function(c) {
var d, e = f(a, c), g = c.descriptor;
w && c.compactCombineWith && (g = c.compactCombineWith, c.lastValue && (D[g].lastValue = (D[g].lastValue || 0) + c.lastValue)), u[g] ? (u[g].load(e), b.showAverage ? u[g].legend.hide() : u[g].legend.show()) : (d = F(c), d.data = e, u[g] = c3.generate(d));
}));
}
function l() {
return w ? "-15mn" : "-" + b.options.timeRange.value + "mn";
=======
templateUrl: function(e, t) {
return "compact" === t.profile ? "views/directives/metrics-compact.html" : "views/directives/deployment-metrics.html";
},
link: function(t) {
function n(e) {
return null === e.value || void 0 === e.value;
}
function r(e) {
var t, r = {}, a = [ "Date" ], o = [ t = w ? e.compactDatasetLabel || e.label : "Average Usage" ], i = [ a, o ], s = function(e) {
var t = "" + e.start;
return r[t] || (r[t] = {
total: 0,
count: 0
}), r[t];
};
return _.each(I[e.descriptor], function(e) {
_.each(e, function(e) {
var t = s(e);
(!j || j < e.end) && (j = e.end), n(e) || (t.total += e.value, t.count = t.count + 1);
});
}), _.each(r, function(t, n) {
var r;
r = t.count ? t.total / t.count : null, a.push(Number(n)), o.push(e.convert ? e.convert(r) : r);
}), o.length > 1 && (e.lastValue = _.last(o) || 0), i;
}
function o(e, a) {
var o = [], i = {
type: "spline"
};
return t.showAverage ? (_.each(e[a.descriptor], function(e, t) {
h(a.descriptor, t, e);
}), i.type = "area-spline", w && a.compactType && (i.type = a.compactType), i.x = "Date", i.columns = r(a), i) : (_.each(e[a.descriptor], function(e, t) {
h(a.descriptor, t, e);
var r = t + "-dates";
_.set(i, [ "xs", t ], r);
var s = [ r ], c = [ t ];
o.push(s), o.push(c), _.each(I[a.descriptor][t], function(e) {
if (s.push(e.start), (!j || j < e.end) && (j = e.end), n(e)) c.push(e.value); else {
var t = a.convert ? a.convert(e.value) : e.value;
c.push(t);
}
});
}), i.columns = _.sortBy(o, function(e) {
return e[0];
}), i);
}
function u(e) {
P || (N = 0, t.showAverage = _.size(t.pods) > 5 || w, _.each(t.metrics, function(n) {
var r, a = o(e, n), i = n.descriptor;
w && n.compactCombineWith && (i = n.compactCombineWith, n.lastValue && (T[i].lastValue = (T[i].lastValue || 0) + n.lastValue)), S[i] ? (S[i].load(a), t.showAverage ? S[i].legend.hide() : S[i].legend.show()) : ((r = D(n)).data = a, S[i] = c3.generate(r));
}));
}
function d() {
return w ? "-15mn" : "-" + t.options.timeRange.value + "mn";
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
}
function m() {
return 60 * t.options.timeRange.value * 1e3;
}
<<<<<<< 9bc0af8cb56dcc9609307333b9424f396867cab5
<<<<<<< 602d786018a3879a89789b1214b36a15c51b928b
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
function n() {
return w ? "1mn" : Math.floor(m() / v) + "ms";
}
function o() {
var a = _.find(b.pods, "metadata.namespace");
if (a) {
var c = {
pods: b.pods,
namespace: a.metadata.namespace,
bucketDuration: n()
};
return w || (c.containerName = b.options.selectedContainer.name), y ? c.start = y : c.start = l(), c;
}
}
function p(a) {
if (!x) {
if (E++, b.noData) return void (b.metricsError = {
status: _.get(a, "status", 0),
details: _.get(a, "data.errorMsg") || _.get(a, "statusText") || "Status code " + _.get(a, "status", 0)
});
if (!(E < 2) && b.alerts) {
var c = "metrics-failed-" + b.uniqueID;
b.alerts[c] = {
=======
function p() {
return w ? "1mn" : Math.floor(m() / S) + "ms";
=======
function m() {
return w ? "1mn" : Math.floor(p() / S) + "ms";
>>>>>>> Updates for Service Instance & Bindings
=======
function p() {
<<<<<<< 75fc56b9e42e29e1492befd08624dd0e5dade866
<<<<<<< 247459038ac366429876741dd447ec652f2f5e7d
<<<<<<< a19b22733566f12a68db59a49bc16848fffba594
<<<<<<< 46344541d4f20e3585d6ea01425f784292c0d84a
return w ? "1mn" : Math.floor(m() / S) + "ms";
>>>>>>> Support EnvFrom in the Env Editors
=======
return w ? "1mn" : Math.floor(m() / C) + "ms";
>>>>>>> Service instance details configuration and edit
=======
return w ? "1mn" : Math.floor(m() / S) + "ms";
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
return w ? "1mn" : Math.floor(m() / C) + "ms";
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
=======
return w ? "1mn" : Math.floor(m() / C) + "ms";
>>>>>>> Adding label filter to ste secrets page
}
function f() {
var e = _.find(t.pods, "metadata.namespace");
if (e) {
var n = {
pods: t.pods,
namespace: e.metadata.namespace,
bucketDuration: p()
};
return w || (n.containerName = t.options.selectedContainer.name), n.start = j || d(), n;
}
}
function g(e) {
if (!P) if (N++, t.noData) t.metricsError = {
status: _.get(e, "status", 0),
details: _.get(e, "data.errorMsg") || _.get(e, "statusText") || "Status code " + _.get(e, "status", 0)
}; else if (!(N < 2) && t.alerts) {
var n = "metrics-failed-" + t.uniqueID;
t.alerts[n] = {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
type: "error",
message: "An error occurred updating metrics.",
links: [ {
href: "",
label: "Retry",
onClick: function() {
<<<<<<< 1f5fb674ad14c7e78d2e82e837750bd2747349ab
<<<<<<< a19b22733566f12a68db59a49bc16848fffba594
<<<<<<< 9bc0af8cb56dcc9609307333b9424f396867cab5
<<<<<<< 28651868c34b8ebf846f1da11eea62cc91408c4c
<<<<<<< 9cc4f1b3be7962f38dedf1e6eb381217dccafaae
<<<<<<< 8de63508433dbba58881278365f8313e3c2550fc
<<<<<<< b9f74dc9163281caa65a7366573d340fa288654d
<<<<<<< 7fc0bb75a45e57cf2098d66ed317a3123741a3d2
<<<<<<< 952b26bc3acaa89a51e4aad5f965e515d3b007ae
<<<<<<< 711ef95cfa1533e04a97dcbc40eee8ab13234241
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
delete b.alerts[c], E = 1, s();
=======
delete t.alerts[n], D = 1, y();
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
delete t.alerts[n], N = 1, y();
>>>>>>> Label Filter for Kubernetes Deployment History Tab
=======
delete t.alerts[n], D = 1, y();
>>>>>>> Add bindings list to resource pages
=======
delete t.alerts[n], N = 1, y();
>>>>>>> Bug 1481127 - More robust handling of large project lists
=======
delete t.alerts[n], I = 1, y();
>>>>>>> Add notification-drawer to show curated list of events to user
=======
delete t.alerts[n], N = 1, y();
>>>>>>> bug 1480988. Use project annotation to determine kibana url for ops namespaces
=======
delete t.alerts[n], N = 1, y();
>>>>>>> Adjust events to show in the drawer
=======
delete t.alerts[n], E = 1, y();
>>>>>>> Quota Notifications
=======
delete t.alerts[n], N = 1, y();
>>>>>>> Support EnvFrom in the Env Editors
=======
delete t.alerts[n], T = 1, y();
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
delete t.alerts[n], N = 1, y();
>>>>>>> Update template service broker flag name
}
} ]
};
}
}
<<<<<<< 3087d5859f05def6301fced3a013ac9165fd8c7a
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
}
function q() {
var a = _.isEmpty(b.pods);
return a ? (b.loaded = !0, !1) : !b.metricsError && E < 2;
}
function r(a, c, d) {
b.noData = !1;
var e = _.initial(d), f = _.get(A, [ a, c ]);
if (!f) return void _.set(A, [ a, c ], e);
var g = _.takeRight(f.concat(e), v);
_.set(A, [ a, c ], g);
}
function s() {
if (!B && q()) {
z = Date.now();
var a = o();
i.getPodMetrics(a).then(k, p)["finally"](function() {
b.loaded = !0;
});
}
}
var t, u = {}, v = 30, w = "compact" === b.profile, x = !1;
b.uniqueID = h.uniqueID();
var y, z, A = {}, B = w, C = function(a) {
return a >= 1024;
};
b.metrics = [ {
label: "Memory",
units: "MiB",
convert: g.bytesToMiB,
formatUsage: function(a) {
return C(a) && (a /= 1024), h.formatUsage(a);
},
usageUnits: function(a) {
return C(a) ? "GiB" : "MiB";
},
descriptor: "memory/usage",
type: "pod_container",
chartID: "memory-" + b.uniqueID
}, {
label: "CPU",
units: "cores",
convert: g.millicoresToCores,
formatUsage: h.formatUsage,
=======
function h() {
=======
function v() {
<<<<<<< 1f5fb674ad14c7e78d2e82e837750bd2747349ab
<<<<<<< a19b22733566f12a68db59a49bc16848fffba594
>>>>>>> Add SVG icons
return _.isEmpty(t.pods) ? (t.loaded = !0, !1) : !t.metricsError && N < 2;
=======
return _.isEmpty(t.pods) ? (t.loaded = !0, !1) : !t.metricsError && T < 2;
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
return _.isEmpty(t.pods) ? (t.loaded = !0, !1) : !t.metricsError && N < 2;
>>>>>>> Update template service broker flag name
}
function h(e, n, r) {
t.noData = !1;
var a = _.initial(r), o = _.get(I, [ e, n ]);
if (o) {
var i = _.takeRight(o.concat(a), C);
_.set(I, [ e, n ], i);
} else _.set(I, [ e, n ], a);
}
function y() {
if (!R && v()) {
k = Date.now();
var e = f();
c.getPodMetrics(e).then(u, g).finally(function() {
t.loaded = !0;
});
}
}
var b, S = {}, C = 30, w = "compact" === t.profile, P = !1;
t.uniqueID = s.uniqueID();
var j, k, I = {}, R = w, E = function(e) {
return e >= 1024;
};
t.metrics = [ {
label: "Memory",
units: "MiB",
convert: i.bytesToMiB,
formatUsage: function(e) {
return E(e) && (e /= 1024), s.formatUsage(e);
},
usageUnits: function(e) {
return E(e) ? "GiB" : "MiB";
},
descriptor: "memory/usage",
type: "pod_container",
chartID: "memory-" + t.uniqueID
}, {
label: "CPU",
units: "cores",
convert: i.millicoresToCores,
formatUsage: s.formatUsage,
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
usageUnits: function() {
return "cores";
},
descriptor: "cpu/usage_rate",
type: "pod_container",
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
chartID: "cpu-" + b.uniqueID
}, {
label: "Network (Sent)",
units: "KiB/s",
convert: g.bytesToKiB,
formatUsage: h.formatUsage,
=======
chartID: "cpu-" + t.uniqueID
}, {
label: "Network (Sent)",
units: "KiB/s",
convert: i.bytesToKiB,
formatUsage: s.formatUsage,
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
usageUnits: function() {
return "KiB/s";
},
descriptor: "network/tx_rate",
type: "pod",
compactLabel: "Network",
compactDatasetLabel: "Sent",
compactType: "spline",
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
chartID: "network-tx-" + b.uniqueID
}, {
label: "Network (Received)",
units: "KiB/s",
convert: g.bytesToKiB,
formatUsage: h.formatUsage,
=======
chartID: "network-tx-" + t.uniqueID
}, {
label: "Network (Received)",
units: "KiB/s",
convert: i.bytesToKiB,
formatUsage: s.formatUsage,
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
usageUnits: function() {
return "KiB/s";
},
descriptor: "network/rx_rate",
type: "pod",
compactCombineWith: "network/tx_rate",
compactDatasetLabel: "Received",
compactType: "spline",
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
chartID: "network-rx-" + b.uniqueID
} ];
var D = _.keyBy(b.metrics, "descriptor");
b.loaded = !1, b.noData = !0, b.showComputeUnitsHelp = function() {
j.showComputeUnitsHelp();
};
var E = 0;
i.getMetricsURL().then(function(a) {
b.metricsURL = a;
}), b.options = {
rangeOptions: h.getTimeRangeOptions()
}, b.options.timeRange = _.head(b.options.rangeOptions), b.options.selectedContainer = _.head(b.containers);
var F = function(a) {
var c = h.getDefaultSparklineConfig(a.chartID, a.units, w);
return _.set(c, "legend.show", !w && !b.showAverage), c;
};
b.$watch("options", function() {
A = {}, y = null, delete b.metricsError, s();
}, !0), t = a(s, h.getDefaultUpdateInterval(), !1), b.updateInView = function(a) {
B = !a, a && (!z || Date.now() > z + h.getDefaultUpdateInterval()) && s();
};
var G = e.$on("metrics.charts.resize", function() {
h.redraw(u);
});
b.$on("$destroy", function() {
t && (a.cancel(t), t = null), G && (G(), G = null), angular.forEach(u, function(a) {
a.destroy();
}), u = null, x = !0;
});
}
};
} ]), angular.module("openshiftConsole").directive("logViewer", [ "$sce", "$timeout", "$window", "$filter", "$q", "AuthService", "APIService", "APIDiscovery", "DataService", "HTMLService", "ModalsService", "logLinks", "gettext", "gettextCatalog", function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
var o = $(window), p = $('<tr class="log-line"><td class="log-line-number"></td><td class="log-line-text"></td></tr>').get(0), q = function(a, b) {
var c = p.cloneNode(!0);
c.firstChild.setAttribute("data-line-number", a);
var d = ansi_up.escape_for_html(b), e = ansi_up.ansi_to_html(d), f = j.linkify(e, "_blank", !0);
return c.lastChild.innerHTML = f, c;
=======
chartID: "network-rx-" + t.uniqueID
} ];
var T = _.keyBy(t.metrics, "descriptor");
t.loaded = !1, t.noData = !0, t.showComputeUnitsHelp = function() {
l.showComputeUnitsHelp();
};
var N = 0;
c.getMetricsURL().then(function(e) {
t.metricsURL = e;
}), t.options = {
rangeOptions: s.getTimeRangeOptions()
}, t.options.timeRange = _.head(t.options.rangeOptions), t.options.selectedContainer = _.head(t.containers);
var D = function(e) {
var n = s.getDefaultSparklineConfig(e.chartID, e.units, w);
return _.set(n, "legend.show", !w && !t.showAverage), n;
};
t.$watch("options", function() {
I = {}, j = null, delete t.metricsError, y();
}, !0), b = e(y, s.getDefaultUpdateInterval(), !1), t.updateInView = function(e) {
R = !e, e && (!k || Date.now() > k + s.getDefaultUpdateInterval()) && y();
};
var A = a.$on("metrics.charts.resize", function() {
s.redraw(S);
});
t.$on("$destroy", function() {
b && (e.cancel(b), b = null), A && (A(), A = null), angular.forEach(S, function(e) {
e.destroy();
}), S = null, P = !0;
});
}
};
} ]), angular.module("openshiftConsole").directive("logViewer", [ "$sce", "$timeout", "$window", "$filter", "$q", "AuthService", "APIService", "APIDiscovery", "DataService", "HTMLService", "ModalsService", "logLinks", "BREAKPOINTS", function(e, t, n, r, a, o, i, s, c, l, u, d) {
var m = $(window), p = $('<tr class="log-line"><td class="log-line-number"></td><td class="log-line-text"></td></tr>').get(0), f = function(e, t) {
var n = p.cloneNode(!0);
n.firstChild.setAttribute("data-line-number", e);
var r = ansi_up.escape_for_html(t), a = ansi_up.ansi_to_html(r), o = l.linkify(a, "_blank", !0);
return n.lastChild.innerHTML = o, n;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
};
return {
restrict: "AE",
transclude: !0,
templateUrl: "views/directives/logs/_log-viewer.html",
scope: {
followAffixTop: "=?",
object: "=",
fullLogUrl: "=?",
name: "=",
context: "=",
options: "=?",
fixedHeight: "=?",
chromeless: "=?",
empty: "=?",
run: "=?"
},
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
controller: [ "$scope", function(b) {
var j, k, p, r = document.documentElement;
b.logViewerID = _.uniqueId("log-viewer"), b.empty = !0;
var s, t;
"ReplicationController" === b.object.kind ? (s = "deploymentconfigs/log", t = d("annotation")(b.object, "deploymentConfig")) : (s = g.kindToResource(b.object.kind) + "/log", t = b.object.metadata.name);
var u, v = function() {
b.$apply(function() {
var a = j.getBoundingClientRect();
b.fixedHeight ? b.showScrollLinks = a && a.height > b.fixedHeight : b.showScrollLinks = a && (a.top < 0 || a.bottom > r.clientHeight);
});
}, w = !1, x = function() {
w ? w = !1 : b.$evalAsync(function() {
b.autoScrollActive = !1;
});
}, y = function() {
k ? $(k).on("scroll", x) : o.on("scroll", x);
}, z = function() {
b.fixedHeight || p.affix({
target: window,
offset: {
top: b.followAffixTop || 0
}
});
}, A = function() {
return $("#" + b.logViewerID + " .log-view-output");
}, B = function(a) {
var c = A(), d = c.offset().top;
if (!(d < 0)) {
var e = $(".ellipsis-pulser").outerHeight(!0), f = b.fixedHeight ? b.fixedHeight : Math.floor($(window).height() - d - e);
b.chromeless || b.fixedHeight || (f -= 40), a ? c.animate({
"min-height": f + "px"
}, "fast") : c.css("min-height", f + "px"), b.fixedHeight && c.css("max-height", f);
}
}, C = function() {
if (!u) {
var a = function() {
clearInterval(u), u = null, b.$evalAsync(function() {
b.sized = !0;
});
}, c = 0;
u = setInterval(function() {
if (c > 10) return void a();
c++;
var b = A();
b.is(":visible") && (B(), a());
}, 100);
}
}, D = _.debounce(function() {
B(!0), v(), x();
}, 100);
o.on("resize", D);
var E, F = function() {
w = !0, l.scrollBottom(k);
}, G = function() {
b.autoScrollActive = !b.autoScrollActive, b.autoScrollActive && F();
}, H = document.createDocumentFragment(), I = _.debounce(function() {
j.appendChild(H), H = document.createDocumentFragment(), b.autoScrollActive && F(), b.showScrollLinks || v();
}, 100, {
maxWait: 300
}), J = function(a) {
var b = e.defer();
return E ? (E.onClose(function() {
b.resolve();
}), E.stop()) : b.resolve(), a || (I.cancel(), j && (j.innerHTML = ""), H = document.createDocumentFragment()), b.promise;
}, K = function() {
J().then(function() {
b.$evalAsync(function() {
if (b.run) {
angular.extend(b, {
=======
controller: [ "$scope", function(t) {
var l, u, p, g = document.documentElement;
t.logViewerID = _.uniqueId("log-viewer"), t.empty = !0;
var v, h;
"ReplicationController" === t.object.kind ? (v = "deploymentconfigs/log", h = r("annotation")(t.object, "deploymentConfig")) : (v = i.kindToResource(t.object.kind) + "/log", h = t.object.metadata.name);
var y, b = function() {
t.$apply(function() {
var e = l.getBoundingClientRect();
t.fixedHeight ? t.showScrollLinks = e && e.height > t.fixedHeight : t.showScrollLinks = e && (e.top < 0 || e.bottom > g.clientHeight);
});
}, S = !1, C = function() {
S ? S = !1 : t.$evalAsync(function() {
t.autoScrollActive = !1;
});
}, w = function() {
u ? $(u).on("scroll", C) : m.on("scroll", C);
}, P = function() {
t.fixedHeight || p.affix({
target: window,
offset: {
top: t.followAffixTop || 0
}
});
}, j = function() {
return $("#" + t.logViewerID + " .log-view-output");
}, k = function(e) {
var n = j(), r = n.offset().top;
if (!(r < 0)) {
var a = $(".ellipsis-pulser").outerHeight(!0), o = t.fixedHeight ? t.fixedHeight : Math.floor($(window).height() - r - a);
t.chromeless || t.fixedHeight || (o -= 40), e ? n.animate({
"min-height": o + "px"
}, "fast") : n.css("min-height", o + "px"), t.fixedHeight && n.css("max-height", o);
}
}, I = function() {
if (!y) {
var e = function() {
clearInterval(y), y = null, t.$evalAsync(function() {
t.sized = !0;
});
}, n = 0;
y = setInterval(function() {
n > 10 ? e() : (n++, j().is(":visible") && (k(), e()));
}, 100);
}
}, R = _.debounce(function() {
k(!0), b(), C();
}, 100);
m.on("resize", R);
var E, T = function() {
S = !0, d.scrollBottom(u);
}, N = document.createDocumentFragment(), D = _.debounce(function() {
l.appendChild(N), N = document.createDocumentFragment(), t.autoScrollActive && T(), t.showScrollLinks || b();
}, 100, {
maxWait: 300
}), A = function(e) {
var t = a.defer();
return E ? (E.onClose(function() {
t.resolve();
}), E.stop()) : t.resolve(), e || (D.cancel(), l && (l.innerHTML = ""), N = document.createDocumentFragment()), t.promise;
}, B = function() {
A().then(function() {
t.$evalAsync(function() {
if (t.run) {
angular.extend(t, {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
loading: !0,
autoScrollActive: !0,
largeLog: !1,
limitReached: !1,
showScrollLinks: !1,
state: ""
});
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
var a = angular.extend({
follow: !0,
tailLines: 5e3,
limitBytes: 10485760
}, b.options);
E = i.createStream(s, t, b.context, a);
var c = 0, d = function(a) {
c++, H.appendChild(q(c, a)), I();
};
E.onMessage(function(e, f, g) {
b.$evalAsync(function() {
b.empty = !1, "logs" !== b.state && (b.state = "logs", C());
}), e && (a.limitBytes && g >= a.limitBytes && (b.$evalAsync(function() {
b.limitReached = !0, b.loading = !1;
}), J(!0)), d(e), !b.largeLog && c >= a.tailLines && b.$evalAsync(function() {
b.largeLog = !0;
}));
}), E.onClose(function() {
E = null, b.$evalAsync(function() {
b.loading = !1, b.autoScrollActive = !1, 0 !== c || b.emptyStateMessage || (b.state = "empty", b.emptyStateMessage = n.getString(m("The logs are no longer available or could not be loaded.")));
});
}), E.onError(function() {
E = null, b.$evalAsync(function() {
angular.extend(b, {
loading: !1,
autoScrollActive: !1
}), 0 === c ? (b.state = "empty", b.emptyStateMessage = n.getString(m("The logs are no longer available or could not be loaded."))) : b.errorWhileRunning = !0;
});
}), E.start();
=======
var e = angular.extend({
follow: !0,
tailLines: 5e3,
limitBytes: 10485760
}, t.options), n = 0, r = function(e) {
n++, N.appendChild(f(n, e)), D();
};
(E = c.createStream(v, h, t.context, e)).onMessage(function(a, o, i) {
t.$evalAsync(function() {
t.empty = !1, "logs" !== t.state && (t.state = "logs", I());
}), a && (e.limitBytes && i >= e.limitBytes && (t.$evalAsync(function() {
t.limitReached = !0, t.loading = !1;
}), A(!0)), r(a), !t.largeLog && n >= e.tailLines && t.$evalAsync(function() {
t.largeLog = !0;
}));
}), E.onClose(function() {
E = null, t.$evalAsync(function() {
t.loading = !1, t.autoScrollActive = !1, 0 !== n || t.emptyStateMessage || (t.state = "empty", t.emptyStateMessage = "The logs are no longer available or could not be loaded.");
});
}), E.onError(function() {
E = null, t.$evalAsync(function() {
angular.extend(t, {
loading: !1,
autoScrollActive: !1
}), 0 === n ? (t.state = "empty", t.emptyStateMessage = "The logs are no longer available or could not be loaded.") : t.errorWhileRunning = !0;
});
<<<<<<< 9bc0af8cb56dcc9609307333b9424f396867cab5
<<<<<<< 602d786018a3879a89789b1214b36a15c51b928b
<<<<<<< 0666ab16a69f060ee6faef6feade97117cedbd56
<<<<<<< 579cbe4ce2e640c919f9687b5c885f661897db96
<<<<<<< 33eb37eab8df0c17bc226501a924a2dc2b9b2f41
<<<<<<< 952b26bc3acaa89a51e4aad5f965e515d3b007ae
<<<<<<< 8ab4f4a09cf53190c7bc08d260e963252c3ba6a5
<<<<<<< 9854a04a93530a5cbed260dddc4991d2b65730e5
}), B.start();
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
}), A.start();
>>>>>>> Improve YAML editor validation and feedback
=======
}), B.start();
>>>>>>> Upgrade to angular-patternfly v4.1.1 and patternfly v3.25.1
=======
}), A.start();
>>>>>>> Add bindings list to resource pages
}
});
});
};
<<<<<<< 8de63508433dbba58881278365f8313e3c2550fc
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
return h.getLoggingURL(b.context.project).then(function(d) {
var e = _.get(b.context, "project.metadata.name"), g = _.get(b.options, "container");
e && g && t && d && (angular.extend(b, {
kibanaAuthUrl: a.trustAsResourceUrl(URI(d).segment("auth").segment("token").normalizePathname().toString()),
access_token: f.UserStore().getToken()
}), b.$watchGroup([ "context.project.metadata.name", "options.container", "name" ], function() {
angular.extend(b, {
kibanaArchiveUrl: a.trustAsResourceUrl(l.archiveUri({
namespace: b.context.project.metadata.name,
namespaceUid: b.context.project.metadata.uid,
podname: t,
containername: b.options.container,
backlink: URI.encode(c.location.href)
}))
=======
}), T.start();
=======
}), E.start();
>>>>>>> Add the ability to add a secret to an application
=======
}), I.start();
>>>>>>> Enable new landing page experience by default
=======
}), T.start();
>>>>>>> Updates for Service Instance & Bindings
=======
}), E.start();
>>>>>>> Support EnvFrom in the Env Editors
}
});
>>>>>>> Patternfly vertical navigation and project bar
});
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
}));
}), this.cacheScrollableNode = function(a) {
k = a;
}, this.cacheLogNode = function(a) {
j = a;
}, this.cacheAffixable = function(a) {
p = $(a);
}, this.start = function() {
y(), z();
}, angular.extend(b, {
=======
if (s.getLoggingURL().then(function(a) {
=======
if (s.getLoggingURL(t.context.project).then(function(a) {
>>>>>>> bug 1480988. Use project annotation to determine kibana url for ops namespaces
var r = _.get(t.context, "project.metadata.name"), i = _.get(t.options, "container");
r && i && h && a && (angular.extend(t, {
kibanaAuthUrl: e.trustAsResourceUrl(URI(a).segment("auth").segment("token").normalizePathname().toString()),
=======
};
if (s.getLoggingURL(t.context.project).then(function(r) {
var a = _.get(t.context, "project.metadata.name"), i = _.get(t.options, "container");
a && i && h && r && (angular.extend(t, {
kibanaAuthUrl: e.trustAsResourceUrl(URI(r).segment("auth").segment("token").normalizePathname().toString()),
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
access_token: o.UserStore().getToken()
}), t.$watchGroup([ "context.project.metadata.name", "options.container", "name" ], function() {
angular.extend(t, {
kibanaArchiveUrl: e.trustAsResourceUrl(d.archiveUri({
namespace: t.context.project.metadata.name,
namespaceUid: t.context.project.metadata.uid,
podname: h,
containername: t.options.container,
backlink: URI.encode(n.location.href)
}))
});
}));
}), this.cacheScrollableNode = function(e) {
u = e;
}, this.cacheLogNode = function(e) {
l = e;
}, this.cacheAffixable = function(e) {
p = $(e);
}, this.start = function() {
w(), P();
}, angular.extend(t, {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
ready: !0,
loading: !0,
autoScrollActive: !0,
state: !1,
onScrollBottom: function() {
<<<<<<< 33eb37eab8df0c17bc226501a924a2dc2b9b2f41
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
l.scrollBottom(k);
},
onScrollTop: function() {
b.autoScrollActive = !1, l.scrollTop(k), $("#" + b.logViewerID + "-affixedFollow").affix("checkPosition");
},
toggleAutoScroll: G,
goChromeless: l.chromelessLink,
restartLogs: K
}), b.$on("$destroy", function() {
J(), o.off("resize", D), o.off("scroll", x), k && $(k).off("scroll", x);
}), "deploymentconfigs/logs" !== s || t ? void b.$watchGroup([ "name", "options.container", "run" ], K) : (b.state = "empty", void (b.emptyStateMessage = "Logs are not available for this replication controller because it was not generated from a deployment configuration."));
} ],
require: "logViewer",
link: function(a, c, d, e) {
b(function() {
a.fixedHeight && e.cacheScrollableNode(document.getElementById(a.logViewerID + "-fixed-scrollable")), e.cacheLogNode(document.getElementById(a.logViewerID + "-logContent")), e.cacheAffixable(document.getElementById(a.logViewerID + "-affixedFollow")), e.start();
}, 0);
var f = function() {
var b = $(c).find(".log-line-text").text(), d = _.get(a, "object.metadata.name", "openshift") + ".log", e = new Blob([ b ], {
=======
d.scrollBottom(h);
=======
d.scrollBottom(u);
>>>>>>> Patternfly vertical navigation and project bar
},
onScrollTop: function() {
t.autoScrollActive = !1, d.scrollTop(u), $("#" + t.logViewerID + "-affixedFollow").affix("checkPosition");
},
toggleAutoScroll: function() {
t.autoScrollActive = !t.autoScrollActive, t.autoScrollActive && T();
},
goChromeless: d.chromelessLink,
restartLogs: B
}), t.$on("$destroy", function() {
A(), m.off("resize", R), m.off("scroll", C), u && $(u).off("scroll", C);
}), "deploymentconfigs/logs" === v && !h) return t.state = "empty", void (t.emptyStateMessage = "Logs are not available for this replication controller because it was not generated from a deployment configuration.");
t.$watchGroup([ "name", "options.container", "run" ], B);
} ],
require: "logViewer",
link: function(e, n, r, a) {
t(function() {
e.fixedHeight && a.cacheScrollableNode(document.getElementById(e.logViewerID + "-fixed-scrollable")), a.cacheLogNode(document.getElementById(e.logViewerID + "-logContent")), a.cacheAffixable(document.getElementById(e.logViewerID + "-affixedFollow")), a.start();
}, 0);
var o = function() {
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
var t = $(n).find(".log-line-text").text(), a = _.get(e, "object.metadata.name", "openshift") + ".log", r = new Blob([ t ], {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
var t = $(n).find(".log-line-text").text(), r = _.get(e, "object.metadata.name", "openshift") + ".log", a = new Blob([ t ], {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
type: "text/plain;charset=utf-8"
});
saveAs(a, r);
};
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
a.canSave = !!new Blob(), a.saveLog = function() {
return a.largeLog ? void k.confirmSaveLog(a.object).then(f) : void f();
=======
e.canSave = !!new Blob(), e.saveLog = function() {
e.largeLog ? u.confirmSaveLog(e.object).then(o) : o();
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
};
}
};
} ]), angular.module("openshiftConsole").directive("statusIcon", function() {
return {
restrict: "E",
templateUrl: "views/directives/_status-icon.html",
scope: {
status: "=",
disableAnimation: "@"
},
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
link: function(a, b, c) {
a.spinning = !angular.isDefined(c.disableAnimation);
=======
link: function(e, t, n) {
e.spinning = !angular.isDefined(n.disableAnimation);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
}
};
}), angular.module("openshiftConsole").directive("ellipsisPulser", [ function() {
return {
restrict: "E",
scope: {
color: "@",
display: "@",
size: "@",
msg: "@"
},
templateUrl: "views/directives/_ellipsis-pulser.html"
};
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
} ]), angular.module("openshiftConsole").directive("podDonut", [ "$timeout", "isPullingImageFilter", "isTerminatingFilter", "podWarningsFilter", "numContainersReadyFilter", "Logger", "ChartsService", "gettext", "gettextCatalog", function(a, b, c, d, e, f, g, h, i) {
=======
} ]), angular.module("openshiftConsole").directive("podDonut", [ "$timeout", "isPullingImageFilter", "isTerminatingFilter", "podWarningsFilter", "numContainersReadyFilter", "Logger", "ChartsService", function(e, t, n, a, r, o, i) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
} ]), angular.module("openshiftConsole").directive("podDonut", [ "$timeout", "isPullingImageFilter", "isTerminatingFilter", "podWarningsFilter", "numContainersReadyFilter", "Logger", "ChartsService", function(e, t, n, r, a, o, i) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
return {
restrict: "E",
scope: {
pods: "=",
desired: "=?",
idled: "=?",
mini: "=?"
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
},
templateUrl: "views/directives/pod-donut.html",
link: function(a, f) {
function j() {
var b = _.reject(a.pods, {
status: {
phase: "Failed"
}
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
}), c = _.size(b);
if (a.mini) return void a.$evalAsync(function() {
a.total = c;
});
var d;
d = angular.isNumber(a.desired) && a.desired !== c ? i.getString(h("scaling to")) + " " + a.desired + "..." : 1 === c ? "pod" : "pods", a.idled ? g.updateDonutCenterText(f[0], "Idle") : g.updateDonutCenterText(f[0], c, d);
=======
}), n = _.size(t);
if (e.mini) e.$evalAsync(function() {
e.total = n;
}); else {
var r;
r = angular.isNumber(e.desired) && e.desired !== n ? "scaling to " + e.desired + "..." : 1 === n ? "pod" : "pods", e.idled ? i.updateDonutCenterText(o[0], "Idle") : i.updateDonutCenterText(o[0], n, r);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}
function k(b) {
var c = {
columns: []
};
angular.forEach(q, function(a) {
c.columns.push([ a, b[a] || 0 ]);
}), _.isEmpty(b) ? c.columns.push([ "Empty", 1 ]) : c.unload = "Empty", o ? o.load(c) : (p.data.columns = c.columns, o = c3.generate(p)), a.podStatusData = c.columns;
}
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
function l(a) {
var b = e(a), c = _.size(a.spec.containers);
return b === c;
}
function m(a) {
if (c(a)) return "Terminating";
var e = d(a);
return _.some(e, {
severity: "error"
}) ? "Error" : _.isEmpty(e) ? b(a) ? "Pulling" : "Running" !== a.status.phase || l(a) ? _.get(a, "status.phase", "Unknown") : "Not Ready" : "Warning";
=======
function c(e) {
return a(e) === _.size(e.spec.containers);
}
function l(e) {
if (n(e)) return "Terminating";
var a = r(e);
return _.some(a, {
severity: "error"
}) ? "Error" : _.isEmpty(a) ? t(e) ? "Pulling" : "Running" !== e.status.phase || c(e) ? _.get(e, "status.phase", "Unknown") : "Not Ready" : "Warning";
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}
function n() {
var b = {};
return angular.forEach(a.pods, function(a) {
var c = m(a);
b[c] = (b[c] || 0) + 1;
}), b;
}
var o, p, q = [ "Running", "Not Ready", "Warning", "Error", "Pulling", "Pending", "Succeeded", "Terminating", "Unknown" ];
a.chartId = _.uniqueId("pods-donut-chart-"), p = {
type: "donut",
bindto: "#" + a.chartId,
donut: {
expand: !1,
label: {
show: !1
},
width: a.mini ? 5 : 10
},
size: {
height: a.mini ? 45 : 150,
width: a.mini ? 45 : 150
},
legend: {
show: !1
},
onrendered: j,
tooltip: {
format: {
value: function(a, b, c) {
if (a && "Empty" !== c) return a;
}
}
},
transition: {
duration: 350
},
data: {
type: "donut",
groups: [ q ],
order: null,
colors: {
Empty: "#ffffff",
Running: "#00b9e4",
"Not Ready": "#beedf9",
Warning: "#f39d3c",
Error: "#d9534f",
Pulling: "#d1d1d1",
Pending: "#ededed",
Succeeded: "#3f9c35",
Terminating: "#00659c",
Unknown: "#f9d67a"
},
selection: {
enabled: !1
}
}
}, a.mini && (p.padding = {
=======
},
templateUrl: "views/directives/pod-donut.html",
link: function(e, o) {
function s() {
var t = _.reject(e.pods, {
status: {
phase: "Failed"
}
}), n = _.size(t);
if (e.mini) e.$evalAsync(function() {
e.total = n;
}); else {
var a;
a = angular.isNumber(e.desired) && e.desired !== n ? "scaling to " + e.desired + "..." : 1 === n ? "pod" : "pods", e.idled ? i.updateDonutCenterText(o[0], "Idle") : i.updateDonutCenterText(o[0], n, a);
}
}
function c(e) {
return r(e) === _.size(e.spec.containers);
}
function l(e) {
if (n(e)) return "Terminating";
var r = a(e);
return _.some(r, {
severity: "error"
}) ? "Error" : _.isEmpty(r) ? t(e) ? "Pulling" : "Running" !== e.status.phase || c(e) ? _.get(e, "status.phase", "Unknown") : "Not Ready" : "Warning";
}
var u, d, m = [ "Running", "Not Ready", "Warning", "Error", "Pulling", "Pending", "Succeeded", "Terminating", "Unknown" ];
e.chartId = _.uniqueId("pods-donut-chart-"), d = {
type: "donut",
bindto: "#" + e.chartId,
donut: {
expand: !1,
label: {
show: !1
},
width: e.mini ? 5 : 10
},
size: {
height: e.mini ? 45 : 150,
width: e.mini ? 45 : 150
},
legend: {
show: !1
},
onrendered: s,
tooltip: {
format: {
value: function(e, t, n) {
if (e && "Empty" !== n) return e;
}
}
},
transition: {
duration: 350
},
data: {
type: "donut",
groups: [ m ],
order: null,
colors: {
Empty: "#ffffff",
Running: "#00b9e4",
"Not Ready": "#beedf9",
Warning: "#f39d3c",
Error: "#d9534f",
Pulling: "#d1d1d1",
Pending: "#ededed",
Succeeded: "#3f9c35",
Terminating: "#00659c",
Unknown: "#f9d67a"
},
selection: {
enabled: !1
}
}
}, e.mini && (d.padding = {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
top: 0,
right: 0,
bottom: 0,
left: 0
});
<<<<<<< 9bc0af8cb56dcc9609307333b9424f396867cab5
<<<<<<< 602d786018a3879a89789b1214b36a15c51b928b
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
var r = _.debounce(k, 350, {
maxWait: 500
});
a.$watch(n, r, !0), a.$watchGroup([ "desired", "idled" ], j), a.$on("destroy", function() {
o && (o = o.destroy());
=======
var p = _.debounce(function(t) {
=======
var m = _.debounce(function(t) {
>>>>>>> Updates for Service Instance & Bindings
=======
var p = _.debounce(function(t) {
>>>>>>> Support EnvFrom in the Env Editors
var n = {
columns: []
};
angular.forEach(m, function(e) {
n.columns.push([ e, t[e] || 0 ]);
}), _.isEmpty(t) ? n.columns.push([ "Empty", 1 ]) : n.unload = "Empty", u ? u.load(n) : (d.data.columns = n.columns, u = c3.generate(d)), e.podStatusData = n.columns;
}, 350, {
maxWait: 500
});
e.$watch(function() {
var t = {};
return angular.forEach(e.pods, function(e) {
var n = l(e);
t[n] = (t[n] || 0) + 1;
}), t;
}, p, !0), e.$watchGroup([ "desired", "idled" ], s), e.$on("destroy", function() {
u && (u = u.destroy());
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
});
}
};
} ]), angular.module("openshiftConsole").directive("routeServicePie", function() {
return {
restrict: "E",
scope: {
route: "="
},
template: '<div ng-show="totalWeight" ng-attr-id="{{chartId}}"></div>',
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
link: function(a) {
function b() {
var b = {
columns: [],
names: {}
};
a.route && (b.columns.push(g(a.route.spec.to)), b.names[a.route.spec.to.name] = _.truncate(a.route.spec.to.name, {
length: 30
}), a.totalWeight = a.route.spec.to.weight, _.each(a.route.spec.alternateBackends, function(c) {
b.columns.push(g(c)), b.names[c.name] = _.truncate(c.name, {
length: 30
}), a.totalWeight += c.weight;
})), a.totalWeight && (c ? (i(b), c.load(b)) : (d.data.columns = b.columns, c = c3.generate(d)), f = b);
}
var c, d, e = window.matchMedia("(max-width: 400px)").matches;
a.chartId = _.uniqueId("route-service-chart-"), d = {
bindto: "#" + a.chartId,
=======
link: function(e) {
var t, n, r = window.matchMedia("(max-width: 400px)").matches;
e.chartId = _.uniqueId("route-service-chart-"), n = {
bindto: "#" + e.chartId,
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
color: {
pattern: [ $.pfPaletteColors.blue, $.pfPaletteColors.orange, $.pfPaletteColors.green, $.pfPaletteColors.red ]
},
legend: {
show: !0,
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
position: e ? "bottom" : "right"
=======
position: a ? "bottom" : "right"
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
position: r ? "bottom" : "right"
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
},
pie: {
label: {
show: !1
}
},
size: {
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
height: e ? 150 : 115
},
tooltip: {
format: {
name: function(a, b, c) {
return c;
=======
height: a ? 150 : 115
=======
height: r ? 150 : 115
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
},
tooltip: {
format: {
name: function(e, t, n) {
return n;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
}
}
},
data: {
type: "pie",
order: null,
selection: {
enabled: !1
}
}
};
var a, o = function(e) {
return [ e.name, e.weight ];
}, i = function(e) {
return _.head(e);
}, s = function(e) {
var t = {};
_.each(e.columns, function(e) {
var n = i(e);
t[n] = !0;
});
var n = _.get(a, "columns", []);
e.unload = _.chain(n).reject(function(e) {
var n = i(e);
return _.has(t, [ n ]);
}).map(i).value();
};
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
}), angular.module("openshiftConsole").directive("deploymentDonut", [ "$filter", "$location", "$timeout", "$uibModal", "DeploymentsService", "HPAService", "QuotaService", "LabelFilter", "Navigate", "NotificationsService", "hashSizeFilter", "hasDeploymentConfigFilter", function(a, b, c, d, e, f, g, h, i, j, k, l) {
=======
e.$watch("route", function() {
var r = {
columns: [],
names: {}
};
e.route && (r.columns.push(o(e.route.spec.to)), r.names[e.route.spec.to.name] = _.truncate(e.route.spec.to.name, {
length: 30
}), e.totalWeight = e.route.spec.to.weight, _.each(e.route.spec.alternateBackends, function(t) {
r.columns.push(o(t)), r.names[t.name] = _.truncate(t.name, {
length: 30
}), e.totalWeight += t.weight;
})), e.totalWeight && (t ? (s(r), t.load(r)) : (n.data.columns = r.columns, t = c3.generate(n)), a = r);
}), e.$on("destroy", function() {
t && (t = t.destroy());
});
}
};
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
}), angular.module("openshiftConsole").directive("deploymentDonut", [ "$filter", "$location", "$timeout", "$uibModal", "DeploymentsService", "HPAService", "QuotaService", "LabelFilter", "Navigate", "NotificationsService", "hashSizeFilter", "hasDeploymentConfigFilter", function(e, t, n, a, r, o, i, s, c, l, u, d) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
}), angular.module("openshiftConsole").directive("deploymentDonut", [ "$filter", "$location", "$timeout", "$uibModal", "DeploymentsService", "HPAService", "QuotaService", "LabelFilter", "Navigate", "NotificationsService", "hashSizeFilter", "hasDeploymentConfigFilter", function(e, t, n, r, a, o, i, s, c, l, u, d) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
return {
restrict: "E",
scope: {
rc: "=",
deploymentConfig: "=",
deployment: "=",
scalable: "=",
hpa: "=?",
limitRanges: "=",
quotas: "=",
clusterQuotas: "=",
project: "=",
pods: "="
},
templateUrl: "views/directives/deployment-donut.html",
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
controller: [ "$scope", "$filter", "$q", function(a, b, c) {
var h = !1, k = b("humanizeKind");
a.$watch("rc.spec.replicas", function() {
h || (a.desiredReplicas = null);
=======
controller: [ "$scope", "$filter", "$q", function(e, t, n) {
var s = !1, u = t("humanizeKind");
e.$watch("rc.spec.replicas", function() {
s || (e.desiredReplicas = null);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
});
var m = function() {
o.getHPAWarnings(e.rc, e.hpa, e.limitRanges, e.project).then(function(t) {
e.hpaWarnings = _.map(t, function(e) {
return _.escape(e.message);
}).join("<br>");
});
};
e.$watchGroup([ "limitRanges", "hpa", "project" ], m), e.$watch("rc.spec.template.spec.containers", m, !0);
e.$watchGroup([ "rc.spec.replicas", "rc.status.replicas", "quotas", "clusterQuotas" ], function() {
if (_.get(e.rc, "spec.replicas", 1) > _.get(e.rc, "status.replicas", 0)) {
var t = i.filterQuotasForResource(e.rc, e.quotas), n = i.filterQuotasForResource(e.rc, e.clusterQuotas), r = function(t) {
return !_.isEmpty(i.getResourceLimitAlerts(e.rc, t));
};
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
a.$watchGroup([ "rc.spec.replicas", "rc.status.replicas", "quotas", "clusterQuotas" ], n);
var o = function() {
return a.deploymentConfig || a.deployment || a.rc;
}, p = function() {
if (h = !1, angular.isNumber(a.desiredReplicas)) {
var d = o();
return e.scale(d, a.desiredReplicas).then(_.noop, function(a) {
var e = k(d.kind);
return j.addNotification({
id: "deployment-scale-error",
type: "error",
message: "An error occurred scaling " + e + " " + d.metadata.name + ".",
details: b("getErrorDetails")(a)
}), c.reject(a);
});
}
}, q = _.debounce(p, 650);
a.viewPodsForDeployment = function(b) {
_.isEmpty(a.pods) || i.toPodsForDeployment(b, a.pods);
}, a.scaleUp = function() {
a.scalable && (a.desiredReplicas = a.getDesiredReplicas(), a.desiredReplicas++, q(), h = !0);
}, a.scaleDown = function() {
if (a.scalable && (a.desiredReplicas = a.getDesiredReplicas(), 0 !== a.desiredReplicas)) {
if (1 === a.desiredReplicas) {
var b = d.open({
animation: !0,
templateUrl: "views/modals/confirmScale.html",
controller: "ConfirmScaleController",
resolve: {
resource: function() {
return a.rc;
},
type: function() {
return l(a.rc) ? "deployment" : "replication controller";
}
}
});
return void b.result.then(function() {
a.desiredReplicas = a.getDesiredReplicas() - 1, q(), h = !0;
});
}
a.desiredReplicas--, q();
}
}, a.getDesiredReplicas = function() {
return angular.isDefined(a.desiredReplicas) && null !== a.desiredReplicas ? a.desiredReplicas : a.rc && a.rc.spec && angular.isDefined(a.rc.spec.replicas) ? a.rc.spec.replicas : 1;
}, a.$watch(function() {
return !_.get(a.rc, "spec.replicas") && !!(a.deploymentConfig ? b("annotation")(a.deploymentConfig, "idledAt") : b("annotation")(a.rc, "idledAt"));
}, function(b) {
a.isIdled = !!b;
}), a.unIdle = function() {
a.desiredReplicas = b("unidleTargetReplicas")(a.deploymentConfig || a.rc, a.hpa), p().then(function() {
a.isIdled = !1;
});
};
} ]
};
} ]), angular.module("openshiftConsole").directive("quotaUsageChart", [ "$filter", "ChartsService", "gettext", "gettextCatalog", function(a, b, c, d) {
return {
restrict: "E",
scope: {
used: "=",
crossProjectUsed: "=?",
total: "=",
type: "@",
height: "=?",
width: "=?"
},
replace: !0,
templateUrl: "views/_quota-usage-chart.html",
link: function(e, f) {
function g() {
var a = _.spread(function(a, c) {
b.updateDonutCenterText(f[0], a, c);
});
a(j(e.total, e.type, !0));
}
var h = a("usageValue"), i = a("usageWithUnits"), j = a("amountAndUnit");
e.height = e.height || 200, e.width = e.width || 175;
var k = function(a) {
return a ? (100 * Number(a)).toFixed(1) + "%" : "0%";
};
e.chartID = _.uniqueId("quota-usage-chart-");
var l, m = {
type: "donut",
bindto: "#" + e.chartID,
donut: {
label: {
show: !1
},
width: 10
},
size: {
height: e.height,
width: e.width
},
legend: {
show: !0,
position: e.legendPosition || "bottom",
item: {
onclick: _.noop
}
},
onrendered: g,
tooltip: {
position: function() {
return {
top: 0,
left: 0
};
},
contents: function(a, b, f, g) {
var j = $('<table class="c3-tooltip"></table>').css({
width: e.width + "px"
}), l = $("<tr/>").appendTo(j), m = $('<td class="name nowrap"></td>').appendTo(l);
$("<span/>").css({
"background-color": g(a[0].id)
}).appendTo(m), $("<span/>").text(a[0].name).appendTo(m);
var n;
n = e.total ? k(a[0].value / h(e.total)) + " " + d.getString(c("of")) + " " + i(e.total, e.type) : i(e.used, e.type);
var o = $("<tr/>").appendTo(j);
return $('<td class="value" style="text-align: left;"></td>').text(n).appendTo(o), j.get(0).outerHTML;
=======
e.showQuotaWarning = _.some(t, a) || _.some(n, a);
=======
e.showQuotaWarning = _.some(t, r) || _.some(n, r);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
} else e.showQuotaWarning = !1;
});
var p = function() {
return e.deploymentConfig || e.deployment || e.rc;
}, f = function() {
if (s = !1, angular.isNumber(e.desiredReplicas)) {
var r = p();
return a.scale(r, e.desiredReplicas).then(_.noop, function(e) {
var a = u(r.kind);
return l.addNotification({
id: "deployment-scale-error",
type: "error",
message: "An error occurred scaling " + a + " " + r.metadata.name + ".",
details: t("getErrorDetails")(e)
}), n.reject(e);
});
}
}, g = _.debounce(f, 650);
e.viewPodsForDeployment = function(t) {
_.isEmpty(e.pods) || c.toPodsForDeployment(t, e.pods);
}, e.scaleUp = function() {
e.scalable && (e.desiredReplicas = e.getDesiredReplicas(), e.desiredReplicas++, g(), s = !0);
}, e.scaleDown = function() {
e.scalable && (e.desiredReplicas = e.getDesiredReplicas(), 0 !== e.desiredReplicas && (1 !== e.desiredReplicas ? (e.desiredReplicas--, g()) : r.open({
animation: !0,
templateUrl: "views/modals/confirmScale.html",
controller: "ConfirmScaleController",
resolve: {
resource: function() {
return e.rc;
},
type: function() {
return d(e.rc) ? "deployment" : "replication controller";
}
}
}).result.then(function() {
e.desiredReplicas = e.getDesiredReplicas() - 1, g(), s = !0;
})));
}, e.getDesiredReplicas = function() {
return angular.isDefined(e.desiredReplicas) && null !== e.desiredReplicas ? e.desiredReplicas : e.rc && e.rc.spec && angular.isDefined(e.rc.spec.replicas) ? e.rc.spec.replicas : 1;
}, e.$watch(function() {
return !_.get(e.rc, "spec.replicas") && !!(e.deploymentConfig ? t("annotation")(e.deploymentConfig, "idledAt") : t("annotation")(e.rc, "idledAt"));
}, function(t) {
e.isIdled = !!t;
}), e.unIdle = function() {
e.desiredReplicas = t("unidleTargetReplicas")(e.deploymentConfig || e.rc, e.hpa), f().then(function() {
e.isIdled = !1;
});
};
} ]
};
} ]), angular.module("openshiftConsole").directive("quotaUsageChart", [ "$filter", "ChartsService", function(e, t) {
return {
restrict: "E",
scope: {
used: "=",
crossProjectUsed: "=?",
total: "=",
type: "@",
height: "=?",
width: "=?"
},
replace: !0,
templateUrl: "views/_quota-usage-chart.html",
link: function(n, r) {
var a = e("usageValue"), o = e("usageWithUnits"), i = e("amountAndUnit");
n.height = n.height || 200, n.width = n.width || 175;
var s = function(e) {
return e ? (100 * Number(e)).toFixed(1) + "%" : "0%";
};
n.chartID = _.uniqueId("quota-usage-chart-");
var c, l = {
type: "donut",
bindto: "#" + n.chartID,
donut: {
label: {
show: !1
},
width: 10
},
size: {
height: n.height,
width: n.width
},
legend: {
show: !0,
position: n.legendPosition || "bottom",
item: {
onclick: _.noop
}
},
onrendered: function() {
_.spread(function(e, n) {
t.updateDonutCenterText(r[0], e, n);
})(i(n.total, n.type, !0));
},
tooltip: {
position: function() {
return {
top: 0,
left: 0
};
},
contents: function(e, t, r, i) {
var c = $('<table class="c3-tooltip"></table>').css({
width: n.width + "px"
}), l = $("<tr/>").appendTo(c), u = $('<td class="name nowrap"></td>').appendTo(l);
$("<span/>").css({
"background-color": i(e[0].id)
}).appendTo(u), $("<span/>").text(e[0].name).appendTo(u);
var d;
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
d = n.total ? s(e[0].value / r(n.total)) + " of " + o(n.total, n.type) : o(n.used, n.type);
<<<<<<< 9bc0af8cb56dcc9609307333b9424f396867cab5
<<<<<<< 602d786018a3879a89789b1214b36a15c51b928b
var m = $("<tr/>").appendTo(c);
return $('<td class="value" style="text-align: left;"></td>').text(d).appendTo(m), c.get(0).outerHTML;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
var p = $("<tr/>").appendTo(c);
return $('<td class="value" style="text-align: left;"></td>').text(d).appendTo(p), c.get(0).outerHTML;
>>>>>>> Updates for Service Instance & Bindings
=======
=======
d = n.total ? s(e[0].value / a(n.total)) + " of " + o(n.total, n.type) : o(n.used, n.type);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
var m = $("<tr/>").appendTo(c);
return $('<td class="value" style="text-align: left;"></td>').text(d).appendTo(m), c.get(0).outerHTML;
>>>>>>> Support EnvFrom in the Env Editors
}
},
data: {
type: "donut",
order: null
}
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
}, n = function() {
var a = void 0 !== e.crossProjectUsed, b = h(e.used) || 0, f = Math.max((h(e.crossProjectUsed) || 0) - b, 0), g = Math.max(h(e.total) - (f + b), 0), i = {
columns: [ [ "used", b ], [ "available", g ] ],
colors: {
used: g ? "#0088ce" : "#ec7a08",
other: g ? "#7dc3e8" : "#f7bd7f",
available: "#d1d1d1"
},
names: {
used: a ? d.getString(c("Used - This Project")) : d.getString(c("Used")),
other: d.getString(c("Used - Other Projects")),
available: d.getString(c("Available"))
}
};
a && i.columns.splice(1, 0, [ "other", f ]), l ? l.load(i) : (_.assign(m.data, i), l = c3.generate(m));
};
e.$watchGroup([ "used", "total", "crossProjectUsed" ], _.debounce(n, 300));
=======
};
n.$watchGroup([ "used", "total", "crossProjectUsed" ], _.debounce(function() {
var e = void 0 !== n.crossProjectUsed, t = a(n.used) || 0, r = Math.max((a(n.crossProjectUsed) || 0) - t, 0), o = Math.max(a(n.total) - (r + t), 0), i = {
columns: [ [ "used", t ], [ "available", o ] ],
colors: {
used: o ? "#0088ce" : "#ec7a08",
other: o ? "#7dc3e8" : "#f7bd7f",
available: "#d1d1d1"
},
names: {
used: e ? "Used - This Project" : "Used",
other: "Used - Other Projects",
available: "Available"
}
};
e && i.columns.splice(1, 0, [ "other", r ]), c ? c.load(i) : (_.assign(l.data, i), c = c3.generate(l));
}, 300));
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
}
};
} ]), angular.module("openshiftConsole").directive("buildTrendsChart", [ "$filter", "$location", "$rootScope", "$timeout", "BuildsService", function(e, t, n, r, a) {
return {
restrict: "E",
scope: {
builds: "="
},
templateUrl: "views/_build-trends-chart.html",
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
link: function(f) {
var g, h = [ "Complete", "Failed", "Cancelled", "Error" ];
f.minBuilds = _.constant(4);
var i = function(a) {
var b = [], c = moment.duration(a), d = Math.floor(c.asHours()), e = c.minutes(), f = c.seconds();
return d || e || f ? (d && b.push(d + "h"), e && b.push(e + "m"), d || b.push(f + "s"), b.join(" ")) : "";
};
f.chartID = _.uniqueId("build-trends-chart-");
var j, k, l = _.constant(350), m = {
bindto: "#" + f.chartID,
=======
link: function(o) {
var i, s = [ "Complete", "Failed", "Cancelled", "Error" ];
o.minBuilds = _.constant(4);
var c = function(e) {
var t = [], n = moment.duration(e), r = Math.floor(n.asHours()), a = n.minutes(), o = n.seconds();
return r || a || o ? (r && t.push(r + "h"), a && t.push(a + "m"), r || t.push(o + "s"), t.join(" ")) : "";
};
o.chartID = _.uniqueId("build-trends-chart-");
var l, u, d = _.constant(350), m = {
bindto: "#" + o.chartID,
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
padding: {
right: 30,
left: 80
},
axis: {
x: {
fit: !0,
label: {
text: "Build Number",
position: "outer-right"
},
tick: {
culling: !0,
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
format: function(a) {
return "#" + g.json[a].buildNumber;
=======
format: function(e) {
return "#" + i.json[e].buildNumber;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
},
width: 30
},
type: "category"
},
y: {
label: {
text: "Duration",
position: "outer-top"
},
min: 0,
padding: {
bottom: 0
},
tick: {
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
format: i
=======
format: c
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
}
}
},
bar: {
width: {
max: 50
}
},
legend: {
item: {
onclick: _.noop
}
},
size: {
height: 250
},
tooltip: {
format: {
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
title: function(a) {
var b = g.json[a], c = e.getStartTimestsamp(b.build);
return "#" + b.buildNumber + " (" + moment(c).fromNow() + ")";
=======
title: function(e) {
var t = i.json[e], n = a.getStartTimestsamp(t.build);
return "#" + t.buildNumber + " (" + moment(n).fromNow() + ")";
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
}
}
},
transition: {
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
duration: l()
=======
duration: d()
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
},
data: {
colors: {
Cancelled: "#d1d1d1",
Complete: "#00b9e4",
Error: "#393f44",
Failed: "#cc0000"
},
empty: {
label: {
text: "No Completed Builds"
}
},
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
onclick: function(d) {
var e = g.json[d.x].build, f = a("navigateResourceURL")(e);
f && c.$apply(function() {
b.path(f);
=======
onclick: function(a) {
var r = i.json[a.x].build, o = e("navigateResourceURL")(r);
=======
onclick: function(r) {
var a = i.json[r.x].build, o = e("navigateResourceURL")(a);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
o && n.$apply(function() {
t.path(o);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
});
},
selection: {
enabled: !0
},
type: "bar"
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
}
}, n = function() {
f.completeBuilds = [];
var b = a("isIncompleteBuild");
angular.forEach(f.builds, function(a) {
b(a) || f.completeBuilds.push(a);
});
}, o = function() {
return n(), f.completeBuilds.length;
}, p = !1, q = function() {
k && p ? j.ygrids([ {
value: k,
"class": "build-trends-avg-line"
} ]) : j.ygrids.remove();
};
f.toggleAvgLine = function() {
p = !p, q();
};
var r = function() {
g = {
json: [],
keys: {
x: "buildNumber"
}
};
var a = 0, b = 0;
angular.forEach(f.completeBuilds, function(c) {
var d = e.getBuildNumber(c);
if (d) {
var f = e.getDuration(c);
a += f, b++;
var h = {
buildNumber: d,
phase: c.status.phase,
build: c
};
h[c.status.phase] = f, g.json.push(h);
}
}), g.json.sort(function(a, b) {
return a.buildNumber - b.buildNumber;
}), g.json.length > 50 && (g.json = g.json.slice(g.json.length - 50));
var c = {};
angular.forEach(g.json, function(a) {
c[a.phase] = !0;
}), b ? (k = a / b, f.averageDurationText = i(k)) : (k = null, f.averageDurationText = null);
var n = [], o = [];
angular.forEach(h, function(a) {
c[a] ? n.push(a) : o.push(a);
}), g.keys.value = n, g.groups = [ n ], j ? (g.unload = o, g.done = function() {
setTimeout(function() {
j.flush();
}, l() + 25);
}, j.load(g), q()) : (m.data = angular.extend(g, m.data), d(function() {
j = c3.generate(m), q();
}));
};
f.$watch(o, r), f.$on("destroy", function() {
j && (j = j.destroy());
});
}
};
} ]), angular.module("openshiftConsole").directive("computeResource", [ "$filter", "gettext", "gettextCatalog", function(a, b, c) {
=======
}
}, p = function() {
o.completeBuilds = [];
var t = e("isIncompleteBuild");
angular.forEach(o.builds, function(e) {
t(e) || o.completeBuilds.push(e);
});
}, f = !1, g = function() {
u && f ? l.ygrids([ {
value: u,
class: "build-trends-avg-line"
} ]) : l.ygrids.remove();
};
o.toggleAvgLine = function() {
f = !f, g();
};
o.$watch(function() {
return p(), o.completeBuilds.length;
}, function() {
i = {
json: [],
keys: {
x: "buildNumber"
}
};
var e = 0, t = 0;
angular.forEach(o.completeBuilds, function(n) {
var r = a.getBuildNumber(n);
if (r) {
var o = a.getDuration(n);
e += o, t++;
var s = {
buildNumber: r,
phase: n.status.phase,
build: n
};
s[n.status.phase] = o, i.json.push(s);
}
}), i.json.sort(function(e, t) {
return e.buildNumber - t.buildNumber;
}), i.json.length > 50 && (i.json = i.json.slice(i.json.length - 50));
var n = {};
angular.forEach(i.json, function(e) {
n[e.phase] = !0;
}), t ? (u = e / t, o.averageDurationText = c(u)) : (u = null, o.averageDurationText = null);
var p = [], f = [];
angular.forEach(s, function(e) {
n[e] ? p.push(e) : f.push(e);
}), i.keys.value = p, i.groups = [ p ], l ? (i.unload = f, i.done = function() {
setTimeout(function() {
l.flush();
}, d() + 25);
}, l.load(i), g()) : (m.data = angular.extend(i, m.data), r(function() {
l = c3.generate(m), g();
}));
}), o.$on("destroy", function() {
l && (l = l.destroy());
});
}
};
} ]), angular.module("openshiftConsole").directive("computeResource", [ "$filter", function(e) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
return {
restrict: "E",
require: "ngModel",
scope: {
label: "@",
type: "@",
description: "@",
defaultValue: "=",
limitRangeMin: "=",
limitRangeMax: "=",
maxLimitRequestRatio: "=",
request: "="
},
templateUrl: "views/_compute-resource.html",
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
link: function(d, e, f, g) {
var h = a("usageValue"), i = a("amountAndUnit"), j = a("humanizeUnit");
d.id = _.uniqueId("compute-resource-"), d.input = {};
var k = function(a) {
_.some(d.units, {
value: a
}) || d.units.push({
value: a,
label: c.getString(j(a, d.type))
});
};
switch (d.$watch("defaultValue", function(a) {
var b = _.spread(function(a, b) {
d.placeholder = a, k(b), d.input.amount || (d.input.unit = b);
});
a && b(i(a, d.type));
}), d.type) {
case "cpu":
d.input.unit = "m", d.units = [ {
value: "m",
label: c.getString(b("millicores"))
}, {
value: "",
label: c.getString(b("cores"))
=======
link: function(t, n, a, r) {
=======
link: function(t, n, r, a) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
var o = e("usageValue"), i = e("amountAndUnit"), s = e("humanizeUnit");
t.id = _.uniqueId("compute-resource-"), t.input = {};
var c = function(e) {
_.some(t.units, {
value: e
}) || t.units.push({
value: e,
label: s(e, t.type)
});
};
switch (t.$watch("defaultValue", function(e) {
var n = _.spread(function(e, n) {
t.placeholder = e, c(n), t.input.amount || (t.input.unit = n);
});
e && n(i(e, t.type));
}), t.type) {
case "cpu":
t.input.unit = "m", t.units = [ {
value: "m",
label: "millicores"
}, {
value: "",
label: "cores"
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
} ];
break;

case "memory":
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
d.input.unit = "Mi", d.units = [ {
value: "Mi",
label: "MiB"
}, {
value: "Gi",
label: "GiB"
} ];
}
d.groupUnits = function(a) {
switch (a.value) {
=======
t.input.unit = "Mi", t.units = [ {
value: "Mi",
label: "MiB"
}, {
value: "Gi",
label: "GiB"
}, {
value: "M",
label: "MB"
}, {
value: "G",
label: "GB"
} ];
}
t.groupUnits = function(e) {
switch (e.value) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
case "Mi":
case "Gi":
return c.getString(b("Binary Units"));

case "M":
case "G":
return c.getString(b("Decimal Units"));
}
return "";
};
var l = function() {
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
var a = d.input.amount && h(d.input.amount + d.input.unit), b = d.limitRangeMin && h(d.limitRangeMin), c = d.limitRangeMax && h(d.limitRangeMax), e = !0, f = !0;
a && b && (e = a >= b), a && c && (f = a <= c), d.form.amount.$setValidity("limitRangeMin", e), d.form.amount.$setValidity("limitRangeMax", f);
}, m = function() {
var a, b = d.request && h(d.request), c = !0, e = !0;
d.input.amount ? a = h(d.input.amount + d.input.unit) : d.defaultValue && (a = h(d.defaultValue)), b && a && (c = a >= b, d.maxLimitRequestRatio && (e = a / b <= d.maxLimitRequestRatio)), b && !a && d.maxLimitRequestRatio && (e = !1), d.form.amount.$setValidity("limitLargerThanRequest", c), d.form.amount.$setValidity("limitWithinRatio", e);
};
g.$render = function() {
var a = _.spread(function(a, b) {
a ? (d.input.amount = Number(a), d.input.unit = b, k(b)) : d.input.amount = null;
});
a(i(g.$viewValue, d.type));
}, d.$watchGroup([ "input.amount", "input.unit" ], function() {
l(), m(), d.input.amount ? g.$setViewValue(d.input.amount + d.input.unit) : g.$setViewValue(void 0);
}), d.$watchGroup([ "limitRangeMin", "limitRangeMax" ], l), d.$watch("request", m);
}
};
} ]).directive("editRequestLimit", [ "$filter", "LimitRangesService", "ModalsService", function(a, b, c) {
=======
var e = t.input.amount && o(t.input.amount + t.input.unit), n = t.limitRangeMin && o(t.limitRangeMin), a = t.limitRangeMax && o(t.limitRangeMax), r = !0, i = !0;
e && n && (r = e >= n), e && a && (i = e <= a), t.form.amount.$setValidity("limitRangeMin", r), t.form.amount.$setValidity("limitRangeMax", i);
=======
var e = t.input.amount && o(t.input.amount + t.input.unit), n = t.limitRangeMin && o(t.limitRangeMin), r = t.limitRangeMax && o(t.limitRangeMax), a = !0, i = !0;
e && n && (a = e >= n), e && r && (i = e <= r), t.form.amount.$setValidity("limitRangeMin", a), t.form.amount.$setValidity("limitRangeMax", i);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}, u = function() {
var e, n = t.request && o(t.request), r = !0, a = !0;
t.input.amount ? e = o(t.input.amount + t.input.unit) : t.defaultValue && (e = o(t.defaultValue)), n && e && (r = e >= n, t.maxLimitRequestRatio && (a = e / n <= t.maxLimitRequestRatio)), n && !e && t.maxLimitRequestRatio && (a = !1), t.form.amount.$setValidity("limitLargerThanRequest", r), t.form.amount.$setValidity("limitWithinRatio", a);
};
a.$render = function() {
_.spread(function(e, n) {
e ? (t.input.amount = Number(e), t.input.unit = n, c(n)) : t.input.amount = null;
})(i(a.$viewValue, t.type));
}, t.$watchGroup([ "input.amount", "input.unit" ], function() {
l(), u(), t.input.amount ? a.$setViewValue(t.input.amount + t.input.unit) : a.$setViewValue(void 0);
}), t.$watchGroup([ "limitRangeMin", "limitRangeMax" ], l), t.$watch("request", u);
}
};
} ]).directive("editRequestLimit", [ "$filter", "LimitRangesService", "ModalsService", function(e, t, n) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
return {
restrict: "E",
scope: {
resources: "=",
type: "@",
limitRanges: "=",
project: "="
},
templateUrl: "views/_edit-request-limit.html",
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
link: function(a) {
a.showComputeUnitsHelp = function() {
c.showComputeUnitsHelp();
}, a.$watch("limitRanges", function() {
a.limits = b.getEffectiveLimitRange(a.limitRanges, a.type, "Container", a.project), a.requestCalculated = b.isRequestCalculated(a.type, a.project), a.limitCalculated = b.isLimitCalculated(a.type, a.project);
=======
link: function(e) {
e.showComputeUnitsHelp = function() {
n.showComputeUnitsHelp();
}, e.$watch("limitRanges", function() {
e.limits = t.getEffectiveLimitRange(e.limitRanges, e.type, "Container", e.project), e.requestCalculated = t.isRequestCalculated(e.type, e.project), e.limitCalculated = t.isLimitCalculated(e.type, e.project);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
}, !0);
}
};
} ]), angular.module("openshiftConsole").directive("editProbe", function() {
return {
restrict: "E",
scope: {
probe: "=",
exposedPorts: "="
},
templateUrl: "views/directives/_edit-probe.html",
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
link: function(a) {
a.id = _.uniqueId("edit-probe-"), a.probe = a.probe || {}, a.types = [ {
=======
link: function(e) {
e.id = _.uniqueId("edit-probe-"), e.probe = e.probe || {}, e.types = [ {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
id: "httpGet",
label: "HTTP GET"
}, {
id: "exec",
label: "Container Command"
}, {
id: "tcpSocket",
label: "TCP Socket"
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
} ], a.previousProbes = {}, a.tcpPorts = _.filter(a.exposedPorts, {
protocol: "TCP"
});
var b = _.get(a, "probe.httpGet.port") || _.get(a, "probe.exec.port");
b && !_.some(a.tcpPorts, {
containerPort: b
}) && (a.tcpPorts = [ {
containerPort: b,
protocol: "TCP"
} ].concat(a.tcpPorts)), a.portOptions = a.tcpPorts;
var c, d = function(b, c) {
if (a.probe = a.probe || {}, a.previousProbes[c] = a.probe[c], delete a.probe[c], a.probe[b] = a.previousProbes[b], !a.probe[b]) switch (b) {
case "httpGet":
case "tcpSocket":
var d = _.head(a.tcpPorts);
a.probe[b] = {
port: d ? d.containerPort : ""
=======
} ], e.previousProbes = {}, e.tcpPorts = _.filter(e.exposedPorts, {
protocol: "TCP"
});
var t = _.get(e, "probe.httpGet.port") || _.get(e, "probe.exec.port");
t && !_.some(e.tcpPorts, {
containerPort: t
}) && (e.tcpPorts = [ {
containerPort: t,
protocol: "TCP"
} ].concat(e.tcpPorts)), e.portOptions = e.tcpPorts;
var n, r = function(t, n) {
if (e.probe = e.probe || {}, e.previousProbes[n] = e.probe[n], delete e.probe[n], e.probe[t] = e.previousProbes[t], !e.probe[t]) switch (t) {
case "httpGet":
case "tcpSocket":
var r = _.head(e.tcpPorts);
e.probe[t] = {
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
port: a ? a.containerPort : ""
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
port: r ? r.containerPort : ""
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
};
break;

case "exec":
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
a.probe = {
=======
e.probe = {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
exec: {
command: []
}
};
}
};
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
a.probe.httpGet ? c = "httpGet" : a.probe.exec ? c = "exec" : a.probe.tcpSocket ? c = "tcpSocket" : (c = "httpGet", d("httpGet")), _.set(a, "selected.type", c), a.$watch("selected.type", function(a, b) {
a !== b && d(a, b);
}), a.refreshPorts = function(b) {
if (/^\d+$/.test(b)) {
var c = a.tcpPorts;
b = parseInt(b, 10), b && !_.some(c, {
containerPort: b
}) && (c = [ {
containerPort: b,
protocol: "TCP"
} ].concat(c)), a.portOptions = _.uniq(c);
=======
e.probe.httpGet ? n = "httpGet" : e.probe.exec ? n = "exec" : e.probe.tcpSocket ? n = "tcpSocket" : (n = "httpGet", a("httpGet")), _.set(e, "selected.type", n), e.$watch("selected.type", function(e, t) {
e !== t && a(e, t);
=======
e.probe.httpGet ? n = "httpGet" : e.probe.exec ? n = "exec" : e.probe.tcpSocket ? n = "tcpSocket" : (n = "httpGet", r("httpGet")), _.set(e, "selected.type", n), e.$watch("selected.type", function(e, t) {
e !== t && r(e, t);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}), e.refreshPorts = function(t) {
if (/^\d+$/.test(t)) {
var n = e.tcpPorts;
(t = parseInt(t, 10)) && !_.some(n, {
containerPort: t
}) && (n = [ {
containerPort: t,
protocol: "TCP"
} ].concat(n)), e.portOptions = _.uniq(n);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
}
};
}
};
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
}), angular.module("openshiftConsole").directive("editCommand", [ "$filter", function(a) {
=======
}), angular.module("openshiftConsole").directive("editCommand", [ "$filter", function(e) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
return {
restrict: "E",
scope: {
args: "=",
type: "@",
placeholder: "@",
description: "=",
isRequired: "="
},
templateUrl: "views/directives/_edit-command.html",
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
link: function(b) {
b.id = _.uniqueId("edit-command-"), b.input = {};
var c, d, e = a("isMultiline");
b.$watch("args", function() {
return d ? void (d = !1) : void (_.isEmpty(b.args) || (b.input.args = _.map(b.args, function(a) {
return {
value: a,
multiline: e(a)
};
}), c = !0));
}, !0), b.$watch("input.args", function(a, e) {
return c ? void (c = !1) : void (a !== e && (d = !0, b.args = _.map(b.input.args, function(a) {
return a.value;
}), b.form.command.$setDirty()));
}, !0), b.addArg = function() {
b.nextArg && (b.input.args = b.input.args || [], b.input.args.push({
value: b.nextArg,
multiline: e(b.nextArg)
}), b.nextArg = "");
}, b.removeArg = function(a) {
b.input.args.splice(a, 1), _.isEmpty(b.input.args) && (b.input.args = null);
}, b.clear = function() {
b.input.args = null;
};
}
};
} ]), angular.module("openshiftConsole").directive("buildPipeline", [ "$filter", "Logger", function(a, b) {
=======
link: function(t) {
t.id = _.uniqueId("edit-command-"), t.input = {};
var n, r, a = e("isMultiline");
t.$watch("args", function() {
r ? r = !1 : _.isEmpty(t.args) || (t.input.args = _.map(t.args, function(e) {
return {
value: e,
multiline: a(e)
};
}), n = !0);
}, !0), t.$watch("input.args", function(e, a) {
n ? n = !1 : e !== a && (r = !0, t.args = _.map(t.input.args, function(e) {
return e.value;
}), t.form.command.$setDirty());
}, !0), t.addArg = function() {
t.nextArg && (t.input.args = t.input.args || [], t.input.args.push({
value: t.nextArg,
multiline: a(t.nextArg)
}), t.nextArg = "");
}, t.removeArg = function(e) {
t.input.args.splice(e, 1), _.isEmpty(t.input.args) && (t.input.args = null);
}, t.clear = function() {
t.input.args = null;
};
}
};
} ]), angular.module("openshiftConsole").directive("buildPipeline", [ "$filter", "Logger", function(e, t) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
return {
restrict: "E",
scope: {
build: "=",
expandOnlyRunning: "=?",
collapsePending: "=?",
buildConfigNameOnExpanded: "=?"
},
replace: !0,
templateUrl: "views/directives/build-pipeline.html",
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
link: function(c) {
var d = a("annotation");
c.$watch(function() {
return d(c.build, "jenkinsStatus");
}, function(a) {
if (a) try {
c.jenkinsStatus = JSON.parse(a);
} catch (d) {
b.error("Could not parse Jenkins status as JSON", a);
=======
link: function(n) {
var r = e("annotation");
n.$watch(function() {
return r(n.build, "jenkinsStatus");
}, function(e) {
if (e) try {
n.jenkinsStatus = JSON.parse(e);
} catch (n) {
t.error("Could not parse Jenkins status as JSON", e);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
}
});
var a = e("buildConfigForBuild");
n.$watch(function() {
return a(n.build);
}, function(e) {
n.buildConfigName = e;
});
}
};
} ]).directive("pipelineStatus", function() {
return {
restrict: "E",
scope: {
status: "="
},
templateUrl: "views/directives/pipeline-status.html"
};
}), angular.module("openshiftConsole").directive("buildStatus", function() {
return {
restrict: "E",
scope: {
build: "="
},
templateUrl: "views/directives/build-status.html"
};
}), function() {
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
function a() {
var a = this, b = function(b, c) {
return b.name === a.highlightService ? -1 : c.name === a.highlightService ? 1 : c.weight === b.weight ? b.name.localeCompare(c.name) : c.weight - b.weight;
}, c = function(b) {
a.total += b.weight, a.max = Math.max(b.weight, a.max || 0), a.backends.push({
name: b.name,
weight: b.weight
=======
angular.module("openshiftConsole").component("routeServiceBarChart", {
controller: function() {
var e = this, t = function(t, n) {
return t.name === e.highlightService ? -1 : n.name === e.highlightService ? 1 : n.weight === t.weight ? t.name.localeCompare(n.name) : n.weight - t.weight;
}, n = function(t) {
e.total += t.weight, e.max = Math.max(t.weight, e.max || 0), e.backends.push({
name: t.name,
weight: t.weight
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
});
};
e.$onChanges = function() {
if (e.backends = [], e.total = 0, e.route) {
n(e.route.spec.to);
var r = _.get(e, "route.spec.alternateBackends", []);
_.each(r, n), e.backends.sort(t);
}
}, e.getPercentage = function(t) {
var n = e.total || 100, r = t.weight / n * 100;
return _.round(r) + "%";
}, e.barWidth = function(t) {
var n = e.max || 100;
return t.weight / n * 100 + "%";
};
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
}
angular.module("openshiftConsole").component("routeServiceBarChart", {
controller: a,
controllerAs: "routeServices",
bindings: {
route: "<",
highlightService: "<"
},
templateUrl: "views/directives/route-service-bar-chart.html"
});
}(), function() {
function a(a, b, c, d, e, f, g) {
var h, i, j, k, l, m, n = this, o = b("statusCondition"), p = b("enableTechPreviewFeature"), q = function() {
var a, b;
_.each(n.serviceInstances, function(c) {
var d = "True" === _.get(o(c, "Ready"), "status");
d && (!a || c.metadata.creationTimestamp > a.metadata.creationTimestamp) && (a = c), d || b && !(c.metadata.creationTimestamp > b.metadata.creationTimestamp) || (b = c);
}), n.serviceToBind = a || b;
}, r = function() {
n.serviceClasses && n.serviceInstances && (n.serviceInstances = e.filterBindableServiceInstances(n.serviceInstances, n.serviceClasses, n.servicePlans), n.orderedServiceInstances = e.sortServiceInstances(n.serviceInstances, n.serviceClasses), n.serviceToBind || q());
}, s = function() {
n.nextTitle = i.hidden ? "Bind" : "Next >", n.podPresets && !k && (k = a.$watch("ctrl.selectionForm.$valid", function(a) {
h.valid = a;
}));
}, t = function() {
n.nextTitle = "Bind", l || (l = a.$watch("ctrl.parametersForm.$valid", function(a) {
i.valid = a;
}));
}, u = function() {
k && (k(), k = void 0), l && (l(), l = void 0), n.nextTitle = "Close", n.wizardComplete = !0, n.bindService();
}, v = function() {
var a = {
<<<<<<< 61b7ccebc1be9196354cef218d1e7a812de7a0c6
namespace: _.get(n.target, "metadata.namespace")
};
d.getApplications(a).then(function(a) {
n.applications = a, n.bindType = n.applications.length ? "application" : "secret-only";
=======
namespace:_.get(l.target, "metadata.namespace")
};
c.list("deploymentconfigs", a).then(function(a) {
g = _.toArray(a.by("metadata.name")), p();
}), c.list("replicationcontrollers", a).then(function(a) {
i = _.reject(a.by("metadata.name"), b("hasDeploymentConfig")), p();
}), c.list({
group:"apps",
resource:"deployments"
}, a).then(function(a) {
h = _.toArray(a.by("metadata.name")), p();
}), c.list({
group:"extensions",
resource:"replicasets"
}, a).then(function(a) {
j = _.reject(a.by("metadata.name"), b("hasDeployment")), p();
}), c.list({
group:"apps",
resource:"statefulsets"
}, a).then(function(a) {
k = _.toArray(a.by("metadata.name")), p();
>>>>>>> Use `apps` API group for deployments
});
}, w = function() {
var a = {
namespace: _.get(n.target, "metadata.namespace")
}, b = c.getPreferredVersion("serviceinstances");
f.list(b, a).then(function(a) {
n.serviceInstances = a.by("metadata.name"), r();
});
};
h = {
id: "bindForm",
label: "Binding",
view: "views/directives/bind-service/bind-service-form.html",
valid: !0,
allowClickNav: !0,
onShow: s
}, i = {
id: "bindParameters",
label: "Parameters",
view: "views/directives/bind-service/bind-parameters.html",
hidden: !0,
allowClickNav: !0,
onShow: t
}, j = {
id: "results",
label: "Results",
view: "views/directives/bind-service/results.html",
valid: !0,
allowClickNav: !1,
onShow: u
};
var x = function() {
if (n.serviceClasses && n.servicePlans) {
var a = "ServiceInstance" === n.target.kind ? n.target : n.serviceToBind;
if (a) {
var b = g.getServiceClassNameForInstance(a);
n.serviceClass = n.serviceClasses[b];
var c = g.getServicePlanNameForInstance(a);
n.plan = n.servicePlans[c], n.parameterSchema = _.get(n.plan, "spec.serviceBindingCreateParameterSchema"), n.parameterFormDefinition = _.get(n.plan, "spec.externalMetadata.schemas.service_binding.create.openshift_form_definition"), i.hidden = !_.has(n.parameterSchema, "properties"), n.nextTitle = i.hidden ? "Bind" : "Next >", n.hideBack = i.hidden;
}
}
};
a.$watch("ctrl.serviceToBind", x), n.$onInit = function() {
n.serviceSelection = {}, n.projectDisplayName = b("displayName")(n.project), n.podPresets = p("pod_presets"), n.parameterData = {}, n.steps = [ h, i, j ], n.hideBack = i.hidden;
var a = c.getPreferredVersion("clusterserviceclasses");
f.list(a, {}).then(function(a) {
n.serviceClasses = a.by("metadata.name"), x(), r();
});
var d = c.getPreferredVersion("clusterserviceplans");
f.list(d, {}).then(function(a) {
n.servicePlans = a.by("metadata.name"), x();
}), "ServiceInstance" === n.target.kind ? (n.bindType = "secret-only", n.appToBind = null, n.serviceToBind = n.target, n.podPresets && v()) : (n.bindType = "application", n.appToBind = n.target, w());
}, n.$onChanges = function(a) {
a.project && !a.project.isFirstChange() && (n.projectDisplayName = b("displayName")(n.project));
}, n.$onDestroy = function() {
k && (k(), k = void 0), l && (l(), l = void 0), m && f.unwatch(m);
}, n.bindService = function() {
var a = "ServiceInstance" === n.target.kind ? n.target : n.serviceToBind, b = "application" === n.bindType ? n.appToBind : void 0, c = {
namespace: _.get(a, "metadata.namespace")
}, d = e.getServiceClassForInstance(a, n.serviceClasses);
e.bindService(a, b, d, n.parameterData).then(function(a) {
n.binding = a, n.error = null, m = f.watchObject(e.bindingResource, _.get(n.binding, "metadata.name"), c, function(a) {
n.binding = a;
});
}, function(a) {
n.error = a;
});
}, n.closeWizard = function() {
_.isFunction(n.onClose) && n.onClose();
};
}
angular.module("openshiftConsole").component("bindService", {
controller: [ "$scope", "$filter", "APIService", "ApplicationsService", "BindingService", "DataService", "ServiceInstancesService", a ],
=======
},
controllerAs: "routeServices",
bindings: {
route: "<",
highlightService: "<"
},
templateUrl: "views/directives/route-service-bar-chart.html"
});
}(), function() {
angular.module("openshiftConsole").component("bindService", {
controller: [ "$scope", "$filter", "APIService", "ApplicationsService", "BindingService", "Catalog", "DataService", "ServiceInstancesService", function(e, t, n, r, a, o, i, s) {
var c, l, u, d, m, p, f = this, g = t("statusCondition"), v = t("enableTechPreviewFeature"), h = n.getPreferredVersion("serviceinstances"), y = n.getPreferredVersion("clusterserviceclasses"), b = n.getPreferredVersion("clusterserviceplans"), S = function() {
var e, t;
_.each(f.serviceInstances, function(n) {
var r = "True" === _.get(g(n, "Ready"), "status");
r && (!e || n.metadata.creationTimestamp > e.metadata.creationTimestamp) && (e = n), r || t && !(n.metadata.creationTimestamp > t.metadata.creationTimestamp) || (t = n);
}), f.serviceToBind = e || t;
}, C = function() {
f.serviceClasses && f.serviceInstances && f.servicePlans && (f.serviceInstances = a.filterBindableServiceInstances(f.serviceInstances, f.serviceClasses, f.servicePlans), f.orderedServiceInstances = a.sortServiceInstances(f.serviceInstances, f.serviceClasses), f.serviceToBind || S());
}, w = function() {
var e = {
namespace: _.get(f.target, "metadata.namespace")
};
r.getApplications(e).then(function(e) {
f.applications = e, f.bindType = f.applications.length ? "application" : "secret-only";
});
}, P = function() {
var e = {
namespace: _.get(f.target, "metadata.namespace")
};
i.list(h, e).then(function(e) {
f.serviceInstances = e.by("metadata.name"), C();
}), i.list(y, {}).then(function(e) {
f.serviceClasses = e.by("metadata.name"), C();
}), i.list(b, {}).then(function(e) {
f.servicePlans = e.by("metadata.name"), C();
});
};
c = {
id: "bindForm",
label: "Binding",
view: "views/directives/bind-service/bind-service-form.html",
<<<<<<< aeb2360cdcbe444a7d3a316c5eaa9d6f0b8cde31
valid: !0,
=======
valid: !1,
allowClickNav: !0,
>>>>>>> Bug 1520828 - Do not enable Bind button until data fetched
onShow: function() {
f.nextTitle = l.hidden ? "Bind" : "Next >", f.podPresets && !d && (d = e.$watch("ctrl.selectionForm.$valid", function(e) {
c.valid = e;
}));
}
}, l = {
id: "bindParameters",
label: "Parameters",
view: "views/directives/bind-service/bind-parameters.html",
hidden: !0,
onShow: function() {
f.nextTitle = "Bind", m || (m = e.$watch("ctrl.parametersForm.$valid", function(e) {
l.valid = e;
}));
}
}, u = {
id: "results",
label: "Results",
view: "views/directives/bind-service/results.html",
valid: !0,
onShow: function() {
d && (d(), d = void 0), m && (m(), m = void 0), f.nextTitle = "Close", f.wizardComplete = !0, f.bindService();
}
};
<<<<<<< aeb2360cdcbe444a7d3a316c5eaa9d6f0b8cde31
<<<<<<< 75fc56b9e42e29e1492befd08624dd0e5dade866
<<<<<<< 247459038ac366429876741dd447ec652f2f5e7d
<<<<<<< a19b22733566f12a68db59a49bc16848fffba594
<<<<<<< 46344541d4f20e3585d6ea01425f784292c0d84a
<<<<<<< 0ba73cbc37b88f92a6380ccc93fc8e3d978020aa
var y = function() {
if (d.serviceClasses) {
var e = "ServiceInstance" === d.target.kind ? d.target : d.serviceToBind;
e && (d.serviceClass = d.serviceClasses[e.spec.serviceClassName], d.serviceClassName = e.spec.serviceClassName, d.plan = r.getPlanForInstance(e, d.serviceClass), d.parameterSchema = _.get(d.plan, "alphaServiceInstanceCredentialCreateParameterSchema"), i.hidden = !_.has(d.parameterSchema, "properties"), d.nextTitle = i.hidden ? "Bind" : "Next >");
}
};
e.$watch("ctrl.serviceToBind", y), d.$onInit = function() {
<<<<<<< 9bc0af8cb56dcc9609307333b9424f396867cab5
d.serviceSelection = {}, d.projectDisplayName = t("displayName")(d.project), d.podPresets = m("pod_presets"), d.parameterData = {}, d.steps = [ o, i, s ], a.list({
=======
d.serviceSelection = {}, d.projectDisplayName = t("displayName")(d.project), d.podPresets = p("pod_presets"), d.parameterData = {}, d.steps = [ o, i, s ], d.hideBack = i.hidden, a.list({
>>>>>>> Support EnvFrom in the Env Editors
group: "servicecatalog.k8s.io",
resource: "serviceclasses"
}, {}).then(function(e) {
d.serviceClasses = e.by("metadata.name"), y(), g();
}), "ServiceInstance" === d.target.kind ? (d.bindType = "secret-only", d.appToBind = null, d.serviceToBind = d.target, d.podPresets && h()) : (d.bindType = "application", d.appToBind = d.target, v());
}, d.$onChanges = function(e) {
e.project && !e.project.isFirstChange() && (d.projectDisplayName = t("displayName")(d.project));
}, d.$onDestroy = function() {
c && (c(), c = void 0), l && (l(), l = void 0), u && a.unwatch(u);
}, d.bindService = function() {
var e = "ServiceInstance" === d.target.kind ? d.target : d.serviceToBind, t = "application" === d.bindType ? d.appToBind : void 0, n = {
=======
var C = function() {
=======
var S = function() {
>>>>>>> Service instance details configuration and edit
=======
var C = function() {
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
var S = function() {
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
=======
var S = function() {
>>>>>>> Adding label filter to ste secrets page
if (p.serviceClasses && p.servicePlans) {
var e = "ServiceInstance" === p.target.kind ? p.target : p.serviceToBind;
if (e) {
var t = i.getServiceClassNameForInstance(e);
p.serviceClass = p.serviceClasses[t];
var n = i.getServicePlanNameForInstance(e);
p.plan = p.servicePlans[n], p.parameterSchema = _.get(p.plan, "spec.serviceBindingCreateParameterSchema"), p.parameterFormDefinition = _.get(p.plan, "spec.externalMetadata.schemas.service_binding.create.openshift_form_definition"), c.hidden = !_.has(p.parameterSchema, "properties"), p.nextTitle = c.hidden ? "Bind" : "Next >", p.hideBack = c.hidden;
}
}
};
e.$watch("ctrl.serviceToBind", S), p.$onInit = function() {
p.serviceSelection = {}, p.projectDisplayName = t("displayName")(p.project), p.podPresets = g("pod_presets"), p.parameterData = {}, p.steps = [ s, c, l ], p.hideBack = c.hidden;
var e = n.getPreferredVersion("clusterserviceclasses");
o.list(e, {}).then(function(e) {
p.serviceClasses = e.by("metadata.name"), S(), h();
});
var r = n.getPreferredVersion("clusterserviceplans");
o.list(r, {}).then(function(e) {
p.servicePlans = e.by("metadata.name"), S();
}), "ServiceInstance" === p.target.kind ? (p.bindType = "secret-only", p.appToBind = null, p.serviceToBind = p.target, p.podPresets && y()) : (p.bindType = "application", p.appToBind = p.target, b());
}, p.$onChanges = function(e) {
e.project && !e.project.isFirstChange() && (p.projectDisplayName = t("displayName")(p.project));
}, p.$onDestroy = function() {
u && (u(), u = void 0), d && (d(), d = void 0), m && o.unwatch(m);
}, p.bindService = function() {
var e = "ServiceInstance" === p.target.kind ? p.target : p.serviceToBind, t = "application" === p.bindType ? p.appToBind : void 0, n = {
>>>>>>> Adopt service catalog API changes
=======
e.$watch("ctrl.serviceToBind", function() {
f.serviceToBind && s.fetchServiceClassForInstance(f.serviceToBind).then(function(e) {
f.serviceClass = e;
var t = s.getServicePlanNameForInstance(f.serviceToBind);
i.get(b, t, {}).then(function(e) {
f.plan = e, f.parameterSchema = _.get(f.plan, "spec.serviceBindingCreateParameterSchema"), f.parameterFormDefinition = _.get(f.plan, "spec.externalMetadata.schemas.service_binding.create.openshift_form_definition"), l.hidden = !_.has(f.parameterSchema, "properties"), f.nextTitle = l.hidden ? "Bind" : "Next >", f.hideBack = l.hidden, c.valid = !0;
});
});
}), f.$onInit = function() {
f.serviceSelection = {}, f.projectDisplayName = t("displayName")(f.project), f.podPresets = v("pod_presets"), f.parameterData = {}, f.steps = [ c, l, u ], f.hideBack = l.hidden, "ServiceInstance" === f.target.kind ? (f.bindType = "secret-only", f.appToBind = null, f.serviceToBind = f.target, f.podPresets && w()) : (f.bindType = "application", f.appToBind = f.target, P());
}, f.$onChanges = function(e) {
e.project && !e.project.isFirstChange() && (f.projectDisplayName = t("displayName")(f.project));
}, f.$onDestroy = function() {
d && (d(), d = void 0), m && (m(), m = void 0), p && i.unwatch(p);
}, f.bindService = function() {
var e = "ServiceInstance" === f.target.kind ? f.target : f.serviceToBind, t = "application" === f.bindType ? f.appToBind : void 0, n = {
>>>>>>> Bug 1520828 - Do not enable Bind button until data fetched
namespace: _.get(e, "metadata.namespace")
}, r = a.getServiceClassForInstance(e, f.serviceClasses);
a.bindService(e, t, r, f.parameterData).then(function(e) {
f.binding = e, f.error = null, p = i.watchObject(a.bindingResource, _.get(f.binding, "metadata.name"), n, function(e) {
f.binding = e;
});
}, function(e) {
f.error = e;
});
}, f.closeWizard = function() {
_.isFunction(f.onClose) && f.onClose();
};
} ],
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
controllerAs: "ctrl",
bindings: {
target: "<",
project: "<",
onClose: "<"
},
templateUrl: "views/directives/bind-service.html"
});
}(), function() {
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
function a(a, b, c, d) {
var e, f, g = this, h = b("enableTechPreviewFeature"), i = b("serviceInstanceDisplayName"), j = c.getPreferredVersion("servicebindings"), k = function() {
var a = g.selectedBinding.metadata.name;
g.unboundApps = g.appsForBinding(a), d["delete"](j, a, f, {
propagationPolicy: null
}).then(_.noop, function(a) {
g.error = a;
});
}, l = function() {
var b = _.head(g.steps);
b.valid = !1, e = a.$watch("ctrl.selectedBinding", function(a) {
b.valid = !!a;
});
}, m = function() {
e && (e(), e = void 0);
}, n = function() {
g.nextTitle = "Delete", l();
}, o = function() {
g.nextTitle = "Close", g.wizardComplete = !0, k(), m();
};
g.$onInit = function() {
var a;
a = "ServiceInstance" === g.target.kind ? h("pod_presets") ? "Applications" : "Bindings" : "Services", g.displayName = i(g.target, g.serviceClass), g.steps = [ {
id: "deleteForm",
label: a,
view: "views/directives/bind-service/delete-binding-select-form.html",
onShow: n
=======
angular.module("openshiftConsole").component("unbindService", {
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< 0ba73cbc37b88f92a6380ccc93fc8e3d978020aa
controller: [ "$scope", "$filter", "DataService", function(e, t, n) {
var a, r, o = this, i = t("serviceInstanceDisplayName"), s = function() {
var e = o.selectedBinding.metadata.name;
o.unboundApps = o.appsForBinding(e), n.delete({
group: "servicecatalog.k8s.io",
resource: "serviceinstancecredentials"
}, e, r, {
=======
controller: [ "$scope", "$filter", "APIService", "DataService", function(e, t, n, a) {
var r, o, i = this, s = t("enableTechPreviewFeature"), c = t("serviceInstanceDisplayName"), l = n.getPreferredVersion("servicebindings"), u = function() {
var e = i.selectedBinding.metadata.name;
i.unboundApps = i.appsForBinding(e), a.delete(l, e, o, {
>>>>>>> Adopt service catalog API changes
=======
controller: [ "$scope", "$filter", "APIService", "DataService", function(e, t, n, r) {
var a, o, i = this, s = t("enableTechPreviewFeature"), c = t("serviceInstanceDisplayName"), l = n.getPreferredVersion("servicebindings"), u = function() {
var e = i.selectedBinding.metadata.name;
i.unboundApps = i.appsForBinding(e), r.delete(l, e, o, {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
propagationPolicy: null
}).then(_.noop, function(e) {
i.error = e;
});
<<<<<<< 0ba73cbc37b88f92a6380ccc93fc8e3d978020aa
}, c = function() {
var t = _.head(o.steps);
t.valid = !1, a = e.$watch("ctrl.selectedBinding", function(e) {
t.valid = !!e;
});
}, l = function() {
a && (a(), a = void 0);
}, u = function() {
o.nextTitle = "Delete", c();
}, d = function() {
<<<<<<< 602d786018a3879a89789b1214b36a15c51b928b
o.nextTitle = "Close", o.wizardComplete = !0, s(), l();
=======
o.nextTitle = "Delete", l();
}, m = function() {
o.nextTitle = "Close", o.wizardComplete = !0, c(), u();
>>>>>>> Updates for Service Instance & Bindings
};
o.$onInit = function() {
var e = "ServiceInstance" === o.target.kind ? "Applications" : "Services";
o.displayName = i(o.target), o.steps = [ {
id: "deleteForm",
label: e,
view: "views/directives/bind-service/delete-binding-select-form.html",
onShow: u
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
}, d = function() {
var t = _.head(i.steps);
t.valid = !1, a = e.$watch("ctrl.selectedBinding", function(e) {
t.valid = !!e;
});
}, m = function() {
a && (a(), a = void 0);
}, p = function() {
i.nextTitle = "Delete", d();
}, f = function() {
i.nextTitle = "Close", i.wizardComplete = !0, u(), m();
};
i.$onInit = function() {
var e;
e = "ServiceInstance" === i.target.kind ? s("pod_presets") ? "Applications" : "Bindings" : "Services", i.displayName = c(i.target, i.serviceClass), i.steps = [ {
id: "deleteForm",
label: e,
view: "views/directives/bind-service/delete-binding-select-form.html",
onShow: p
>>>>>>> Adopt service catalog API changes
}, {
id: "results",
label: "Results",
view: "views/directives/bind-service/delete-binding-result.html",
<<<<<<< 0ba73cbc37b88f92a6380ccc93fc8e3d978020aa
<<<<<<< 9bc0af8cb56dcc9609307333b9424f396867cab5
<<<<<<< 602d786018a3879a89789b1214b36a15c51b928b
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
onShow: o
} ], f = {
namespace: _.get(g.target, "metadata.namespace")
};
}, g.appsForBinding = function(a) {
return _.get(g.applicationsByBinding, a);
}, g.closeWizard = function() {
_.isFunction(g.onClose) && g.onClose();
}, g.$onDestroy = function() {
m();
};
}
angular.module("openshiftConsole").component("unbindService", {
controller: [ "$scope", "$filter", "APIService", "DataService", a ],
=======
onShow: d
=======
onShow: p
>>>>>>> Updates for Service Instance & Bindings
=======
onShow: m
>>>>>>> Support EnvFrom in the Env Editors
} ], r = {
namespace: _.get(o.target, "metadata.namespace")
};
}, o.appsForBinding = function(e) {
return _.get(o.applicationsByBinding, e);
}, o.closeWizard = function() {
_.isFunction(o.onClose) && o.onClose();
}, o.$onDestroy = function() {
l();
=======
onShow: f
} ], o = {
namespace: _.get(i.target, "metadata.namespace")
};
}, i.appsForBinding = function(e) {
return _.get(i.applicationsByBinding, e);
}, i.closeWizard = function() {
_.isFunction(i.onClose) && i.onClose();
}, i.$onDestroy = function() {
m();
>>>>>>> Adopt service catalog API changes
};
} ],
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
controllerAs: "ctrl",
bindings: {
target: "<",
bindings: "<",
applicationsByBinding: "<",
<<<<<<< 89e9e057ade5f9f44ac58180a42f84b845daa0c2
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
onClose: "<",
serviceClass: "<"
=======
onClose: "<"
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
onClose: "<",
serviceClass: "<"
>>>>>>> Correct binding name
},
templateUrl: "views/directives/unbind-service.html"
});
}(), function() {
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
function a(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
function p(a) {
var b = /^helplink\.(.*)\.title$/, c = /^helplink\.(.*)\.url$/, d = {};
for (var e in a.annotations) {
var f, g = e.match(b);
g ? (f = d[g[1]] || {}, f.title = a.annotations[e], d[g[1]] = f) : (g = e.match(c), g && (f = d[g[1]] || {}, f.url = a.annotations[e], d[g[1]] = f));
=======
angular.module("openshiftConsole").component("processTemplate", {
controller: [ "$filter", "$q", "$scope", "$uibModal", "DataService", "Navigate", "NotificationsService", "ProcessedTemplateService", "ProjectsService", "QuotaService", "SecurityCheckService", "TaskList", "keyValueEditorUtils", function(e, t, n, r, a, o, i, s, c, l, u, d, m) {
function p(e) {
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
var t = /^helplink\.(.*)\.title$/, n = /^helplink\.(.*)\.url$/, a = {};
for (var r in e.annotations) {
var o, i = r.match(t);
i ? ((o = a[i[1]] || {}).title = e.annotations[r], a[i[1]] = o) : (i = r.match(n)) && ((o = a[i[1]] || {}).url = e.annotations[r], a[i[1]] = o);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
var t = /^helplink\.(.*)\.title$/, n = /^helplink\.(.*)\.url$/, r = {};
for (var a in e.annotations) {
var o, i = a.match(t);
i ? ((o = r[i[1]] || {}).title = e.annotations[a], r[i[1]] = o) : (i = a.match(n)) && ((o = r[i[1]] || {}).url = e.annotations[a], r[i[1]] = o);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}
return r;
}
<<<<<<< 33eb37eab8df0c17bc226501a924a2dc2b9b2f41
<<<<<<< 00534c7e85eec9598bcfbcba5de3283c46e2a84d
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
function q() {
s.prefillParameters && _.each(s.template.parameters, function(a) {
s.prefillParameters[a.name] && (a.value = s.prefillParameters[a.name]);
}), s.labels = _.map(s.template.labels, function(a, b) {
return {
name: b,
value: a
};
}), C() && s.labels.push({
name: "app",
value: s.template.metadata.name
});
}
var r, s = this, t = a("displayName"), u = a("humanize");
s.noProjectsCantCreate = !1, s.$onInit = function() {
s.labels = [], s.template = angular.copy(s.template), s.templateDisplayName = t(s.template), s.selectedProject = s.project, c.$watch("$ctrl.selectedProject.metadata.name", function() {
s.projectNameTaken = !1;
}), c.$on("no-projects-cannot-create", function() {
s.noProjectsCantCreate = !0;
}), q();
};
var v, w = function() {
var a = {
started: o.getString(n("Creating")) + " " + s.templateDisplayName + " " + o.getString(n("in project ")) + " " + t(s.selectedProject),
success: o.getString(n("Created")) + " " + s.templateDisplayName + " " + o.getString(n("in project")) + " " + t(s.selectedProject),
failure: o.getString(n("Failed to create")) + " " + s.templateDisplayName + " " + o.getString(n("in project")) + " " + t(s.selectedProject)
}, d = p(s.template);
l.clear(), l.add(a, d, s.selectedProject.metadata.name, function() {
var a = b.defer();
return e.batch(v, r).then(function(b) {
var c = [], d = !1;
b.failure.length > 0 ? (d = !0, b.failure.forEach(function(a) {
c.push({
type: "error",
message: "Cannot create " + u(a.object.kind).toLowerCase() + ' "' + a.object.metadata.name + '". ',
details: a.data.message
});
}), b.success.forEach(function(a) {
c.push({
type: "success",
message: "Created " + u(a.kind).toLowerCase() + ' "' + a.metadata.name + '" successfully. '
});
})) : c.push({
type: "success",
message: o.getString(n("All items in template {{templateDisplayName}} were created successfully."), {
templateDisplayName: s.templateDisplayName
})
}), a.resolve({
alerts: c,
hasErrors: d
});
}), a.promise;
}), s.isDialog ? c.$emit("templateInstantiated", {
project: s.selectedProject,
template: s.template
}) : f.toNextSteps(s.templateDisplayName, s.selectedProject.metadata.name);
}, x = function(a) {
var b = d.open({
animation: !0,
templateUrl: "views/modals/confirm.html",
controller: "ConfirmModalController",
resolve: {
modalConfig: function() {
return {
alerts: a,
message: o.getString(n("We checked your application for potential problems. Please confirm you still want to create this application.")),
okButtonText: o.getString(n("Create Anyway")),
okButtonClass: "btn-danger",
cancelButtonText: o.getString(n("Cancel"))
};
}
}
});
b.result.then(w);
}, y = {}, z = function() {
g.hideNotification("process-template-error"), _.each(y, function(a) {
!a.id || "error" !== a.type && "warning" !== a.type || g.hideNotification(a.id);
});
}, A = function(a) {
z(), y = k.getSecurityAlerts(v, s.selectedProject.metadata.name);
var b = a.quotaAlerts || [];
y = y.concat(b);
var c = _.filter(y, {
type: "error"
});
c.length ? (s.disableInputs = !1, _.each(y, function(a) {
a.id = _.uniqueId("process-template-alert-"), g.addNotification(a);
})) : y.length ? (x(y), s.disableInputs = !1) : w();
}, B = function() {
if (_.has(s.selectedProject, "metadata.uid")) return b.when(s.selectedProject);
var c = s.selectedProject.metadata.name, d = s.selectedProject.metadata.annotations["new-display-name"], e = a("description")(s.selectedProject);
return i.create(c, d, e);
};
s.createFromTemplate = function() {
s.disableInputs = !0, B().then(function(a) {
s.selectedProject = a, r = {
namespace: s.selectedProject.metadata.name
}, s.template.labels = m.mapEntries(m.compactEntries(s.labels)), e.create("processedtemplates", null, s.template, r).then(function(a) {
h.setTemplateData(a.parameters, s.template.parameters, a.message), v = a.objects, j.getLatestQuotaAlerts(v, r).then(A);
}, function(a) {
s.disableInputs = !1;
var b;
a.data && a.data.message && (b = a.data.message), g.addNotification({
id: "process-template-error",
type: "error",
message: "An error occurred processing the template.",
details: b
});
});
}, function(a) {
if (s.disableInputs = !1, "AlreadyExists" === a.data.reason) s.projectNameTaken = !0; else {
var b;
a.data && a.data.message && (b = a.data.message), g.addNotification({
id: "process-template-error",
type: "error",
message: "An error occurred creating the project.",
details: b
});
<<<<<<< 602d786018a3879a89789b1214b36a15c51b928b
=======
}(), function() {
angular.module("openshiftConsole").component("processTemplate", {
controller: [ "$filter", "$q", "$scope", "$uibModal", "DataService", "Navigate", "NotificationsService", "ProcessedTemplateService", "ProjectsService", "QuotaService", "SecurityCheckService", "TaskList", "keyValueEditorUtils", function(e, t, n, a, r, o, i, s, c, l, u, d, m) {
function p(e) {
var t = /^helplink\.(.*)\.title$/, n = /^helplink\.(.*)\.url$/, a = {};
for (var r in e.annotations) {
var o, i = r.match(t);
i ? ((o = a[i[1]] || {}).title = e.annotations[r], a[i[1]] = o) : (i = r.match(n)) && ((o = a[i[1]] || {}).url = e.annotations[r], a[i[1]] = o);
>>>>>>> Updates for Service Instance & Bindings
}
});
}, s.cancel = function() {
z(), f.toProjectOverview(s.project.metadata.name);
}, c.$on("instantiateTemplate", s.createFromTemplate), c.$on("$destroy", z);
var C = function() {
return !_.get(s.template, "labels.app") && !_.some(s.template.objects, "metadata.labels.app");
};
}
angular.module("openshiftConsole").component("processTemplate", {
controller: [ "$filter", "$q", "$scope", "$uibModal", "DataService", "Navigate", "NotificationsService", "ProcessedTemplateService", "ProjectsService", "QuotaService", "SecurityCheckService", "TaskList", "keyValueEditorUtils", "gettext", "gettextCatalog", a ],
=======
function p() {
f.prefillParameters && _.each(f.template.parameters, function(e) {
f.prefillParameters[e.name] && (e.value = f.prefillParameters[e.name]);
}), f.labels = _.map(f.template.labels, function(e, t) {
=======
function g() {
=======
function f() {
<<<<<<< 3087d5859f05def6301fced3a013ac9165fd8c7a
>>>>>>> Patternfly vertical navigation and project bar
h.prefillParameters && _.each(h.template.parameters, function(e) {
h.prefillParameters[e.name] && (e.value = h.prefillParameters[e.name]);
}), h.labels = _.map(h.template.labels, function(e, t) {
>>>>>>> Updated processTemplate to call ProjectServices.create(...)
=======
v.prefillParameters && _.each(v.template.parameters, function(e) {
v.prefillParameters[e.name] && (e.value = v.prefillParameters[e.name]);
}), v.labels = _.map(v.template.labels, function(e, t) {
>>>>>>> Add SVG icons
return {
name: t,
value: e
};
}), I() && v.labels.push({
name: "app",
value: v.template.metadata.name
});
}
var g, v = this, h = e("displayName"), y = e("humanize");
v.noProjectsCantCreate = !1, v.$onInit = function() {
v.labels = [], v.template = angular.copy(v.template), v.templateDisplayName = h(v.template), v.selectedProject = v.project, n.$watch("$ctrl.selectedProject.metadata.name", function() {
v.projectNameTaken = !1;
}), n.$on("no-projects-cannot-create", function() {
v.noProjectsCantCreate = !0;
}), f();
};
var b, S = function() {
var e = {
started: "Creating " + v.templateDisplayName + " in project " + h(v.selectedProject),
success: "Created " + v.templateDisplayName + " in project " + h(v.selectedProject),
failure: "Failed to create " + v.templateDisplayName + " in project " + h(v.selectedProject)
}, r = p(v.template);
d.clear(), d.add(e, r, v.selectedProject.metadata.name, function() {
var e = t.defer();
return a.batch(b, g).then(function(t) {
var n = [], r = !1;
t.failure.length > 0 ? (r = !0, t.failure.forEach(function(e) {
n.push({
type: "error",
message: "Cannot create " + y(e.object.kind).toLowerCase() + ' "' + e.object.metadata.name + '". ',
details: e.data.message
});
}), t.success.forEach(function(e) {
n.push({
type: "success",
message: "Created " + y(e.kind).toLowerCase() + ' "' + e.metadata.name + '" successfully. '
});
})) : n.push({
type: "success",
message: "All items in template " + v.templateDisplayName + " were created successfully."
}), e.resolve({
alerts: n,
hasErrors: r
});
}), e.promise;
}), v.isDialog ? n.$emit("templateInstantiated", {
project: v.selectedProject,
template: v.template
}) : o.toNextSteps(v.templateDisplayName, v.selectedProject.metadata.name);
}, C = function(e) {
r.open({
animation: !0,
templateUrl: "views/modals/confirm.html",
controller: "ConfirmModalController",
resolve: {
modalConfig: function() {
return {
alerts: e,
message: "We checked your application for potential problems. Please confirm you still want to create this application.",
okButtonText: "Create Anyway",
okButtonClass: "btn-danger",
cancelButtonText: "Cancel"
};
}
}
}).result.then(S);
}, w = {}, P = function() {
i.hideNotification("process-template-error"), _.each(w, function(e) {
!e.id || "error" !== e.type && "warning" !== e.type || i.hideNotification(e.id);
});
}, j = function(e) {
P(), w = u.getSecurityAlerts(b, v.selectedProject.metadata.name);
var t = e.quotaAlerts || [];
w = w.concat(t), _.filter(w, {
type: "error"
}).length ? (v.disableInputs = !1, _.each(w, function(e) {
e.id = _.uniqueId("process-template-alert-"), i.addNotification(e);
})) : w.length ? (C(w), v.disableInputs = !1) : S();
}, k = function() {
if (_.has(v.selectedProject, "metadata.uid")) return t.when(v.selectedProject);
var n = v.selectedProject.metadata.name, r = v.selectedProject.metadata.annotations["new-display-name"], a = e("description")(v.selectedProject);
return c.create(n, r, a);
};
v.createFromTemplate = function() {
v.disableInputs = !0, k().then(function(e) {
v.selectedProject = e, g = {
namespace: v.selectedProject.metadata.name
}, v.template.labels = m.mapEntries(m.compactEntries(v.labels)), a.create("processedtemplates", null, v.template, g).then(function(e) {
s.setTemplateData(e.parameters, v.template.parameters, e.message), b = e.objects, l.getLatestQuotaAlerts(b, g).then(j);
}, function(e) {
v.disableInputs = !1;
var t;
e.data && e.data.message && (t = e.data.message), i.addNotification({
id: "process-template-error",
type: "error",
message: "An error occurred processing the template.",
details: t
});
});
}, function(e) {
if (v.disableInputs = !1, "AlreadyExists" === e.data.reason) v.projectNameTaken = !0; else {
var t;
e.data && e.data.message && (t = e.data.message), i.addNotification({
id: "process-template-error",
type: "error",
message: "An error occurred creating the project.",
details: t
});
}
});
}, v.cancel = function() {
P(), o.toProjectOverview(v.project.metadata.name);
}, n.$on("instantiateTemplate", v.createFromTemplate), n.$on("$destroy", P);
var I = function() {
return !_.get(v.template, "labels.app") && !_.some(v.template.objects, "metadata.labels.app");
};
} ],
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
controllerAs: "$ctrl",
bindings: {
template: "<",
project: "<",
<<<<<<< a3f0653fa08af6dea27dfd8409132aa1a2c0091f
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
onProjectSelected: "<",
availableProjects: "<",
=======
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
onProjectSelected: "<",
availableProjects: "<",
>>>>>>> Add 'Select from Project' wizard to allow project templates/images to be imported
prefillParameters: "<",
isDialog: "<"
},
templateUrl: "views/directives/process-template.html"
});
}(), function() {
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
function a(a, b, c, d, e, f, g, h, i) {
function j() {
var a = _.get(x, "template.metadata.annotations.iconClass", "fa fa-clone");
return a.indexOf("icon-") !== -1 ? "font-icon " + a : a;
}
function k() {
var a = _.get(x, "template.metadata.annotations.iconClass", "fa fa-clone");
return y(a);
}
function l() {
x.steps || (x.steps = [ x.selectStep, x.infoStep, x.configStep, x.resultsStep ]);
}
function m() {
w && (w(), w = void 0);
}
function n() {
x.infoStep.selected = !0, x.selectStep.selected = !1, x.configStep.selected = !1, x.resultsStep.selected = !1, x.nextTitle = "Next >", m();
}
function o() {
x.infoStep.selected = !1, x.selectStep.selected = !0, x.configStep.selected = !1, x.resultsStep.selected = !1, x.nextTitle = "Next >", m(), v();
}
function p() {
x.infoStep.selected = !1, x.selectStep.selected = !1, x.configStep.selected = !0, x.resultsStep.selected = !1, x.nextTitle = "Create", x.resultsStep.allowed = x.configStep.valid, w = a.$watch("$ctrl.form.$valid", function(a) {
x.configStep.valid = a && !x.noProjectsCantCreate && x.selectedProject, x.resultsStep.allowed = a;
});
}
function q() {
x.infoStep.selected = !1, x.selectStep.selected = !1, x.configStep.selected = !1, x.resultsStep.selected = !0, x.nextTitle = "Close", m(), x.wizardDone = !0;
}
function r() {
a.$broadcast("instantiateTemplate");
}
function s(a, b) {
return f.filterForKeywords(b, [ "name", "tags" ], f.generateKeywords(a));
}
function t(a) {
x.filterConfig.appliedFilters = a, u();
}
function u() {
x.filteredItems = x.catalogItems, x.filterConfig.appliedFilters && x.filterConfig.appliedFilters.length > 0 && _.each(x.filterConfig.appliedFilters, function(a) {
x.filteredItems = s(a.value, x.filteredItems);
}), x.filterConfig.resultsCount = x.filteredItems.length, _.includes(x.filteredItems, x.selectedTemplate) || x.templateSelected();
}
function v() {
x.unfilteredProjects || h.list().then(function(a) {
x.unfilteredProjects = _.toArray(a.by("metadata.name"));
}, function() {
x.unfilteredProjects = [];
})["finally"](function() {
A();
});
}
var w, x = this, y = b("imageForIconClass"), z = b("annotation");
x.selectStep = {
id: "projectTemplates",
label: "Selection",
view: "views/directives/process-template-dialog/process-template-select.html",
hidden: x.useProjectTemplate !== !0,
allowed: !0,
valid: !1,
allowClickNav: !0,
onShow: o
}, x.infoStep = {
id: "info",
label: "Information",
view: "views/directives/process-template-dialog/process-template-info.html",
allowed: !0,
valid: !0,
allowClickNav: !0,
onShow: n
}, x.configStep = {
=======
angular.module("openshiftConsole").component("processTemplateDialog", {
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< f69fceda0d306e0128582971b9a9daa9bb1fc547
controller: [ "$scope", "$filter", "Catalog", "DataService", "KeywordService", "NotificationsService", "ProjectsService", "RecentlyViewedProjectsService", function(e, t, n, a, r, o, i, s) {
function c() {
var e = _.get(y, "template.metadata.annotations.iconClass", "fa fa-clone");
return -1 !== e.indexOf("icon-") ? "font-icon " + e : e;
}
function l() {
<<<<<<< ccf80f118591f812a727baefcf6bf957e4daea8c
y.steps || (y.steps = [ y.selectStep, y.configStep, y.resultsStep ]);
=======
v.steps || (v.steps = [ v.selectStep, v.infoStep, v.configStep, v.resultsStep ]);
>>>>>>> Changing overlay layout to a single column
}
function u() {
v && (v(), v = void 0);
=======
controller: [ "$scope", "$filter", "$routeParams", "Catalog", "DataService", "KeywordService", "NotificationsService", "ProjectsService", "RecentlyViewedProjectsService", function(e, t, n, a, r, o, i, s, c) {
=======
controller: [ "$scope", "$filter", "$routeParams", "Catalog", "DataService", "KeywordService", "NotificationsService", "ProjectsService", "RecentlyViewedProjectsService", function(e, t, n, r, a, o, i, s, c) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
function l() {
var e = _.get(b, "template.metadata.annotations.iconClass", "fa fa-clone");
return -1 !== e.indexOf("icon-") ? "font-icon " + e : e;
}
function u() {
<<<<<<< 3087d5859f05def6301fced3a013ac9165fd8c7a
y.steps || (y.steps = [ y.selectStep, y.infoStep, y.configStep, y.resultsStep ]);
>>>>>>> Making next steps/results messaging consistent
=======
var e = _.get(b, "template.metadata.annotations.iconClass", "fa fa-clone");
<<<<<<< 75fc56b9e42e29e1492befd08624dd0e5dade866
<<<<<<< 247459038ac366429876741dd447ec652f2f5e7d
<<<<<<< a19b22733566f12a68db59a49bc16848fffba594
<<<<<<< 46344541d4f20e3585d6ea01425f784292c0d84a
return C(e);
>>>>>>> Add SVG icons
=======
return S(e);
>>>>>>> Service instance details configuration and edit
=======
return C(e);
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
return S(e);
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
=======
return S(e);
>>>>>>> Adding label filter to ste secrets page
}
function d() {
b.steps || (b.steps = [ b.selectStep, b.infoStep, b.configStep, b.resultsStep ]);
}
<<<<<<< f69fceda0d306e0128582971b9a9daa9bb1fc547
<<<<<<< 9bc0af8cb56dcc9609307333b9424f396867cab5
<<<<<<< 602d786018a3879a89789b1214b36a15c51b928b
<<<<<<< a3f0653fa08af6dea27dfd8409132aa1a2c0091f
var i, s = this;
s.configStep = {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
function m(e, t) {
return r.filterForKeywords(t, [ "name", "tags" ], r.generateKeywords(e));
}
function p(e) {
y.filterConfig.appliedFilters = e, f();
}
function f() {
y.filteredItems = y.catalogItems, y.filterConfig.appliedFilters && y.filterConfig.appliedFilters.length > 0 && _.each(y.filterConfig.appliedFilters, function(e) {
y.filteredItems = m(e.value, y.filteredItems);
}), _.includes(y.filteredItems, y.selectedTemplate) || y.templateSelected(), g();
=======
function p(e, t) {
=======
function m(e, t) {
>>>>>>> Support EnvFrom in the Env Editors
return r.filterForKeywords(t, [ "name", "tags" ], r.generateKeywords(e));
=======
function m() {
y && (y(), y = void 0);
}
function p() {
e.$broadcast("instantiateTemplate");
>>>>>>> Making next steps/results messaging consistent
}
function f(e, t) {
return o.filterForKeywords(t, [ "name", "tags" ], o.generateKeywords(e));
}
<<<<<<< 3087d5859f05def6301fced3a013ac9165fd8c7a
<<<<<<< f69fceda0d306e0128582971b9a9daa9bb1fc547
function f() {
v.filteredItems = v.catalogItems, v.filterConfig.appliedFilters && v.filterConfig.appliedFilters.length > 0 && _.each(v.filterConfig.appliedFilters, function(e) {
v.filteredItems = m(e.value, v.filteredItems);
}), v.filterConfig.resultsCount = v.filteredItems.length, _.includes(v.filteredItems, v.selectedTemplate) || v.templateSelected();
>>>>>>> Updates for Service Instance & Bindings
}
function g() {
y.filterConfig.resultsCount = y.filteredItems.length, y.totalCount <= 1 ? $(".filter-pf.filter-fields input").attr("disabled", "") : $(".filter-pf.filter-fields input").removeAttr("disabled");
}
function h() {
y.unfilteredProjects || i.list().then(function(e) {
=======
function f(e) {
y.filterConfig.appliedFilters = e, g();
=======
function g(e) {
b.filterConfig.appliedFilters = e, v();
>>>>>>> Add SVG icons
}
function v() {
b.filteredItems = b.catalogItems, b.filterConfig.appliedFilters && b.filterConfig.appliedFilters.length > 0 && _.each(b.filterConfig.appliedFilters, function(e) {
b.filteredItems = f(e.value, b.filteredItems);
}), b.filterConfig.resultsCount = b.filteredItems.length, _.includes(b.filteredItems, b.selectedTemplate) || b.templateSelected();
}
function h() {
<<<<<<< 3087d5859f05def6301fced3a013ac9165fd8c7a
y.unfilteredProjects || s.list().then(function(e) {
>>>>>>> Making next steps/results messaging consistent
y.unfilteredProjects = _.toArray(e.by("metadata.name"));
=======
b.unfilteredProjects || s.list().then(function(e) {
b.unfilteredProjects = _.toArray(e.by("metadata.name"));
>>>>>>> Add SVG icons
}, function() {
b.unfilteredProjects = [];
}).finally(function() {
S();
});
}
<<<<<<< 75fc56b9e42e29e1492befd08624dd0e5dade866
<<<<<<< 247459038ac366429876741dd447ec652f2f5e7d
<<<<<<< a19b22733566f12a68db59a49bc16848fffba594
<<<<<<< 46344541d4f20e3585d6ea01425f784292c0d84a
var y, b = this, C = t("imageForIconClass");
=======
var y, b = this, S = t("imageForIconClass"), C = t("annotation");
>>>>>>> Service instance details configuration and edit
=======
var y, b = this, C = t("imageForIconClass"), S = t("annotation");
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
var y, b = this, S = t("imageForIconClass"), C = t("annotation");
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
=======
var y, b = this, S = t("imageForIconClass"), C = t("annotation");
>>>>>>> Adding label filter to ste secrets page
b.selectStep = {
id: "projectTemplates",
label: "Selection",
view: "views/directives/process-template-dialog/process-template-select.html",
hidden: !0 !== b.useProjectTemplate,
allowed: !0,
valid: !1,
onShow: function() {
<<<<<<< 3087d5859f05def6301fced3a013ac9165fd8c7a
<<<<<<< f69fceda0d306e0128582971b9a9daa9bb1fc547
<<<<<<< ccf80f118591f812a727baefcf6bf957e4daea8c
y.selectStep.selected = !0, y.configStep.selected = !1, y.resultsStep.selected = !1, y.nextTitle = "Next >", u(), h();
=======
v.infoStep.selected = !1, v.selectStep.selected = !0, v.configStep.selected = !1, v.resultsStep.selected = !1, v.nextTitle = "Next >", u(), g();
=======
y.infoStep.selected = !1, y.selectStep.selected = !0, y.configStep.selected = !1, y.resultsStep.selected = !1, y.nextTitle = "Next >", d(), h();
>>>>>>> Making next steps/results messaging consistent
=======
b.infoStep.selected = !1, b.selectStep.selected = !0, b.configStep.selected = !1, b.resultsStep.selected = !1, b.nextTitle = "Next >", m(), h();
>>>>>>> Add SVG icons
}
}, b.infoStep = {
id: "info",
label: "Information",
view: "views/directives/process-template-dialog/process-template-info.html",
allowed: !0,
valid: !0,
allowClickNav: !0,
onShow: function() {
<<<<<<< 3087d5859f05def6301fced3a013ac9165fd8c7a
<<<<<<< f69fceda0d306e0128582971b9a9daa9bb1fc547
v.infoStep.selected = !0, v.selectStep.selected = !1, v.configStep.selected = !1, v.resultsStep.selected = !1, v.nextTitle = "Next >", u();
>>>>>>> Changing overlay layout to a single column
}
}, y.configStep = {
>>>>>>> Add 'Select from Project' wizard to allow project templates/images to be imported
=======
y.infoStep.selected = !0, y.selectStep.selected = !1, y.configStep.selected = !1, y.resultsStep.selected = !1, y.nextTitle = "Next >", d();
}
}, y.configStep = {
>>>>>>> Making next steps/results messaging consistent
=======
b.infoStep.selected = !0, b.selectStep.selected = !1, b.configStep.selected = !1, b.resultsStep.selected = !1, b.nextTitle = "Next >", m();
}
}, b.configStep = {
>>>>>>> Add SVG icons
id: "configuration",
label: "Configuration",
view: "views/directives/process-template-dialog/process-template-config.html",
valid: !1,
allowed: !0,
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
allowClickNav: !0,
onShow: p
}, x.resultsStep = {
=======
onShow: function() {
<<<<<<< 3087d5859f05def6301fced3a013ac9165fd8c7a
<<<<<<< f69fceda0d306e0128582971b9a9daa9bb1fc547
<<<<<<< ccf80f118591f812a727baefcf6bf957e4daea8c
y.selectStep.selected = !1, y.configStep.selected = !0, y.resultsStep.selected = !1, y.nextTitle = "Create", y.resultsStep.allowed = y.configStep.valid, v = e.$watch("$ctrl.form.$valid", function(e) {
y.configStep.valid = e && y.selectedProject, y.resultsStep.allowed = e;
=======
v.infoStep.selected = !1, v.selectStep.selected = !1, v.configStep.selected = !0, v.resultsStep.selected = !1, v.nextTitle = "Create", v.resultsStep.allowed = v.configStep.valid, h = e.$watch("$ctrl.form.$valid", function(e) {
v.configStep.valid = e && v.selectedProject, v.resultsStep.allowed = e;
>>>>>>> Changing overlay layout to a single column
});
}
<<<<<<< a3f0653fa08af6dea27dfd8409132aa1a2c0091f
}, s.resultsStep = {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
}, y.resultsStep = {
>>>>>>> Add 'Select from Project' wizard to allow project templates/images to be imported
=======
y.infoStep.selected = !1, y.selectStep.selected = !1, y.configStep.selected = !0, y.resultsStep.selected = !1, y.nextTitle = "Create", y.resultsStep.allowed = y.configStep.valid, v = e.$watch("$ctrl.form.$valid", function(e) {
y.configStep.valid = e && y.selectedProject, y.resultsStep.allowed = e;
});
}
}, y.resultsStep = {
>>>>>>> Making next steps/results messaging consistent
=======
b.infoStep.selected = !1, b.selectStep.selected = !1, b.configStep.selected = !0, b.resultsStep.selected = !1, b.nextTitle = "Create", b.resultsStep.allowed = b.configStep.valid, y = e.$watch("$ctrl.form.$valid", function(e) {
b.configStep.valid = e && !b.noProjectsCantCreate && b.selectedProject, b.resultsStep.allowed = e;
});
}
}, b.resultsStep = {
>>>>>>> Add SVG icons
id: "results",
label: "Results",
view: "views/directives/process-template-dialog/process-template-results.html",
valid: !0,
allowed: !1,
prevEnabled: !1,
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
allowClickNav: !1,
<<<<<<< 0c40bfb0d97d474f70b5801c1312be38074c32cb
onShow: q
}, x.$onInit = function() {
x.loginBaseUrl = e.openshiftAPIBaseUrl(), x.preSelectedProject = x.selectedProject = x.project, x.useProjectTemplate && (x.project && (x.templateProject = x.project, x.templateProjectChange()), v()), x.noProjectsCantCreate = !1, a.$on("no-projects-cannot-create", function() {
x.noProjectsCantCreate = !0;
}), x.noProjectsEmptyState = {
=======
onShow: function() {
b.infoStep.selected = !1, b.selectStep.selected = !1, b.configStep.selected = !1, b.resultsStep.selected = !0, b.nextTitle = "Close", m(), b.wizardDone = !0;
}
}, b.$onInit = function() {
b.loginBaseUrl = a.openshiftAPIBaseUrl(), b.preSelectedProject = b.selectedProject = b.project, b.useProjectTemplate && (b.project && (b.templateProject = b.project, b.templateProjectChange()), h()), b.noProjectsCantCreate = !1, e.$on("no-projects-cannot-create", function() {
b.noProjectsCantCreate = !0;
}), b.noProjectsEmptyState = {
>>>>>>> Fix for adding non-builder templates to a project
title: "No Available Projects",
info: "There are no projects available from which to load templates."
}, x.projectEmptyState = {
title: "No Project Selected",
info: "Please select a project from the dropdown to load templates from that project."
}, x.templatesEmptyState = {
title: "No Templates",
info: "The selected project has no templates available to import."
}, x.filterConfig = {
fields: [ {
id: "keyword",
title: "Keyword",
placeholder: "Filter by Keyword",
filterType: "text"
} ],
inlineResults: !0,
showTotalCountResults: !0,
itemsLabel: "Item",
itemsLabelPlural: "Items",
resultsCount: 0,
appliedFilters: [],
onFilterChange: t
}, c.project || (x.showProjectName = !0);
}, x.$onChanges = function(a) {
a.template && x.template && (l(), x.iconClass = j(), x.image = k(), x.docUrl = z(x.template, "openshift.io/documentation-url"), x.supportUrl = z(x.template, "openshift.io/support-url"), x.vendor = z(x.template, "openshift.io/provider-display-name")), a.useProjectTemplate && l();
}, a.$on("templateInstantiated", function(a, b) {
x.selectedProject = b.project, x.currentStep = x.resultsStep.label;
}), x.$onDestroy = function() {
m();
}, x.next = function(a) {
return a.stepId === x.configStep.id ? (r(), !1) : a.stepId !== x.resultsStep.id || (x.close(), !1);
}, x.close = function() {
var a = x.onDialogClosed();
_.isFunction(a) && a();
}, x.onProjectSelected = function(b) {
x.selectedProject = b, x.configStep.valid = a.$ctrl.form.$valid && x.selectedProject;
}, x.templateSelected = function(a) {
x.selectedTemplate = a, x.template = _.get(a, "resource"), x.selectStep.valid = !!a, x.iconClass = j(), x.image = k(), x.docUrl = z(x.template, "openshift.io/documentation-url"), x.supportUrl = z(x.template, "openshift.io/support-url"), x.vendor = z(x.template, "openshift.io/provider-display-name");
}, x.templateProjectChange = function() {
x.templateProjectName = _.get(x.templateProject, "metadata.name"), x.catalogItems = {}, x.templateSelected(), d.getProjectCatalogItems(x.templateProjectName, !1, !0).then(_.spread(function(a, b) {
x.catalogItems = a, x.totalCount = x.catalogItems.length, t(), b && g.addNotification({
type: "error",
message: b
});
}));
}, x.groupChoicesBy = function(a) {
return i.isRecentlyViewed(a.metadata.uid) ? "Recently Viewed" : "Other Projects";
};
var A = function() {
var a = _.reject(x.unfilteredProjects, "metadata.deletionTimestamp"), c = _.sortBy(a, b("displayName"));
x.searchEnabled = !_.isEmpty(a), x.templateProjects = i.orderByMostRecentlyViewed(c), x.numTemplateProjects = _.size(x.templateProjects), 1 === x.numTemplateProjects && (x.templateProject = _.head(x.templateProjects), x.templateProjectChange());
};
}
angular.module("openshiftConsole").component("processTemplateDialog", {
controller: [ "$scope", "$filter", "$routeParams", "Catalog", "DataService", "KeywordService", "NotificationsService", "ProjectsService", "RecentlyViewedProjectsService", a ],
controllerAs: "$ctrl",
bindings: {
template: "<",
project: "<",
useProjectTemplate: "<",
=======
onShow: function() {
<<<<<<< 3087d5859f05def6301fced3a013ac9165fd8c7a
<<<<<<< f69fceda0d306e0128582971b9a9daa9bb1fc547
<<<<<<< ccf80f118591f812a727baefcf6bf957e4daea8c
y.selectStep.selected = !1, y.configStep.selected = !1, y.resultsStep.selected = !0, y.nextTitle = "Close", u(), y.wizardDone = !0;
=======
v.infoStep.selected = !1, v.selectStep.selected = !1, v.configStep.selected = !1, v.resultsStep.selected = !0, v.nextTitle = "Close", u(), v.wizardDone = !0;
>>>>>>> Changing overlay layout to a single column
}
}, y.$onInit = function() {
y.loginBaseUrl = a.openshiftAPIBaseUrl(), y.preSelectedProject = y.selectedProject = y.project, h(), y.projectEmptyState = {
=======
y.infoStep.selected = !1, y.selectStep.selected = !1, y.configStep.selected = !1, y.resultsStep.selected = !0, y.nextTitle = "Close", d(), y.wizardDone = !0;
}
}, y.$onInit = function() {
y.loginBaseUrl = r.openshiftAPIBaseUrl(), y.preSelectedProject = y.selectedProject = y.project, h(), y.projectEmptyState = {
>>>>>>> Making next steps/results messaging consistent
=======
b.infoStep.selected = !1, b.selectStep.selected = !1, b.configStep.selected = !1, b.resultsStep.selected = !0, b.nextTitle = "Close", m(), b.wizardDone = !0;
}
}, b.$onInit = function() {
<<<<<<< a19b22733566f12a68db59a49bc16848fffba594
<<<<<<< d465b55549af1e0d90fe94a5f0ce3d32b3092794
b.loginBaseUrl = r.openshiftAPIBaseUrl(), b.preSelectedProject = b.selectedProject = b.project, h(), b.projectEmptyState = {
>>>>>>> Add SVG icons
icon: "pficon pficon-info",
=======
b.loginBaseUrl = r.openshiftAPIBaseUrl(), b.preSelectedProject = b.selectedProject = b.project, b.project && (b.templateProject = b.project, b.templateProjectChange()), h(), b.projectEmptyState = {
>>>>>>> Preselect current project in 'Select from Project'
=======
b.loginBaseUrl = r.openshiftAPIBaseUrl(), b.preSelectedProject = b.selectedProject = b.project, b.project && (b.templateProject = b.project, b.templateProjectChange()), h(), b.noProjectsCantCreate = !1, e.$on("no-projects-cannot-create", function() {
b.noProjectsCantCreate = !0;
}), b.projectEmptyState = {
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
title: "No Project Selected",
info: "Please select a project from the dropdown to load Templates from that project."
}, b.templatesEmptyState = {
icon: "pficon pficon-info",
title: "No Templates",
info: "The selected project has no templates available to import."
}, b.filterConfig = {
fields: [ {
id: "keyword",
title: "Keyword",
placeholder: "Filter by Keyword",
filterType: "text"
} ],
inlineResults: !0,
showTotalCountResults: !0,
itemsLabel: "Item",
itemsLabelPlural: "Items",
resultsCount: 0,
appliedFilters: [],
<<<<<<< 3087d5859f05def6301fced3a013ac9165fd8c7a
<<<<<<< f69fceda0d306e0128582971b9a9daa9bb1fc547
onFilterChange: p
};
}, y.$onChanges = function(e) {
e.template && y.template && (l(), y.iconClass = c()), e.useProjectTemplate && l();
}, e.$on("templateInstantiated", function(e, t) {
y.selectedProject = t.project, y.currentStep = y.resultsStep.label;
}), y.$onDestroy = function() {
u();
}, y.next = function(e) {
return e.stepId === y.configStep.id ? (d(), !1) : e.stepId !== y.resultsStep.id || (y.close(), !1);
}, y.close = function() {
var e = y.onDialogClosed();
_.isFunction(e) && e();
<<<<<<< 602d786018a3879a89789b1214b36a15c51b928b
}, y.onProjectSelected = function(t) {
y.selectedProject = t, y.configStep.valid = e.$ctrl.form.$valid && y.selectedProject;
}, y.templateSelected = function(e) {
y.selectedTemplate = e, y.template = _.get(e, "resource"), y.selectStep.valid = !!e;
}, y.templateProjectChange = function() {
y.templateProjectName = _.get(y.templateProject, "metadata.name"), y.catalogItems = {}, y.templateSelected(), n.getProjectCatalogItems(y.templateProjectName, !1, !0).then(_.spread(function(e, t) {
y.catalogItems = e, y.totalCount = y.catalogItems.length, f(), t && o.addNotification({
=======
}, v.onProjectSelected = function(t) {
v.selectedProject = t, v.configStep.valid = e.$ctrl.form.$valid && v.selectedProject;
}, v.templateSelected = function(e) {
v.selectedTemplate = e, v.template = _.get(e, "resource"), v.selectStep.valid = !!e, v.iconClass = c();
}, v.templateProjectChange = function() {
v.templateProjectName = _.get(v.templateProject, "metadata.name"), v.catalogItems = {}, v.templateSelected(), n.getProjectCatalogItems(v.templateProjectName, !1, !0).then(_.spread(function(e, t) {
<<<<<<< 9bc0af8cb56dcc9609307333b9424f396867cab5
v.catalogItems = e, v.totalCount = v.catalogItems.length, m(), t && o.addNotification({
>>>>>>> Updates for Service Instance & Bindings
=======
v.catalogItems = e, v.totalCount = v.catalogItems.length, p(), t && o.addNotification({
>>>>>>> Support EnvFrom in the Env Editors
=======
onFilterChange: f
}, n.project || (y.showProjectName = !0);
}, y.$onChanges = function(e) {
e.template && y.template && (u(), y.iconClass = l()), e.useProjectTemplate && u();
=======
onFilterChange: g
}, n.project || (b.showProjectName = !0);
}, b.$onChanges = function(e) {
<<<<<<< 75fc56b9e42e29e1492befd08624dd0e5dade866
<<<<<<< 247459038ac366429876741dd447ec652f2f5e7d
<<<<<<< a19b22733566f12a68db59a49bc16848fffba594
<<<<<<< 46344541d4f20e3585d6ea01425f784292c0d84a
<<<<<<< 1f773a75a1c4f13a7de152b306d3b15340ae8ad8
e.template && b.template && (d(), b.iconClass = l(), b.image = u()), e.useProjectTemplate && d();
>>>>>>> Add SVG icons
=======
e.template && b.template && (d(), b.iconClass = l(), b.image = u(), b.docUrl = S(b.template, "template.openshift.io/documentation-url"), b.supportUrl = S(b.template, "template.openshift.io/support-url"), b.vendor = S(b.template, "template.openshift.io/provider-display-name")), e.useProjectTemplate && d();
>>>>>>> Adding vendor to info screens, adding docUrl and supportUrl to info screens that lacked it
=======
e.template && b.template && (d(), b.iconClass = l(), b.image = u(), b.docUrl = C(b.template, "template.openshift.io/documentation-url"), b.supportUrl = C(b.template, "template.openshift.io/support-url"), b.vendor = C(b.template, "template.openshift.io/provider-display-name")), e.useProjectTemplate && d();
>>>>>>> Service instance details configuration and edit
=======
e.template && b.template && (d(), b.iconClass = l(), b.image = u(), b.docUrl = S(b.template, "openshift.io/documentation-url"), b.supportUrl = S(b.template, "openshift.io/support-url"), b.vendor = S(b.template, "openshift.io/provider-display-name")), e.useProjectTemplate && d();
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
e.template && b.template && (d(), b.iconClass = l(), b.image = u(), b.docUrl = C(b.template, "openshift.io/documentation-url"), b.supportUrl = C(b.template, "openshift.io/support-url"), b.vendor = C(b.template, "openshift.io/provider-display-name")), e.useProjectTemplate && d();
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
=======
e.template && b.template && (d(), b.iconClass = l(), b.image = u(), b.docUrl = C(b.template, "openshift.io/documentation-url"), b.supportUrl = C(b.template, "openshift.io/support-url"), b.vendor = C(b.template, "openshift.io/provider-display-name")), e.useProjectTemplate && d();
>>>>>>> Adding label filter to ste secrets page
}, e.$on("templateInstantiated", function(e, t) {
b.selectedProject = t.project, b.currentStep = b.resultsStep.label;
}), b.$onDestroy = function() {
m();
}, b.next = function(e) {
return e.stepId === b.configStep.id ? (p(), !1) : e.stepId !== b.resultsStep.id || (b.close(), !1);
}, b.close = function() {
var e = b.onDialogClosed();
_.isFunction(e) && e();
<<<<<<< 3087d5859f05def6301fced3a013ac9165fd8c7a
}, y.onProjectSelected = function(t) {
y.selectedProject = t, y.configStep.valid = e.$ctrl.form.$valid && y.selectedProject;
}, y.templateSelected = function(e) {
y.selectedTemplate = e, y.template = _.get(e, "resource"), y.selectStep.valid = !!e, y.iconClass = l();
}, y.templateProjectChange = function() {
y.templateProjectName = _.get(y.templateProject, "metadata.name"), y.catalogItems = {}, y.templateSelected(), a.getProjectCatalogItems(y.templateProjectName, !1, !0).then(_.spread(function(e, t) {
y.catalogItems = e, y.totalCount = y.catalogItems.length, f(), t && i.addNotification({
>>>>>>> Making next steps/results messaging consistent
=======
}, b.onProjectSelected = function(t) {
b.selectedProject = t, b.configStep.valid = e.$ctrl.form.$valid && b.selectedProject;
}, b.templateSelected = function(e) {
<<<<<<< 75fc56b9e42e29e1492befd08624dd0e5dade866
<<<<<<< 247459038ac366429876741dd447ec652f2f5e7d
<<<<<<< a19b22733566f12a68db59a49bc16848fffba594
b.selectedTemplate = e, b.template = _.get(e, "resource"), b.selectStep.valid = !!e, b.iconClass = l(), b.image = u(), b.docUrl = C(b.template, "template.openshift.io/documentation-url"), b.supportUrl = C(b.template, "template.openshift.io/support-url"), b.vendor = C(b.template, "template.openshift.io/provider-display-name");
=======
b.selectedTemplate = e, b.template = _.get(e, "resource"), b.selectStep.valid = !!e, b.iconClass = l(), b.image = u(), b.docUrl = S(b.template, "openshift.io/documentation-url"), b.supportUrl = S(b.template, "openshift.io/support-url"), b.vendor = S(b.template, "openshift.io/provider-display-name");
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
b.selectedTemplate = e, b.template = _.get(e, "resource"), b.selectStep.valid = !!e, b.iconClass = l(), b.image = u(), b.docUrl = C(b.template, "openshift.io/documentation-url"), b.supportUrl = C(b.template, "openshift.io/support-url"), b.vendor = C(b.template, "openshift.io/provider-display-name");
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
=======
b.selectedTemplate = e, b.template = _.get(e, "resource"), b.selectStep.valid = !!e, b.iconClass = l(), b.image = u(), b.docUrl = C(b.template, "openshift.io/documentation-url"), b.supportUrl = C(b.template, "openshift.io/support-url"), b.vendor = C(b.template, "openshift.io/provider-display-name");
>>>>>>> Adding label filter to ste secrets page
}, b.templateProjectChange = function() {
b.templateProjectName = _.get(b.templateProject, "metadata.name"), b.catalogItems = {}, b.templateSelected(), r.getProjectCatalogItems(b.templateProjectName, !1, !0).then(_.spread(function(e, t) {
b.catalogItems = e, b.totalCount = b.catalogItems.length, g(), t && i.addNotification({
>>>>>>> Add SVG icons
type: "error",
message: t
});
}));
};
<<<<<<< 3087d5859f05def6301fced3a013ac9165fd8c7a
var b = function() {
var e = _.reject(y.unfilteredProjects, "metadata.deletionTimestamp"), n = _.sortBy(e, t("displayName"));
<<<<<<< f69fceda0d306e0128582971b9a9daa9bb1fc547
y.searchEnabled = !_.isEmpty(e), y.templateProjects = s.orderByMostRecentlyViewed(n);
=======
y.searchEnabled = !_.isEmpty(e), y.templateProjects = c.orderByMostRecentlyViewed(n);
>>>>>>> Making next steps/results messaging consistent
=======
var S = function() {
var e = _.reject(b.unfilteredProjects, "metadata.deletionTimestamp"), n = _.sortBy(e, t("displayName"));
b.searchEnabled = !_.isEmpty(e), b.templateProjects = c.orderByMostRecentlyViewed(n);
>>>>>>> Add SVG icons
};
} ],
controllerAs: "$ctrl",
bindings: {
template: "<",
<<<<<<< a3f0653fa08af6dea27dfd8409132aa1a2c0091f
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
project: "<",
useProjectTemplate: "<",
>>>>>>> Add 'Select from Project' wizard to allow project templates/images to be imported
onDialogClosed: "&"
},
templateUrl: "views/directives/process-template-dialog.html"
});
}(), function() {
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
function a(a, b, c) {
var d = this;
d.$onInit = function() {
d.loginBaseUrl = c.openshiftAPIBaseUrl(), d.currentStep = "Image", b.project || (d.showProjectName = !0), a.$on("no-projects-cannot-create", function() {
d.deployForm.$setValidity("required", !1), d.deployImageNewAppCreated = !1;
});
}, d.deployImage = function() {
a.$broadcast("newAppFromDeployImage");
}, a.$on("deployImageNewAppCreated", function(a, b) {
d.selectedProject = b.project, d.appName = b.appName, d.deployImageNewAppCreated = !0, d.currentStep = "Results";
}), d.close = function() {
var a = d.onDialogClosed();
return _.isFunction(a) && a(), d.wizardDone = !1, !0;
}, d.stepChanged = function(a) {
"results" === a.stepId ? (d.nextButtonTitle = "Close", d.wizardDone = !0) : d.nextButtonTitle = "Deploy";
}, d.nextCallback = function(a) {
return "image" === a.stepId ? (d.deployImage(), !1) : "results" !== a.stepId || (d.close(), !1);
};
}
angular.module("openshiftConsole").component("deployImageDialog", {
controller: [ "$scope", "$routeParams", "DataService", a ],
controllerAs: "$ctrl",
bindings: {
=======
angular.module("openshiftConsole").component("deployImageDialog", {
controller: [ "$scope", "$routeParams", "DataService", function(e, t, n) {
var r = this;
r.$onInit = function() {
r.loginBaseUrl = n.openshiftAPIBaseUrl(), r.currentStep = "Image", t.project || (r.showProjectName = !0), e.$on("no-projects-cannot-create", function() {
r.deployForm.$setValidity("required", !1), r.deployImageNewAppCreated = !1;
});
}, r.deployImage = function() {
e.$broadcast("newAppFromDeployImage");
}, e.$on("deployImageNewAppCreated", function(e, t) {
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< f69fceda0d306e0128582971b9a9daa9bb1fc547
n.selectedProject = t.project, n.deployImageNewAppCreated = !0, n.currentStep = "Results";
}), n.close = function() {
var e = n.onDialogClosed();
return _.isFunction(e) && e(), n.wizardDone = !1, !0;
}, e.$on("wizard:stepChanged", function(e, t) {
"results" === t.step.stepId ? (n.nextButtonTitle = "Close", n.wizardDone = !0) : n.nextButtonTitle = "Deploy";
}), n.nextCallback = function(e) {
return "image" === e.stepId ? (n.deployImage(), !1) : ("results" === e.stepId && n.close(), !0);
=======
a.selectedProject = t.project, a.appName = t.appName, a.deployImageNewAppCreated = !0, a.currentStep = "Results";
}), a.close = function() {
var e = a.onDialogClosed();
return _.isFunction(e) && e(), a.wizardDone = !1, !0;
}, a.stepChanged = function(e) {
"results" === e.stepId ? (a.nextButtonTitle = "Close", a.wizardDone = !0) : a.nextButtonTitle = "Deploy";
}, a.nextCallback = function(e) {
return "image" === e.stepId ? (a.deployImage(), !1) : "results" !== e.stepId || (a.close(), !1);
>>>>>>> Making next steps/results messaging consistent
=======
r.selectedProject = t.project, r.appName = t.appName, r.deployImageNewAppCreated = !0, r.currentStep = "Results";
}), r.close = function() {
var e = r.onDialogClosed();
return _.isFunction(e) && e(), r.wizardDone = !1, !0;
}, r.stepChanged = function(e) {
"results" === e.stepId ? (r.nextButtonTitle = "Close", r.wizardDone = !0) : r.nextButtonTitle = "Deploy";
}, r.nextCallback = function(e) {
return "image" === e.stepId ? (r.deployImage(), !1) : "results" !== e.stepId || (r.close(), !1);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
};
} ],
controllerAs: "$ctrl",
bindings: {
<<<<<<< 7d5cc388b34d6a87a5e2ae6b26f6b146dae1daa3
visible: "<",
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
>>>>>>> Adding Deploy Image and Import YAML / JSON functionality to catalog
project: "<",
context: "<",
onDialogClosed: "&"
},
templateUrl: "views/directives/deploy-image-dialog.html"
});
}(), function() {
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
function a(a, b, c, d, e) {
function f() {
var a = _.get(h, "template.metadata.annotations.iconClass", "fa fa-clone");
return a.indexOf("icon-") !== -1 ? "font-icon " + a : a;
}
function g() {
var a = _.get(h, "template.metadata.annotations.iconClass", "fa fa-clone");
return j(a);
}
var h = this, i = d("annotation"), j = d("imageForIconClass");
h.$onInit = function() {
h.alerts = {}, h.loginBaseUrl = e.openshiftAPIBaseUrl(), c.project || (h.showProjectName = !0), a.$on("no-projects-cannot-create", function() {
h.importForm.$setValidity("required", !1);
});
}, h.importFile = function() {
a.$broadcast("importFileFromYAMLOrJSON");
}, h.instantiateTemplate = function() {
a.$broadcast("instantiateTemplate");
}, a.$on("fileImportedFromYAMLOrJSON", function(a, c) {
h.selectedProject = c.project, h.template = c.template, h.iconClass = f(), h.image = g(), h.vendor = i(c.template, "openshift.io/provider-display-name"), h.docUrl = i(h.template, "openshift.io/documentation-url"), h.supportUrl = i(h.template, "openshift.io/support-url"), h.actionLabel = "imported", c.isList ? (h.kind = null, h.name = "YAML / JSON") : c.resource && (h.kind = c.resource.kind, h.name = c.resource.metadata.name), b(function() {
h.currentStep = h.template ? "Template Configuration" : "Results";
}, 0);
}), a.$on("templateInstantiated", function(a, b) {
h.selectedProject = b.project, h.name = d("displayName")(h.template), h.actionLabel = null, h.kind = null, h.currentStep = "Results";
}), h.close = function() {
h.template = null;
var a = h.onDialogClosed();
return _.isFunction(a) && a(), h.wizardDone = !1, !0;
}, h.stepChanged = function(a) {
"results" === a.stepId ? (h.nextButtonTitle = "Close", h.wizardDone = !0) : h.nextButtonTitle = "Create";
}, h.currentStep = "YAML / JSON", h.nextCallback = function(a) {
return "file" === a.stepId ? (h.importFile(), !1) : "template" === a.stepId ? (h.instantiateTemplate(), !1) : "results" !== a.stepId || (h.close(), !1);
};
}
angular.module("openshiftConsole").component("fromFileDialog", {
controller: [ "$scope", "$timeout", "$routeParams", "$filter", "DataService", a ],
controllerAs: "$ctrl",
bindings: {
=======
angular.module("openshiftConsole").component("fromFileDialog", {
controller: [ "$scope", "$timeout", "$routeParams", "$filter", "DataService", function(e, t, n, r, a) {
function o() {
var e = _.get(s, "template.metadata.annotations.iconClass", "fa fa-clone");
return -1 !== e.indexOf("icon-") ? "font-icon " + e : e;
}
function i() {
var e = _.get(s, "template.metadata.annotations.iconClass", "fa fa-clone");
return l(e);
}
var s = this, c = r("annotation"), l = r("imageForIconClass");
s.$onInit = function() {
s.alerts = {}, s.loginBaseUrl = a.openshiftAPIBaseUrl(), n.project || (s.showProjectName = !0), e.$on("no-projects-cannot-create", function() {
s.importForm.$setValidity("required", !1);
});
}, s.importFile = function() {
e.$broadcast("importFileFromYAMLOrJSON");
}, s.instantiateTemplate = function() {
e.$broadcast("instantiateTemplate");
}, e.$on("fileImportedFromYAMLOrJSON", function(e, n) {
<<<<<<< 714c4a3ff94bc485f89078ceeb8105e8b94271be
s.selectedProject = n.project, s.template = n.template, s.iconClass = o(), s.image = i(), s.vendor = c(n.template, "template.openshift.io/provider-display-name"), s.docUrl = c(s.template, "template.openshift.io/documentation-url"), s.supportUrl = c(s.template, "template.openshift.io/support-url"), s.name = "YAML / JSON", t(function() {
s.currentStep = s.template ? "Template Configuration" : "Results";
}, 0);
}), e.$on("templateInstantiated", function(e, t) {
<<<<<<< 1f773a75a1c4f13a7de152b306d3b15340ae8ad8
<<<<<<< f69fceda0d306e0128582971b9a9daa9bb1fc547
r.selectedProject = t.project, r.currentStep = "Results";
}), r.close = function() {
r.template = null;
var e = r.onDialogClosed();
return _.isFunction(e) && e(), r.wizardDone = !1, !0;
}, e.$on("wizard:stepChanged", function(e, t) {
"results" === t.step.stepId ? (r.nextButtonTitle = "Close", r.wizardDone = !0) : r.nextButtonTitle = "Create";
}), r.currentStep = "JSON / YAML", r.nextCallback = function(e) {
return "file" === e.stepId ? (r.importFile(), !1) : "template" === e.stepId ? (r.instantiateTemplate(), !1) : "results" !== e.stepId || (r.close(), !1);
=======
i.selectedProject = t.project, i.name = a("displayName")(i.template), i.currentStep = "Results";
}), i.close = function() {
i.template = null;
var e = i.onDialogClosed();
return _.isFunction(e) && e(), i.wizardDone = !1, !0;
}, i.stepChanged = function(e) {
"results" === e.stepId ? (i.nextButtonTitle = "Close", i.wizardDone = !0) : i.nextButtonTitle = "Create";
}, i.currentStep = "YAML / JSON", i.nextCallback = function(e) {
return "file" === e.stepId ? (i.importFile(), !1) : "template" === e.stepId ? (i.instantiateTemplate(), !1) : "results" !== e.stepId || (i.close(), !1);
>>>>>>> Making next steps/results messaging consistent
=======
s.selectedProject = t.project, s.name = a("displayName")(s.template), s.currentStep = "Results";
=======
s.selectedProject = n.project, s.template = n.template, s.iconClass = o(), s.image = i(), s.vendor = c(n.template, "openshift.io/provider-display-name"), s.docUrl = c(s.template, "openshift.io/documentation-url"), s.supportUrl = c(s.template, "openshift.io/support-url"), s.actionLabel = "imported", n.isList ? (s.kind = null, s.name = "YAML / JSON") : n.resource && (s.kind = n.resource.kind, s.name = n.resource.metadata.name), t(function() {
s.currentStep = s.template ? "Template Configuration" : "Results";
}, 0);
}), e.$on("templateInstantiated", function(e, t) {
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
s.selectedProject = t.project, s.name = a("displayName")(s.template), s.actionLabel = null, s.kind = null, s.currentStep = "Results";
>>>>>>> Bug 1505281 - Improve import YAML results message
=======
s.selectedProject = t.project, s.name = r("displayName")(s.template), s.actionLabel = null, s.kind = null, s.currentStep = "Results";
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}), s.close = function() {
s.template = null;
var e = s.onDialogClosed();
return _.isFunction(e) && e(), s.wizardDone = !1, !0;
}, s.stepChanged = function(e) {
s.currentStep = e.title, "results" === e.stepId ? (s.nextButtonTitle = "Close", s.wizardDone = !0) : s.nextButtonTitle = "Create";
}, s.currentStep = "YAML / JSON", s.nextCallback = function(e) {
return "file" === e.stepId ? (s.importFile(), !1) : "template" === e.stepId ? (s.instantiateTemplate(), !1) : "results" !== e.stepId || (s.close(), !1);
>>>>>>> Adding vendor to info screens, adding docUrl and supportUrl to info screens that lacked it
};
} ],
controllerAs: "$ctrl",
bindings: {
<<<<<<< 7d5cc388b34d6a87a5e2ae6b26f6b146dae1daa3
visible: "<",
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
>>>>>>> Adding Deploy Image and Import YAML / JSON functionality to catalog
project: "<",
context: "<",
onDialogClosed: "&"
},
templateUrl: "views/directives/from-file-dialog.html"
});
}(), function() {
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
function a(a, b) {
function c(a) {
var b = [];
return angular.forEach(a, function(a) {
"completed" !== a.status && b.push(a);
}), b;
}
function d(a) {
var b = [];
return angular.forEach(a, function(a) {
a.hasErrors && b.push(a);
}), b;
}
var e = this;
e.showParamsTable = !1, e.actionLabel = e.actionLabel || "created";
var f = a.getTemplateData();
e.parameters = f.params, e.templateMessage = f.message, a.clearTemplateData();
var g = function(a) {
var b = _.get(e, "createdBuildConfig.spec.triggers", []);
return _.some(b, {
type: a
});
};
e.createdBuildConfigWithGitHubTrigger = function() {
return g("GitHub");
}, e.createdBuildConfigWithConfigChangeTrigger = function() {
return g("ConfigChange");
}, e.allTasksSuccessful = function(a) {
return !c(a).length && !d(a).length;
}, e.erroredTasks = d, e.pendingTasks = c, e.goToOverview = function() {
_.isFunction(e.onContinue) && e.onContinue(), b.toProjectOverview(e.projectName);
}, e.toggleParamsTable = function() {
e.showParamsTable = !e.showParamsTable;
};
}
angular.module("openshiftConsole").component("nextSteps", {
controller: [ "ProcessedTemplateService", "Navigate", a ],
bindings: {
project: "<",
projectName: "<",
loginBaseUrl: "<",
fromSampleRepo: "<",
createdBuildConfig: "<",
onContinue: "<",
showProjectName: "<",
kind: "<?",
name: "<",
actionLabel: "<?"
},
templateUrl: "views/directives/next-steps.html"
});
}(), angular.module("openshiftConsole").directive("imageNames", [ "$filter", "PodsService", function(a, b) {
return {
restrict: "E",
scope: {
podTemplate: "=",
pods: "="
},
templateUrl: "views/_image-names.html",
link: function(c) {
var d = a("imageSHA"), e = function() {
var a = _.get(c, "podTemplate.spec.containers[0]");
if (a) {
var e = d(a.image);
return e ? void (c.imageIDs = [ e ]) : void (c.imageIDs = b.getImageIDs(c.pods, a.name));
}
=======
angular.module("openshiftConsole").component("nextSteps", {
controller: [ "ProcessedTemplateService", "Navigate", function(e, t) {
function n(e) {
var t = [];
return angular.forEach(e, function(e) {
"completed" !== e.status && t.push(e);
}), t;
}
function r(e) {
var t = [];
return angular.forEach(e, function(e) {
e.hasErrors && t.push(e);
}), t;
}
var a = this;
a.showParamsTable = !1, a.actionLabel = a.actionLabel || "created";
var o = e.getTemplateData();
a.parameters = o.params, a.templateMessage = o.message, e.clearTemplateData();
var i = function(e) {
var t = _.get(a, "createdBuildConfig.spec.triggers", []);
return _.some(t, {
type: e
});
};
a.createdBuildConfigWithGitHubTrigger = function() {
return i("GitHub");
}, a.createdBuildConfigWithConfigChangeTrigger = function() {
return i("ConfigChange");
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
}, r.allTasksSuccessful = function(e) {
return !n(e).length && !a(e).length;
}, r.erroredTasks = a, r.pendingTasks = n, r.goToOverview = function() {
_.isFunction(r.onContinue) && r.onContinue(), t.toProjectOverview(r.projectName);
}, r.toggleParamsTable = function() {
r.showParamsTable = !r.showParamsTable;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
}, a.allTasksSuccessful = function(e) {
return !n(e).length && !r(e).length;
}, a.erroredTasks = r, a.pendingTasks = n, a.goToOverview = function() {
_.isFunction(a.onContinue) && a.onContinue(), t.toProjectOverview(a.projectName);
}, a.toggleParamsTable = function() {
a.showParamsTable = !a.showParamsTable;
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
};
} ],
bindings: {
project: "<",
projectName: "<",
loginBaseUrl: "<",
fromSampleRepo: "<",
createdBuildConfig: "<",
onContinue: "<",
showProjectName: "<",
kind: "<?",
name: "<",
actionLabel: "<?"
},
templateUrl: "views/directives/next-steps.html"
});
}(), angular.module("openshiftConsole").directive("imageNames", [ "$filter", "PodsService", function(e, t) {
return {
restrict: "E",
scope: {
podTemplate: "=",
pods: "="
},
templateUrl: "views/_image-names.html",
link: function(n) {
var r = e("imageSHA");
n.$watchGroup([ "podTemplate", "pods" ], function() {
var e = _.get(n, "podTemplate.spec.containers[0]");
if (e) {
var a = r(e.image);
n.imageIDs = a ? [ a ] : t.getImageIDs(n.pods, e.name);
}
});
}
};
} ]), function() {
<<<<<<< 602d786018a3879a89789b1214b36a15c51b928b
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
function a(a, b, c, d, e, f) {
var g = this;
g.serviceBindingsVersion = a.getPreferredVersion("servicebindings"), g.showParameterValues = !1;
var h = {
namespace: g.namespace
}, i = function() {
g.allowParametersReveal = b.canI("secrets", "get", g.namespace), g.parameterData = {}, g.opaqueParameterKeys = [];
var a = g.allowParametersReveal ? "" : "*****";
_.each(_.keys(_.get(g.bindParameterSchema, "properties")), function(b) {
g.parameterData[b] = a;
});
var f = _.get(g.binding, "status.externalProperties.parameters", {});
_.each(_.keys(f), function(a) {
"<redacted>" === f[a] ? g.parameterData[a] = "*****" : (g.parameterData[a] = f[a], g.opaqueParameterKeys.push(a));
}), g.allowParametersReveal && _.each(_.get(g.binding, "spec.parametersFrom"), function(a) {
c.get("secrets", _.get(a, "secretKeyRef.name"), h).then(function(b) {
try {
var c = JSON.parse(e.decodeSecretData(b.data)[a.secretKeyRef.key]);
_.extend(g.parameterData, c);
} catch (f) {
d.warn("Unable to load parameters from secret " + _.get(a, "secretKeyRef.name"), f);
}
});
});
}, j = function() {
var b = a.getPreferredVersion("clusterserviceplans");
c.get(b, _.get(g.serviceInstance, "spec.clusterServicePlanRef.name"), h).then(function(a) {
g.bindParameterFormDefinition = angular.copy(_.get(a, "spec.externalMetadata.schemas.service_binding.create.openshift_form_definition")), g.bindParameterSchema = _.get(a, "spec.serviceBindingCreateParameterSchema"), i();
});
}, k = function() {
if ("ServiceInstance" !== _.get(g.refApiObject, "kind")) {
var a = _.get(g.binding, "spec.instanceRef.name");
g.serviceInstance = _.get(g.serviceInstances, [ a ]);
} else g.serviceInstance = g.refApiObject;
var b = f.getServiceClassNameForInstance(g.serviceInstance);
g.serviceClass = _.get(g.serviceClasses, [ b ]);
};
this.$onChanges = function(a) {
(a.binding || a.serviceInstances || a.serviceClasses) && (k(), j());
}, g.toggleShowParameterValues = function() {
g.showParameterValues = !g.showParameterValues;
};
}
angular.module("openshiftConsole").component("serviceBinding", {
controller: [ "APIService", "AuthorizationService", "DataService", "Logger", "SecretsService", "ServiceInstancesService", a ],
=======
angular.module("openshiftConsole").component("serviceBinding", {
controller: [ "APIService", "AuthorizationService", "DataService", "Logger", "SecretsService", "ServiceInstancesService", function(e, t, n, r, a, o) {
var i = this;
i.serviceBindingsVersion = e.getPreferredVersion("servicebindings"), i.secretsVersion = e.getPreferredVersion("secrets"), i.showParameterValues = !1;
var s = {
namespace: i.namespace
}, c = function() {
i.allowParametersReveal = t.canI("secrets", "get", i.namespace), i.parameterData = {}, i.opaqueParameterKeys = [];
var e = i.allowParametersReveal ? "" : "*****";
_.each(_.keys(_.get(i.bindParameterSchema, "properties")), function(t) {
i.parameterData[t] = e;
});
var o = _.get(i.binding, "status.externalProperties.parameters", {});
_.each(_.keys(o), function(e) {
"<redacted>" === o[e] ? i.parameterData[e] = "*****" : (i.parameterData[e] = o[e], i.opaqueParameterKeys.push(e));
}), i.allowParametersReveal && _.each(_.get(i.binding, "spec.parametersFrom"), function(e) {
n.get(i.secretsVersion, _.get(e, "secretKeyRef.name"), s).then(function(t) {
try {
var n = JSON.parse(a.decodeSecretData(t.data)[e.secretKeyRef.key]);
_.extend(i.parameterData, n);
} catch (t) {
r.warn("Unable to load parameters from secret " + _.get(e, "secretKeyRef.name"), t);
}
});
});
}, l = function() {
var t = e.getPreferredVersion("clusterserviceplans");
n.get(t, _.get(i.serviceInstance, "spec.clusterServicePlanRef.name"), s).then(function(e) {
i.bindParameterFormDefinition = angular.copy(_.get(e, "spec.externalMetadata.schemas.service_binding.create.openshift_form_definition")), i.bindParameterSchema = _.get(e, "spec.serviceBindingCreateParameterSchema"), c();
});
}, u = function() {
if ("ServiceInstance" !== _.get(i.refApiObject, "kind")) {
var e = _.get(i.binding, "spec.instanceRef.name");
i.serviceInstance = _.get(i.serviceInstances, [ e ]);
} else i.serviceInstance = i.refApiObject;
var t = o.getServiceClassNameForInstance(i.serviceInstance);
i.serviceClass = _.get(i.serviceClasses, [ t ]);
};
this.$onChanges = function(e) {
(e.binding || e.serviceInstances || e.serviceClasses) && (u(), l());
}, i.toggleShowParameterValues = function() {
i.showParameterValues = !i.showParameterValues;
};
} ],
>>>>>>> Updates for Service Instance & Bindings
controllerAs: "$ctrl",
bindings: {
namespace: "<",
binding: "<",
refApiObject: "<?",
serviceClasses: "<",
<<<<<<< 564bfad6c6a2a2e087a95a77d3e86fc5e258bfdc
<<<<<<< 602d786018a3879a89789b1214b36a15c51b928b
serviceInstances: "<",
isOverview: "<?"
=======
serviceInstances: "<"
>>>>>>> Updates for Service Instance & Bindings
=======
serviceInstances: "<",
isOverview: "<?"
>>>>>>> Updates to service instance page, show failed bindings
},
templateUrl: "views/directives/_service-binding.html"
});
}(), function() {
<<<<<<< 602d786018a3879a89789b1214b36a15c51b928b
function a(a, b) {
var c = this;
c.interestingPhases = [ "Pending", "Running", "Failed", "Error" ];
var d = function(a) {
var b = _.get(a, "status.phase");
return _.includes(c.interestingPhases, b);
};
c.$onChanges = _.debounce(function() {
a.$apply(function() {
var a = _.groupBy(c.builds, "status.phase");
if (c.countByPhase = _.mapValues(a, _.size), c.show = _.some(c.builds, d), !c.showRunningStage || 1 !== c.countByPhase.Running) return void (c.currentStage = null);
var e = _.head(a.Running);
c.currentStage = b.getCurrentStage(e);
});
}, 200);
}
angular.module("openshiftConsole").component("buildCounts", {
controller: [ "$scope", "BuildsService", a ],
=======
=======
>>>>>>> Updates for Service Instance & Bindings
angular.module("openshiftConsole").component("buildCounts", {
controller: [ "$scope", "BuildsService", function(e, t) {
var n = this;
n.interestingPhases = [ "Pending", "Running", "Failed", "Error" ];
var r = function(e) {
var t = _.get(e, "status.phase");
return _.includes(n.interestingPhases, t);
};
n.$onChanges = _.debounce(function() {
e.$apply(function() {
var e = _.groupBy(n.builds, "status.phase");
if (n.countByPhase = _.mapValues(e, _.size), n.show = _.some(n.builds, r), n.showRunningStage && 1 === n.countByPhase.Running) {
var a = _.head(e.Running);
n.currentStage = t.getCurrentStage(a);
} else n.currentStage = null;
});
}, 200);
} ],
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
controllerAs: "buildCounts",
bindings: {
builds: "<",
showRunningStage: "<",
label: "@"
},
templateUrl: "views/overview/_build-counts.html"
});
}(), function() {
angular.module("openshiftConsole").component("metricsSummary", {
controller: [ "$interval", "ConversionService", "MetricsCharts", "MetricsService", function(e, t, n, r) {
var a, o = this, i = !0, s = function(e) {
return e >= 1024;
};
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
f.metrics = [ {
label: "Memory",
convert: b.bytesToMiB,
formatUsage: function(a) {
return h(a) && (a /= 1024), c.formatUsage(a);
},
usageUnits: function(a) {
return h(a) ? "GiB" : "MiB";
=======
o.metrics = [ {
label: "Memory",
convert: t.bytesToMiB,
formatUsage: function(e) {
return s(e) && (e /= 1024), n.formatUsage(e);
},
usageUnits: function(e) {
return s(e) ? "GiB" : "MiB";
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
},
datasets: [ "memory/usage" ],
type: "pod_container"
}, {
label: "CPU",
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
convert: b.millicoresToCores,
usageUnits: function() {
return "cores";
},
formatUsage: function(a) {
return a < .01 ? "< 0.01" : c.formatUsage(a);
=======
convert: t.millicoresToCores,
usageUnits: function() {
return "cores";
},
formatUsage: function(e) {
return e < .01 ? "< 0.01" : n.formatUsage(e);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
},
datasets: [ "cpu/usage_rate" ],
type: "pod_container"
}, {
label: "Network",
units: "KiB/s",
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
convert: b.bytesToKiB,
formatUsage: function(a) {
return a < .01 ? "< 0.01" : c.formatUsage(a);
=======
convert: t.bytesToKiB,
formatUsage: function(e) {
return e < .01 ? "< 0.01" : n.formatUsage(e);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
},
usageUnits: function() {
return "KiB/s";
},
datasets: [ "network/tx_rate", "network/rx_rate" ],
type: "pod"
} ];
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
var i = function() {
var a = _.find(f.pods, "metadata.namespace");
if (!a) return null;
var b = {
pods: f.pods,
namespace: a.metadata.namespace,
start: "-1mn",
bucketDuration: "1mn"
};
return b;
}, j = function(a) {
return null === a.value || void 0 === a.value;
}, k = function(a, b) {
var c = null, d = {};
_.each(a.datasets, function(e) {
_.each(b[e], function(b, e) {
var f = _.last(b);
if (!j(f)) {
d[e] = !0;
var g = a.convert(f.value);
c = (c || 0) + g;
}
});
}), null === c ? delete a.currentUsage : a.currentUsage = c / _.size(d);
}, l = function(a) {
_.each(f.metrics, function(b) {
k(b, a);
=======
var c = function() {
var e = _.find(o.pods, "metadata.namespace");
return e ? {
pods: o.pods,
namespace: e.metadata.namespace,
start: "-1mn",
bucketDuration: "1mn"
} : null;
}, l = function(e) {
return null === e.value || void 0 === e.value;
}, u = function(e, t) {
var n = null, r = {};
_.each(e.datasets, function(a) {
_.each(t[a], function(t, a) {
var o = _.last(t);
if (!l(o)) {
r[a] = !0;
var i = e.convert(o.value);
n = (n || 0) + i;
}
});
}), null === n ? delete e.currentUsage : e.currentUsage = n / _.size(r);
}, d = function(e) {
_.each(o.metrics, function(t) {
u(t, e);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
});
}, m = function() {
o.error = !0;
}, p = function() {
if (!o.error && !i) {
var e = c();
e && (a = Date.now(), r.getPodMetrics(e).then(d, m));
}
};
o.updateInView = function(e) {
i = !e, e && (!a || Date.now() > a + n.getDefaultUpdateInterval()) && p();
};
var f;
o.$onInit = function() {
f = e(p, n.getDefaultUpdateInterval(), !1), p();
}, o.$onDestroy = function() {
f && (e.cancel(f), f = null);
};
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
}
angular.module("openshiftConsole").component("metricsSummary", {
controller: [ "$interval", "ConversionService", "MetricsCharts", "MetricsService", a ],
=======
} ],
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
controllerAs: "metricsSummary",
bindings: {
pods: "<",
containers: "<"
},
templateUrl: "views/overview/_metrics-summary.html"
});
}(), function() {
angular.module("openshiftConsole").component("miniLog", {
controllerAs: "miniLog",
controller: [ "$scope", "$filter", "APIService", "DataService", "HTMLService", function(e, t, n, r, a) {
var o, i, s, c = this, l = t("annotation"), u = c.numLines || 7, d = [];
c.lines = [];
var m = _.throttle(function() {
e.$evalAsync(function() {
c.lines = _.clone(d);
});
<<<<<<< 9bc0af8cb56dcc9609307333b9424f396867cab5
<<<<<<< 602d786018a3879a89789b1214b36a15c51b928b
<<<<<<< 33eb37eab8df0c17bc226501a924a2dc2b9b2f41
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
}, 200), n = 0, o = function(a) {
if (a) {
var b = ansi_up.escape_for_html(a), c = ansi_up.ansi_to_html(b), d = e.linkify(c, "_blank", !0);
n++, l.push({
markup: d,
id: n
}), l.length > k && (l = _.takeRight(l, k)), m();
}
}, p = function() {
h && (h.stop(), h = null);
}, q = function() {
var a = {
follow: !0,
tailLines: k
=======
}, 200), p = 0, g = function(e) {
=======
}, 200), p = 0, f = function(e) {
>>>>>>> Patternfly vertical navigation and project bar
=======
}, 200), m = 0, f = function(e) {
>>>>>>> Updates for Service Instance & Bindings
=======
}, 200), p = 0, f = function(e) {
>>>>>>> Support EnvFrom in the Env Editors
if (e) {
var t = ansi_up.escape_for_html(e), n = ansi_up.ansi_to_html(t), r = a.linkify(n, "_blank", !0);
p++, d.push({
markup: r,
id: p
}), d.length > u && (d = _.takeRight(d, u)), m();
}
}, g = function() {
s && (s.stop(), s = null);
}, v = function() {
var e = {
follow: !0,
tailLines: u
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
};
(s = r.createStream(i, o, c.context, e)).start(), s.onMessage(f), s.onClose(function() {
s = null;
});
};
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
i.$onInit = function() {
"ReplicationController" === i.apiObject.kind ? (g = "deploymentconfigs/log", f = j(i.apiObject, "deploymentConfig")) : (g = c.kindToResource(i.apiObject.kind) + "/log", f = i.apiObject.metadata.name), q();
}, i.$onDestroy = function() {
p();
};
}
angular.module("openshiftConsole").component("miniLog", {
controllerAs: "miniLog",
controller: [ "$scope", "$filter", "APIService", "DataService", "HTMLService", a ],
=======
c.$onInit = function() {
"ReplicationController" === c.apiObject.kind ? (i = "deploymentconfigs/log", o = l(c.apiObject, "deploymentConfig")) : (i = n.kindToResource(c.apiObject.kind) + "/log", o = c.apiObject.metadata.name), v();
}, c.$onDestroy = function() {
g();
};
} ],
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
bindings: {
apiObject: "<",
numLines: "<",
context: "<"
},
templateUrl: "views/overview/_mini-log.html"
});
}(), function() {
angular.module("openshiftConsole").component("notificationIcon", {
controller: [ "$scope", function(e) {
var t = this;
t.$onChanges = _.debounce(function() {
e.$apply(function() {
var e = _.groupBy(t.alerts, "type");
t.countByType = _.mapValues(e, _.size), t.byType = _.mapValues(e, function(e) {
return _.map(e, function(e) {
return _.escape(e.message);
}).join("<br>");
});
});
}, 200);
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
}
angular.module("openshiftConsole").component("notificationIcon", {
controller: [ "$scope", a ],
=======
} ],
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
controllerAs: "notification",
bindings: {
alerts: "<"
},
templateUrl: "views/overview/_notification-icon.html"
});
}(), function() {
angular.module("openshiftConsole").component("overviewBuilds", {
controller: [ "$filter", function(e) {
var t, n = e("canI");
this.$onInit = function() {
t = n("builds/log", "get");
}, this.showLogs = function(e) {
if (this.hideLog) return !1;
if (!t) return !1;
if (!_.get(e, "status.startTimestamp")) return !1;
if ("Complete" !== _.get(e, "status.phase")) return !0;
var n = _.get(e, "status.completionTimestamp");
if (!n) return !1;
var r = moment().subtract(3, "m");
return moment(n).isAfter(r);
};
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
}
angular.module("openshiftConsole").component("overviewBuilds", {
controller: [ "$filter", a ],
=======
} ],
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
controllerAs: "overviewBuilds",
bindings: {
buildConfigs: "<",
recentBuildsByBuildConfig: "<",
context: "<",
hideLog: "<"
},
templateUrl: "views/overview/_builds.html"
});
}(), function() {
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
function a(a, b, c, d, e, f, g, h, i, j, k) {
var l = this;
_.extend(l, g.ui);
var m = a("canI"), n = a("deploymentIsInProgress"), o = a("isBinaryBuild"), p = a("enableTechPreviewFeature");
l.serviceBindingsVersion = c.getPreferredVersion("servicebindings");
var q = function(a) {
var b = _.get(a, "spec.triggers");
_.isEmpty(b) || (l.imageChangeTriggers = _.filter(b, function(a) {
return "ImageChange" === a.type && _.get(a, "imageChangeParams.automatic");
}));
}, r = function(a) {
a && !l.current && "DeploymentConfig" !== a.kind && "Deployment" !== a.kind && (l.current = a);
}, s = function(a) {
l.rgv = c.objectToResourceGroupVersion(a), r(a), q(a);
};
l.$onChanges = function(a) {
a.apiObject && s(a.apiObject.currentValue);
};
var t = [], u = function(a) {
if (!l.state.hpaByResource) return null;
var b = _.get(a, "kind"), c = _.get(a, "metadata.name");
return _.get(l.state.hpaByResource, [ b, c ], t);
};
l.showBindings = e.SERVICE_CATALOG_ENABLED && p("pod_presets"), l.$doCheck = function() {
l.notifications = g.getNotifications(l.apiObject, l.state), l.hpa = u(l.apiObject), l.current && _.isEmpty(l.hpa) && (l.hpa = u(l.current));
var a = _.get(l, "apiObject.metadata.uid");
a && (l.services = _.get(l, [ "state", "servicesByObjectUID", a ]), l.buildConfigs = _.get(l, [ "state", "buildConfigsByObjectUID", a ]), l.bindings = _.get(l, [ "state", "bindingsByApplicationUID", a ]));
var b, c = _.get(l, "apiObject.kind");
"DeploymentConfig" === c && (b = _.get(l, "apiObject.metadata.name"), l.pipelines = _.get(l, [ "state", "pipelinesByDeploymentConfig", b ]), l.recentBuilds = _.get(l, [ "state", "recentBuildsByDeploymentConfig", b ]), l.recentPipelines = _.get(l, [ "state", "recentPipelinesByDeploymentConfig", b ]));
}, l.getPods = function(a) {
var b = _.get(a, "metadata.uid");
return _.get(l, [ "state", "podsByOwnerUID", b ]);
}, l.firstPod = function(a) {
var b = l.getPods(a);
return _.find(b);
}, l.isScalable = function() {
return !!_.isEmpty(l.hpa) && !l.isDeploymentInProgress();
}, l.isDeploymentInProgress = function() {
return !(!l.current || !l.previous) || n(l.current);
}, l.canIDoAny = function() {
var a = _.get(l, "apiObject.kind"), b = _.get(l, "apiObject.metadata.uid"), c = _.get(l.state.deleteableBindingsByApplicationUID, b);
switch (a) {
case "DeploymentConfig":
return !!m("deploymentconfigs/instantiate", "create") || (!!m("deploymentconfigs", "update") || (!(!l.current || !m("deploymentconfigs/log", "get")) || (!(!p("pod_presets") || _.isEmpty(l.state.bindableServiceInstances) || !m(l.serviceBindingsVersion, "create")) || (!(!p("pod_presets") || _.isEmpty(c) || !m(l.serviceBindingsVersion, "delete")) || (l.showStartPipelineAction() || l.showStartBuildAction())))));

case "Pod":
return !!m("pods/log", "get") || !!m("pods", "update");

default:
return !(!l.firstPod(l.current) || !m("pods/log", "get")) || (!!m(l.rgv, "update") || (!(!p("pod_presets") || _.isEmpty(l.state.bindableServiceInstances) || !m(l.serviceBindingsVersion, "create")) || !(!p("pod_presets") || _.isEmpty(c) || !m(l.serviceBindingsVersion, "delete"))));
}
}, l.showStartBuildAction = function() {
if (!_.isEmpty(l.pipelines)) return !1;
if (!m("buildconfigs/instantiate", "create")) return !1;
if (1 !== _.size(l.buildConfigs)) return !1;
var a = _.head(l.buildConfigs);
return !o(a);
}, l.showStartPipelineAction = function() {
return m("buildconfigs/instantiate", "create") && 1 === _.size(l.pipelines);
}, l.startBuild = d.startBuild, l.canDeploy = function() {
return !!l.apiObject && (!l.apiObject.metadata.deletionTimestamp && (!l.deploymentInProgress && !l.apiObject.spec.paused));
}, l.isPaused = function() {
return l.apiObject.spec.paused;
}, l.startDeployment = function() {
f.startLatestDeployment(l.apiObject, {
namespace: l.apiObject.metadata.namespace
});
}, l.cancelDeployment = function() {
var a = l.current;
if (a) {
var c, d = a.metadata.name, e = _.get(l, "apiObject.status.latestVersion");
c = 1 === e ? k.getString(j("This will attempt to stop the in-progress deployment. It may take some time to complete.")) : k.getString(j("This will attempt to stop the in-progress deployment and rollback to the last successful deployment. It may take some time to complete."));
var g = b.open({
=======
angular.module("openshiftConsole").component("overviewListRow", {
controller: [ "$filter", "$uibModal", "APIService", "BuildsService", "CatalogService", "DeploymentsService", "ListRowUtils", "Navigate", "NotificationsService", function(e, t, n, r, a, o, i, s, c) {
var l = this;
_.extend(l, i.ui);
var u = e("canI"), d = e("deploymentIsInProgress"), m = e("isBinaryBuild"), p = e("enableTechPreviewFeature");
l.serviceBindingsVersion = n.getPreferredVersion("servicebindings");
var f = function(e) {
var t = _.get(e, "spec.triggers");
_.isEmpty(t) || (l.imageChangeTriggers = _.filter(t, function(e) {
return "ImageChange" === e.type && _.get(e, "imageChangeParams.automatic");
}));
}, g = function(e) {
e && !l.current && "DeploymentConfig" !== e.kind && "Deployment" !== e.kind && (l.current = e);
}, v = function(e) {
l.rgv = n.objectToResourceGroupVersion(e), g(e), f(e);
};
l.$onChanges = function(e) {
e.apiObject && v(e.apiObject.currentValue);
};
var h = [], y = function(e) {
if (!l.state.hpaByResource) return null;
var t = _.get(e, "kind"), n = _.get(e, "metadata.name");
return _.get(l.state.hpaByResource, [ t, n ], h);
};
l.showBindings = a.SERVICE_CATALOG_ENABLED && p("pod_presets"), l.$doCheck = function() {
l.notifications = i.getNotifications(l.apiObject, l.state), l.hpa = y(l.apiObject), l.current && _.isEmpty(l.hpa) && (l.hpa = y(l.current));
var e = _.get(l, "apiObject.metadata.uid");
e && (l.services = _.get(l, [ "state", "servicesByObjectUID", e ]), l.buildConfigs = _.get(l, [ "state", "buildConfigsByObjectUID", e ]), l.bindings = _.get(l, [ "state", "bindingsByApplicationUID", e ]));
var t;
"DeploymentConfig" === _.get(l, "apiObject.kind") && (t = _.get(l, "apiObject.metadata.name"), l.pipelines = _.get(l, [ "state", "pipelinesByDeploymentConfig", t ]), l.recentBuilds = _.get(l, [ "state", "recentBuildsByDeploymentConfig", t ]), l.recentPipelines = _.get(l, [ "state", "recentPipelinesByDeploymentConfig", t ]));
}, l.getPods = function(e) {
var t = _.get(e, "metadata.uid");
return _.get(l, [ "state", "podsByOwnerUID", t ]);
}, l.firstPod = function(e) {
var t = l.getPods(e);
return _.find(t);
}, l.isScalable = function() {
return !!_.isEmpty(l.hpa) && !l.isDeploymentInProgress();
}, l.isDeploymentInProgress = function() {
return !(!l.current || !l.previous) || d(l.current);
}, l.canIDoAny = function() {
var e = _.get(l, "apiObject.kind"), t = _.get(l, "apiObject.metadata.uid"), n = _.get(l.state.deleteableBindingsByApplicationUID, t);
switch (e) {
case "DeploymentConfig":
return !!u("deploymentconfigs/instantiate", "create") || !!u("deploymentconfigs", "update") || !(!l.current || !u("deploymentconfigs/log", "get")) || !(!p("pod_presets") || _.isEmpty(l.state.bindableServiceInstances) || !u(l.serviceBindingsVersion, "create")) || !(!p("pod_presets") || _.isEmpty(n) || !u(l.serviceBindingsVersion, "delete")) || l.showStartPipelineAction() || l.showStartBuildAction();

case "Pod":
return !!u("pods/log", "get") || !!u("pods", "update");

default:
return !((!l.firstPod(l.current) || !u("pods/log", "get")) && !u(l.rgv, "update") && (!p("pod_presets") || _.isEmpty(l.state.bindableServiceInstances) || !u(l.serviceBindingsVersion, "create")) && (!p("pod_presets") || _.isEmpty(n) || !u(l.serviceBindingsVersion, "delete")));
}
}, l.showStartBuildAction = function() {
if (!_.isEmpty(l.pipelines)) return !1;
if (!u("buildconfigs/instantiate", "create")) return !1;
if (1 !== _.size(l.buildConfigs)) return !1;
var e = _.head(l.buildConfigs);
return !m(e);
}, l.showStartPipelineAction = function() {
return u("buildconfigs/instantiate", "create") && 1 === _.size(l.pipelines);
}, l.startBuild = r.startBuild, l.canDeploy = function() {
return !(!l.apiObject || l.apiObject.metadata.deletionTimestamp || l.deploymentInProgress || l.apiObject.spec.paused);
}, l.isPaused = function() {
return l.apiObject.spec.paused;
}, l.startDeployment = function() {
o.startLatestDeployment(l.apiObject, {
namespace: l.apiObject.metadata.namespace
});
}, l.cancelDeployment = function() {
var e = l.current;
if (e) {
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< 952b26bc3acaa89a51e4aad5f965e515d3b007ae
var n, a = e.metadata.name, o = _.get(c, "apiObject.status.latestVersion");
n = 1 === o ? "This will attempt to stop the in-progress deployment. It may take some time to complete." : "This will attempt to stop the in-progress deployment and rollback to the last successful deployment. It may take some time to complete.", t.open({
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
var n, a = e.metadata.name, r = _.get(l, "apiObject.status.latestVersion");
n = 1 === r ? "This will attempt to stop the in-progress deployment. It may take some time to complete." : "This will attempt to stop the in-progress deployment and rollback to the last successful deployment. It may take some time to complete.", t.open({
>>>>>>> Add bindings list to resource pages
=======
var n, r = e.metadata.name, a = _.get(l, "apiObject.status.latestVersion");
n = 1 === a ? "This will attempt to stop the in-progress deployment. It may take some time to complete." : "This will attempt to stop the in-progress deployment and rollback to the last successful deployment. It may take some time to complete.", t.open({
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
animation: !0,
templateUrl: "views/modals/confirm.html",
controller: "ConfirmModalController",
resolve: {
modalConfig: function() {
return {
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
message: k.getString(j("Cancel deployment {{rcName}}?"), {
rcName: d
}),
details: c,
okButtonText: k.getString(j("Yes, cancel")),
okButtonClass: "btn-danger",
cancelButtonText: k.getString(j("No, don't cancel"))
};
}
}
});
g.result.then(function() {
return a.metadata.uid !== l.current.metadata.uid ? void i.addNotification({
type: "error",
message: "Deployment #" + e + " is no longer the latest."
}) : (a = l.current, n(a) ? void f.cancelRunningDeployment(a, {
namespace: a.metadata.namespace
}) : void i.addNotification({
type: "error",
message: "Deployment " + d + " is no longer in progress."
}));
});
}
}, l.urlForImageChangeTrigger = function(b) {
var c = a("stripTag")(_.get(b, "imageChangeParams.from.name")), d = _.get(l, "apiObject.metadata.namespace"), e = _.get(b, "imageChangeParams.from.namespace", d);
return h.resourceURL(c, "ImageStream", e);
}, l.navigateToPods = function() {
var a = l.getPods(l.current);
_.isEmpty(a) || h.toPodsForDeployment(l.current, a);
}, l.closeOverlayPanel = function() {
_.set(l, "overlay.panelVisible", !1);
}, l.showOverlayPanel = function(a, b) {
_.set(l, "overlay.panelVisible", !0), _.set(l, "overlay.panelName", a), _.set(l, "overlay.state", b);
};
}
angular.module("openshiftConsole").component("overviewListRow", {
controller: [ "$filter", "$uibModal", "APIService", "BuildsService", "CatalogService", "DeploymentsService", "ListRowUtils", "Navigate", "NotificationsService", "gettext", "gettextCatalog", a ],
=======
message: "Cancel deployment " + a + "?",
=======
message: "Cancel deployment " + r + "?",
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
details: n,
okButtonText: "Yes, cancel",
okButtonClass: "btn-danger",
cancelButtonText: "No, don't cancel"
};
}
}
}).result.then(function() {
e.metadata.uid === l.current.metadata.uid ? (e = l.current, d(e) ? o.cancelRunningDeployment(e, {
namespace: e.metadata.namespace
}) : c.addNotification({
type: "error",
message: "Deployment " + r + " is no longer in progress."
})) : c.addNotification({
type: "error",
message: "Deployment #" + a + " is no longer the latest."
});
});
}
}, l.urlForImageChangeTrigger = function(t) {
var n = e("stripTag")(_.get(t, "imageChangeParams.from.name")), r = _.get(l, "apiObject.metadata.namespace"), a = _.get(t, "imageChangeParams.from.namespace", r);
return s.resourceURL(n, "ImageStream", a);
}, l.navigateToPods = function() {
var e = l.getPods(l.current);
_.isEmpty(e) || s.toPodsForDeployment(l.current, e);
}, l.closeOverlayPanel = function() {
_.set(l, "overlay.panelVisible", !1);
}, l.showOverlayPanel = function(e, t) {
_.set(l, "overlay.panelVisible", !0), _.set(l, "overlay.panelName", e), _.set(l, "overlay.state", t);
};
} ],
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
controllerAs: "row",
bindings: {
apiObject: "<",
current: "<",
previous: "<",
state: "<",
hidePipelines: "<"
},
templateUrl: "views/overview/_list-row.html"
});
}(), function() {
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
function a(a, b, c, d, e, f) {
var g = this, h = a("isBindingFailed"), i = a("isBindingReady"), j = a("serviceInstanceFailedMessage"), k = a("truncate");
_.extend(g, e.ui);
var l = a("serviceInstanceDisplayName");
g.serviceBindingsVersion = b.getPreferredVersion("servicebindings"), g.serviceInstancesVersion = b.getPreferredVersion("serviceinstances");
var m = function() {
var a = f.getServiceClassNameForInstance(g.apiObject);
return _.get(g, [ "state", "serviceClasses", a ]);
}, n = function() {
var a = f.getServicePlanNameForInstance(g.apiObject);
return _.get(g, [ "state", "servicePlans", a ]);
}, o = function() {
_.get(g.apiObject, "metadata.deletionTimestamp") ? g.instanceStatus = "deleted" : h(g.apiObject) ? g.instanceStatus = "failed" : i(g.apiObject) ? g.instanceStatus = "ready" : g.instanceStatus = "pending";
};
g.$doCheck = function() {
o(), g.notifications = e.getNotifications(g.apiObject, g.state), g.serviceClass = m(), g.servicePlan = n(), g.displayName = l(g.apiObject, g.serviceClass), g.isBindable = d.isServiceBindable(g.apiObject, g.serviceClass, g.servicePlan);
}, g.$onChanges = function(a) {
a.bindings && (g.deleteableBindings = _.reject(g.bindings, "metadata.deletionTimestamp"));
}, g.getSecretForBinding = function(a) {
return a && _.get(g, [ "state", "secrets", a.spec.secretName ]);
}, g.actionsDropdownVisible = function() {
return !_.get(g.apiObject, "metadata.deletionTimestamp") && (!(!g.isBindable || !c.canI(g.serviceBindingsVersion, "create")) || (!(_.isEmpty(g.deleteableBindings) || !c.canI(g.serviceBindingsVersion, "delete")) || !!c.canI(g.serviceInstancesVersion, "delete")));
}, g.closeOverlayPanel = function() {
_.set(g, "overlay.panelVisible", !1);
}, g.showOverlayPanel = function(a, b) {
_.set(g, "overlay.panelVisible", !0), _.set(g, "overlay.panelName", a), _.set(g, "overlay.state", b);
}, g.getFailedTooltipText = function() {
var a = j(g.apiObject);
if (!a) return "";
var b = k(a, 128);
return a.length !== b.length && (b += "..."), b;
}, g.deprovision = function() {
f.deprovision(g.apiObject, g.deleteableBindings);
};
}
angular.module("openshiftConsole").component("serviceInstanceRow", {
controller: [ "$filter", "APIService", "AuthorizationService", "BindingService", "ListRowUtils", "ServiceInstancesService", a ],
=======
angular.module("openshiftConsole").component("serviceInstanceRow", {
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
controller: [ "$filter", "APIService", "AuthorizationService", "BindingService", "ListRowUtils", "ServiceInstancesService", function(e, t, n, a, r, o) {
var i = this, s = e("isBindingFailed"), c = e("isBindingReady");
_.extend(i, r.ui);
var l = e("serviceInstanceDisplayName");
=======
controller: [ "$filter", "APIService", "AuthorizationService", "BindingService", "ListRowUtils", "ServiceInstancesService", function(e, t, n, r, a, o) {
var i = this, s = e("isBindingFailed"), c = e("isBindingReady"), l = e("serviceInstanceFailedMessage"), u = e("truncate");
_.extend(i, a.ui);
var d = e("serviceInstanceDisplayName");
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
i.serviceBindingsVersion = t.getPreferredVersion("servicebindings"), i.serviceInstancesVersion = t.getPreferredVersion("serviceinstances");
var u = function() {
var e = o.getServiceClassNameForInstance(i.apiObject);
return _.get(i, [ "state", "serviceClasses", e ]);
}, d = function() {
var e = o.getServicePlanNameForInstance(i.apiObject);
return _.get(i, [ "state", "servicePlans", e ]);
}, m = function() {
_.get(i.apiObject, "metadata.deletionTimestamp") ? i.instanceStatus = "deleted" : s(i.apiObject) ? i.instanceStatus = "failed" : c(i.apiObject) ? i.instanceStatus = "ready" : i.instanceStatus = "pending";
};
i.$doCheck = function() {
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
m(), i.notifications = r.getNotifications(i.apiObject, i.state), i.serviceClass = u(), i.servicePlan = d(), i.displayName = l(i.apiObject, i.serviceClass), i.isBindable = a.isServiceBindable(i.apiObject, i.serviceClass, i.servicePlan);
=======
f(), i.notifications = a.getNotifications(i.apiObject, i.state), i.serviceClass = m(), i.servicePlan = p(), i.displayName = d(i.apiObject, i.serviceClass), i.isBindable = r.isServiceBindable(i.apiObject, i.serviceClass, i.servicePlan);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}, i.$onChanges = function(e) {
e.bindings && (i.deleteableBindings = _.reject(i.bindings, "metadata.deletionTimestamp"));
}, i.getSecretForBinding = function(e) {
return e && _.get(i, [ "state", "secrets", e.spec.secretName ]);
}, i.actionsDropdownVisible = function() {
return !(_.get(i.apiObject, "metadata.deletionTimestamp") || (!i.isBindable || !n.canI(i.serviceBindingsVersion, "create")) && (_.isEmpty(i.deleteableBindings) || !n.canI(i.serviceBindingsVersion, "delete")) && !n.canI(i.serviceInstancesVersion, "delete"));
}, i.closeOverlayPanel = function() {
_.set(i, "overlay.panelVisible", !1);
}, i.showOverlayPanel = function(e, t) {
_.set(i, "overlay.panelVisible", !0), _.set(i, "overlay.panelName", e), _.set(i, "overlay.state", t);
}, i.deprovision = function() {
o.deprovision(i.apiObject, i.deleteableBindings);
};
} ],
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
controllerAs: "row",
bindings: {
apiObject: "<",
state: "<",
bindings: "<"
},
templateUrl: "views/overview/_service-instance-row.html"
});
}(), angular.module("openshiftConsole").component("overviewNetworking", {
controllerAs: "networking",
bindings: {
rowServices: "<",
allServices: "<",
routesByService: "<"
},
templateUrl: "views/overview/_networking.html"
}), angular.module("openshiftConsole").component("overviewPipelines", {
controllerAs: "overviewPipelines",
bindings: {
recentPipelines: "<"
},
templateUrl: "views/overview/_pipelines.html"
}), angular.module("openshiftConsole").component("overviewServiceBindings", {
controllerAs: "$ctrl",
bindings: {
<<<<<<< 564bfad6c6a2a2e087a95a77d3e86fc5e258bfdc
<<<<<<< 952b26bc3acaa89a51e4aad5f965e515d3b007ae
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
sectionTitle: "@",
namespace: "<",
refApiObject: "<",
=======
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
=======
sectionTitle: "@",
>>>>>>> Updates to service instance page, show failed bindings
namespace: "<",
<<<<<<< 6c8edd544179ba4c13819fe643c11051e3e612cb
>>>>>>> Add bindings list to resource pages
=======
refApiObject: "<",
>>>>>>> Fix to correctly show binding name in bindings list
bindings: "<",
bindableServiceInstances: "<",
serviceClasses: "<",
serviceInstances: "<",
<<<<<<< 952b26bc3acaa89a51e4aad5f965e515d3b007ae
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
createBinding: "&"
},
templateUrl: "views/overview/_service-bindings.html"
}), angular.module("openshiftConsole").directive("istagSelect", [ "DataService", "ProjectsService", function(a, b) {
=======
secrets: "<",
=======
>>>>>>> Add bindings list to resource pages
createBinding: "&"
},
templateUrl: "views/overview/_service-bindings.html"
<<<<<<< de23bb9edb519863fdc1189600627bce78923bce
<<<<<<< 602d786018a3879a89789b1214b36a15c51b928b
}), function() {
angular.module("openshiftConsole").component("overviewServiceBinding", {
controller: [ function() {
var e = this, t = function() {
var t = _.get(e.binding, "spec.instanceRef.name"), n = _.get(e.serviceInstances, [ t ]), a = _.get(n, "spec.serviceClassName");
e.serviceClass = _.get(e.serviceClasses, [ a ]);
};
this.$onChanges = function(e) {
(e.binding || e.serviceInstances || e.serviceClasses) && t();
};
} ],
controllerAs: "$ctrl",
bindings: {
namespace: "<",
binding: "<",
serviceClasses: "<",
serviceInstances: "<"
},
templateUrl: "views/overview/_service-binding.html"
});
<<<<<<< 7fc0bb75a45e57cf2098d66ed317a3123741a3d2
}(), angular.module("openshiftConsole").directive("istagSelect", [ "DataService", function(e) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
}(), angular.module("openshiftConsole").directive("istagSelect", [ "DataService", "ProjectsService", function(e, t) {
>>>>>>> Bug 1481127 - More robust handling of large project lists
=======
}), angular.module("openshiftConsole").directive("istagSelect", [ "DataService", "ProjectsService", function(e, t) {
>>>>>>> Updates for Service Instance & Bindings
=======
}), angular.module("openshiftConsole").directive("istagSelect", [ "APIService", "DataService", "ProjectsService", function(e, t, n) {
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
var a = e.getPreferredVersion("imagestreams");
>>>>>>> Update directive/istagSelect to use getPreferredVersion
=======
var r = e.getPreferredVersion("imagestreams");
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
return {
require: "^form",
restrict: "E",
scope: {
istag: "=model",
selectDisabled: "=",
selectRequired: "=",
includeSharedNamespace: "=",
allowCustomTag: "=",
appendToBody: "="
},
templateUrl: "views/directives/istag-select.html",
<<<<<<< de23bb9edb519863fdc1189600627bce78923bce
<<<<<<< 7fc0bb75a45e57cf2098d66ed317a3123741a3d2
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
controller: [ "$scope", function(c) {
c.isByNamespace = {}, c.isNamesByNamespace = {};
var d = _.get(c, "istag.namespace") && _.get(c, "istag.imageStream") && _.get(c, "istag.tagObject.tag"), e = function(a) {
_.each(a, function(a) {
_.get(a, "status.tags") || _.set(a, "status.tags", []);
});
}, f = function(b) {
return c.isByNamespace[b] = {}, c.isNamesByNamespace[b] = [], _.includes(c.namespaces, b) ? void a.list("imagestreams", {
namespace: b
}, function(a) {
var d = angular.copy(a.by("metadata.name"));
e(d), c.isByNamespace[b] = d, c.isNamesByNamespace[b] = _.keys(d).sort(), _.includes(c.isNamesByNamespace[b], c.istag.imageStream) || (c.isNamesByNamespace[b] = c.isNamesByNamespace[b].concat(c.istag.imageStream), c.isByNamespace[b][c.istag.imageStream] = {
status: {
tags: {}
}
}), _.find(c.isByNamespace[b][c.istag.imageStream].status.tags, {
tag: c.istag.tagObject.tag
}) || c.isByNamespace[b][c.istag.imageStream].status.tags.push({
tag: c.istag.tagObject.tag
});
}) : (c.namespaces.push(b), c.isNamesByNamespace[b] = c.isNamesByNamespace[b].concat(c.istag.imageStream), void (c.isByNamespace[b][c.istag.imageStream] = {
status: {
tags: [ {
tag: c.istag.tagObject.tag
} ]
}
}));
};
b.list().then(function(b) {
c.namespaces = _.keys(b.by("metadata.name")), c.includeSharedNamespace && (c.namespaces = _.uniq([ "openshift" ].concat(c.namespaces))), c.namespaces = c.namespaces.sort(), c.$watch("istag.namespace", function(b) {
if (b && !c.isByNamespace[b]) return d ? (f(b), void (d = !1)) : void a.list("imagestreams", {
namespace: b
}, function(a) {
var d = angular.copy(a.by("metadata.name"));
e(d), c.isByNamespace[b] = d, c.isNamesByNamespace[b] = _.keys(d).sort();
=======
controller: [ "$scope", function(t) {
t.isByNamespace = {}, t.isNamesByNamespace = {};
var n = _.get(t, "istag.namespace") && _.get(t, "istag.imageStream") && _.get(t, "istag.tagObject.tag"), a = function(e) {
=======
controller: [ "$scope", function(n) {
n.isByNamespace = {}, n.isNamesByNamespace = {};
var a = _.get(n, "istag.namespace") && _.get(n, "istag.imageStream") && _.get(n, "istag.tagObject.tag"), r = function(e) {
>>>>>>> Bug 1481127 - More robust handling of large project lists
=======
controller: [ "$scope", function(e) {
e.isByNamespace = {}, e.isNamesByNamespace = {};
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
var r = _.get(e, "istag.namespace") && _.get(e, "istag.imageStream") && _.get(e, "istag.tagObject.tag"), o = function(e) {
>>>>>>> Update directive/istagSelect to use getPreferredVersion
=======
var a = _.get(e, "istag.namespace") && _.get(e, "istag.imageStream") && _.get(e, "istag.tagObject.tag"), o = function(e) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
_.each(e, function(e) {
_.get(e, "status.tags") || _.set(e, "status.tags", []);
});
}, i = function(n) {
if (e.isByNamespace[n] = {}, e.isNamesByNamespace[n] = [], !_.includes(e.namespaces, n)) return e.namespaces.push(n), e.isNamesByNamespace[n] = e.isNamesByNamespace[n].concat(e.istag.imageStream), void (e.isByNamespace[n][e.istag.imageStream] = {
status: {
tags: [ {
tag: e.istag.tagObject.tag
} ]
}
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
});
t.list(r, {
namespace: n
}, function(t) {
var r = angular.copy(t.by("metadata.name"));
o(r), e.isByNamespace[n] = r, e.isNamesByNamespace[n] = _.keys(r).sort(), _.includes(e.isNamesByNamespace[n], e.istag.imageStream) || (e.isNamesByNamespace[n] = e.isNamesByNamespace[n].concat(e.istag.imageStream), e.isByNamespace[n][e.istag.imageStream] = {
status: {
tags: {}
}
}), _.find(e.isByNamespace[n][e.istag.imageStream].status.tags, {
tag: e.istag.tagObject.tag
}) || e.isByNamespace[n][e.istag.imageStream].status.tags.push({
tag: e.istag.tagObject.tag
});
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
}), c.getTags = function(a) {
c.allowCustomTag && a && !_.find(c.isByNamespace[c.istag.namespace][c.istag.imageStream].status.tags, {
tag: a
}) && (_.remove(c.isByNamespace[c.istag.namespace][c.istag.imageStream].status.tags, function(a) {
return !a.items;
}), c.isByNamespace[c.istag.namespace][c.istag.imageStream].status.tags.unshift({
tag: a
}));
}, c.groupTags = function(a) {
return c.allowCustomTag ? a.items ? "Current Tags" : "New Tag" : "";
};
} ]
};
} ]), angular.module("openshiftConsole").directive("deployImage", [ "$filter", "$q", "$window", "$uibModal", "ApplicationGenerator", "DataService", "ImagesService", "Navigate", "NotificationsService", "ProjectsService", "QuotaService", "TaskList", "SecretsService", "keyValueEditorUtils", "gettext", "gettextCatalog", function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
return {
restrict: "E",
scope: {
project: "=",
isDialog: "="
},
templateUrl: "views/directives/deploy-image.html",
controller: [ "$scope", function(a) {
a.forms = {}, a.noProjectsCantCreate = !1, a.input = {
selectedProject: a.project
}, a.$watch("input.selectedProject.metadata.name", function() {
a.projectNameTaken = !1;
});
} ],
link: function(c) {
function m() {
var a = n.mapEntries(n.compactEntries(c.labels));
return g.getResources({
name: c.app.name,
image: c["import"].name,
namespace: c["import"].namespace,
tag: c["import"].tag || "latest",
ports: c.ports,
volumes: c.volumes,
env: n.compactEntries(c.env),
labels: a
});
}
c.mode = "istag", c.istag = {}, c.app = {}, c.env = [], c.labels = [ {
name: "app",
value: ""
} ], c.$on("no-projects-cannot-create", function() {
c.noProjectsCantCreate = !0;
});
var q = a("orderByDisplayName"), r = a("getErrorDetails"), s = {}, t = function() {
i.hideNotification("deploy-image-list-config-maps-error"), i.hideNotification("deploy-image-list-secrets-error"), _.each(s, function(a) {
!a.id || "error" !== a.type && "warning" !== a.type || i.hideNotification(a.id);
});
};
c.valueFromNamespace = {};
var u = function() {
if (_.has(c.input.selectedProject, "metadata.uid")) return b.when(c.input.selectedProject);
var d = c.input.selectedProject.metadata.name, e = c.input.selectedProject.metadata.annotations["new-display-name"], f = a("description")(c.input.selectedProject);
return j.create(d, e, f);
}, v = a("stripTag"), w = a("stripSHA"), x = a("humanizeKind"), y = function(a) {
return a.length > 24 ? a.substring(0, 24) : a;
}, z = function() {
var a = _.last(c["import"].name.split("/"));
return a = w(a), a = v(a), a = y(a);
};
c.findImage = function() {
c.loading = !0, g.findImage(c.imageName, {
namespace: c.input.selectedProject.metadata.name
}).then(function(a) {
if (c["import"] = a, c.loading = !1, "Success" !== _.get(a, "result.status")) return void (c["import"].error = _.get(a, "result.message", "An error occurred finding the image."));
c.forms.imageSelection.imageName.$setValidity("imageLoaded", !0);
var b = c["import"].image;
b && (c.app.name = z(), c.runsAsRoot = g.runsAsRoot(b), c.ports = e.parsePorts(b), c.volumes = g.getVolumes(b), c.createImageStream = !0);
}, function(b) {
c["import"].error = a("getErrorDetails")(b) || "An error occurred finding the image.", c.loading = !1;
});
}, c.$watch("app.name", function(a, b) {
c.nameTaken = !1;
var d = _.find(c.labels, {
name: "app"
});
!d || d.value && d.value !== b || (d.value = a);
}), c.$watch("mode", function(a, b) {
a !== b && (delete c["import"], c.istag = {}, "dockerImage" === a ? c.forms.imageSelection.imageName.$setValidity("imageLoaded", !1) : c.forms.imageSelection.imageName.$setValidity("imageLoaded", !0));
}), c.$watch("imageName", function() {
"dockerImage" === c.mode && c.forms.imageSelection.imageName.$setValidity("imageLoaded", !1);
}), c.$watch("istag", function(b, d) {
if (b !== d) {
if (!b.namespace || !b.imageStream || !b.tagObject) return void delete c["import"];
var h, i = _.get(b, "tagObject.items[0].image");
c.app.name = y(b.imageStream), c["import"] = {
name: b.imageStream,
tag: b.tagObject.tag,
namespace: b.namespace
}, i && (h = b.imageStream + "@" + i, c.loading = !0, f.get("imagestreamimages", h, {
namespace: b.namespace
}).then(function(a) {
c.loading = !1, c["import"].image = a.image, c.ports = e.parsePorts(a.image), c.volumes = g.getVolumes(a.image), c.runsAsRoot = !1;
}, function(b) {
c["import"].error = a("getErrorDetails")(b) || "An error occurred.", c.loading = !1;
}));
}
}, !0), c.$watch("input.selectedProject", function(a) {
if (c.env = _.reject(c.env, "valueFrom"), !_.get(a, "metadata.uid")) return void (c.mode = "istag");
if (!c.valueFromNamespace[a.metadata.name]) {
var b = [], d = [];
f.list("configmaps", {
namespace: c.input.selectedProject.metadata.name
}, null, {
errorNotification: !1
}).then(function(e) {
b = q(e.by("metadata.name")), c.valueFromNamespace[a.metadata.name] = b.concat(d);
}, function(a) {
403 !== a.status && i.addNotification({
id: "deploy-image-list-config-maps-error",
type: "error",
message: "Could not load config maps.",
details: r(a)
});
}), f.list("secrets", {
namespace: c.input.selectedProject.metadata.name
}, null, {
errorNotification: !1
}).then(function(e) {
d = q(e.by("metadata.name")), c.valueFromNamespace[a.metadata.name] = d.concat(b);
}, function(a) {
403 !== a.status && i.addNotification({
id: "deploy-image-list-secrets-error",
type: "error",
message: "Could not load secrets.",
details: r(a)
});
});
}
});
var A, B = a("displayName"), C = function() {
var a = {
started: p.getString(o("Deploying image " + c.app.name + " to project " + B(c.input.selectedProject))),
success: p.getString(o("Deployed image " + c.app.name + " to project " + B(c.input.selectedProject))),
failure: p.getString(o("Failed to deploy image " + c.app.name + " to project " + B(c.input.selectedProject)))
};
l.clear(), l.add(a, {}, c.input.selectedProject.metadata.name, function() {
var a = b.defer();
return f.batch(A, {
namespace: c.input.selectedProject.metadata.name
}).then(function(b) {
var d, e = !_.isEmpty(b.failure);
e ? (d = _.map(b.failure, function(a) {
return {
type: "error",
message: "Cannot create " + x(a.object.kind).toLowerCase() + ' "' + a.object.metadata.name + '". ',
details: a.data.message
=======
});
};
n.list().then(function(n) {
e.namespaces = _.keys(n.by("metadata.name")), e.includeSharedNamespace && (e.namespaces = _.uniq([ "openshift" ].concat(e.namespaces))), e.namespaces = e.namespaces.sort(), e.$watch("istag.namespace", function(n) {
if (n && !e.isByNamespace[n]) return a ? (i(n), void (a = !1)) : void t.list(r, {
namespace: n
}, function(t) {
var r = angular.copy(t.by("metadata.name"));
o(r), e.isByNamespace[n] = r, e.isNamesByNamespace[n] = _.keys(r).sort();
});
});
}), e.getTags = function(t) {
e.allowCustomTag && t && !_.find(e.isByNamespace[e.istag.namespace][e.istag.imageStream].status.tags, {
tag: t
}) && (_.remove(e.isByNamespace[e.istag.namespace][e.istag.imageStream].status.tags, function(e) {
return !e.items;
}), e.isByNamespace[e.istag.namespace][e.istag.imageStream].status.tags.unshift({
tag: t
}));
}, e.groupTags = function(t) {
return e.allowCustomTag ? t.items ? "Current Tags" : "New Tag" : "";
};
} ]
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
};
} ]), angular.module("openshiftConsole").directive("deployImage", [ "$filter", "$q", "$window", "$uibModal", "APIService", "ApplicationGenerator", "DataService", "ImagesService", "Navigate", "NotificationsService", "ProjectsService", "QuotaService", "TaskList", "SecretsService", "keyValueEditorUtils", function(e, t, n, r, a, o, i, s, c, l, u, d, m, p, f) {
var g = a.getPreferredVersion("imagestreamimages"), v = a.getPreferredVersion("configmaps"), h = a.getPreferredVersion("secrets");
return {
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
type: "success",
message: "Created " + x(a.kind).toLowerCase() + ' "' + a.metadata.name + '" successfully. '
};
}))) : d = [ {
type: "success",
message: "All resources for image " + c.app.name + " were created successfully."
} ], a.resolve({
alerts: d,
hasErrors: e
});
}), a.promise;
}), c.isDialog ? c.$emit("deployImageNewAppCreated", {
project: c.input.selectedProject,
appName: c.app.name
}) : h.toNextSteps(c.app.name, c.input.selectedProject.metadata.name);
}, D = function(a) {
var b = d.open({
=======
restrict: "E",
scope: {
project: "=",
isDialog: "="
},
templateUrl: "views/directives/deploy-image.html",
<<<<<<< a19b22733566f12a68db59a49bc16848fffba594
=======
controller: [ "$scope", function(e) {
e.forms = {}, e.noProjectsCantCreate = !1, e.input = {
selectedProject: e.project
}, e.$watch("input.selectedProject.metadata.name", function() {
e.projectNameTaken = !1;
});
} ],
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
link: function(n) {
function a() {
var e = f.mapEntries(f.compactEntries(n.labels));
return s.getResources({
name: n.app.name,
image: n.import.name,
namespace: n.import.namespace,
tag: n.import.tag || "latest",
ports: n.ports,
volumes: n.volumes,
env: f.compactEntries(n.env),
labels: e
});
}
<<<<<<< 0a63ff3eb6cc8e59249ea875eb290dafbf03cad2
<<<<<<< 7d5cc388b34d6a87a5e2ae6b26f6b146dae1daa3
n.forms = {}, n.mode = "istag", n.istag = {}, n.app = {}, n.env = [], n.labels = [ {
=======
n.input = {
selectedProject: n.project
}, n.mode = "istag", n.istag = {}, n.app = {}, n.env = [], n.labels = [ {
>>>>>>> Adding Deploy Image and Import YAML / JSON functionality to catalog
=======
n.mode = "istag", n.istag = {}, n.app = {}, n.env = [], n.labels = [ {
>>>>>>> Correct ProjectNameTaken error handling in deployImage, processTemplate, and fromFile wizards
name: "app",
value: ""
} ], n.$on("no-projects-cannot-create", function() {
n.noProjectsCantCreate = !0;
});
var p = e("orderByDisplayName"), y = e("getErrorDetails"), b = {}, S = function() {
l.hideNotification("deploy-image-list-config-maps-error"), l.hideNotification("deploy-image-list-secrets-error"), _.each(b, function(e) {
!e.id || "error" !== e.type && "warning" !== e.type || l.hideNotification(e.id);
});
};
n.valueFromNamespace = {};
var C = function() {
if (_.has(n.input.selectedProject, "metadata.uid")) return t.when(n.input.selectedProject);
var r = n.input.selectedProject.metadata.name, a = n.input.selectedProject.metadata.annotations["new-display-name"], o = e("description")(n.input.selectedProject);
return u.create(r, a, o);
}, w = e("stripTag"), P = e("stripSHA"), j = e("humanizeKind"), k = function(e) {
return e.length > 24 ? e.substring(0, 24) : e;
}, I = function() {
var e = _.last(n.import.name.split("/"));
return e = P(e), e = w(e), e = k(e);
};
n.findImage = function() {
n.loading = !0, s.findImage(n.imageName, {
namespace: n.input.selectedProject.metadata.name
}).then(function(e) {
if (n.import = e, n.loading = !1, "Success" === _.get(e, "result.status")) {
n.forms.imageSelection.imageName.$setValidity("imageLoaded", !0);
var t = n.import.image;
t && (n.app.name = I(), n.runsAsRoot = s.runsAsRoot(t), n.ports = o.parsePorts(t), n.volumes = s.getVolumes(t), n.createImageStream = !0);
} else n.import.error = _.get(e, "result.message", "An error occurred finding the image.");
}, function(t) {
n.import.error = e("getErrorDetails")(t) || "An error occurred finding the image.", n.loading = !1;
});
}, n.$watch("app.name", function(e, t) {
n.nameTaken = !1;
var r = _.find(n.labels, {
name: "app"
});
!r || r.value && r.value !== t || (r.value = e);
}), n.$watch("mode", function(e, t) {
e !== t && (delete n.import, n.istag = {}, "dockerImage" === e ? n.forms.imageSelection.imageName.$setValidity("imageLoaded", !1) : n.forms.imageSelection.imageName.$setValidity("imageLoaded", !0));
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
}), n.$watch("istag", function(t, a) {
if (t !== a) if (t.namespace && t.imageStream && t.tagObject) {
var r, c = _.get(t, "tagObject.items[0].image");
=======
}), n.$watch("imageName", function() {
"dockerImage" === n.mode && n.forms.imageSelection.imageName.$setValidity("imageLoaded", !1);
}), n.$watch("istag", function(t, r) {
if (t !== r) if (t.namespace && t.imageStream && t.tagObject) {
var a, c = _.get(t, "tagObject.items[0].image");
<<<<<<< 13ac2d832bc56edf6bc5e2fc652da9b188ddae32
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
n.app.name = j(t.imageStream), n.import = {
=======
n.app.name = k(t.imageStream), n.import = {
>>>>>>> Add Browse Catalog to Project context view.
name: t.imageStream,
tag: t.tagObject.tag,
namespace: t.namespace
}, c && (a = t.imageStream + "@" + c, n.loading = !0, i.get(g, a, {
namespace: t.namespace
}).then(function(e) {
n.loading = !1, n.import.image = e.image, n.ports = o.parsePorts(e.image), n.volumes = s.getVolumes(e.image), n.runsAsRoot = !1;
}, function(t) {
n.import.error = e("getErrorDetails")(t) || "An error occurred.", n.loading = !1;
}));
} else delete n.import;
}, !0), n.$watch("input.selectedProject", function(e) {
if (n.env = _.reject(n.env, "valueFrom"), _.get(e, "metadata.uid")) {
if (!n.valueFromNamespace[e.metadata.name]) {
var t = [], r = [];
i.list(v, {
namespace: n.input.selectedProject.metadata.name
}, null, {
errorNotification: !1
}).then(function(a) {
t = p(a.by("metadata.name")), n.valueFromNamespace[e.metadata.name] = t.concat(r);
}, function(e) {
<<<<<<< 108d45a2ac9babe3c2b0751225807b0260dca3b6
403 !== e.code && c.addNotification({
=======
403 !== e.status && l.addNotification({
>>>>>>> Update directives/deployImage to use getPreferredVersion
id: "deploy-image-list-config-maps-error",
type: "error",
message: "Could not load config maps.",
details: y(e)
});
}), i.list(h, {
namespace: n.input.selectedProject.metadata.name
}, null, {
errorNotification: !1
}).then(function(a) {
r = p(a.by("metadata.name")), n.valueFromNamespace[e.metadata.name] = r.concat(t);
}, function(e) {
<<<<<<< 108d45a2ac9babe3c2b0751225807b0260dca3b6
403 !== e.code && c.addNotification({
=======
403 !== e.status && l.addNotification({
>>>>>>> Update directives/deployImage to use getPreferredVersion
id: "deploy-image-list-secrets-error",
type: "error",
message: "Could not load secrets.",
details: y(e)
});
});
}
} else n.mode = "istag";
});
var R, E = e("displayName"), T = function() {
var e = {
started: "Deploying image " + n.app.name + " to project " + E(n.input.selectedProject),
success: "Deployed image " + n.app.name + " to project " + E(n.input.selectedProject),
failure: "Failed to deploy image " + n.app.name + " to project " + E(n.input.selectedProject)
};
m.clear(), m.add(e, {}, n.input.selectedProject.metadata.name, function() {
var e = t.defer();
return i.batch(R, {
namespace: n.input.selectedProject.metadata.name
}).then(function(t) {
var r, a = !_.isEmpty(t.failure);
r = a ? (r = _.map(t.failure, function(e) {
return {
type: "error",
message: "Cannot create " + j(e.object.kind).toLowerCase() + ' "' + e.object.metadata.name + '". ',
details: e.data.message
};
})).concat(_.map(t.success, function(e) {
return {
type: "success",
message: "Created " + j(e.kind).toLowerCase() + ' "' + e.metadata.name + '" successfully. '
};
})) : [ {
type: "success",
message: "All resources for image " + n.app.name + " were created successfully."
} ], e.resolve({
alerts: r,
hasErrors: a
});
}), e.promise;
}), n.isDialog ? n.$emit("deployImageNewAppCreated", {
project: n.input.selectedProject,
appName: n.app.name
}) : c.toNextSteps(n.app.name, n.input.selectedProject.metadata.name);
}, N = function(e) {
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
a.open({
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
r.open({
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
animation: !0,
templateUrl: "views/modals/confirm.html",
controller: "ConfirmModalController",
resolve: {
modalConfig: function() {
return {
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
alerts: a,
=======
alerts: e,
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
message: "Problems were detected while checking your application configuration.",
okButtonText: "Create Anyway",
okButtonClass: "btn-danger",
cancelButtonText: "Cancel"
};
}
}
}).result.then(T);
}, D = function(e) {
b = e.quotaAlerts || [];
var t = _.filter(b, {
type: "error"
});
<<<<<<< 108d45a2ac9babe3c2b0751225807b0260dca3b6
<<<<<<< 3087d5859f05def6301fced3a013ac9165fd8c7a
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
b.result.then(C);
}, E = function(a) {
s = a.quotaAlerts || [];
var b = _.filter(s, {
type: "error"
});
c.nameTaken || b.length ? (c.disableInputs = !1, _.each(s, function(a) {
a.id = _.uniqueId("deploy-image-alert-"), i.addNotification(a);
})) : s.length ? (D(s), c.disableInputs = !1) : C();
};
c.create = function() {
c.disableInputs = !0, t(), u().then(function(a) {
c.input.selectedProject = a, A = m();
var b = e.ifResourcesDontExist(A, c.input.selectedProject.metadata.name), d = k.getLatestQuotaAlerts(A, {
namespace: c.input.selectedProject.metadata.name
}), f = function(a) {
return c.nameTaken = a.nameTaken, d;
};
b.then(f, f).then(E, E);
}, function(a) {
c.disableInputs = !1, "AlreadyExists" === a.data.reason ? c.projectNameTaken = !0 : i.addNotification({
id: "deploy-image-create-project-error",
type: "error",
message: "An error occurred creating project.",
details: r(a)
});
});
}, c.$on("newAppFromDeployImage", c.create), c.$on("$destroy", t);
=======
n.nameTaken || t.length ? (n.disableInputs = !1, _.each(h, function(e) {
=======
n.nameTaken || t.length ? (n.disableInputs = !1, _.each(v, function(e) {
>>>>>>> Add SVG icons
e.id = _.uniqueId("deploy-image-alert-"), c.addNotification(e);
})) : v.length ? (R(v), n.disableInputs = !1) : I();
=======
n.nameTaken || t.length ? (n.disableInputs = !1, _.each(b, function(e) {
e.id = _.uniqueId("deploy-image-alert-"), l.addNotification(e);
})) : b.length ? (N(b), n.disableInputs = !1) : T();
>>>>>>> Update directives/deployImage to use getPreferredVersion
};
n.create = function() {
n.disableInputs = !0, S(), C().then(function(e) {
n.input.selectedProject = e, R = a();
var t = o.ifResourcesDontExist(R, n.input.selectedProject.metadata.name), r = d.getLatestQuotaAlerts(R, {
namespace: n.input.selectedProject.metadata.name
}), i = function(e) {
return n.nameTaken = e.nameTaken, r;
};
t.then(i, i).then(D, D);
}, function(e) {
n.disableInputs = !1, "AlreadyExists" === e.data.reason ? n.projectNameTaken = !0 : l.addNotification({
id: "deploy-image-create-project-error",
type: "error",
message: "An error occurred creating project.",
details: y(e)
});
});
<<<<<<< 108d45a2ac9babe3c2b0751225807b0260dca3b6
<<<<<<< 3087d5859f05def6301fced3a013ac9165fd8c7a
}, n.$on("newAppFromDeployImage", n.create), n.$on("$destroy", v);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
}, n.$on("newAppFromDeployImage", n.create), n.$on("$destroy", h);
>>>>>>> Add SVG icons
=======
}, n.$on("newAppFromDeployImage", n.create), n.$on("$destroy", S);
>>>>>>> Update directives/deployImage to use getPreferredVersion
}
};
} ]), angular.module("openshiftConsole").directive("selector", function() {
return {
restrict: "E",
scope: {
selector: "="
},
templateUrl: "views/directives/selector.html"
};
}), angular.module("openshiftConsole").directive("selectContainers", function() {
return {
restrict: "E",
scope: {
containers: "=ngModel",
template: "=podTemplate",
required: "=ngRequired",
helpText: "@?"
},
templateUrl: "views/directives/select-containers.html",
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
controller: [ "$scope", function(a) {
a.containers = a.containers || {}, a.$watch("containers", function(b) {
a.containerSelected = _.some(b, function(a) {
return a;
=======
controller: [ "$scope", function(e) {
e.containers = e.containers || {}, e.$watch("containers", function(t) {
e.containerSelected = _.some(t, function(e) {
return e;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
});
}, !0);
} ]
};
}), angular.module("openshiftConsole").directive("buildHooks", function() {
return {
restrict: "E",
templateUrl: "views/directives/build-hooks.html",
scope: {
build: "="
}
};
}), angular.module("openshiftConsole").directive("pauseRolloutsCheckbox", [ "APIService", function(e) {
return {
restrict: "E",
scope: {
deployment: "=",
disabled: "=ngDisabled",
alwaysVisible: "="
},
templateUrl: "views/directives/pause-rollouts-checkbox.html",
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
link: function(b) {
var c = function() {
if (!b.deployment) return !1;
var c = a.objectToResourceGroupVersion(b.deployment);
return "deploymentconfigs" === c.resource && !c.group;
};
b.$watch("deployment.spec.triggers", function(a) {
b.missingConfigChangeTrigger = c() && !_.some(a, {
=======
link: function(t) {
var n = function() {
if (!t.deployment) return !1;
var n = e.objectToResourceGroupVersion(t.deployment);
return "deploymentconfigs" === n.resource && !n.group;
};
t.$watch("deployment.spec.triggers", function(e) {
t.missingConfigChangeTrigger = n() && !_.some(e, {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
type: "ConfigChange"
});
}, !0);
}
};
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
} ]), function() {
angular.module("openshiftConsole").directive("keyValueEditor", [ "$routeParams", "$timeout", "$filter", "gettextCatalog", "keyValueEditorConfig", "keyValueEditorUtils", function(a, b, c, d, e, f) {
var g = c("humanizeKind"), h = c("canI"), i = 1e3;
=======
} ]), angular.module("openshiftConsole").directive("keyValueEditor", [ "$routeParams", "$timeout", "$filter", "keyValueEditorConfig", "keyValueEditorUtils", function(e, t, n, a, r) {
=======
} ]), angular.module("openshiftConsole").directive("keyValueEditor", [ "$routeParams", "$timeout", "$filter", "keyValueEditorConfig", "keyValueEditorUtils", function(e, t, n, r, a) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
var o = n("humanizeKind"), i = n("canI"), s = 1e3;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
return {
restrict: "AE",
scope: {
keyMinlength: "@",
keyMaxlength: "@",
valueMinlength: "@",
valueMaxlength: "@",
entries: "=",
keyPlaceholder: "@",
valuePlaceholder: "@",
keyValidator: "@",
keyValidatorRegex: "=",
valueValidator: "@",
valueValidatorRegex: "=",
keyValidatorError: "@",
keyValidatorErrorTooltip: "@",
keyValidatorErrorTooltipIcon: "@",
valueValidatorError: "@",
valueValidatorErrorTooltip: "@",
valueValidatorErrorTooltipIcon: "@",
valueIconTooltip: "@",
valueFromSelectorOptions: "=",
cannotAdd: "=?",
cannotSort: "=?",
cannotDelete: "=?",
isReadonly: "=?",
isReadonlyValue: "=?",
isReadonlyKeys: "=?",
addRowLink: "@",
addRowWithSelectorsLink: "@",
showHeader: "=?",
allowEmptyKeys: "=?",
keyRequiredError: "@"
},
templateUrl: "views/directives/key-value-editor.html",
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
link: function(a, c, f) {
var h;
a.validation = {
key: a.keyValidator,
val: a.valueValidator
}, f.keyValidatorRegex && (a.validation.key = a.keyValidatorRegex), f.valueValidatorRegex && (a.validation.val = a.valueValidatorRegex), "grabFocus" in f && (a.grabFocus = !0, b(function() {
a.grabFocus = void 0;
})), "cannotAdd" in f && (a.cannotAdd = !0), "cannotDelete" in f && (a.cannotDeleteAny = !0), "isReadonly" in f && (a.isReadonlyAny = !0), "isReadonlyKeys" in f && (h = a.$watch("entries", function(b) {
b && (_.each(a.entries, function(a) {
a.isReadonlyKey = !0;
}), h());
})), "cannotSort" in f && (a.cannotSort = !0), "showHeader" in f && (a.showHeader = !0), "allowEmptyKeys" in f && (a.allowEmptyKeys = !0), a.groupByKind = function(a) {
return d.getString(g(a.kind));
}, a.valueFromObjectSelected = function(a, b) {
"ConfigMap" === b.kind ? (a.valueFrom.configMapKeyRef = {
name: b.metadata.name
}, delete a.valueFrom.secretKeyRef) : "Secret" === b.kind && (a.valueFrom.secretKeyRef = {
name: b.metadata.name
}, delete a.valueFrom.configMapKeyRef), delete a.valueFrom.key;
}, a.valueFromKeySelected = function(a, b) {
return a.valueFrom.configMapKeyRef ? void (a.valueFrom.configMapKeyRef.key = b) : a.valueFrom.secretKeyRef ? void (a.valueFrom.secretKeyRef.key = b) : void 0;
}, angular.extend(a, {
keyMinlength: e.keyMinlength || f.keyMinlength,
keyMaxlength: e.keyMaxlength || f.keyMaxlength,
valueMinlength: e.valueMinlength || f.valueMinlength,
valueMaxlength: e.valueMaxlength || f.valueMaxlength,
keyValidator: e.keyValidator || f.keyValidator,
valueValidator: e.valueValidator || f.valueValidator,
keyValidatorError: e.keyValidatorError || f.keyValidatorError,
valueValidatorError: e.valueValidatorError || f.valueValidatorError,
keyRequiredError: e.keyRequiredError || f.keyRequiredError,
keyValidatorErrorTooltip: e.keyValidatorErrorTooltip || f.keyValidatorErrorTooltip,
keyValidatorErrorTooltipIcon: e.keyValidatorErrorTooltipIcon || f.keyValidatorErrorTooltipIcon,
valueValidatorErrorTooltip: e.valueValidatorErrorTooltip || f.valueValidatorErrorTooltip,
valueValidatorErrorTooltipIcon: e.valueValidatorErrorTooltipIcon || f.valueValidatorErrorTooltipIcon,
keyPlaceholder: e.keyPlaceholder || f.keyPlaceholder,
valuePlaceholder: e.valuePlaceholder || f.valuePlaceholder
});
},
controller: [ "$scope", function(b) {
var c = [], d = [], e = i++, g = h("secrets", "get"), j = h("configmaps", "get");
angular.extend(b, {
namespace: a.project,
unique: e,
forms: {},
placeholder: f.newEntry(),
setFocusKeyClass: "key-value-editor-set-focus-key-" + e,
setFocusValClass: "key-value-editor-set-focus-value-" + e,
uniqueForKey: f.uniqueForKey,
uniqueForValue: f.uniqueForValue,
dragControlListeners: {
accept: function(a, b) {
return a.itemScope.sortableScope.$id === b.$id;
},
orderChanged: function() {
b.forms.keyValueEditor.$setDirty();
}
},
deleteEntry: function(a, c) {
b.entries.splice(a, c), !b.entries.length && b.addRowLink && f.addEntry(b.entries), b.forms.keyValueEditor.$setDirty();
},
isReadonlySome: function(a) {
return _.includes(c, a);
},
cannotDeleteSome: function(a) {
return _.includes(d, a);
},
onAddRow: function() {
f.addEntry(b.entries), f.setFocusOn("." + b.setFocusKeyClass);
},
onAddRowWithSelectors: function() {
f.addEntryWithSelectors(b.entries), f.setFocusOn("." + b.setFocusKeyClass);
},
isValueFromReadonly: function(a) {
return b.isReadonlyAny || a.isReadonlyValue || a.refType && !a.selectedValueFrom || _.isEmpty(b.valueFromSelectorOptions);
}
}), b.$watch("cannotDelete", function(a) {
angular.isArray(a) && (b.cannotDeleteAny = !1, d = a);
}), b.$watch("isReadonly", function(a) {
angular.isArray(a) && (b.isReadonlyAny = !1, c = a);
}), b.$watch("addRowLink", function(a) {
b.addRowLink = a || "Add row", b.entries && !b.entries.length && f.addEntry(b.entries);
}), b.$watch("entries", function(a) {
a && !a.length && f.addEntry(b.entries), _.each(b.entries, function(a) {
f.altTextForValueFrom(a, b.namespace), f.setEntryPerms(a, g, j);
}), f.findReferenceValueForEntries(a, b.valueFromSelectorOptions);
}), b.$watch("valueFromSelectorOptions", function() {
f.findReferenceValueForEntries(b.entries, b.valueFromSelectorOptions);
});
} ]
};
} ]);
}(), angular.module("openshiftConsole").directive("confirmOnExit", [ "Logger", "gettext", "gettextCatalog", function(a, b, c) {
=======
link: function(e, n, r) {
=======
link: function(e, n, a) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
var i;
e.validation = {
key: e.keyValidator,
val: e.valueValidator
}, a.keyValidatorRegex && (e.validation.key = e.keyValidatorRegex), a.valueValidatorRegex && (e.validation.val = e.valueValidatorRegex), "grabFocus" in a && (e.grabFocus = !0, t(function() {
e.grabFocus = void 0;
})), "cannotAdd" in a && (e.cannotAdd = !0), "cannotDelete" in a && (e.cannotDeleteAny = !0), "isReadonly" in a && (e.isReadonlyAny = !0), "isReadonlyKeys" in a && (i = e.$watch("entries", function(t) {
t && (_.each(e.entries, function(e) {
e.isReadonlyKey = !0;
}), i());
})), "cannotSort" in a && (e.cannotSort = !0), "showHeader" in a && (e.showHeader = !0), "allowEmptyKeys" in a && (e.allowEmptyKeys = !0), e.groupByKind = function(e) {
return o(e.kind);
}, e.valueFromObjectSelected = function(e, t) {
"ConfigMap" === t.kind ? (e.valueFrom.configMapKeyRef = {
name: t.metadata.name
}, delete e.valueFrom.secretKeyRef) : "Secret" === t.kind && (e.valueFrom.secretKeyRef = {
name: t.metadata.name
}, delete e.valueFrom.configMapKeyRef), delete e.valueFrom.key;
}, e.valueFromKeySelected = function(e, t) {
e.valueFrom.configMapKeyRef ? e.valueFrom.configMapKeyRef.key = t : e.valueFrom.secretKeyRef && (e.valueFrom.secretKeyRef.key = t);
}, angular.extend(e, {
keyMinlength: r.keyMinlength || a.keyMinlength,
keyMaxlength: r.keyMaxlength || a.keyMaxlength,
valueMinlength: r.valueMinlength || a.valueMinlength,
valueMaxlength: r.valueMaxlength || a.valueMaxlength,
keyValidator: r.keyValidator || a.keyValidator,
valueValidator: r.valueValidator || a.valueValidator,
keyValidatorError: r.keyValidatorError || a.keyValidatorError,
valueValidatorError: r.valueValidatorError || a.valueValidatorError,
keyRequiredError: r.keyRequiredError || a.keyRequiredError,
keyValidatorErrorTooltip: r.keyValidatorErrorTooltip || a.keyValidatorErrorTooltip,
keyValidatorErrorTooltipIcon: r.keyValidatorErrorTooltipIcon || a.keyValidatorErrorTooltipIcon,
valueValidatorErrorTooltip: r.valueValidatorErrorTooltip || a.valueValidatorErrorTooltip,
valueValidatorErrorTooltipIcon: r.valueValidatorErrorTooltipIcon || a.valueValidatorErrorTooltipIcon,
keyPlaceholder: r.keyPlaceholder || a.keyPlaceholder,
valuePlaceholder: r.valuePlaceholder || a.valuePlaceholder
});
},
controller: [ "$scope", function(t) {
var n = [], r = [], o = s++, c = i("secrets", "get"), l = i("configmaps", "get");
angular.extend(t, {
namespace: e.project,
unique: o,
forms: {},
placeholder: a.newEntry(),
setFocusKeyClass: "key-value-editor-set-focus-key-" + o,
setFocusValClass: "key-value-editor-set-focus-value-" + o,
uniqueForKey: a.uniqueForKey,
uniqueForValue: a.uniqueForValue,
dragControlListeners: {
accept: function(e, t) {
return console.log("accept?"), e.itemScope.sortableScope.$id === t.$id;
},
orderChanged: function() {
t.forms.keyValueEditor.$setDirty();
},
itemMoved: function(e) {
console.log("itemMoved"), console.log("event", e), console.log("source", e.source), console.log("dest", e.dest), e.source.itemScope.modelValue.status = e.dest.sortableScope.$parent.column.name, t.forms.keyValueEditor.$setDirty();
}
},
deleteEntry: function(e, n) {
t.entries.splice(e, n), !t.entries.length && t.addRowLink && r.addEntry(t.entries), t.forms.keyValueEditor.$setDirty();
},
isReadonlySome: function(e) {
return _.includes(n, e);
},
cannotDeleteSome: function(e) {
return _.includes(a, e);
},
onAddRow: function() {
r.addEntry(t.entries), r.setFocusOn("." + t.setFocusKeyClass);
},
onAddRowWithSelectors: function() {
r.addEntryWithSelectors(t.entries), r.setFocusOn("." + t.setFocusKeyClass);
},
isValueFromReadonly: function(e) {
return t.isReadonlyAny || e.isReadonlyValue || e.refType && !e.selectedValueFrom || _.isEmpty(t.valueFromSelectorOptions);
}
}), t.$watch("cannotDelete", function(e) {
angular.isArray(e) && (t.cannotDeleteAny = !1, a = e);
}), t.$watch("isReadonly", function(e) {
angular.isArray(e) && (t.isReadonlyAny = !1, n = e);
}), t.$watch("addRowLink", function(e) {
t.addRowLink = e || "Add row", t.entries && !t.entries.length && r.addEntry(t.entries);
}), t.$watch("entries", function(e) {
e && !e.length && r.addEntry(t.entries), _.each(t.entries, function(e) {
r.altTextForValueFrom(e, t.namespace), r.setEntryPerms(e, c, l);
}), r.findReferenceValueForEntries(e, t.valueFromSelectorOptions);
}), t.$watch("valueFromSelectorOptions", function() {
r.findReferenceValueForEntries(t.entries, t.valueFromSelectorOptions);
});
} ]
};
} ]), angular.module("openshiftConsole").directive("confirmOnExit", [ "Logger", function(e) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
return {
scope: {
dirty: "=",
message: "="
},
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
link: function(d) {
if (!_.get(window, "OPENSHIFT_CONSTANTS.DISABLE_CONFIRM_ON_EXIT") && !_.get(window, "OPENSHIFT_CONSTANTS.CONFIRM_DIALOG_BLOCKED")) {
var e = function() {
return d.message || c.getString(b("You have unsaved changes. Leave this page anyway?"));
}, f = function() {
if (d.dirty) return e();
};
$(window).on("beforeunload", f);
var g = d.$on("$routeChangeStart", function(b) {
if (d.dirty) {
var c = new Date().getTime(), f = confirm(e());
if (!f) {
var g = new Date().getTime();
g - c < 50 ? (_.set(window, "OPENSHIFT_CONSTANTS.CONFIRM_DIALOG_BLOCKED", !0), a.warn("Confirm on exit prompt appears to have been blocked by the browser.")) : b.preventDefault();
}
}
});
d.$on("$destroy", function() {
$(window).off("beforeunload", f), g && g();
});
}
}
};
} ]), function() {
function a(a) {
var b, c = this, d = function(a) {
return jsyaml.safeLoad(c.model, {
json: !a
});
}, e = function() {
b.getSession().clearAnnotations(), a.$evalAsync(function() {
c.annotations = {};
});
}, f = function(d, e) {
var f = b.getSession(), g = f.getLength(), h = _.get(d, "mark.line", 0), i = _.get(d, "mark.column", 0), j = d.message || "Could not parse content.";
h >= g && (h = g - 1);
var k = {
row: h,
column: i,
text: j,
type: e
};
f.setAnnotations([ k ]), a.$evalAsync(function() {
c.annotations = {}, c.annotations[e] = [ k ];
});
}, g = function(b) {
a.$evalAsync(function() {
c.form.$setValidity("yamlValid", b);
=======
link: function(t) {
if (!_.get(window, "OPENSHIFT_CONSTANTS.DISABLE_CONFIRM_ON_EXIT") && !_.get(window, "OPENSHIFT_CONSTANTS.CONFIRM_DIALOG_BLOCKED")) {
var n = function() {
return t.message || "You have unsaved changes. Leave this page anyway?";
}, a = function() {
if (t.dirty) return n();
};
$(window).on("beforeunload", a);
var r = t.$on("$routeChangeStart", function(a) {
if (t.dirty) {
var r = new Date().getTime();
confirm(n()) || (new Date().getTime() - r < 50 ? (_.set(window, "OPENSHIFT_CONSTANTS.CONFIRM_DIALOG_BLOCKED", !0), e.warn("Confirm on exit prompt appears to have been blocked by the browser.")) : a.preventDefault());
}
});
t.$on("$destroy", function() {
$(window).off("beforeunload", a), r && r();
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
});
}, h = function(a, b) {
var h;
try {
h = d(!1), g(!0), a !== b && (c.resource = h);
try {
d(!0), e();
} catch (i) {
f(i, "warning");
}
} catch (i) {
f(i, "error"), g(!1);
}
};
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
a.$watch(function() {
return c.fileUpload;
}, function(a, b) {
a !== b && (c.model = a);
}), c.$onInit = function() {
c.resource && (c.model = jsyaml.safeDump(c.resource, {
sortKeys: !0
}));
}, c.aceLoaded = function(a) {
b = a;
var c = a.getSession();
c.setOption("tabSize", 2), c.setOption("useSoftTabs", !0), a.setDragDelay = 0;
}, a.$watch(function() {
return c.model;
}, h), c.gotoLine = function(a) {
b.gotoLine(a);
};
}
angular.module("openshiftConsole").component("uiAceYaml", {
controller: [ "$scope", a ],
controllerAs: "$ctrl",
bindings: {
resource: "=",
ngRequired: "<?",
showFileInput: "<?"
},
templateUrl: "views/directives/ui-ace-yaml.html"
});
}(), angular.module("openshiftConsole").directive("affix", [ "$window", function(a) {
return {
restrict: "AE",
scope: {
offsetTop: "@",
offsetBottom: "@"
},
link: function(a, b, c, d) {
b.affix({
offset: {
top: c.offsetTop,
bottom: c.offsetBottom
}
});
}
};
} ]), function() {
function a(a, b, c, d, e) {
var f, g, h, i, j = this, k = !1, l = [], m = [], n = !1, o = a("canI"), p = a("getErrorDetails"), q = a("humanizeKind"), r = a("orderByDisplayName"), s = function(a, b) {
if (!k) {
if (!j.form || j.form.$pristine || !j.updatedObject) return void (j.updatedObject = d.copyAndNormalize(a));
if (d.isEnvironmentEqual(a, b)) return void (j.updatedObject = d.mergeEdits(j.updatedObject, a));
k = !0, e.addNotification({
type: "warning",
message: "The environment variables for the " + f + " have been updated in the background.",
details: "Saving your changes may create a conflict or cause loss of data."
});
}
}, t = function() {
c.list("configmaps", {
namespace: j.apiObject.metadata.namespace
}).then(function(a) {
l = r(a.by("metadata.name")), j.valueFromObjects = l.concat(m);
});
}, u = function() {
o("secrets", "list") && c.list("secrets", {
namespace: j.apiObject.metadata.namespace
}).then(function(a) {
m = r(a.by("metadata.name")), j.valueFromObjects = l.concat(m);
});
}, v = function() {
n || (n = !0, t(), u());
}, w = function(a, c) {
f = q(a.kind), g = a.metadata.name, h = b.objectToResourceGroupVersion(a), j.canIUpdate = o(h, "update"), i ? i["finally"](function() {
s(a, c);
}) : s(a, c), j.containers = d.getContainers(j.updatedObject), j.disableValueFrom || j.ngReadonly || !j.canIUpdate || v();
};
j.$onChanges = function(a) {
a.apiObject && a.apiObject.currentValue && w(a.apiObject.currentValue, a.apiObject.previousValue);
}, j.save = function() {
var a = "save-env-error-" + g;
e.hideNotification(a), d.compact(j.updatedObject), i = c.update(h, g, j.updatedObject, {
namespace: j.updatedObject.metadata.namespace
}), i.then(function() {
e.addNotification({
type: "success",
message: "Environment variables for " + f + " " + g + " were successfully updated."
}), j.form.$setPristine();
}, function(b) {
e.addNotification({
id: a,
type: "error",
message: "An error occurred updating environment variables for " + f + " " + g + ".",
details: p(b)
});
})["finally"](function() {
i = null;
});
}, j.clearChanges = function() {
j.updatedObject = d.copyAndNormalize(j.apiObject), j.containers = d.getContainers(j.updatedObject), j.form.$setPristine(), k = !1;
};
}
angular.module("openshiftConsole").component("editEnvironmentVariables", {
controller: [ "$filter", "APIService", "DataService", "EnvironmentService", "NotificationsService", a ],
controllerAs: "$ctrl",
bindings: {
apiObject: "<",
ngReadonly: "<",
disableValueFrom: "<"
},
templateUrl: "views/directives/edit-environment-variables.html"
});
}(), angular.module("openshiftConsole").component("initContainersSummary", {
bindings: {
apiObject: "<"
},
templateUrl: "views/_init-containers-summary.html",
controller: [ "$filter", function(a) {
var b = this;
b.$onChanges = function(c) {
var d = _.get(c.apiObject, "currentValue");
if (d) switch (b.podTemplate = a("podTemplate")(d), d.kind) {
case "DeploymentConfig":
case "Deployment":
b.tab = "configuration";
break;

default:
b.tab = "details";
}
};
} ]
}), function() {
function a(a, b, c, d) {
var e = this, f = _.get(d, "DISABLE_GLOBAL_EVENT_WATCH"), g = a("isIE")();
e.hide = !0;
var h = [], i = [], j = function(a, b) {
a && i.push(c.$on("NotificationDrawerWrapper.onUnreadNotifications", b));
}, k = function() {
_.each(i, function(a) {
a && a();
}), i = [];
}, l = function() {
_.each(h, function(a) {
a();
}), h = [];
}, m = function(a) {
a ? e.hide = !1 : e.hide = !0;
};
e.onClick = function() {
c.$emit("NotificationDrawerWrapper.toggle");
};
var n = function(a, b) {
b ? e.showUnreadNotificationsIndicator = !0 : e.showUnreadNotificationsIndicator = !1;
}, o = function(a, b) {
return _.get(a, "params.project") !== _.get(b, "params.project");
}, p = function() {
j(b.project, n), m(b.project);
}, q = function() {
p(), h.push(c.$on("$routeChangeSuccess", function(a, b, c) {
o(b, c) && p();
})), h.push(c.$on("NotificationDrawerWrapper.onMarkAllRead", function() {
e.showUnreadNotificationsIndicator = !1;
}));
};
e.$onInit = function() {
return f || g ? void (e.hide = !0) : void q();
}, e.$onDestroy = function() {
k(), l();
};
}
angular.module("openshiftConsole").component("notificationCounter", {
templateUrl: "views/directives/notifications/notification-counter.html",
bindings: {},
controller: [ "$filter", "$routeParams", "$rootScope", "Constants", a ]
});
}(), function() {
function a(a, b, c, d, e, f, g, h, i) {
var j, k, l = _.get(g, "DISABLE_GLOBAL_EVENT_WATCH"), m = a("isIE")(), n = this, o = [], p = {}, q = {}, r = {}, s = function(a) {
a || (n.drawerHidden = !0);
}, t = function(a, b) {
return _.get(a, "params.project") !== _.get(b, "params.project");
}, u = function(a) {
return h.get("projects", a, {}, {
errorNotification: !1
}).then(function(a) {
return r[a.metadata.name] = a, a;
});
}, v = function(b, c) {
return {
heading: a("displayName")(r[b]),
project: r[b],
notifications: c
};
}, w = function(a) {
return _.filter(a, "unread");
}, x = function() {
_.each(n.notificationGroups, function(a) {
a.totalUnread = w(a.notifications).length, a.hasUnread = !!a.totalUnread, f.$emit("NotificationDrawerWrapper.onUnreadNotifications", a.totalUnread);
});
}, y = function(a) {
_.each(n.notificationGroups, function(b) {
_.remove(b.notifications, {
uid: a.uid,
namespace: a.namespace
});
});
}, z = function(a) {
q[e.project] && delete q[e.project][a.uid], p[e.project] && delete p[e.project][a.uid], y(a);
}, A = function() {
p[e.project] = {}, q[e.project] = {};
}, B = function(a) {
return _.reduce(a, function(a, b) {
return a[b.metadata.uid] = {
actions: null,
uid: b.metadata.uid,
trackByID: b.metadata.uid,
unread: !i.isRead(b.metadata.uid),
type: b.type,
lastTimestamp: b.lastTimestamp,
firstTimestamp: b.firstTimestamp,
event: b
}, a;
}, {});
}, C = function(a) {
return _.reduce(a, function(a, b) {
return i.isImportantAPIEvent(b) && !i.isCleared(b.metadata.uid) && (a[b.metadata.uid] = b), a;
}, {});
}, D = function(a, b) {
var c = e.project;
return _.assign({}, a[c], b[c]);
}, E = function(a) {
return _.orderBy(a, [ "event.lastTimestamp", "event.metadata.resourceVersion" ], [ "desc", "desc" ]);
}, F = function() {
f.$evalAsync(function() {
n.notificationGroups = [ v(e.project, E(D(p, q))) ], x();
});
}, G = function() {
_.each(o, function(a) {
a();
}), o = [];
}, H = function() {
k && (h.unwatch(k), k = null);
}, I = function() {
j && j(), j = null;
}, J = function(a) {
p[e.project] = B(C(a.by("metadata.name"))), F();
}, K = function(a, b) {
var c = b.namespace || e.project, d = b.id ? c + "/" + b.id : _.uniqueId("notification_") + Date.now();
b.showInDrawer && !i.isCleared(d) && (q[c] = q[c] || {}, q[c][d] = {
actions: b.actions,
unread: !i.isRead(d),
trackByID: b.trackByID,
uid: d,
type: b.type,
lastTimestamp: b.timestamp,
message: b.message,
isHTML: b.isHTML,
details: b.details,
namespace: c,
links: b.links
}, F());
}, L = function(a, b) {
H(), a && (k = h.watch("events", {
namespace: a
}, _.debounce(b, 400), {
skipDigest: !0
}));
}, M = _.once(function(a, b) {
I(), j = f.$on("NotificationsService.onNotificationAdded", b);
}), N = function() {
u(e.project).then(function() {
L(e.project, J), M(e.project, K), s(e.project), F();
});
};
angular.extend(n, {
drawerHidden: !0,
allowExpand: !0,
drawerExpanded: !1,
drawerTitle: "Notifications",
hasUnread: !1,
showClearAll: !0,
showMarkAllRead: !0,
onClose: function() {
n.drawerHidden = !0;
},
onMarkAllRead: function(a) {
_.each(a.notifications, function(a) {
a.unread = !1, i.markRead(a.uid);
}), F(), f.$emit("NotificationDrawerWrapper.onMarkAllRead");
},
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
onClearAll: function(a) {
_.each(a.notifications, function(a) {
a.unread = !1, i.markRead(a.uid), i.markCleared(a.uid);
}), A(), F(), f.$emit("NotificationDrawerWrapper.onMarkAllRead");
=======
deleteEntry: function(e, n) {
t.entries.splice(e, n), !t.entries.length && t.addRowLink && a.addEntry(t.entries), t.forms.keyValueEditor.$setDirty();
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
},
notificationGroups: [],
headingInclude: "views/directives/notifications/header.html",
notificationBodyInclude: "views/directives/notifications/notification-body.html",
customScope: {
clear: function(a, b, c) {
i.markRead(a.uid), i.markCleared(a.uid), c.notifications.splice(b, 1), z(a), F();
},
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
markRead: function(a) {
a.unread = !1, i.markRead(a.uid), F();
},
close: function() {
n.drawerHidden = !0;
},
onLinkClick: function(a) {
a.onClick(), n.drawerHidden = !0;
=======
cannotDeleteSome: function(e) {
return _.includes(r, e);
},
onAddRow: function() {
a.addEntry(t.entries), a.setFocusOn("." + t.setFocusKeyClass);
},
onAddRowWithSelectors: function() {
a.addEntryWithSelectors(t.entries), a.setFocusOn("." + t.setFocusKeyClass);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
},
countUnreadNotifications: x
}
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
=======
}), t.$watch("cannotDelete", function(e) {
angular.isArray(e) && (t.cannotDeleteAny = !1, r = e);
}), t.$watch("isReadonly", function(e) {
angular.isArray(e) && (t.isReadonlyAny = !1, n = e);
}), t.$watch("addRowLink", function(e) {
t.addRowLink = e || "Add row", t.entries && !t.entries.length && a.addEntry(t.entries);
}), t.$watch("entries", function(e) {
e && !e.length && a.addEntry(t.entries), _.each(t.entries, function(e) {
a.altTextForValueFrom(e, t.namespace), a.setEntryPerms(e, c, l);
}), a.findReferenceValueForEntries(e, t.valueFromSelectorOptions);
}), t.$watch("valueFromSelectorOptions", function() {
a.findReferenceValueForEntries(t.entries, t.valueFromSelectorOptions);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
});
var O = function() {
e.project && N(), o.push(f.$on("$routeChangeSuccess", function(a, b, c) {
t(b, c) && (n.customScope.projectName = e.project, N());
})), o.push(f.$on("NotificationDrawerWrapper.toggle", function() {
n.drawerHidden = !n.drawerHidden;
})), o.push(f.$on("NotificationDrawerWrapper.hide", function() {
n.drawerHidden = !0;
})), o.push(f.$on("NotificationDrawerWrapper.clear", function(a, b) {
i.markCleared(b.uid), z(b), n.countUnreadNotifications();
}));
};
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< 9854a04a93530a5cbed260dddc4991d2b65730e5
n.$onInit = function() {
l || m || O();
}, n.$onDestroy = function() {
I(), H(), G();
};
=======
} ]), angular.module("openshiftConsole").directive("confirmOnExit", [ "Logger", function(e) {
return {
scope: {
dirty: "=",
message: "="
},
link: function(t) {
if (!_.get(window, "OPENSHIFT_CONSTANTS.DISABLE_CONFIRM_ON_EXIT") && !_.get(window, "OPENSHIFT_CONSTANTS.CONFIRM_DIALOG_BLOCKED")) {
var n = function() {
return t.message || "You have unsaved changes. Leave this page anyway?";
}, r = function() {
if (t.dirty) return n();
};
$(window).on("beforeunload", r);
var a = t.$on("$routeChangeStart", function(r) {
if (t.dirty) {
var a = new Date().getTime();
confirm(n()) || (new Date().getTime() - a < 50 ? (_.set(window, "OPENSHIFT_CONSTANTS.CONFIRM_DIALOG_BLOCKED", !0), e.warn("Confirm on exit prompt appears to have been blocked by the browser.")) : r.preventDefault());
}
});
t.$on("$destroy", function() {
$(window).off("beforeunload", r), a && a();
});
}
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}
angular.module("openshiftConsole").component("notificationDrawerWrapper", {
templateUrl: "views/directives/notifications/notification-drawer-wrapper.html",
controller: [ "$filter", "$interval", "$location", "$timeout", "$routeParams", "$rootScope", "Constants", "DataService", "EventsService", "NotificationsService", a ]
});
}(), angular.module("openshiftConsole").filter("duration", [ "gettext", "gettextCatalog", function(a, b) {
return function(c, d, e, f) {
function g(a, b, c) {
if (0 !== a) return 1 === a ? void (e ? j.push(b) : j.push("1 " + b)) : void j.push(a + " " + c);
}
if (!c) return c;
f = f || 2, d = d || new Date();
var h = moment(d).diff(c);
h < 0 && (h = 0);
var i = moment.duration(h), j = [], k = i.years(), l = i.months(), m = i.days(), n = i.hours(), o = i.minutes(), p = i.seconds();
return g(k, b.getString(a("year")), b.getString(a("years"))), g(l, b.getString(a("month")), b.getString(a("months"))), g(m, b.getString(a("day")), b.getString(a("days"))), g(n, b.getString(a("hour")), b.getString(a("hours"))), g(o, b.getString(a("minute")), b.getString(a("minutes"))), g(p, b.getString(a("second")), b.getString(a("seconds"))), 1 === j.length && p && 1 === f ? e ? "minute" : "1 minute" : (0 === j.length && j.push("0 seconds"), j.length > f && (j.length = f), j.join(", "));
};
} ]).filter("ageLessThan", function() {
return function(a, b, c) {
return moment().subtract(b, c).diff(moment(a)) < 0;
=======
} ]), angular.module("openshiftConsole").filter("duration", function() {
=======
} ]), function() {
angular.module("openshiftConsole").component("uiAceYaml", {
controller: [ "$scope", function(e) {
var t, n = this, r = function(e) {
return jsyaml.safeLoad(n.model, {
json: !e
});
}, a = function() {
t.getSession().clearAnnotations(), e.$evalAsync(function() {
n.annotations = {};
});
}, o = function(r, a) {
var o = t.getSession(), i = o.getLength(), s = _.get(r, "mark.line", 0), c = _.get(r, "mark.column", 0), l = r.message || "Could not parse content.";
s >= i && (s = i - 1);
var u = {
row: s,
column: c,
text: l,
type: a
};
o.setAnnotations([ u ]), e.$evalAsync(function() {
n.annotations = {}, n.annotations[a] = [ u ];
});
}, i = function(t) {
e.$evalAsync(function() {
n.form.$setValidity("yamlValid", t);
});
};
n.onFileAdded = function(e) {
n.model = e;
}, n.$onInit = function() {
n.resource && (n.model = jsyaml.safeDump(n.resource, {
sortKeys: !0
}));
}, n.aceChanged = function() {
try {
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
n.resource = a(!1), i(!0);
=======
s = r(!1), i(!0), e !== t && (n.resource = s);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
try {
r(!0), a();
} catch (e) {
o(e, "warning");
}
} catch (e) {
o(e, "error"), i(!1);
}
}, n.aceLoaded = function(e) {
t = e;
var n = e.getSession();
n.setOption("tabSize", 2), n.setOption("useSoftTabs", !0), e.setDragDelay = 0;
}, n.gotoLine = function(e) {
t.gotoLine(e);
};
} ],
controllerAs: "$ctrl",
bindings: {
resource: "=",
ngRequired: "<?",
showFileInput: "<?"
},
templateUrl: "views/directives/ui-ace-yaml.html"
});
<<<<<<< b93368d5a70197ced8017a127baac07189b78e00
}(), angular.module("openshiftConsole").filter("duration", function() {
>>>>>>> Improve YAML editor validation and feedback
=======
}(), angular.module("openshiftConsole").directive("affix", [ "$window", function(e) {
return {
restrict: "AE",
scope: {
offsetTop: "@",
offsetBottom: "@"
},
link: function(e, t, n, r) {
t.affix({
offset: {
top: n.offsetTop,
bottom: n.offsetBottom
}
});
}
};
} ]), function() {
angular.module("openshiftConsole").component("editEnvironmentVariables", {
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
controller: [ "$filter", "APIService", "DataService", "EnvironmentService", "NotificationsService", function(e, t, n, a, r) {
var o, i, s, c, l = this, u = !1, d = [], m = [], p = !1, f = e("canI"), g = e("getErrorDetails"), v = e("humanizeKind"), h = e("orderByDisplayName"), y = function(e, t) {
u || (l.form && !l.form.$pristine && l.updatedObject ? a.isEnvironmentEqual(e, t) ? l.updatedObject = a.mergeEdits(e, t) : (u = !0, r.addNotification({
=======
controller: [ "$filter", "APIService", "DataService", "EnvironmentService", "NotificationsService", function(e, t, n, r, a) {
var o, i, s, c, l = this, u = t.getPreferredVersion("configmaps"), d = t.getPreferredVersion("secrets"), m = !1, p = [], f = [], g = !1, v = e("canI"), h = e("getErrorDetails"), y = e("humanizeKind"), b = e("orderByDisplayName"), S = function(e, t) {
m || (l.form && !l.form.$pristine && l.updatedObject ? r.isEnvironmentEqual(e, t) ? l.updatedObject = r.mergeEdits(l.updatedObject, e) : (m = !0, a.addNotification({
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
type: "warning",
message: "The environment variables for the " + o + " have been updated in the background.",
details: "Saving your changes may create a conflict or cause loss of data."
})) : l.updatedObject = r.copyAndNormalize(e));
}, C = function() {
n.list(u, {
namespace: l.apiObject.metadata.namespace
}).then(function(e) {
p = b(e.by("metadata.name")), l.valueFromObjects = p.concat(f);
});
}, _ = function() {
v("secrets", "list") && n.list(d, {
namespace: l.apiObject.metadata.namespace
}).then(function(e) {
f = b(e.by("metadata.name")), l.valueFromObjects = p.concat(f);
});
}, w = function() {
g || (g = !0, C(), _());
}, P = function(e, n) {
o = y(e.kind), i = e.metadata.name, s = t.objectToResourceGroupVersion(e), l.canIUpdate = v(s, "update"), c ? c.finally(function() {
S(e, n);
}) : S(e, n), l.containers = r.getContainers(l.updatedObject), l.disableValueFrom || l.ngReadonly || !l.canIUpdate || w();
};
l.$onChanges = function(e) {
e.apiObject && e.apiObject.currentValue && P(e.apiObject.currentValue, e.apiObject.previousValue);
}, l.save = function() {
var e = "save-env-error-" + i;
a.hideNotification(e), r.compact(l.updatedObject), (c = n.update(s, i, l.updatedObject, {
namespace: l.updatedObject.metadata.namespace
})).then(function() {
a.addNotification({
type: "success",
message: "Environment variables for " + o + " " + i + " were successfully updated."
}), l.form.$setPristine();
}, function(t) {
a.addNotification({
id: e,
type: "error",
message: "An error occurred updating environment variables for " + o + " " + i + ".",
details: h(t)
});
}).finally(function() {
c = null;
});
}, l.clearChanges = function() {
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
l.updatedObject = a.copyAndNormalize(l.apiObject), l.form.$setPristine(), u = !1;
=======
l.updatedObject = r.copyAndNormalize(l.apiObject), l.containers = r.getContainers(l.updatedObject), l.form.$setPristine(), m = !1;
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
};
} ],
controllerAs: "$ctrl",
bindings: {
apiObject: "<",
ngReadonly: "<",
disableValueFrom: "<"
},
templateUrl: "views/directives/edit-environment-variables.html"
});
}(), angular.module("openshiftConsole").component("initContainersSummary", {
bindings: {
apiObject: "<"
},
templateUrl: "views/_init-containers-summary.html",
controller: [ "$filter", function(e) {
var t = this;
t.$onChanges = function(n) {
var r = _.get(n.apiObject, "currentValue");
if (r) switch (t.podTemplate = e("podTemplate")(r), r.kind) {
case "DeploymentConfig":
case "Deployment":
t.tab = "configuration";
break;

default:
t.tab = "details";
}
};
} ]
<<<<<<< b9f74dc9163281caa65a7366573d340fa288654d
}), angular.module("openshiftConsole").filter("duration", function() {
>>>>>>> Bug 1476157 - Fix minification problems due to dependency injection
=======
}), function() {
angular.module("openshiftConsole").component("notificationCounter", {
templateUrl: "views/directives/notifications/notification-counter.html",
bindings: {},
controller: [ "$filter", "$routeParams", "$rootScope", "Constants", function(e, t, n, r) {
var a = this, o = _.get(r, "DISABLE_GLOBAL_EVENT_WATCH"), i = e("isIE")();
a.hide = !0;
var s = [], c = [], l = function(e, t) {
e && c.push(n.$on("NotificationDrawerWrapper.count", t));
}, u = function() {
_.each(c, function(e) {
e && e();
}), c = [];
}, d = function() {
_.each(s, function(e) {
e();
}), s = [];
}, m = function(e) {
a.hide = !e;
};
a.onClick = function() {
n.$emit("NotificationDrawerWrapper.toggle");
};
var p = function(e, t) {
a.showUnreadNotificationsIndicator = !!t;
}, f = function(e, t) {
return _.get(e, "params.project") !== _.get(t, "params.project");
}, g = function() {
l(t.project, p), m(t.project);
}, v = function() {
g(), s.push(n.$on("$routeChangeSuccess", function(e, t, n) {
f(t, n) && g();
})), s.push(n.$on("NotificationDrawerWrapper.onMarkAllRead", function() {
a.showUnreadNotificationsIndicator = !1;
}));
};
a.$onInit = function() {
o || i ? a.hide = !0 : v();
}, a.$onDestroy = function() {
u(), d();
};
} ]
});
}(), function() {
angular.module("openshiftConsole").component("notificationDrawerWrapper", {
templateUrl: "views/directives/notifications/notification-drawer-wrapper.html",
<<<<<<< b751e7cdd36536609ccfbc9bb12d212dfb7a136b
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< d4c408ef234fbee3beea9712377a0aa5bd5f1457
<<<<<<< 28651868c34b8ebf846f1da11eea62cc91408c4c
controller: [ "$filter", "$interval", "$location", "$timeout", "$routeParams", "$rootScope", "Constants", "DataService", "NotificationsService", "EventsService", function(e, t, n, a, r, o, i, s, c, l) {
var u, d, p = _.get(i, "DISABLE_GLOBAL_EVENT_WATCH"), m = e("isIE")() || e("isEdge")(), f = this, g = [], h = {}, v = [], y = {}, b = function(e) {
=======
controller: [ "$filter", "$interval", "$location", "$timeout", "$routeParams", "$rootScope", "Constants", "DataService", "EventsService", "NotificationsService", function(e, t, n, a, r, o, i, s, c) {
var l, u, d = _.get(i, "DISABLE_GLOBAL_EVENT_WATCH"), m = e("isIE")(), p = this, f = [], g = {}, v = {}, h = {}, y = function(e) {
e || (p.drawerHidden = !0);
}, b = function(e, t) {
return _.get(e, "params.project") !== _.get(t, "params.project");
<<<<<<< 75fc56b9e42e29e1492befd08624dd0e5dade866
<<<<<<< 247459038ac366429876741dd447ec652f2f5e7d
<<<<<<< a19b22733566f12a68db59a49bc16848fffba594
<<<<<<< 46344541d4f20e3585d6ea01425f784292c0d84a
}, C = function(e) {
>>>>>>> Quota Notifications
=======
}, S = function(e) {
>>>>>>> Service instance details configuration and edit
=======
}, C = function(e) {
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
}, S = function(e) {
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
=======
}, S = function(e) {
>>>>>>> Adding label filter to ste secrets page
return s.get("projects", e, {}, {
errorNotification: !1
}).then(function(e) {
<<<<<<< 3087d5859f05def6301fced3a013ac9165fd8c7a
return y[e.metadata.name] = e, e;
});
<<<<<<< 9bc0af8cb56dcc9609307333b9424f396867cab5
}, C = function(t, n) {
n && !t[n] && (t[n] = {
heading: e("displayName")(y[n]) || n,
project: y[n],
notifications: []
=======
=======
return h[e.metadata.name] = e, e;
});
<<<<<<< 75fc56b9e42e29e1492befd08624dd0e5dade866
<<<<<<< 247459038ac366429876741dd447ec652f2f5e7d
<<<<<<< a19b22733566f12a68db59a49bc16848fffba594
<<<<<<< 46344541d4f20e3585d6ea01425f784292c0d84a
>>>>>>> Add SVG icons
}, S = function(t, n) {
=======
}, C = function(t, n) {
>>>>>>> Service instance details configuration and edit
=======
}, S = function(t, n) {
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
}, C = function(t, n) {
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
=======
controller: [ "$filter", "$interval", "$location", "$rootScope", "$routeParams", "$scope", "$timeout", "Constants", "DataService", "EventsService", "NotificationsService", function(e, t, n, a, r, o, i, s, c, l) {
=======
controller: [ "$filter", "$interval", "$location", "$rootScope", "$routeParams", "$scope", "$timeout", "Constants", "DataService", "EventsService", "NotificationsService", function(e, t, n, r, a, o, i, s, c, l) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
var u, d, m = _.get(s, "DISABLE_GLOBAL_EVENT_WATCH"), p = e("isIE")(), f = this, g = [], v = {}, h = {}, y = {}, b = function(e) {
e || (f.drawerHidden = !0);
}, S = function(e, t) {
=======
controller: [ "$filter", "$interval", "$location", "$rootScope", "$routeParams", "$scope", "$timeout", "APIService", "Constants", "DataService", "EventsService", "NotificationsService", function(e, t, n, r, a, o, i, s, c, l, u) {
var d, m, p = s.getPreferredVersion("events"), f = s.getPreferredVersion("projects"), g = _.get(c, "DISABLE_GLOBAL_EVENT_WATCH"), v = e("isIE")(), h = this, y = [], b = {}, S = {}, C = {}, w = function(e) {
e || (h.drawerHidden = !0);
}, P = function(e, t) {
>>>>>>> Update notificationDrawerWrapper to use getPreferredVersion
return _.get(e, "params.project") !== _.get(t, "params.project");
}, j = function(e) {
return l.get(f, e, {}, {
errorNotification: !1
}).then(function(e) {
return C[e.metadata.name] = e, e;
});
<<<<<<< 13ac2d832bc56edf6bc5e2fc652da9b188ddae32
<<<<<<< b751e7cdd36536609ccfbc9bb12d212dfb7a136b
}, w = function(t, n) {
>>>>>>> Remember drawer expanded state across sessions
=======
}, C = function(t, n) {
>>>>>>> Adding label filter to ste secrets page
=======
}, j = function(t, n) {
>>>>>>> Update notificationDrawerWrapper to use getPreferredVersion
=======
}, k = function(t, n) {
>>>>>>> Add Browse Catalog to Project context view.
return {
heading: e("displayName")(C[t]),
project: C[t],
notifications: n
};
}, I = function(e) {
return _.filter(e, "unread");
<<<<<<< b751e7cdd36536609ccfbc9bb12d212dfb7a136b
<<<<<<< 2ce32f87748ff2fe030a6b53ff9490fcb80d856d
<<<<<<< d4c408ef234fbee3beea9712377a0aa5bd5f1457
}, k = function() {
_.each(p.notificationGroups, function(e) {
e.totalUnread = w(e.notifications).length, e.hasUnread = !!e.totalUnread, o.$emit("NotificationDrawerWrapper.onUnreadNotifications", e.totalUnread);
>>>>>>> Support EnvFrom in the Env Editors
});
<<<<<<< a19b22733566f12a68db59a49bc16848fffba594
<<<<<<< 46344541d4f20e3585d6ea01425f784292c0d84a
}, S = function() {
d && s.unwatch(d);
}, w = function(e, t) {
S(), e && (d = s.watch("events", {
namespace: e
}, _.debounce(t, 400), {
skipDigest: !0
}));
}, k = function() {
u && u(), u = null;
}, j = function(e) {
<<<<<<< 9bc0af8cb56dcc9609307333b9424f396867cab5
<<<<<<< 28651868c34b8ebf846f1da11eea62cc91408c4c
return _.filter(e, "unread");
}, P = function(e) {
o.$applyAsync(function() {
e.totalUnread = j(e.notifications).length, e.hasUnread = !!e.totalUnread, o.$emit("NotificationDrawerWrapper.count", e.totalUnread);
});
<<<<<<< 714c4a3ff94bc485f89078ceeb8105e8b94271be
<<<<<<< 0c40bfb0d97d474f70b5801c1312be38074c32cb
}, R = function() {
_.each(v, P);
}, I = function(e) {
return _.orderBy(e, [ "event.lastTimestamp", "event.firstTimestamp" ], [ "desc", "desc" ]);
}, T = function(e) {
var t = _.sortBy(e, function(e) {
return e.heading;
});
<<<<<<< 1f5fb674ad14c7e78d2e82e837750bd2747349ab
<<<<<<< d21c662f039266e2dd235fa32bd86d3647c082ae
<<<<<<< 77ce3ebb70d0568ad8fbbb649b8a01f54552ad2c
return _.each(t, function(e) {
e.notifications = I(e.notifications), e.counts = P(e);
}), t;
}, E = function(e) {
var t = {};
return C(t, r.project), _.each(e, function(e) {
l.isImportantEvent(e) && !l.isCleared(e) && (C(t, e.metadata.namespace), t[e.metadata.namespace].notifications.push({
unread: !l.isRead(e),
uid: e.metadata.uid,
event: e,
actions: null
}));
}), t;
}, N = function() {
_.each(g, function(e) {
e();
}), g = [];
}, D = function(e) {
e || (f.drawerHidden = !0);
}, A = function() {
o.$evalAsync(function() {
R(), f.notificationGroups = _.filter(v, function(e) {
return e.project.metadata.name === r.project;
=======
_.each(m.notificationGroups, function(t) {
=======
=======
}, P = function(e) {
>>>>>>> Service instance details configuration and edit
=======
}, j = function(e) {
>>>>>>> Add product icons for service catalog
=======
}, P = function(e) {
>>>>>>> Handle displaying parameters when secrets are not available.
=======
}, j = function(e) {
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
}, P = function(e) {
>>>>>>> Update template service broker flag name
=======
}, k = function(e) {
>>>>>>> Fix for adding non-builder templates to a project
=======
}, P = function(e) {
>>>>>>> Bug 1505281 - Improve import YAML results message
_.each(p.notificationGroups, function(t) {
>>>>>>> Support EnvFrom in the Env Editors
=======
}, P = function() {
=======
}, k = function() {
>>>>>>> Update pod controller to use getPreferredVersion
_.each(f.notificationGroups, function(e) {
e.totalUnread = P(e.notifications).length, e.hasUnread = !!e.totalUnread, r.$emit("NotificationDrawerWrapper.onUnreadNotifications", e.totalUnread);
});
}, j = function(e) {
_.each(f.notificationGroups, function(t) {
>>>>>>> Remember drawer expanded state across sessions
=======
}, R = function() {
_.each(h.notificationGroups, function(e) {
e.totalUnread = I(e.notifications).length, e.hasUnread = !!e.totalUnread, r.$emit("NotificationDrawerWrapper.onUnreadNotifications", e.totalUnread);
});
}, E = function(e) {
_.each(h.notificationGroups, function(t) {
>>>>>>> Update notificationDrawerWrapper to use getPreferredVersion
_.remove(t.notifications, {
uid: e.uid,
namespace: e.namespace
});
<<<<<<< b4ddc9b550515059b9681d76233c34b7f7b3431c
<<<<<<< 3087d5859f05def6301fced3a013ac9165fd8c7a
});
<<<<<<< d4c408ef234fbee3beea9712377a0aa5bd5f1457
<<<<<<< 1f5fb674ad14c7e78d2e82e837750bd2747349ab
<<<<<<< a19b22733566f12a68db59a49bc16848fffba594
<<<<<<< d21c662f039266e2dd235fa32bd86d3647c082ae
=======
}), delete v[r.project][e.uid];
<<<<<<< 77ce3ebb70d0568ad8fbbb649b8a01f54552ad2c
<<<<<<< 46344541d4f20e3585d6ea01425f784292c0d84a
>>>>>>> Add SVG icons
}, P = function(e) {
=======
}, j = function(e) {
>>>>>>> Service instance details configuration and edit
=======
}, P = function(e) {
>>>>>>> Add product icons for service catalog
return _.map(e, function(e) {
return {
=======
}, j = function(e) {
<<<<<<< 0c40bfb0d97d474f70b5801c1312be38074c32cb
v[r.project] && delete v[r.project][e.uid], g[r.project] && delete g[r.project][e.uid], P(e);
=======
}, P = function(e) {
v[r.project] && delete v[r.project][e.uid], g[r.project] && delete g[r.project][e.uid], j(e);
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
}, j = function(e) {
v[r.project] && delete v[r.project][e.uid], g[r.project] && delete g[r.project][e.uid], P(e);
<<<<<<< 714c4a3ff94bc485f89078ceeb8105e8b94271be
>>>>>>> Update template service broker flag name
=======
v[r.project] && delete v[r.project][e.uid], g[r.project] && delete g[r.project][e.uid], k(e);
>>>>>>> Fix for adding non-builder templates to a project
=======
>>>>>>> Bug 1505281 - Improve import YAML results message
}, R = function() {
g[r.project] = {}, v[r.project] = {};
}, I = function(e) {
=======
}, R = function(e) {
=======
});
<<<<<<< b751e7cdd36536609ccfbc9bb12d212dfb7a136b
}, I = function(e) {
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
>>>>>>> Add search catalog in project context
h[r.project] && delete h[r.project][e.uid], v[r.project] && delete v[r.project][e.uid], j(e);
=======
h[a.project] && delete h[a.project][e.uid], v[a.project] && delete v[a.project][e.uid], j(e);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}, R = function() {
v[a.project] = {}, h[a.project] = {};
}, E = function(e) {
>>>>>>> Remember drawer expanded state across sessions
=======
}, T = function(e) {
S[a.project] && delete S[a.project][e.uid], b[a.project] && delete b[a.project][e.uid], E(e);
}, N = function() {
b[a.project] = {}, S[a.project] = {};
}, D = function(e) {
>>>>>>> Update notificationDrawerWrapper to use getPreferredVersion
return _.reduce(e, function(e, t) {
return e[t.metadata.uid] = {
>>>>>>> Handle displaying parameters when secrets are not available.
actions: null,
<<<<<<< d4c408ef234fbee3beea9712377a0aa5bd5f1457
uid: e.metadata.uid,
trackByID: e.metadata.uid,
unread: !c.isRead(e.metadata.uid),
type: e.type,
lastTimestamp: e.lastTimestamp,
firstTimestamp: e.firstTimestamp,
event: e
};
});
}, R = function(e) {
=======
uid: t.metadata.uid,
trackByID: t.metadata.uid,
unread: !u.isRead(t.metadata.uid),
type: t.type,
lastTimestamp: t.lastTimestamp,
firstTimestamp: t.firstTimestamp,
event: t
}, e;
}, {});
<<<<<<< b751e7cdd36536609ccfbc9bb12d212dfb7a136b
}, T = function(e) {
>>>>>>> Remember drawer expanded state across sessions
=======
}, A = function(e) {
>>>>>>> Update notificationDrawerWrapper to use getPreferredVersion
return _.reduce(e, function(e, t) {
return u.isImportantAPIEvent(t) && !u.isCleared(t.metadata.uid) && (e[t.metadata.uid] = t), e;
}, {});
<<<<<<< b751e7cdd36536609ccfbc9bb12d212dfb7a136b
<<<<<<< d4c408ef234fbee3beea9712377a0aa5bd5f1457
<<<<<<< 1f5fb674ad14c7e78d2e82e837750bd2747349ab
<<<<<<< a19b22733566f12a68db59a49bc16848fffba594
}, I = function(e, t) {
var n = r.project;
return _.assign({}, e[n], t[n]);
}, E = function(e) {
=======
}, N = function(e, t) {
var n = r.project;
return _.assign({}, e[n], t[n]);
}, T = function(e) {
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
}, T = function(e, t) {
var n = r.project;
return _.assign({}, e[n], t[n]);
}, N = function(e) {
>>>>>>> Update template service broker flag name
return _.orderBy(e, [ "event.lastTimestamp", "event.firstTimestamp" ], [ "desc", "desc" ]);
}, T = function() {
o.$evalAsync(function() {
<<<<<<< 75fc56b9e42e29e1492befd08624dd0e5dade866
<<<<<<< 247459038ac366429876741dd447ec652f2f5e7d
<<<<<<< 714c4a3ff94bc485f89078ceeb8105e8b94271be
<<<<<<< 0c40bfb0d97d474f70b5801c1312be38074c32cb
<<<<<<< 1f5fb674ad14c7e78d2e82e837750bd2747349ab
<<<<<<< a19b22733566f12a68db59a49bc16848fffba594
p.notificationGroups = [ C(r.project, E(I(g, v))) ], k();
=======
p.notificationGroups = [ S(r.project, T(N(g, v))) ], k();
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
p.notificationGroups = [ S(r.project, N(T(g, v))) ], k();
>>>>>>> Update template service broker flag name
=======
p.notificationGroups = [ S(r.project, N(T(g, v))) ], P();
>>>>>>> Fix for adding non-builder templates to a project
=======
p.notificationGroups = [ S(r.project, N(T(g, v))) ], k();
>>>>>>> Bug 1505281 - Improve import YAML results message
=======
p.notificationGroups = [ C(r.project, N(T(g, v))) ], k();
>>>>>>> Add ProvisionedSuccessfully even to notification drawer
=======
p.notificationGroups = [ C(r.project, N(T(g, v))) ], k();
>>>>>>> Adding label filter to ste secrets page
});
}, N = function() {
_.each(f, function(e) {
e();
}), f = [];
}, D = function() {
u && (s.unwatch(u), u = null);
}, A = function() {
l && l(), l = null;
}, $ = function(e) {
g[r.project] = P(R(e.by("metadata.name"))), T();
}, B = function(e, t) {
<<<<<<< 3087d5859f05def6301fced3a013ac9165fd8c7a
if (t.showInDrawer) {
var n = t.namespace || r.project, a = t.id || _.uniqueId("notification_") + Date.now();
h[n] = h[n] || {}, h[n][a] = {
=======
var n = t.namespace || r.project, a = t.id ? n + "/" + t.id : _.uniqueId("notification_") + Date.now();
t.showInDrawer && !c.isCleared(a) && (v[n] = v[n] || {}, v[n][a] = {
>>>>>>> Add SVG icons
=======
}, N = function(e, t) {
=======
}, $ = function(e, t) {
>>>>>>> Update notificationDrawerWrapper to use getPreferredVersion
var n = a.project;
return _.assign({}, e[n], t[n]);
}, B = function(e) {
return _.orderBy(e, [ "event.lastTimestamp", "event.metadata.resourceVersion" ], [ "desc", "desc" ]);
}, L = function() {
r.$evalAsync(function() {
h.notificationGroups = [ k(a.project, B($(b, S))) ], R();
});
}, V = function() {
_.each(y, function(e) {
e();
<<<<<<< b751e7cdd36536609ccfbc9bb12d212dfb7a136b
}), g = [];
}, B = function() {
d && (c.unwatch(d), d = null);
}, L = function() {
u && u(), u = null;
}, U = function(e) {
v[a.project] = E(T(e.by("metadata.name"))), A();
}, O = function(e, t) {
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
var n = t.namespace || r.project, a = t.id ? n + "/" + t.id : _.uniqueId("notification_") + Date.now();
t.showInDrawer && !l.isCleared(a) && (h[n] = h[n] || {}, h[n][a] = {
>>>>>>> Remember drawer expanded state across sessions
=======
var n = t.namespace || a.project, r = t.id ? n + "/" + t.id : _.uniqueId("notification_") + Date.now();
t.showInDrawer && !l.isCleared(r) && (h[n] = h[n] || {}, h[n][r] = {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
=======
}), y = [];
}, U = function() {
m && (l.unwatch(m), m = null);
}, O = function() {
d && d(), d = null;
}, F = function(e) {
b[a.project] = D(A(e.by("metadata.name"))), L();
}, x = function(e, t) {
var n = t.namespace || a.project, r = t.id ? n + "/" + t.id : _.uniqueId("notification_") + Date.now();
t.showInDrawer && !u.isCleared(r) && (S[n] = S[n] || {}, S[n][r] = {
>>>>>>> Update notificationDrawerWrapper to use getPreferredVersion
actions: t.actions,
unread: !u.isRead(r),
trackByID: t.trackByID,
uid: r,
type: t.type,
lastTimestamp: t.timestamp,
message: t.message,
isHTML: t.isHTML,
details: t.details,
namespace: n,
links: t.links
<<<<<<< b751e7cdd36536609ccfbc9bb12d212dfb7a136b
<<<<<<< d4c408ef234fbee3beea9712377a0aa5bd5f1457
}, T();
}
}, L = function(e, t) {
D(), e && (u = s.watch("events", {
=======
}, A());
}, V = function(e, t) {
B(), e && (d = c.watch("events", {
>>>>>>> Remember drawer expanded state across sessions
=======
}, L());
}, M = function(e, t) {
<<<<<<< 03048c83a11138780b80c1ac333639429e2925cd
<<<<<<< 54fd2fbbc13bc9ca6203880fcea399383443bb5d
O(), e && (m = l.watch(p, {
>>>>>>> Update notificationDrawerWrapper to use getPreferredVersion
=======
V(), e && (m = l.watch(p, {
>>>>>>> Fix start build & deploy via correct instantiateVersions, add $filter to build group/resource string
=======
U(), e && (m = l.watch(p, {
>>>>>>> Update membership to use new rbac endpoints
namespace: e
}, _.debounce(t, 400), {
skipDigest: !0
}));
<<<<<<< b751e7cdd36536609ccfbc9bb12d212dfb7a136b
<<<<<<< 06fbfb52480e8cc20e5a3f4162b2ca9038ca931e
<<<<<<< 7bf7823be61d31cbcc56164e8989102db4019779
<<<<<<< efac32e4a13e2aac92238d69168ae1212cab677f
<<<<<<< 95202452f2b81c9bc8bc144dd2acf1c4e4d42bb8
<<<<<<< 108d45a2ac9babe3c2b0751225807b0260dca3b6
<<<<<<< af20237e01df8756b3fcd23b6115674686c4e420
<<<<<<< 5bd87652785e7e3c71d4b7b194cb0eb0fca57124
<<<<<<< 44f396286c95279739890891eea2b89e4abdde15
<<<<<<< dcc2597a3dba049aabc111ffd8a8e1cd9f390594
<<<<<<< d4c408ef234fbee3beea9712377a0aa5bd5f1457
<<<<<<< a19b22733566f12a68db59a49bc16848fffba594
}, U = _.once(function(e, t) {
A(), l = o.$on("NotificationsService.onNotificationAdded", t);
}), O = function() {
<<<<<<< 46344541d4f20e3585d6ea01425f784292c0d84a
C(r.project).then(function() {
<<<<<<< 9bc0af8cb56dcc9609307333b9424f396867cab5
L(r.project, $), U(r.project, B), y(r.project), N();
>>>>>>> Quota Notifications
=======
=======
S(r.project).then(function() {
>>>>>>> Service instance details configuration and edit
L(r.project, $), U(r.project, B), y(r.project), T();
>>>>>>> Support EnvFrom in the Env Editors
=======
}, F = _.once(function(e, t) {
B(), l = o.$on("NotificationsService.onNotificationAdded", t);
}), x = function() {
S(r.project).then(function() {
O(r.project, L), F(r.project, U), y(r.project), D();
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
});
});
}, $ = function(e) {
h = E(e.by("metadata.uid")), v = T(h), A();
}, B = {
Normal: "pficon pficon-info",
Warning: "pficon pficon-warning-triangle-o"
};
<<<<<<< 9bc0af8cb56dcc9609307333b9424f396867cab5
angular.extend(f, {
=======
angular.extend(p, {
>>>>>>> Support EnvFrom in the Env Editors
=======
}, x = _.once(function(e, t) {
=======
}, V = _.once(function(e, t) {
>>>>>>> Update routes controller to use getPreferredVersion
=======
}, V = _.once(function(e, t) {
>>>>>>> Update replicaSets controller to use getPreferredVersion
=======
}, V = _.once(function(e, t) {
>>>>>>> Update secret, secrets controllers to use getPreferredVersion
=======
}, V = _.once(function(e, t) {
>>>>>>> Update serviceInstance, serviceInstances controllers to use getPreferredVersion
=======
}, F = _.once(function(e, t) {
>>>>>>> Update directives/deployImage to use getPreferredVersion
=======
}, F = _.once(function(e, t) {
>>>>>>> Update directives/serviceBinding to use getPreferredVersion
=======
}, F = _.once(function(e, t) {
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
>>>>>>> Update directives/oscPersistentVolumeClaim to use getPreferredVersion
=======
}, F = _.once(function(e, t) {
>>>>>>> Update nextSteps controller to use getPreferredVersion
=======
}, F = _.once(function(e, t) {
>>>>>>> Update createFromImage controller to use getPreferredVersion
L(), u = a.$on("NotificationsService.onNotificationAdded", t);
=======
L(), u = r.$on("NotificationsService.onNotificationAdded", t);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}), x = function() {
C(a.project).then(function() {
V(a.project, U), F(a.project, O), b(a.project), A();
});
};
angular.extend(f, {
>>>>>>> Remember drawer expanded state across sessions
=======
}, q = _.once(function(e, t) {
O(), d = r.$on("NotificationsService.onNotificationAdded", t);
}), z = function() {
j(a.project).then(function() {
M(a.project, F), q(a.project, x), w(a.project), L();
});
};
angular.extend(h, {
>>>>>>> Update notificationDrawerWrapper to use getPreferredVersion
drawerHidden: !0,
allowExpand: !0,
drawerExpanded: "true" === localStorage.getItem("openshift/notification-drawer-expanded"),
drawerTitle: "Notifications",
hasUnread: !1,
showClearAll: !0,
showMarkAllRead: !0,
onClose: function() {
<<<<<<< b751e7cdd36536609ccfbc9bb12d212dfb7a136b
<<<<<<< d4c408ef234fbee3beea9712377a0aa5bd5f1457
<<<<<<< 9bc0af8cb56dcc9609307333b9424f396867cab5
f.drawerHidden = !0;
=======
p.drawerHidden = !0;
>>>>>>> Support EnvFrom in the Env Editors
},
onMarkAllRead: function(e) {
_.each(e.notifications, function(e) {
<<<<<<< 28651868c34b8ebf846f1da11eea62cc91408c4c
e.unread = !1, l.markRead(e.event);
}), A(), o.$emit("NotificationDrawerWrapper.onMarkAllRead");
},
onClearAll: function(e) {
_.each(e.notifications, function(e) {
l.markRead(e.event), l.markCleared(e.event);
}), e.notifications = [], A(), o.$emit("NotificationDrawerWrapper.onMarkAllRead");
=======
e.unread = !1, c.markRead(e.uid);
}), T(), o.$emit("NotificationDrawerWrapper.onMarkAllRead");
},
onClearAll: function(e) {
_.each(e.notifications, function(e) {
e.unread = !1, c.markRead(e.uid), c.markCleared(e.uid);
<<<<<<< 3087d5859f05def6301fced3a013ac9165fd8c7a
<<<<<<< 9bc0af8cb56dcc9609307333b9424f396867cab5
}), g[r.project] = {}, h[r.project] = {}, N(), o.$emit("NotificationDrawerWrapper.onMarkAllRead");
>>>>>>> Quota Notifications
=======
}), g[r.project] = {}, h[r.project] = {}, T(), o.$emit("NotificationDrawerWrapper.onMarkAllRead");
>>>>>>> Support EnvFrom in the Env Editors
=======
}), g[r.project] = {}, v[r.project] = {}, T(), o.$emit("NotificationDrawerWrapper.onMarkAllRead");
>>>>>>> Add SVG icons
},
notificationGroups: v,
=======
f.drawerHidden = !0;
=======
h.drawerHidden = !0;
>>>>>>> Update notificationDrawerWrapper to use getPreferredVersion
},
onMarkAllRead: function(e) {
_.each(e.notifications, function(e) {
e.unread = !1, u.markRead(e.uid);
}), L(), r.$emit("NotificationDrawerWrapper.onMarkAllRead");
},
onClearAll: function(e) {
_.each(e.notifications, function(e) {
e.unread = !1, u.markRead(e.uid), u.markCleared(e.uid);
}), N(), L(), r.$emit("NotificationDrawerWrapper.onMarkAllRead");
},
notificationGroups: [],
>>>>>>> Remember drawer expanded state across sessions
headingInclude: "views/directives/notifications/header.html",
notificationBodyInclude: "views/directives/notifications/notification-body.html",
customScope: {
clear: function(e, t, n) {
<<<<<<< b751e7cdd36536609ccfbc9bb12d212dfb7a136b
<<<<<<< b4ddc9b550515059b9681d76233c34b7f7b3431c
<<<<<<< d4c408ef234fbee3beea9712377a0aa5bd5f1457
<<<<<<< 1f5fb674ad14c7e78d2e82e837750bd2747349ab
<<<<<<< a19b22733566f12a68db59a49bc16848fffba594
<<<<<<< d21c662f039266e2dd235fa32bd86d3647c082ae
l.markCleared(e.event), n.notifications.splice(t, 1), R();
=======
c.markRead(e.uid), c.markCleared(e.uid), n.notifications.splice(t, 1), j(e), D();
>>>>>>> Handle displaying parameters when secrets are not available.
=======
c.markRead(e.uid), c.markCleared(e.uid), n.notifications.splice(t, 1), P(e), D();
>>>>>>> Added 'no projects and cant create' empty state to process-template, deploy-image, and from-file
=======
c.markRead(e.uid), c.markCleared(e.uid), n.notifications.splice(t, 1), j(e), D();
>>>>>>> Update template service broker flag name
},
markRead: function(e) {
e.unread = !1, l.markRead(e.event), R();
},
<<<<<<< 9bc0af8cb56dcc9609307333b9424f396867cab5
getNotficationStatusIconClass: function(e) {
return B[e.type] || B.info;
=======
l.markRead(e.uid), l.markCleared(e.uid), n.notifications.splice(t, 1), R(e), A();
=======
l.markRead(e.uid), l.markCleared(e.uid), n.notifications.splice(t, 1), I(e), A();
>>>>>>> Add search catalog in project context
},
markRead: function(e) {
e.unread = !1, l.markRead(e.uid), A();
>>>>>>> Remember drawer expanded state across sessions
=======
u.markRead(e.uid), u.markCleared(e.uid), n.notifications.splice(t, 1), T(e), L();
},
markRead: function(e) {
e.unread = !1, u.markRead(e.uid), L();
>>>>>>> Update notificationDrawerWrapper to use getPreferredVersion
},
getStatusForCount: function(e) {
return B[e] || B.info;
=======
close: function() {
<<<<<<< b751e7cdd36536609ccfbc9bb12d212dfb7a136b
<<<<<<< d4c408ef234fbee3beea9712377a0aa5bd5f1457
p.drawerHidden = !0;
>>>>>>> Support EnvFrom in the Env Editors
=======
f.drawerHidden = !0;
>>>>>>> Remember drawer expanded state across sessions
=======
h.drawerHidden = !0;
>>>>>>> Update notificationDrawerWrapper to use getPreferredVersion
},
<<<<<<< 28651868c34b8ebf846f1da11eea62cc91408c4c
close: function() {
f.drawerHidden = !0;
}
}
});
var L = function(e, t) {
return _.get(e, "params.project") !== _.get(t, "params.project");
}, U = function() {
b(r.project).then(function() {
w(r.project, $), D(r.project), A();
});
}, O = function() {
r.project && U(), g.push(o.$on("$routeChangeSuccess", function(e, t, n) {
L(t, n) && (f.customScope.projectName = r.project, U());
})), g.push(o.$on("NotificationDrawerWrapper.toggle", function() {
f.drawerHidden = !f.drawerHidden;
}));
};
f.$onInit = function() {
p || m || O();
}, f.$onDestroy = function() {
k(), S(), N();
=======
onLinkClick: function(e) {
<<<<<<< b751e7cdd36536609ccfbc9bb12d212dfb7a136b
<<<<<<< d4c408ef234fbee3beea9712377a0aa5bd5f1457
e.onClick(), p.drawerHidden = !0;
},
countUnreadNotifications: k
}
});
var F = function() {
r.project && O(), f.push(o.$on("$routeChangeSuccess", function(e, t, n) {
b(t, n) && (p.customScope.projectName = r.project, O());
})), f.push(o.$on("NotificationDrawerWrapper.toggle", function() {
p.drawerHidden = !p.drawerHidden;
})), f.push(o.$on("NotificationDrawerWrapper.hide", function() {
p.drawerHidden = !0;
})), f.push(o.$on("NotificationDrawerWrapper.clear", function(e, t) {
c.markCleared(t.uid), j(t), p.countUnreadNotifications();
}));
};
<<<<<<< 9bc0af8cb56dcc9609307333b9424f396867cab5
m.$onInit = function() {
d || p || F();
}, m.$onDestroy = function() {
A(), D(), E();
>>>>>>> Quota Notifications
=======
p.$onInit = function() {
d || m || F();
}, p.$onDestroy = function() {
A(), D(), N();
>>>>>>> Support EnvFrom in the Env Editors
=======
e.onClick(), f.drawerHidden = !0;
=======
e.onClick(), h.drawerHidden = !0;
>>>>>>> Update notificationDrawerWrapper to use getPreferredVersion
},
countUnreadNotifications: R
}
}), o.$watch("$ctrl.drawerExpanded", function(e) {
localStorage.setItem("openshift/notification-drawer-expanded", e ? "true" : "false");
});
var H = function() {
a.project && z(), y.push(r.$on("$routeChangeSuccess", function(e, t, n) {
P(t, n) && (h.customScope.projectName = a.project, z());
})), y.push(r.$on("NotificationDrawerWrapper.toggle", function() {
h.drawerHidden = !h.drawerHidden;
})), y.push(r.$on("NotificationDrawerWrapper.hide", function() {
h.drawerHidden = !0;
})), y.push(r.$on("NotificationDrawerWrapper.clear", function(e, t) {
u.markCleared(t.uid), T(t), h.countUnreadNotifications();
}));
};
<<<<<<< b751e7cdd36536609ccfbc9bb12d212dfb7a136b
f.$onInit = function() {
m || p || M();
}, f.$onDestroy = function() {
L(), B(), $();
>>>>>>> Remember drawer expanded state across sessions
=======
h.$onInit = function() {
g || v || H();
}, h.$onDestroy = function() {
<<<<<<< 03048c83a11138780b80c1ac333639429e2925cd
<<<<<<< 54fd2fbbc13bc9ca6203880fcea399383443bb5d
V(), O(), U();
>>>>>>> Update notificationDrawerWrapper to use getPreferredVersion
=======
O(), V(), U();
>>>>>>> Fix start build & deploy via correct instantiateVersions, add $filter to build group/resource string
=======
O(), U(), V();
>>>>>>> Update membership to use new rbac endpoints
};
} ]
});
}(), angular.module("openshiftConsole").filter("duration", function() {
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
>>>>>>> Add notification-drawer to show curated list of events to user
return function(e, t, n, a) {
function r(e, t, a) {
0 !== e && (1 !== e ? s.push(e + " " + a) : n ? s.push(t) : s.push("1 " + t));
=======
return function(e, t, n, r) {
function a(e, t, r) {
0 !== e && (1 !== e ? s.push(e + " " + r) : n ? s.push(t) : s.push("1 " + t));
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}
if (!e) return e;
r = r || 2, t = t || new Date();
var o = moment(t).diff(e);
o < 0 && (o = 0);
var i = moment.duration(o), s = [], c = i.years(), l = i.months(), u = i.days(), d = i.hours(), m = i.minutes(), p = i.seconds();
return a(c, "year", "years"), a(l, "month", "months"), a(u, "day", "days"), a(d, "hour", "hours"), a(m, "minute", "minutes"), a(p, "second", "seconds"), 1 === s.length && p && 1 === r ? n ? "minute" : "1 minute" : (0 === s.length && s.push("0 seconds"), s.length > r && (s.length = r), s.join(", "));
};
}).filter("ageLessThan", function() {
return function(e, t, n) {
return moment().subtract(t, n).diff(moment(e)) < 0;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
};
}).filter("humanizeDurationValue", function() {
return function(e, t) {
return moment.duration(e, t).humanize();
};
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
}).filter("timeOnlyDurationFromTimestamps", [ "timeOnlyDurationFilter", function(a) {
return function(b, c) {
return b ? (c = c || new Date(), a(moment(c).diff(b))) : b;
=======
}).filter("timeOnlyDurationFromTimestamps", [ "timeOnlyDurationFilter", function(e) {
return function(t, n) {
return t ? (n = n || new Date(), e(moment(n).diff(t))) : t;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
};
} ]).filter("timeOnlyDuration", function() {
return function(e) {
var t = [], n = moment.duration(e), r = Math.floor(n.asHours()), a = n.minutes(), o = n.seconds();
return (r < 0 || a < 0 || o < 0) && (r = a = o = 0), r && t.push(r + "h"), a && t.push(a + "m"), r || t.push(o + "s"), t.join(" ");
};
}), angular.module("openshiftConsole").filter("storageClass", [ "annotationFilter", function(e) {
return function(t) {
return e(t, "volume.beta.kubernetes.io/storage-class");
};
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
} ]).filter("tags", [ "annotationFilter", function(a) {
return function(b, c) {
c = c || "tags";
var d = a(b, c);
return d ? d.split(/\s*,\s*/) : [];
};
} ]).filter("imageStreamLastUpdated", function() {
return function(a) {
var b = a.metadata.creationTimestamp, c = moment(b);
return angular.forEach(a.status.tags, function(a) {
if (!_.isEmpty(a.items)) {
var d = moment(_.head(a.items).created);
d.isAfter(c) && (c = d, b = _.head(a.items).created);
=======
} ]).filter("tags", [ "annotationFilter", function(e) {
return function(t, n) {
var r = e(t, n = n || "tags");
return r ? r.split(/\s*,\s*/) : [];
};
} ]).filter("imageStreamLastUpdated", function() {
return function(e) {
var t = e.metadata.creationTimestamp, n = moment(t);
return angular.forEach(e.status.tags, function(e) {
if (!_.isEmpty(e.items)) {
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< 8ab4f4a09cf53190c7bc08d260e963252c3ba6a5
var a = moment(_.first(e.items).created);
a.isAfter(n) && (n = a, t = _.first(e.items).created);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
var a = moment(_.head(e.items).created);
a.isAfter(n) && (n = a, t = _.head(e.items).created);
>>>>>>> Upgrade to angular-patternfly v4.1.1 and patternfly v3.25.1
=======
var r = moment(_.head(e.items).created);
r.isAfter(n) && (n = r, t = _.head(e.items).created);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}
}), t;
};
}).filter("buildConfigForBuild", [ "annotationFilter", "labelNameFilter", "labelFilter", function(e, t, n) {
var r = t("buildConfig");
return function(t) {
return e(t, "buildConfig") || n(t, r);
};
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
} ]).filter("icon", [ "annotationFilter", function(a) {
return function(b) {
var c = a(b, "icon");
return c ? c : "";
};
} ]).filter("iconClass", [ "annotationFilter", function(a) {
return function(b, c) {
var d = a(b, "iconClass");
return d ? d : "template" === c ? "fa fa-clone" : "";
};
} ]).filter("imageName", function() {
return function(a) {
return a ? a.contains(":") ? a.split(":")[1] : a : "";
};
}).filter("imageStreamName", function() {
return function(a) {
if (!a) return "";
var b, c = a.split("@")[0], d = c.split("/");
return 3 === d.length ? (b = d[2].split(":"), d[1] + "/" + b[0]) : 2 === d.length ? c : 1 === d.length ? (b = c.split(":"), b[0]) : void 0;
};
}).filter("stripTag", function() {
return function(a) {
return a ? a.split(":")[0] : a;
};
}).filter("stripSHA", function() {
return function(a) {
return a ? a.split("@")[0] : a;
};
}).filter("imageSHA", function() {
return function(a) {
if (!a) return a;
var b = a.split("@");
return b.length > 1 ? b[1] : "";
=======
} ]).filter("icon", [ "annotationFilter", function(e) {
return function(t) {
var n = e(t, "icon");
return n || "";
};
} ]).filter("iconClass", [ "annotationFilter", function(e) {
return function(t, n) {
var r = e(t, "iconClass");
return r || ("template" === n ? "fa fa-clone" : "");
};
} ]).filter("imageName", function() {
return function(e) {
return e ? e.contains(":") ? e.split(":")[1] : e : "";
};
}).filter("imageStreamName", function() {
return function(e) {
if (!e) return "";
var t, n = e.split("@")[0], r = n.split("/");
return 3 === r.length ? (t = r[2].split(":"), r[1] + "/" + t[0]) : 2 === r.length ? n : 1 === r.length ? (t = n.split(":"))[0] : void 0;
};
}).filter("stripTag", function() {
return function(e) {
return e ? e.split(":")[0] : e;
};
}).filter("stripSHA", function() {
return function(e) {
return e ? e.split("@")[0] : e;
};
}).filter("imageSHA", function() {
return function(e) {
if (!e) return e;
var t = e.split("@");
return t.length > 1 ? t[1] : "";
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
};
}).filter("imageEnv", function() {
return function(e, t) {
for (var n = e.dockerImageMetadata.Config.Env, r = 0; r < _.size(n); r++) {
var a = n[r].split("=");
if (a[0] === t) return a[1];
}
return null;
};
}).filter("destinationSourcePair", function() {
return function(e) {
var t = {};
return angular.forEach(e, function(e) {
t[e.sourcePath] = e.destinationDir;
}), t;
};
}).filter("buildForImage", function() {
return function(e, t) {
for (var n = _.get(e, "dockerImageMetadata.Config.Env", []), r = 0; r < n.length; r++) {
var a = n[r].split("=");
if ("OPENSHIFT_BUILD_NAME" === a[0]) return t[a[1]];
}
return null;
};
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
}).filter("webhookURL", [ "DataService", function(a) {
return function(b, c, d, e) {
return a.url({
resource: "buildconfigs/webhooks/" + d + "/" + c.toLowerCase(),
name: b,
namespace: e
=======
}).filter("webhookURL", [ "DataService", function(e) {
return function(t, n, r, a) {
return e.url({
resource: "buildconfigs/webhooks/" + r + "/" + n.toLowerCase(),
name: t,
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
namespace: r
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
namespace: a
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
});
};
} ]).filter("isWebRoute", [ "routeHostFilter", function(e) {
return function(t) {
return !!e(t, !0) && "Subdomain" !== _.get(t, "spec.wildcardPolicy");
};
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
} ]).filter("routeWebURL", [ "routeHostFilter", function(a) {
return function(b, c, d) {
var e = b.spec.tls && "" !== b.spec.tls.tlsTerminationType ? "https" : "http", f = e + "://" + (c || a(b));
return b.spec.path && !d && (f += b.spec.path), f;
};
} ]).filter("routeLabel", [ "RoutesService", "routeHostFilter", "routeWebURLFilter", "isWebRouteFilter", function(a, b, c, d) {
return function(e, f, g) {
if (d(e)) return c(e, f, g);
var h = f || b(e);
return h ? ("Subdomain" === _.get(e, "spec.wildcardPolicy") && (h = "*." + a.getSubdomain(e)), g ? h : (e.spec.path && (h += e.spec.path), h)) : "<unknown host>";
};
} ]).filter("parameterPlaceholder", [ "gettext", "gettextCatalog", function(a, b) {
return function(c) {
return c.generate ? b.getString(a("(generated if empty)")) : "";
};
} ]).filter("parameterValue", function() {
return function(a) {
return !a.value && a.generate ? "(generated)" : a.value;
=======
} ]).filter("routeWebURL", [ "routeHostFilter", function(e) {
return function(t, n, r) {
var a = (t.spec.tls && "" !== t.spec.tls.tlsTerminationType ? "https" : "http") + "://" + (n || e(t));
return t.spec.path && !r && (a += t.spec.path), a;
};
} ]).filter("routeLabel", [ "RoutesService", "routeHostFilter", "routeWebURLFilter", "isWebRouteFilter", function(e, t, n, r) {
return function(a, o, i) {
if (r(a)) return n(a, o, i);
var s = o || t(a);
return s ? ("Subdomain" === _.get(a, "spec.wildcardPolicy") && (s = "*." + e.getSubdomain(a)), i ? s : (a.spec.path && (s += a.spec.path), s)) : "<unknown host>";
};
} ]).filter("parameterPlaceholder", function() {
return function(e) {
return e.generate ? "(generated if empty)" : "";
};
}).filter("parameterValue", function() {
return function(e) {
return !e.value && e.generate ? "(generated)" : e.value;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
};
}).filter("imageObjectRef", function() {
return function(e, t, n) {
if (!e) return "";
var r = e.namespace || t || "";
_.isEmpty(r) || (r += "/");
var a = e.kind;
if ("ImageStreamTag" === a || "ImageStreamImage" === a) return r + e.name;
if ("DockerImage" === a) {
var o = e.name;
return n && (o = o.substring(o.lastIndexOf("/") + 1)), o;
}
return r + e.name;
};
}).filter("orderByDisplayName", [ "displayNameFilter", "toArrayFilter", function(e, t) {
return function(n) {
var r = t(n);
return r.sort(function(t, n) {
var r = e(t) || "", a = e(n) || "";
return r === a && (r = _.get(t, "metadata.name", ""), a = _.get(n, "metadata.name", "")), r.localeCompare(a);
}), r;
};
} ]).filter("isPodStuck", function() {
return function(e) {
if ("Pending" !== e.status.phase) return !1;
var t = moment().subtract(5, "m");
return moment(e.metadata.creationTimestamp).isBefore(t);
};
}).filter("isContainerLooping", function() {
return function(e) {
return e.state.waiting && "CrashLoopBackOff" === e.state.waiting.reason;
};
}).filter("isContainerFailed", function() {
return function(e) {
return e.state.terminated && 0 !== e.state.terminated.exitCode;
};
}).filter("isContainerTerminatedSuccessfully", function() {
return function(e) {
return e.state.terminated && 0 === e.state.terminated.exitCode;
};
}).filter("isContainerUnprepared", function() {
return function(e) {
if (!e.state.running || !1 !== e.ready || !e.state.running.startedAt) return !1;
var t = moment().subtract(5, "m");
return moment(e.state.running.startedAt).isBefore(t);
};
}).filter("isTroubledPod", [ "isPodStuckFilter", "isContainerLoopingFilter", "isContainerFailedFilter", "isContainerUnpreparedFilter", function(e, t, n, r) {
return function(a) {
if ("Unknown" === a.status.phase) return !0;
if (e(a)) return !0;
if ("Running" === a.status.phase && a.status.containerStatuses) {
var o;
for (o = 0; o < _.size(a.status.containerStatuses); ++o) {
var i = a.status.containerStatuses[o];
if (i.state) {
if (n(i)) return !0;
if (t(i)) return !0;
if (r(i)) return !0;
}
}
}
return !1;
};
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
} ]).filter("podWarnings", [ "isPodStuckFilter", "isContainerLoopingFilter", "isContainerFailedFilter", "isContainerUnpreparedFilter", "isTerminatingFilter", "gettext", "gettextCatalog", function(a, b, c, d, e, f, g) {
return function(h) {
var i = [];
return "Unknown" === h.status.phase && i.push({
reason: "Unknown",
pod: h.metadata.name,
message: "The state of the pod could not be obtained. This is typically due to an error communicating with the host of the pod."
}), a(h) && i.push({
reason: "Stuck",
pod: h.metadata.name,
message: "The pod has been stuck in the pending state for more than five minutes."
}), "Running" === h.status.phase && h.status.containerStatuses && _.each(h.status.containerStatuses, function(a) {
return !!a.state && (c(a) && (e(h) ? i.push({
severity: "error",
reason: "NonZeroExitTerminatingPod",
pod: h.metadata.name,
container: a.name,
message: g.getString("The container {{name}} did not stop cleanly when terminated (exit code {{exitCode}}).", {
name: a.name,
exitCode: a.state.terminated.exitCode
})
}) : i.push({
severity: "warning",
reason: "NonZeroExit",
pod: h.metadata.name,
container: a.name,
message: g.getString("The container {{name}} failed (exit code {{exitCode}}).", {
name: a.name,
exitCode: a.state.terminated.exitCode
})
})), b(a) && i.push({
severity: "error",
reason: "Looping",
pod: h.metadata.name,
container: a.name,
message: g.getString(f("The container {{name}} is crashing frequently. It must wait before it will be restarted again."), {
name: a.name
})
}), void (d(a) && i.push({
severity: "warning",
reason: "Unprepared",
pod: h.metadata.name,
container: a.name,
message: g.getString(f("The container {{name}} has been running for more than five minutes and has not passed its readiness check."), {
name: a.name
})
})));
}), i.length > 0 ? i : null;
};
} ]).filter("groupedPodWarnings", [ "podWarningsFilter", function(a) {
return function(b, c) {
var d = c || {};
return _.each(b, function(b) {
var c = a(b);
_.each(c, function(a) {
var b = a.reason + (a.container || "");
d[b] = d[b] || [], d[b].push(a);
});
}), d;
};
} ]).filter("troubledPods", [ "isTroubledPodFilter", function(a) {
return function(b) {
var c = [];
return angular.forEach(b, function(b) {
a(b) && c.push(b);
}), c;
=======
} ]).filter("podWarnings", [ "isPodStuckFilter", "isContainerLoopingFilter", "isContainerFailedFilter", "isContainerUnpreparedFilter", "isTerminatingFilter", function(e, t, n, a, r) {
=======
} ]).filter("podWarnings", [ "isPodStuckFilter", "isContainerLoopingFilter", "isContainerFailedFilter", "isContainerUnpreparedFilter", "isTerminatingFilter", function(e, t, n, r, a) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
return function(o) {
var i = [];
return "Unknown" === o.status.phase && i.push({
reason: "Unknown",
pod: o.metadata.name,
message: "The state of the pod could not be obtained. This is typically due to an error communicating with the host of the pod."
}), e(o) && i.push({
reason: "Stuck",
pod: o.metadata.name,
message: "The pod has been stuck in the pending state for more than five minutes."
}), "Running" === o.status.phase && o.status.containerStatuses && _.each(o.status.containerStatuses, function(e) {
if (!e.state) return !1;
n(e) && (a(o) ? i.push({
severity: "error",
reason: "NonZeroExitTerminatingPod",
pod: o.metadata.name,
container: e.name,
message: "The container " + e.name + " did not stop cleanly when terminated (exit code " + e.state.terminated.exitCode + ")."
}) : i.push({
severity: "warning",
reason: "NonZeroExit",
pod: o.metadata.name,
container: e.name,
message: "The container " + e.name + " failed (exit code " + e.state.terminated.exitCode + ")."
})), t(e) && i.push({
severity: "error",
reason: "Looping",
pod: o.metadata.name,
container: e.name,
message: "The container " + e.name + " is crashing frequently. It must wait before it will be restarted again."
}), r(e) && i.push({
severity: "warning",
reason: "Unprepared",
pod: o.metadata.name,
container: e.name,
message: "The container " + e.name + " has been running for more than five minutes and has not passed its readiness check."
});
}), i.length > 0 ? i : null;
};
} ]).filter("groupedPodWarnings", [ "podWarningsFilter", function(e) {
return function(t, n) {
var r = n || {};
return _.each(t, function(t) {
var n = e(t);
_.each(n, function(e) {
var t = e.reason + (e.container || "");
r[t] = r[t] || [], r[t].push(e);
});
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
}), a;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
}), r;
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
};
} ]).filter("troubledPods", [ "isTroubledPodFilter", function(e) {
return function(t) {
var n = [];
return angular.forEach(t, function(t) {
e(t) && n.push(t);
}), n;
};
} ]).filter("notTroubledPods", [ "isTroubledPodFilter", function(e) {
return function(t) {
var n = [];
return angular.forEach(t, function(t) {
e(t) || n.push(t);
}), n;
};
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
} ]).filter("projectOverviewURL", [ "Navigate", function(a) {
return function(b) {
return angular.isString(b) ? a.projectOverviewURL(b) : angular.isObject(b) ? a.projectOverviewURL(b.metadata && b.metadata.name) : a.projectOverviewURL("");
};
} ]).filter("createFromSourceURL", function() {
return function(a, b) {
var c = URI.expand("project/{project}/catalog/images{?q*}", {
project: a,
q: {
builderfor: b
=======
} ]).filter("projectOverviewURL", [ "Navigate", function(e) {
return function(t) {
return angular.isString(t) ? e.projectOverviewURL(t) : angular.isObject(t) ? e.projectOverviewURL(t.metadata && t.metadata.name) : e.projectOverviewURL("");
};
} ]).filter("catalogURL", [ "Navigate", function(e) {
return e.catalogURL;
} ]).filter("createFromSourceURL", function() {
return function(e, t) {
return URI.expand("project/{project}/catalog/images{?q*}", {
project: e,
q: {
builderfor: t
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
}
}).toString();
};
}).filter("createFromImageURL", [ "Navigate", function(e) {
return function(t, n, r, a) {
return e.createFromImageURL(t, n, r, a);
};
} ]).filter("createFromTemplateURL", [ "Navigate", function(e) {
return function(t, n, r) {
return e.createFromTemplateURL(t, n, r);
};
} ]).filter("failureObjectName", function() {
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
return function(a) {
if (!a.data || !a.data.details) return null;
var b = a.data.details;
return b.kind ? b.id ? b.kind + " " + b.id : b.kind : b.id;
=======
return function(e) {
if (!e.data || !e.data.details) return null;
var t = e.data.details;
return t.kind ? t.id ? t.kind + " " + t.id : t.kind : t.id;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
};
}).filter("isIncompleteBuild", [ "ageLessThanFilter", function(e) {
return function(e) {
if (!e || !e.status || !e.status.phase) return !1;
switch (e.status.phase) {
case "New":
case "Pending":
case "Running":
return !0;

default:
return !1;
}
};
} ]).filter("isRecentBuild", [ "ageLessThanFilter", "isIncompleteBuildFilter", function(e, t) {
return function(n) {
if (!(n && n.status && n.status.phase && n.metadata)) return !1;
if (t(n)) return !0;
var r = n.status.completionTimestamp || n.metadata.creationTimestamp;
return e(r, 5, "minutes");
};
} ]).filter("deploymentCauses", [ "annotationFilter", function(e) {
return function(t) {
if (!t) return [];
var n = e(t, "encodedDeploymentConfig");
if (!n) return [];
try {
var r = $.parseJSON(n);
if (!r) return [];
switch (r.apiVersion) {
case "v1beta1":
return r.details.causes;

case "v1beta3":
case "v1":
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
return d.status.details ? d.status.details.causes : [];

default:
return Logger.error('Unknown API version "' + d.apiVersion + '" in encoded deployment config for deployment ' + b.metadata.name), d.status && d.status.details && d.status.details.causes ? d.status.details.causes : [];
=======
return a.status.details ? a.status.details.causes : [];

default:
return Logger.error('Unknown API version "' + a.apiVersion + '" in encoded deployment config for deployment ' + t.metadata.name), a.status && a.status.details && a.status.details.causes ? a.status.details.causes : [];
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
return r.status.details ? r.status.details.causes : [];

default:
return Logger.error('Unknown API version "' + r.apiVersion + '" in encoded deployment config for deployment ' + t.metadata.name), r.status && r.status.details && r.status.details.causes ? r.status.details.causes : [];
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
}
} catch (e) {
return Logger.error("Failed to parse encoded deployment config", e), [];
}
};
} ]).filter("desiredReplicas", function() {
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
return function(a) {
return a && a.spec ? void 0 === a.spec.replicas ? 1 : a.spec.replicas : 0;
};
}).filter("serviceImplicitDNSName", function() {
return function(a) {
return a && a.metadata && a.metadata.name && a.metadata.namespace ? a.metadata.name + "." + a.metadata.namespace + ".svc" : "";
=======
return function(e) {
return e && e.spec ? void 0 === e.spec.replicas ? 1 : e.spec.replicas : 0;
};
}).filter("serviceImplicitDNSName", function() {
return function(e) {
return e && e.metadata && e.metadata.name && e.metadata.namespace ? e.metadata.name + "." + e.metadata.namespace + ".svc" : "";
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
};
}).filter("podsForPhase", function() {
return function(e, t) {
var n = [];
return angular.forEach(e, function(e) {
e.status.phase === t && n.push(e);
}), n;
};
}).filter("numContainersReady", function() {
return function(e) {
var t = 0;
return angular.forEach(e.status.containerStatuses, function(e) {
e.ready && t++;
}), t;
};
}).filter("numContainerRestarts", function() {
return function(e) {
var t = 0;
return angular.forEach(e.status.containerStatuses, function(e) {
t += e.restartCount;
}), t;
};
}).filter("isTerminating", function() {
return function(e) {
return _.has(e, "metadata.deletionTimestamp");
};
}).filter("isPullingImage", function() {
return function(e) {
if (!e) return !1;
if ("Pending" !== _.get(e, "status.phase")) return !1;
var t = _.get(e, "status.containerStatuses");
if (!t) return !1;
return _.some(t, function(e) {
return "ContainerCreating" === _.get(e, "state.waiting.reason");
});
};
}).filter("newestResource", function() {
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
return function(a) {
var b = null;
return angular.forEach(a, function(a) {
if (b) moment(b.metadata.creationTimestamp).isBefore(a.metadata.creationTimestamp) && (b = a); else {
if (!a.metadata.creationTimestamp) return;
b = a;
}
}), b;
};
}).filter("deploymentIsLatest", [ "annotationFilter", function(a) {
return function(b, c) {
if (!c || !b) return !1;
var d = parseInt(a(b, "deploymentVersion")), e = c.status.latestVersion;
return d === e;
};
} ]).filter("deploymentStatus", [ "annotationFilter", "hasDeploymentConfigFilter", function(a, b) {
return function(c) {
if (a(c, "deploymentCancelled")) return "Cancelled";
var d = a(c, "deploymentStatus");
return !b(c) || "Complete" === d && c.spec.replicas > 0 ? "Active" : d;
};
} ]).filter("deploymentIsInProgress", [ "deploymentStatusFilter", function(a) {
return function(b) {
return [ "New", "Pending", "Running" ].indexOf(a(b)) > -1;
};
} ]).filter("anyDeploymentIsInProgress", [ "deploymentIsInProgressFilter", function(a) {
return function(b) {
return _.some(b, a);
};
} ]).filter("getActiveDeployment", [ "DeploymentsService", function(a) {
return function(b) {
return a.getActiveDeployment(b);
};
} ]).filter("isRecentDeployment", [ "deploymentIsLatestFilter", "deploymentIsInProgressFilter", function(a, b) {
return function(c, d) {
return !!a(c, d) || !!b(c);
=======
return function(e) {
var t = null;
return angular.forEach(e, function(e) {
if (t) moment(t.metadata.creationTimestamp).isBefore(e.metadata.creationTimestamp) && (t = e); else {
if (!e.metadata.creationTimestamp) return;
t = e;
}
}), t;
};
}).filter("deploymentIsLatest", [ "annotationFilter", function(e) {
return function(t, n) {
return !(!n || !t) && parseInt(e(t, "deploymentVersion")) === n.status.latestVersion;
};
} ]).filter("deploymentStatus", [ "annotationFilter", "hasDeploymentConfigFilter", function(e, t) {
return function(n) {
if (e(n, "deploymentCancelled")) return "Cancelled";
var r = e(n, "deploymentStatus");
return !t(n) || "Complete" === r && n.spec.replicas > 0 ? "Active" : r;
};
} ]).filter("deploymentIsInProgress", [ "deploymentStatusFilter", function(e) {
return function(t) {
return [ "New", "Pending", "Running" ].indexOf(e(t)) > -1;
};
} ]).filter("anyDeploymentIsInProgress", [ "deploymentIsInProgressFilter", function(e) {
return function(t) {
return _.some(t, e);
};
} ]).filter("getActiveDeployment", [ "DeploymentsService", function(e) {
return function(t) {
return e.getActiveDeployment(t);
};
} ]).filter("isRecentDeployment", [ "deploymentIsLatestFilter", "deploymentIsInProgressFilter", function(e, t) {
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
return function(n, a) {
return !!e(n, a) || !!t(n);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
return function(n, r) {
return !!e(n, r) || !!t(n);
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
};
} ]).filter("buildStrategy", function() {
return function(e) {
if (!e || !e.spec || !e.spec.strategy) return null;
switch (e.spec.strategy.type) {
case "Source":
return e.spec.strategy.sourceStrategy;

case "Docker":
return e.spec.strategy.dockerStrategy;

case "Custom":
return e.spec.strategy.customStrategy;

case "JenkinsPipeline":
return e.spec.strategy.jenkinsPipelineStrategy;

default:
return null;
}
};
}).filter("isBinaryBuild", function() {
return function(e) {
return _.has(e, "spec.source.binary");
};
}).filter("isJenkinsPipelineStrategy", function() {
return function(e) {
return "JenkinsPipeline" === _.get(e, "spec.strategy.type");
};
}).filter("jenkinsLogURL", [ "annotationFilter", function(e) {
return function(t, n) {
var r = e(t, "jenkinsLogURL");
return !r || n ? r : r.replace(/\/consoleText$/, "/console");
};
} ]).filter("jenkinsBuildURL", [ "annotationFilter", "jenkinsLogURLFilter", function(e, t) {
return function(t) {
return e(t, "jenkinsBuildURL");
};
} ]).filter("jenkinsInputURL", [ "jenkinsBuildURLFilter", function(e) {
return function(t) {
var n = e(t);
return n ? new URI(n).segment("/input/").toString() : null;
};
} ]).filter("buildLogURL", [ "isJenkinsPipelineStrategyFilter", "jenkinsLogURLFilter", "navigateResourceURLFilter", function(e, t, n) {
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
return function(a) {
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
return "JenkinsPipeline" === _.get(a, "spec.strategy.type");
};
}).filter("jenkinsLogURL", [ "annotationFilter", function(a) {
return function(b, c) {
var d = a(b, "jenkinsLogURL");
return !d || c ? d : d.replace(/\/consoleText$/, "/console");
};
} ]).filter("jenkinsBuildURL", [ "annotationFilter", "jenkinsLogURLFilter", function(a, b) {
return function(b) {
return a(b, "jenkinsBuildURL");
};
} ]).filter("jenkinsInputURL", [ "jenkinsBuildURLFilter", function(a) {
return function(b) {
var c = a(b);
return c ? new URI(c).segment("/input/").toString() : null;
};
} ]).filter("buildLogURL", [ "isJenkinsPipelineStrategyFilter", "jenkinsLogURLFilter", "navigateResourceURLFilter", function(a, b, c) {
return function(d) {
if (a(d)) return b(d);
var e = c(d);
return e ? new URI(e).addSearch("tab", "logs").toString() : null;
};
} ]).filter("jenkinsfileLink", [ "isJenkinsPipelineStrategyFilter", "githubLinkFilter", function(a, b) {
return function(c) {
if (!a(c) || _.has(c, "spec.strategy.jenkinsPipelineStrategy.jenkinsfile")) return "";
var d = _.get(c, "spec.source.git.uri");
if (!d) return "";
var e = _.get(c, "spec.source.git.ref"), f = _.get(c, "spec.strategy.jenkinsPipelineStrategy.jenkinsfilePath", "Jenkinsfile"), g = _.get(c, "spec.source.contextDir");
g && (f = URI.joinPaths(g, f).path());
var h = b(d, e, f);
return URI(h).is("url") ? h : "";
=======
if (e(a)) return t(a);
var r = n(a);
return r ? new URI(r).addSearch("tab", "logs").toString() : null;
=======
return function(r) {
if (e(r)) return t(r);
var a = n(r);
return a ? new URI(a).addSearch("tab", "logs").toString() : null;
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
};
} ]).filter("jenkinsfileLink", [ "isJenkinsPipelineStrategyFilter", "githubLinkFilter", function(e, t) {
return function(n) {
if (!e(n) || _.has(n, "spec.strategy.jenkinsPipelineStrategy.jenkinsfile")) return "";
var r = _.get(n, "spec.source.git.uri");
if (!r) return "";
var a = _.get(n, "spec.source.git.ref"), o = _.get(n, "spec.strategy.jenkinsPipelineStrategy.jenkinsfilePath", "Jenkinsfile"), i = _.get(n, "spec.source.contextDir");
i && (o = URI.joinPaths(i, o).path());
var s = t(r, a, o);
return URI(s).is("url") ? s : "";
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
};
} ]).filter("pipelineStageComplete", function() {
return function(e) {
return !!e && -1 !== _.indexOf([ "ABORTED", "FAILED", "SUCCESS" ], e.status);
};
}).filter("pipelineStagePendingInput", function() {
return function(e) {
return !!e && "PAUSED_PENDING_INPUT" === e.status;
};
}).filter("deploymentStrategyParams", function() {
return function(e) {
switch (_.get(e, "spec.strategy.type")) {
case "Recreate":
return _.get(e, "spec.strategy.recreateParams", {});

case "Rolling":
return _.get(e, "spec.strategy.rollingParams", {});

case "Custom":
return _.get(e, "spec.strategy.customParams", {});

default:
return null;
}
};
}).filter("humanizeTLSTermination", function() {
return function(e) {
switch (e) {
case "edge":
return "Edge";

case "passthrough":
return "Passthrough";

case "reencrypt":
return "Re-encrypt";

default:
return e;
}
};
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
}).filter("kindToResource", [ "APIService", function(a) {
return a.kindToResource;
} ]).filter("abbreviateResource", [ "APIService", function(a) {
var b = {
=======
}).filter("kindToResource", [ "APIService", function(e) {
return e.kindToResource;
} ]).filter("abbreviateResource", [ "APIService", function(e) {
var t = {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
buildconfigs: "bc",
deploymentconfigs: "dc",
horizontalpodautoscalers: "hpa",
imagestreams: "is",
imagestreamtags: "istag",
replicasets: "rs",
replicationcontrollers: "rc",
services: "svc"
};
return function(e) {
return t[e] || e;
};
} ]).filter("humanizeQuotaResource", function() {
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
return function(a, b) {
if (!a) return a;
var c = {
=======
return function(e, t) {
if (!e) return e;
var n = {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
configmaps: "Config Maps",
cpu: "CPU (Request)",
"limits.cpu": "CPU (Limit)",
"limits.memory": "Memory (Limit)",
memory: "Memory (Request)",
"openshift.io/imagesize": "Image Size",
"openshift.io/imagestreamsize": "Image Stream Size",
"openshift.io/projectimagessize": "Project Image Size",
persistentvolumeclaims: "Persistent Volume Claims",
"requests.storage": "Storage (Request)",
pods: "Pods",
replicationcontrollers: "Replication Controllers",
"requests.cpu": "CPU (Request)",
"requests.memory": "Memory (Request)",
resourcequotas: "Resource Quotas",
secrets: "Secrets",
services: "Services",
"services.loadbalancers": "Service Load Balancers",
"services.nodeports": "Service Node Ports"
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
}, d = {
=======
}, a = {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
}, r = {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
configmaps: "config maps",
cpu: "CPU (request)",
"limits.cpu": "CPU (limit)",
"limits.memory": "memory (limit)",
memory: "memory (request)",
"openshift.io/imagesize": "image size",
"openshift.io/imagestreamsize": "image stream size",
"openshift.io/projectimagessize": "project image size",
persistentvolumeclaims: "persistent volume claims",
"requests.storage": "storage (request)",
replicationcontrollers: "replication controllers",
"requests.cpu": "CPU (request)",
"requests.memory": "memory (request)",
resourcequotas: "resource quotas",
"services.loadbalancers": "service load balancers",
"services.nodeports": "service node ports"
};
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
return b ? c[a] || a : d[a] || a;
};
}).filter("routeTargetPortMapping", [ "RoutesService", function(a) {
var b = function(a, b, c) {
a = a || "<unknown>", b = b || "<unknown>";
var d = "Service Port " + a + " → Container Port " + b;
return c && (d += " (" + c + ")"), d;
};
return function(c, d) {
if (!c.spec.port || !c.spec.port.targetPort || !d) return "";
var e = c.spec.port.targetPort, f = a.getServicePortForRoute(e, d);
return f ? b(f.port, f.targetPort, f.protocol) : angular.isString(e) ? b(e, null) : b(null, e);
};
} ]).filter("podStatus", function() {
return function(a) {
if (!a || !a.metadata.deletionTimestamp && !a.status) return "";
if (a.metadata.deletionTimestamp) return "Terminating";
var b = a.status.reason || a.status.phase;
return angular.forEach(a.status.containerStatuses, function(a) {
var c, d, e = _.get(a, "state.waiting.reason") || _.get(a, "state.terminated.reason");
return e ? void (b = e) : (c = _.get(a, "state.terminated.signal")) ? void (b = "Signal: " + c) : (d = _.get(a, "state.terminated.exitCode"), void (d && (b = "Exit Code: " + d)));
}), b;
=======
return t ? n[e] || e : a[e] || e;
=======
return t ? n[e] || e : r[e] || e;
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
};
}).filter("routeTargetPortMapping", [ "RoutesService", function(e) {
var t = function(e, t, n) {
var r = "Service Port " + (e = e || "<unknown>") + " → Container Port " + (t = t || "<unknown>");
return n && (r += " (" + n + ")"), r;
};
return function(n, r) {
if (!n.spec.port || !n.spec.port.targetPort || !r) return "";
var a = n.spec.port.targetPort, o = e.getServicePortForRoute(a, r);
return o ? t(o.port, o.targetPort, o.protocol) : angular.isString(a) ? t(a, null) : t(null, a);
};
} ]).filter("podStatus", function() {
return function(e) {
if (!e || !e.metadata.deletionTimestamp && !e.status) return "";
if (e.metadata.deletionTimestamp) return "Terminating";
var t = e.status.reason || e.status.phase;
return angular.forEach(e.status.containerStatuses, function(e) {
var n, r, a = _.get(e, "state.waiting.reason") || _.get(e, "state.terminated.reason");
a ? t = a : (n = _.get(e, "state.terminated.signal")) ? t = "Signal: " + n : (r = _.get(e, "state.terminated.exitCode")) && (t = "Exit Code: " + r);
}), t;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
};
}).filter("podStartTime", function() {
return function(e) {
var t = null;
return _.each(_.get(e, "status.containerStatuses"), function(e) {
var n = _.get(e, "state.running") || _.get(e, "state.terminated");
n && (t && !moment(n.startedAt).isBefore(t) || (t = n.startedAt));
}), t;
};
}).filter("podCompletionTime", function() {
return function(e) {
var t = null;
return _.each(_.get(e, "status.containerStatuses"), function(e) {
var n = _.get(e, "state.terminated");
n && (t && !moment(n.finishedAt).isAfter(t) || (t = n.finishedAt));
}), t;
};
}).filter("routeIngressCondition", function() {
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
return function(a, b) {
return a ? _.find(a.conditions, {
type: b
}) : null;
};
}).filter("routeHost", function() {
return function(a, b) {
if (!_.get(a, "status.ingress")) return _.get(a, "spec.host");
if (!a.status.ingress) return a.spec.host;
var c = null;
return angular.forEach(a.status.ingress, function(a) {
_.some(a.conditions, {
type: "Admitted",
status: "True"
}) && (!c || c.lastTransitionTime > a.lastTransitionTime) && (c = a);
}), c ? c.host : b ? null : a.spec.host;
};
}).filter("isRequestCalculated", [ "LimitRangesService", function(a) {
return function(b, c) {
return a.isRequestCalculated(b, c);
};
} ]).filter("isLimitCalculated", [ "LimitRangesService", function(a) {
return function(b, c) {
return a.isLimitCalculated(b, c);
};
} ]).filter("hpaCPUPercent", [ "HPAService", "LimitRangesService", function(a, b) {
return function(c, d) {
return c && b.isRequestCalculated("cpu", d) ? a.convertRequestPercentToLimit(c, d) : c;
};
} ]).filter("podTemplate", function() {
return function(a) {
return a ? "Pod" === a.kind ? a : _.get(a, "spec.template") : null;
=======
return function(e, t) {
return e ? _.find(e.conditions, {
type: t
}) : null;
};
}).filter("routeHost", function() {
return function(e, t) {
if (!_.get(e, "status.ingress")) return _.get(e, "spec.host");
if (!e.status.ingress) return e.spec.host;
var n = null;
return angular.forEach(e.status.ingress, function(e) {
_.some(e.conditions, {
type: "Admitted",
status: "True"
}) && (!n || n.lastTransitionTime > e.lastTransitionTime) && (n = e);
}), n ? n.host : t ? null : e.spec.host;
};
}).filter("isRequestCalculated", [ "LimitRangesService", function(e) {
return function(t, n) {
return e.isRequestCalculated(t, n);
};
} ]).filter("isLimitCalculated", [ "LimitRangesService", function(e) {
return function(t, n) {
return e.isLimitCalculated(t, n);
};
} ]).filter("hpaCPUPercent", [ "HPAService", "LimitRangesService", function(e, t) {
return function(n, r) {
return n && t.isRequestCalculated("cpu", r) ? e.convertRequestPercentToLimit(n, r) : n;
};
} ]).filter("podTemplate", function() {
return function(e) {
return e ? "Pod" === e.kind ? e : _.get(e, "spec.template") : null;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
};
}).filter("hasHealthChecks", function() {
return function(e) {
var t = _.get(e, "spec.containers", []);
return _.every(t, function(e) {
return e.readinessProbe || e.livenessProbe;
});
};
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
}).filter("scopeDetails", [ "sentenceCaseFilter", "gettext", "gettextCatalog", function(a, b, c) {
var d = {
Terminating: c.getString(b("Affects pods that have an active deadline. These pods usually include builds, deployers, and jobs.")),
NotTerminating: c.getString(b("Affects pods that do not have an active deadline. These pods usually include your applications.")),
BestEffort: c.getString(b("Affects pods that do not have resource limits set. These pods have a best effort quality of service.")),
NotBestEffort: c.getString(b("Affects pods that have at least one resource limit set. These pods do not have a best effort quality of service."))
};
return function(b) {
return d[b] || a(b);
=======
}).filter("scopeDetails", [ "sentenceCaseFilter", function(e) {
var t = {
Terminating: "Affects pods that have an active deadline. These pods usually include builds, deployers, and jobs.",
NotTerminating: "Affects pods that do not have an active deadline. These pods usually include your applications.",
BestEffort: "Affects pods that do not have resource limits set. These pods have a best effort quality of service.",
NotBestEffort: "Affects pods that have at least one resource limit set. These pods do not have a best effort quality of service."
};
return function(n) {
return t[n] || e(n);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
};
} ]).filter("isDebugPod", [ "annotationFilter", function(e) {
return function(t) {
return !!e(t, "debug.openshift.io/source-resource");
};
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
} ]).filter("debugPodSourceName", [ "annotationFilter", function(a) {
return function(b) {
var c = a(b, "debug.openshift.io/source-resource");
if (!c) return "";
var d = c.split("/");
return 2 !== d.length ? (Logger.warn('Invalid debug.openshift.io/source-resource annotation value "' + c + '"'), "") : d[1];
};
} ]).filter("entrypoint", function() {
var a = function(a) {
return _.isArray(a) ? a.join(" ") : a;
};
return function(b, c) {
if (!b) return null;
var d, e = a(b.command), f = a(b.args);
if (e && f) return e + " " + f;
if (e) return e;
if (c) {
if (d = a(_.get(c, "dockerImageMetadata.Config.Entrypoint") || [ "/bin/sh", "-c" ]), f) return d + " " + f;
if (e = a(_.get(c, "dockerImageMetadata.Config.Cmd"))) return d + " " + e;
}
return f ? "<image-entrypoint> " + f : null;
};
}).filter("unidleTargetReplicas", [ "annotationFilter", function(a) {
return function(b, c) {
var d;
if (b) try {
d = parseInt(a(b, "idledPreviousScale"));
} catch (e) {
Logger.error("Unable to parse previous scale annotation as a number.");
}
return d || _.get(_.head(c), "spec.minReplicas") || 1;
};
} ]).filter("lastDeploymentRevision", [ "annotationFilter", function(a) {
return function(b) {
if (!b) return "";
var c = a(b, "deployment.kubernetes.io/revision");
return c ? "#" + c : "Unknown";
=======
} ]).filter("debugPodSourceName", [ "annotationFilter", function(e) {
return function(t) {
var n = e(t, "debug.openshift.io/source-resource");
if (!n) return "";
var r = n.split("/");
return 2 !== r.length ? (Logger.warn('Invalid debug.openshift.io/source-resource annotation value "' + n + '"'), "") : r[1];
};
} ]).filter("entrypoint", function() {
var e = function(e) {
return _.isArray(e) ? e.join(" ") : e;
};
return function(t, n) {
if (!t) return null;
var r, a = e(t.command), o = e(t.args);
if (a && o) return a + " " + o;
if (a) return a;
if (n) {
if (r = e(_.get(n, "dockerImageMetadata.Config.Entrypoint") || [ "/bin/sh", "-c" ]), o) return r + " " + o;
if (a = e(_.get(n, "dockerImageMetadata.Config.Cmd"))) return r + " " + a;
}
return o ? "<image-entrypoint> " + o : null;
};
}).filter("unidleTargetReplicas", [ "annotationFilter", function(e) {
return function(t, n) {
var r;
if (t) try {
r = parseInt(e(t, "idledPreviousScale"));
} catch (e) {
Logger.error("Unable to parse previous scale annotation as a number.");
}
return r || _.get(_.head(n), "spec.minReplicas") || 1;
};
} ]).filter("lastDeploymentRevision", [ "annotationFilter", function(e) {
return function(t) {
if (!t) return "";
var n = e(t, "deployment.kubernetes.io/revision");
return n ? "#" + n : "Unknown";
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
};
} ]).filter("hasPostCommitHook", function() {
return function(e) {
return _.has(e, "spec.postCommit.command") || _.has(e, "spec.postCommit.script") || _.has(e, "spec.postCommit.args");
};
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
}).filter("volumeMountMode", [ "gettext", "gettextCatalog", function(a, b) {
var c = function(a) {
return _.has(a, "configMap") || _.has(a, "secret");
};
return function(d, e) {
if (!d) return "";
var f = _.find(e, {
name: d.name
});
return c(f) ? "read-only" : _.get(f, "persistentVolumeClaim.readOnly") ? "read-only" : b.getString(a(d.readOnly ? "read-only" : "read-write"));
};
} ]).filter("managesRollouts", [ "APIService", function(a) {
return function(b) {
if (!b) return !1;
var c = a.objectToResourceGroupVersion(b);
return "deploymentconfigs" === c.resource && !c.group || "deployments" === c.resource && ("apps" === c.group || "extensions" === c.group);
=======
}).filter("volumeMountMode", function() {
var e = function(e) {
return _.has(e, "configMap") || _.has(e, "secret");
};
return function(t, n) {
if (!t) return "";
var r = _.find(n, {
name: t.name
});
return e(r) ? "read-only" : _.get(r, "persistentVolumeClaim.readOnly") ? "read-only" : t.readOnly ? "read-only" : "read-write";
};
}).filter("managesRollouts", [ "APIService", function(e) {
return function(t) {
if (!t) return !1;
var n = e.objectToResourceGroupVersion(t);
return "deploymentconfigs" === n.resource && !n.group || "deployments" === n.resource && ("apps" === n.group || "extensions" === n.group);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
};
} ]).filter("hasAlternateBackends", function() {
return function(e) {
var t = _.get(e, "spec.alternateBackends", []);
return !_.isEmpty(t);
};
<<<<<<< c1147318f73829c1cb8cbc26a6e386eac5cdc733
<<<<<<< 0ba73cbc37b88f92a6380ccc93fc8e3d978020aa
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
}).filter("readyConditionMessage", [ "statusConditionFilter", function(a) {
return function(b) {
return _.get(a(b, "Ready"), "message");
};
<<<<<<< 61b7ccebc1be9196354cef218d1e7a812de7a0c6
} ]).filter("failedConditionMessage", [ "statusConditionFilter", function(a) {
return function(b) {
return _.get(a(b, "Failed"), "message");
};
} ]).filter("serviceInstanceConditionMessage", [ "serviceInstanceStatusFilter", "statusConditionFilter", function(a, b) {
return function(c) {
var d = a(c), e = null;
switch (d) {
case "Failed":
case "Ready":
e = _.get(b(c, d), "message");
}
return e;
};
} ]).filter("humanizeReason", function() {
return function(a) {
var b = _.startCase(a);
return b.replace("Back Off", "Back-off").replace("O Auth", "OAuth");
};
}).filter("humanizePodStatus", [ "humanizeReasonFilter", function(a) {
return a;
} ]), angular.module("openshiftConsole").filter("canIDoAny", [ "APIService", "canIFilter", function(a, b) {
var c = {
=======
}).filter("serviceInstanceDisplayName", function() {
return function(e, t) {
var n = e.spec.serviceClassName, a = e.metadata.name;
return _.get(t, [ n, "externalMetadata", "displayName" ]) || n || a;
=======
}).filter("serviceClassDisplayName", function() {
return function(e) {
var t = _.get(e, "spec.externalMetadata.displayName");
if (t) return t;
var n = _.get(e, "spec.externalName");
return n || _.get(e, "metadata.name");
};
}).filter("serviceInstanceDisplayName", [ "serviceClassDisplayNameFilter", function(e) {
return function(t, n) {
return n ? e(n) : _.get(t, "metadata.name");
>>>>>>> Adopt service catalog API changes
};
} ]).filter("serviceInstanceStatus", [ "isServiceInstanceReadyFilter", function(e) {
return function(t) {
var n = "Pending", a = _.get(t, "status.conditions");
return _.find(a, {
type: "Failed",
status: "True"
}) ? n = "Failed" : e(t) && (n = "Ready"), n;
};
} ]).filter("readyConditionMessage", [ "statusConditionFilter", function(e) {
=======
}).filter("readyConditionMessage", [ "statusConditionFilter", function(e) {
>>>>>>> Adopt more service catalog API changes
return function(t) {
return _.get(e(t, "Ready"), "message");
};
} ]).filter("failedConditionMessage", [ "statusConditionFilter", function(e) {
return function(t) {
return _.get(e(t, "Failed"), "message");
};
} ]).filter("serviceInstanceConditionMessage", [ "serviceInstanceStatusFilter", "statusConditionFilter", function(e, t) {
return function(n) {
var r = e(n), a = null;
switch (r) {
case "Failed":
case "Ready":
a = _.get(t(n, r), "message");
}
return a;
};
<<<<<<< cb7dcbef1807f5531ed9ec2003fe648e12b03a91
} ]), angular.module("openshiftConsole").filter("canIDoAny", [ "canIFilter", function(e) {
var t = {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
} ]).filter("humanizeReason", function() {
return function(e) {
return _.startCase(e).replace("Back Off", "Back-off").replace("O Auth", "OAuth");
};
}).filter("humanizePodStatus", [ "humanizeReasonFilter", function(e) {
return e;
} ]), angular.module("openshiftConsole").filter("canIDoAny", [ "APIService", "canIFilter", function(e, t) {
var n = {
>>>>>>> Special case some humanized reasons codes
buildConfigs: [ {
group: "",
resource: "buildconfigs",
verbs: [ "delete", "update" ]
}, {
group: "",
resource: "buildconfigs/instantiate",
verbs: [ "create" ]
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
=======
}), angular.module("openshiftConsole").filter("canIDoAny", [ "canIFilter", function(a) {
var b = {
buildConfigs:[ {
group:"",
resource:"buildconfigs",
verbs:[ "delete", "update" ]
}, {
group:"",
resource:"buildconfigs/instantiate",
verbs:[ "create" ]
=======
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
} ],
builds: [ {
group: "",
resource: "builds/clone",
verbs: [ "create" ]
}, {
group: "",
resource: "builds",
verbs: [ "delete", "update" ]
} ],
configmaps: [ {
group: "",
resource: "configmaps",
verbs: [ "update", "delete" ]
} ],
deployments: [ _.assign({}, e.getPreferredVersion("horizontalpodautoscalers"), {
verbs: [ "create", "update" ]
}), _.assign({}, e.getPreferredVersion("deployments"), {
verbs: [ "update", "delete" ]
<<<<<<< 5039c8c7f8414db2a48fcc7cfee104925c395e30
} ],
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
deploymentConfigs:[ {
group:"autoscaling",
resource:"horizontalpodautoscalers",
verbs:[ "create", "update" ]
}, {
group:"",
resource:"deploymentconfigs",
verbs:[ "create", "update" ]
>>>>>>> Use `apps` API group for deployments
} ],
builds: [ _.assign({}, a.getPreferredVersion("builds/clone"), {
verbs: [ "create" ]
}), _.assign({}, a.getPreferredVersion("builds"), {
verbs: [ "delete", "update" ]
}) ],
configmaps: [ {
group: "",
resource: "configmaps",
verbs: [ "update", "delete" ]
} ],
deployments: [ _.assign({}, a.getPreferredVersion("horizontalpodautoscalers"), {
verbs: [ "create", "update" ]
}), _.assign({}, a.getPreferredVersion("deployments"), {
verbs: [ "update", "delete" ]
}) ],
deploymentConfigs: [ _.assign({}, a.getPreferredVersion("horizontalpodautoscalers"), {
verbs: [ "create", "update" ]
}), _.assign({}, a.getPreferredVersion("deploymentconfigs"), {
verbs: [ "create", "update" ]
}) ],
horizontalPodAutoscalers: [ {
group: "autoscaling",
resource: "horizontalpodautoscalers",
verbs: [ "update", "delete" ]
} ],
imageStreams: [ _.assign({}, a.getPreferredVersion("imagestreams"), {
verbs: [ "update", "delete" ]
}) ],
serviceInstances: [ _.assign({}, a.getPreferredVersion("serviceinstances"), {
verbs: [ "update", "delete" ]
}) ],
<<<<<<< 732d662f7f842aa418e96c3675436cf858a18573
=======
=======
}) ],
>>>>>>> Update deployment controller to get getPreferredVersion
deploymentConfigs: [ {
group: "autoscaling",
resource: "horizontalpodautoscalers",
=======
deploymentConfigs: [ _.assign({}, e.getPreferredVersion("horizontalpodautoscalers"), {
>>>>>>> Update DeploymentConfig controller to use getPreferredVersion
verbs: [ "create", "update" ]
}), _.assign({}, e.getPreferredVersion("deploymentconfigs"), {
verbs: [ "create", "update" ]
}) ],
horizontalPodAutoscalers: [ {
group: "autoscaling",
resource: "horizontalpodautoscalers",
verbs: [ "update", "delete" ]
} ],
imageStreams: [ _.assign({}, e.getPreferredVersion("imagestreams"), {
verbs: [ "update", "delete" ]
<<<<<<< f5bee351fe1f2c950441897687b668e5bfdeb820
} ],
<<<<<<< 602d786018a3879a89789b1214b36a15c51b928b
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
=======
}) ],
<<<<<<< c1147318f73829c1cb8cbc26a6e386eac5cdc733
>>>>>>> Update ImageController to use getPreferredVersion
serviceInstances: [ {
group: "servicecatalog.k8s.io",
resource: "serviceinstances",
verbs: [ "update", "delete" ]
} ],
>>>>>>> Updates for Service Instance & Bindings
=======
serviceInstances: [ _.assign({}, e.getPreferredVersion("serviceinstances"), {
verbs: [ "update", "delete" ]
}) ],
>>>>>>> Adopt more service catalog API changes
persistentVolumeClaims: [ {
group: "",
resource: "persistentvolumeclaims",
verbs: [ "update", "delete" ]
} ],
pods: [ {
group: "",
resource: "pods",
verbs: [ "update", "delete" ]
}, {
group: "",
resource: "deploymentconfigs",
verbs: [ "update" ]
} ],
replicaSets: [ {
group: "autoscaling",
resource: "horizontalpodautoscalers",
verbs: [ "create", "update" ]
}, {
group: "extensions",
resource: "replicasets",
verbs: [ "update", "delete" ]
} ],
replicationControllers: [ {
group: "",
resource: "replicationcontrollers",
verbs: [ "update", "delete" ]
} ],
routes: [ {
group: "",
resource: "routes",
verbs: [ "update", "delete" ]
} ],
services: [ {
group: "",
resource: "services",
verbs: [ "update", "create", "delete" ]
} ],
secrets: [ {
group: "",
resource: "secrets",
verbs: [ "update", "delete" ]
} ],
projects: [ {
group: "",
resource: "projects",
verbs: [ "delete", "update" ]
} ],
statefulsets: [ {
group: "apps",
resource: "statefulsets",
verbs: [ "update", "delete" ]
} ]
};
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
return function(a) {
return _.some(c[a], function(a) {
return _.some(a.verbs, function(c) {
return b({
resource: a.resource,
group: a.group
}, c);
=======
return function(n) {
return _.some(t[n], function(t) {
return _.some(t.verbs, function(n) {
return e({
resource: t.resource,
group: t.group
}, n);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
});
});
};
} ]).filter("canIScale", [ "canIFilter", "hasDeploymentConfigFilter", "DeploymentsService", function(e, t, n) {
return function(t) {
var r = n.getScaleResource(t);
return e(r, "update");
};
} ]), angular.module("openshiftConsole").filter("underscore", function() {
return function(e) {
return e.replace(/\./g, "_");
};
}).filter("defaultIfBlank", function() {
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
return function(a, b) {
return null === a ? b : ("string" != typeof a && (a = String(a)), 0 === a.trim().length ? b : a);
=======
return function(e, t) {
return null === e ? t : ("string" != typeof e && (e = String(e)), 0 === e.trim().length ? t : e);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
};
}).filter("keys", function() {
return _.keys;
}).filter("usageValue", function() {
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
return function(a) {
if (!a) return a;
var b = /(-?[0-9\.]+)\s*(.*)/.exec(a);
if (!b) return a;
var c = b[1];
c = c.indexOf(".") >= 0 ? parseFloat(c) : parseInt(b[1]);
var d = b[2], e = 1;
switch (d) {
=======
return function(e) {
if (!e) return e;
var t = /(-?[0-9\.]+)\s*(.*)/.exec(e);
if (!t) return e;
var n = t[1];
n = n.indexOf(".") >= 0 ? parseFloat(n) : parseInt(t[1]);
var r = 1;
switch (t[2]) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
case "E":
r = Math.pow(1e3, 6);
break;

case "P":
r = Math.pow(1e3, 5);
break;

case "T":
r = Math.pow(1e3, 4);
break;

case "G":
r = Math.pow(1e3, 3);
break;

case "M":
r = Math.pow(1e3, 2);
break;

case "K":
case "k":
r = 1e3;
break;

case "m":
r = .001;
break;

case "Ei":
r = Math.pow(1024, 6);
break;

case "Pi":
r = Math.pow(1024, 5);
break;

case "Ti":
r = Math.pow(1024, 4);
break;

case "Gi":
r = Math.pow(1024, 3);
break;

case "Mi":
r = Math.pow(1024, 2);
break;

case "Ki":
r = 1024;
}
return n * r;
};
}).filter("humanizeUnit", function() {
return function(e, t, n) {
switch (t) {
case "memory":
case "limits.memory":
case "requests.memory":
case "storage":
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
return a ? a + "B" : a;
=======
return e ? e + "B" : e;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1

case "cpu":
case "limits.cpu":
case "requests.cpu":
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
"m" === a && (a = "milli");
var d = c ? "core" : "cores";
return (a || "") + d;
=======
"m" === e && (e = "milli");
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
var a = n ? "core" : "cores";
return (e || "") + a;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
var r = n ? "core" : "cores";
return (e || "") + r;
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion

default:
return e;
}
};
}).filter("amountAndUnit", [ "humanizeUnitFilter", function(e) {
return function(t, n, r) {
if (!t) return [ t, null ];
var a = /(-?[0-9\.]+)\s*(.*)/.exec(t);
if (!a) return [ t, null ];
var o = a[1], i = a[2];
return r && (i = e(i, n, "1" === o)), [ o, i ];
};
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
} ]).filter("usageWithUnits", [ "amountAndUnitFilter", function(a) {
return function(b, c) {
var d = _.spread(function(a, b) {
return b ? a + " " + b : a;
});
return d(a(b, c, !0));
=======
} ]).filter("usageWithUnits", [ "amountAndUnitFilter", function(e) {
return function(t, n) {
return _.spread(function(e, t) {
return t ? e + " " + t : e;
})(e(t, n, !0));
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
};
} ]).filter("humanizeSize", function() {
return function(e) {
if (null === e || void 0 === e || "" === e) return e;
if ((e = Number(e)) < 1024) return e + " bytes";
var t = e / 1024;
if (t < 1024) return t.toFixed(1) + " KiB";
var n = t / 1024;
return n < 1024 ? n.toFixed(1) + " MiB" : (n / 1024).toFixed(1) + " GiB";
};
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
}).filter("computeResourceLabel", [ "gettext", "gettextCatalog", function(a, b) {
return function(c, d) {
switch (c) {
=======
}).filter("computeResourceLabel", function() {
return function(e, t) {
switch (e) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
case "cpu":
return "CPU";

case "memory":
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
return d ? b.getString(a("Memory")) : b.getString(a("memory"));

default:
return c;
}
};
} ]).filter("helpLink", [ "Constants", function(a) {
return function(b) {
var c = a.HELP[b] || a.HELP["default"];
return URI(c).is("absolute") || (c = a.HELP_BASE_URL + c), c;
};
} ]).filter("taskTitle", function() {
return function(a) {
return "completed" !== a.status ? a.titles.started : a.hasErrors ? a.titles.failure : a.titles.success;
};
}).filter("httpHttps", function() {
return function(a) {
return a ? "https://" : "http://";
};
}).filter("isGithubLink", function() {
var a = /^(?:https?:\/\/|git:\/\/|git\+ssh:\/\/|git\+https:\/\/)?(?:[^@]+@)?github\.com[:\/]([^\/]+\/[^\/]+?)(\/|(?:\.git(#.*)?))?$/;
return function(b) {
return b ? a.test(b) : b;
};
}).filter("githubLink", function() {
return function(a, b, c) {
var d = a.match(/^(?:https?:\/\/|git:\/\/|git\+ssh:\/\/|git\+https:\/\/)?(?:[^@]+@)?github\.com[:\/]([^\/]+\/[^\/]+?)(\/|(?:\.git(#.*)?))?$/);
return d && (a = "https://github.com/" + d[1], c && "/" === c.charAt(0) && (c = c.substring(1)), c ? (c = encodeURIComponent(c), c = c.replace("%2F", "/"), a += "/tree/" + encodeURIComponent(b || "master") + "/" + c) : b && "master" !== b && (a += "/tree/" + encodeURIComponent(b))), a;
};
}).filter("yesNo", function() {
return function(a) {
return a ? "Yes" : "No";
=======
return t ? "Memory" : "memory";

default:
return e;
}
};
}).filter("helpLink", [ "Constants", function(e) {
return function(t) {
var n = e.HELP[t] || e.HELP.default;
return URI(n).is("absolute") || (n = e.HELP_BASE_URL + n), n;
};
} ]).filter("taskTitle", function() {
return function(e) {
return "completed" !== e.status ? e.titles.started : e.hasErrors ? e.titles.failure : e.titles.success;
};
}).filter("httpHttps", function() {
return function(e) {
return e ? "https://" : "http://";
};
}).filter("isGithubLink", function() {
var e = /^(?:https?:\/\/|git:\/\/|git\+ssh:\/\/|git\+https:\/\/)?(?:[^@]+@)?github\.com[:\/]([^\/]+\/[^\/]+?)(\/|(?:\.git(#.*)?))?$/;
return function(t) {
return t ? e.test(t) : t;
};
}).filter("githubLink", function() {
return function(e, t, n) {
var r = e.match(/^(?:https?:\/\/|git:\/\/|git\+ssh:\/\/|git\+https:\/\/)?(?:[^@]+@)?github\.com[:\/]([^\/]+\/[^\/]+?)(\/|(?:\.git(#.*)?))?$/);
return r && (e = "https://github.com/" + r[1], n && "/" === n.charAt(0) && (n = n.substring(1)), n ? (n = (n = encodeURIComponent(n)).replace("%2F", "/"), e += "/tree/" + encodeURIComponent(t || "master") + "/" + n) : t && "master" !== t && (e += "/tree/" + encodeURIComponent(t))), e;
};
}).filter("yesNo", function() {
return function(e) {
return e ? "Yes" : "No";
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
};
}).filter("valuesIn", function() {
return function(e, t) {
if (!t) return {};
var n = t.split(","), r = {};
return angular.forEach(e, function(e, t) {
-1 !== n.indexOf(t) && (r[t] = e);
}), r;
};
}).filter("valuesNotIn", function() {
return function(e, t) {
if (!t) return e;
var n = t.split(","), r = {};
return angular.forEach(e, function(e, t) {
-1 === n.indexOf(t) && (r[t] = e);
}), r;
};
}).filter("stripSHAPrefix", function() {
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
return function(a) {
return a ? a.replace(/^sha256:/, "") : a;
};
}).filter("limitToOrAll", [ "limitToFilter", function(a) {
return function(b, c) {
return isNaN(c) ? b : a(b, c);
};
} ]).filter("getErrorDetails", [ "gettext", "gettextCatalog", function(a, b) {
return function(c) {
var d = c.data || {};
if (d.message) return b.getString(a("Reason:")) + " " + d.message;
var e = c.status || d.status;
return e ? b.getString(a("Status:")) + " " + e : "";
};
} ]).filter("humanize", function() {
return function(a) {
return a.replace(/([a-z])([A-Z])/g, "$1 $2").replace(/\b([A-Z]+)([A-Z])([a-z])/, "$1 $2$3").replace(/^./, function(a) {
return a.toUpperCase();
});
};
}).filter("navigateResourceURL", [ "Navigate", function(a) {
return function(b, c, d, e) {
return a.resourceURL(b, c, d, null, {
apiVersion: e
});
};
} ]).filter("navigateEventInvolvedObjectURL", [ "Navigate", function(a) {
return function(b) {
return a.resourceURL(b.involvedObject.name, b.involvedObject.kind, b.involvedObject.namespace, null, {
apiVersion: b.involvedObject.apiVersion
});
};
} ]).filter("navigateToTabURL", [ "Navigate", function(a) {
return function(b, c) {
return a.resourceURL(b, null, null, null, {
tab: c
=======
return function(e) {
return e ? e.replace(/^sha256:/, "") : e;
};
}).filter("limitToOrAll", [ "limitToFilter", function(e) {
return function(t, n) {
return isNaN(n) ? t : e(t, n);
};
} ]).filter("getErrorDetails", function() {
return function(e) {
var t = e.data || {};
if (t.message) return "Reason: " + t.message;
var n = e.status || t.status;
return n ? "Status: " + n : "";
};
}).filter("humanize", function() {
return function(e) {
return e.replace(/([a-z])([A-Z])/g, "$1 $2").replace(/\b([A-Z]+)([A-Z])([a-z])/, "$1 $2$3").replace(/^./, function(e) {
return e.toUpperCase();
});
};
}).filter("navigateResourceURL", [ "Navigate", function(e) {
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
return function(t, n, a, r) {
return e.resourceURL(t, n, a, null, {
apiVersion: r
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
return function(t, n, r, a) {
return e.resourceURL(t, n, r, null, {
apiVersion: a
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
});
};
} ]).filter("navigateEventInvolvedObjectURL", [ "Navigate", function(e) {
return function(t) {
return e.resourceURL(t.involvedObject.name, t.involvedObject.kind, t.involvedObject.namespace, null, {
apiVersion: t.involvedObject.apiVersion
});
};
} ]).filter("navigateToTabURL", [ "Navigate", function(e) {
return function(t, n) {
return e.resourceURL(t, null, null, null, {
tab: n
});
};
} ]).filter("configURLForResource", [ "Navigate", function(e) {
return function(t, n) {
return e.configURLForResource(t, n);
};
} ]).filter("editResourceURL", [ "Navigate", function(e) {
return function(t, n, r) {
return e.resourceURL(t, n, r, "edit");
};
} ]).filter("editYamlURL", [ "Navigate", function(e) {
return function(t, n) {
return e.yamlURL(t, n);
};
} ]).filter("join", function() {
return function(e, t) {
return t || (t = ","), e.join(t);
};
}).filter("accessModes", function() {
return function(e, t) {
if (!e) return e;
var n = [];
return angular.forEach(e, function(e) {
var r, a = "long" === t;
switch (e) {
case "ReadWriteOnce":
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
d = e ? "RWO (Read-Write-Once)" : "Read-Write-Once";
break;

case "ReadOnlyMany":
d = e ? "ROX (Read-Only-Many)" : "Read-Only-Many";
break;

case "ReadWriteMany":
d = e ? "RWX (Read-Write-Many)" : "Read-Write-Many";
=======
a = r ? "RWO (Read-Write-Once)" : "Read-Write-Once";
=======
r = a ? "RWO (Read-Write-Once)" : "Read-Write-Once";
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
break;

case "ReadOnlyMany":
r = a ? "ROX (Read-Only-Many)" : "Read-Only-Many";
break;

case "ReadWriteMany":
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
a = r ? "RWX (Read-Write-Many)" : "Read-Write-Many";
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
=======
r = a ? "RWX (Read-Write-Many)" : "Read-Write-Many";
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
break;

default:
r = e;
}
n.push(r);
}), _.uniq(n);
};
}).filter("middleEllipses", function() {
return function(e, t, n) {
if (t < 3) return e;
if (e.length <= t) return e;
n || (n = "...");
var r = Math.floor((t - 1) / 2);
return e.slice(0, r) + n + e.slice(e.length - r);
};
}).filter("isNil", function() {
return function(e) {
return null === e || void 0 === e;
};
}).filter("percent", function() {
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
return function(a, b) {
return null === a || void 0 === a ? a : _.round(100 * Number(a), b) + "%";
};
}).filter("filterCollection", function() {
return function(a, b) {
return a && b ? _.filter(a, b) : a;
=======
return function(e, t) {
return null === e || void 0 === e ? e : _.round(100 * Number(e), t) + "%";
};
}).filter("filterCollection", function() {
return function(e, t) {
return e && t ? _.filter(e, t) : e;
};
<<<<<<< 3087d5859f05def6301fced3a013ac9165fd8c7a
}).filter("isAbsoluteURL", function() {
return function(e) {
if (!e) return !1;
var t = new URI(e), n = t.protocol();
return t.is("absolute") && ("http" === n || "https" === n);
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
};
=======
>>>>>>> Add SVG icons
}).filter("isIE", function() {
var e = navigator.userAgent, t = /msie|trident/i.test(e);
return function() {
return t;
};
}).filter("isEdge", function() {
var e = navigator.userAgent, t = /chrome.+? edge/i.test(e);
return function() {
return t;
};
}).filter("abs", function() {
return function(e) {
return Math.abs(e);
};
}).filter("encodeURIComponent", function() {
return window.encodeURIComponent;
}).filter("enableTechPreviewFeature", [ "Constants", function(e) {
return function(t) {
return _.get(e, [ "ENABLE_TECH_PREVIEW_FEATURE", t ], !1);
};
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< b93368d5a70197ced8017a127baac07189b78e00
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
<<<<<<< f56378c1e748449074be8738ae159f02ed953303
} ]), angular.module("openshiftConsole").factory("logLinks", [ "$anchorScroll", "$document", "$location", "$window", function(a, b, c, d) {
=======
} ]), angular.module("openshiftConsole").directive("affix", [ "$window", function(a) {
=======
} ]), angular.module("openshiftConsole").directive("affix", [ "$window", function(e) {
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
return {
restrict: "AE",
scope: {
offsetTop: "@",
offsetBottom: "@"
},
link: function(e, t, n, a) {
t.affix({
offset: {
top: n.offsetTop,
bottom: n.offsetBottom
}
});
}
};
} ]), function() {
angular.module("openshiftConsole").component("editEnvironmentVariables", {
controller: [ "$filter", "APIService", "DataService", "EnvironmentService", "NotificationsService", function(e, t, n, a, r) {
var o, i, s, c, l = this, u = !1, d = [], m = [], p = !1, g = e("canI"), f = e("getErrorDetails"), h = e("humanizeKind"), v = e("orderByDisplayName"), y = function(e, t) {
u || (l.form && !l.form.$pristine && l.updatedObject ? a.isEnvironmentEqual(e, t) ? l.updatedObject = a.mergeEdits(e, t) : (u = !0, r.addNotification({
type: "warning",
message: "The environment variables for the " + o + " have been updated in the background.",
details: "Saving your changes may create a conflict or cause loss of data."
})) : l.updatedObject = a.copyAndNormalize(e));
}, b = function() {
n.list("configmaps", {
namespace: l.apiObject.metadata.namespace
}).then(function(e) {
d = v(e.by("metadata.name")), l.valueFromObjects = d.concat(m);
});
}, C = function() {
g("secrets", "list") && n.list("secrets", {
namespace: l.apiObject.metadata.namespace
}).then(function(e) {
m = v(e.by("metadata.name")), l.valueFromObjects = d.concat(m);
});
}, S = function() {
p || (p = !0, b(), C());
}, _ = function(e, n) {
o = h(e.kind), i = e.metadata.name, s = t.objectToResourceGroupVersion(e), l.canIUpdate = g(s, "update"), c ? c.finally(function() {
y(e, n);
}) : y(e, n), l.containers = a.getContainers(l.updatedObject), l.disableValueFrom || l.ngReadonly || !l.canIUpdate || S();
};
l.$onChanges = function(e) {
e.apiObject && e.apiObject.currentValue && _(e.apiObject.currentValue, e.apiObject.previousValue);
}, l.save = function() {
var e = "save-env-error-" + i;
r.hideNotification(e), a.compact(l.updatedObject), (c = n.update(s, i, l.updatedObject, {
namespace: l.updatedObject.metadata.namespace
})).then(function() {
r.addNotification({
type: "success",
message: "Environment variables for " + o + " " + i + " were successfully updated."
}), l.form.$setPristine();
}, function(t) {
r.addNotification({
id: e,
type: "error",
message: "An error occurred updating environment variables for " + o + " " + i + ".",
details: f(t)
});
}).finally(function() {
c = null;
});
}, l.clearChanges = function() {
l.updatedObject = a.copyAndNormalize(l.apiObject), l.form.$setPristine(), u = !1;
};
} ],
controllerAs: "$ctrl",
bindings: {
apiObject: "<",
ngReadonly: "<",
disableValueFrom: "<"
},
templateUrl: "views/directives/edit-environment-variables.html"
});
}(), angular.module("openshiftConsole").factory("logLinks", [ "$anchorScroll", "$document", "$location", "$window", function(e, t, n, a) {
=======
} ]), angular.module("openshiftConsole").factory("logLinks", [ "$anchorScroll", "$document", "$location", "$window", function(e, t, n, a) {
>>>>>>> Bug 1476157 - Fix minification problems due to dependency injection
var r = _.template([ "/#/discover?", "_g=(", "time:(", "from:now-1w,", "mode:relative,", "to:now", ")", ")", "&_a=(", "columns:!(kubernetes.container_name,message),", "index:'project.<%= namespace %>.<%= namespaceUid %>.*',", "query:(", "query_string:(", "analyze_wildcard:!t,", 'query:\'kubernetes.pod_name:"<%= podname %>" AND kubernetes.namespace_name:"<%= namespace %>"\'', ")", "),", "sort:!('@timestamp',desc)", ")", "#console_container_name=<%= containername %>", "&console_back_url=<%= backlink %>" ].join(""));
=======
} ]), angular.module("openshiftConsole").factory("logLinks", [ "$anchorScroll", "$document", "$location", "$window", function(e, t, n, r) {
var a = _.template([ "/#/discover?", "_g=(", "time:(", "from:now-1w,", "mode:relative,", "to:now", ")", ")", "&_a=(", "columns:!(kubernetes.container_name,message),", "index:'project.<%= namespace %>.<%= namespaceUid %>.*',", "query:(", "query_string:(", "analyze_wildcard:!t,", 'query:\'kubernetes.pod_name:"<%= podname %>" AND kubernetes.namespace_name:"<%= namespace %>"\'', ")", "),", "sort:!('@timestamp',desc)", ")", "#console_container_name=<%= containername %>", "&console_back_url=<%= backlink %>" ].join(""));
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
return {
scrollTop: function(e) {
e ? e.scrollTop = 0 : window.scrollTo(null, 0);
},
scrollBottom: function(e) {
e ? e.scrollTop = e.scrollHeight : window.scrollTo(0, document.documentElement.scrollHeight - document.documentElement.clientHeight);
},
chromelessLink: function(e, t) {
if (t) r.open(t, "_blank"); else {
var n = {
view: "chromeless"
};
e && e.container && (n.container = e.container), n = _.flatten([ n ]);
var a = new URI();
_.each(n, function(e) {
a.addSearch(e);
}), r.open(a.toString(), "_blank");
}
},
archiveUri: function(e) {
return a(e);
}
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
angular.module("openshiftConsole").component("editEnvironmentVariables", {
controller:[ "$filter", "APIService", "DataService", "EnvironmentService", "NotificationsService", a ],
controllerAs:"$ctrl",
bindings:{
apiObject:"<",
ngReadonly:"<",
disableValueFrom:"<"
},
templateUrl:"views/directives/edit-environment-variables.html"
});
}(), angular.module("openshiftConsole").factory("logLinks", [ "$anchorScroll", "$document", "$location", "$window", function(a, b, c, d) {
>>>>>>> Create reusable edit-environment-variables component
var e = function(a) {
a ? a.scrollTop = 0 : window.scrollTo(null, 0);
}, f = function(a) {
a ? a.scrollTop = a.scrollHeight : window.scrollTo(0, document.documentElement.scrollHeight - document.documentElement.clientHeight);
}, g = function(a, b) {
if (b) return void d.open(b, "_blank");
var c = {
view: "chromeless"
};
a && a.container && (c.container = a.container), c = _.flatten([ c ]);
var e = new URI();
_.each(c, function(a) {
e.addSearch(a);
}), d.open(e.toString(), "_blank");
}, h = _.template([ "/#/discover?", "_g=(", "time:(", "from:now-1w,", "mode:relative,", "to:now", ")", ")", "&_a=(", "columns:!(kubernetes.container_name,message),", "index:'project.<%= namespace %>.<%= namespaceUid %>.*',", "query:(", "query_string:(", "analyze_wildcard:!t,", 'query:\'kubernetes.pod_name:"<%= podname %>" AND kubernetes.namespace_name:"<%= namespace %>"\'', ")", "),", "sort:!('@timestamp',desc)", ")", "#console_container_name=<%= containername %>", "&console_back_url=<%= backlink %>" ].join("")), i = function(a) {
return h(a);
};
return {
scrollTop: e,
scrollBottom: f,
chromelessLink: g,
archiveUri: i
};
} ]), function() {
var a = "javaLinkExtension";
angular.module(a, [ "openshiftConsole" ]).run([ "AuthService", "BaseHref", "DataService", "extensionRegistry", function(a, b, c, d) {
var e = [ "<div row ", 'ng-show="item.url" ', 'class="icon-row" ', 'title="Connect to container">', '<div class="icon-wrap">', '<i class="fa fa-share" aria-hidden="true"></i>', "</div>", "<div flex>", '<a ng-click="item.onClick($event)" ', 'ng-href="item.url">', "Open Java Console", "</a>", "</div>", "</div>" ].join(""), f = function(a, b, d) {
return new URI(c.url({
resource: "pods/proxy",
name: [ "https", b, d || "" ].join(":"),
namespace: a
=======
};
} ]), angular.module("javaLinkExtension", [ "openshiftConsole" ]).run([ "AuthService", "BaseHref", "DataService", "extensionRegistry", function(e, t, n, r) {
var a = [ "<div row ", 'ng-show="item.url" ', 'class="icon-row" ', 'title="Connect to container">', '<div class="icon-wrap">', '<i class="fa fa-share" aria-hidden="true"></i>', "</div>", "<div flex>", '<a ng-click="item.onClick($event)" ', 'ng-href="item.url">', "Open Java Console", "</a>", "</div>", "</div>" ].join(""), o = function(e, t, r) {
return new URI(n.url({
resource: "pods/proxy",
name: [ "https", t, r || "" ].join(":"),
namespace: e
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
})).segment("jolokia/");
};
r.add("container-links", _.spread(function(n, r) {
var i = _.find(n.ports || [], function(e) {
return e.name && "jolokia" === e.name.toLowerCase();
});
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
if (i && i.ready) {
var j = d.metadata.name, k = d.metadata.namespace, l = f(k, j, g.containerPort).toString(), m = function(d) {
d.preventDefault(), d.stopPropagation();
var e = window.location.href, f = c.name || "Untitled Container", g = a.UserStore().getToken() || "", h = new URI().path(b).segment("java").segment("").hash(g).query({
jolokiaUrl: l,
title: f,
returnTo: e
=======
if (i && "Running" === _.get(a, "status.phase")) {
var s = a.status.containerStatuses, c = _.find(s, function(e) {
=======
if (i && "Running" === _.get(r, "status.phase")) {
var s = r.status.containerStatuses, c = _.find(s, function(e) {
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
return e.name === n.name;
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
});
if (c && c.ready) {
var l = r.metadata.name, u = r.metadata.namespace, d = o(u, l, i.containerPort).toString();
return {
type: "dom",
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
node: e,
onClick: m,
url: l
=======
node: r,
onClick: function(a) {
a.preventDefault(), a.stopPropagation();
var r = window.location.href, o = n.name || "Untitled Container", i = e.UserStore().getToken() || "", s = new URI().path(t).segment("java").segment("").hash(i).query({
=======
node: a,
onClick: function(r) {
r.preventDefault(), r.stopPropagation();
var a = window.location.href, o = n.name || "Untitled Container", i = e.UserStore().getToken() || "", s = new URI().path(t).segment("java").segment("").hash(i).query({
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
jolokiaUrl: d,
title: o,
returnTo: a
});
window.location.href = s.toString();
},
url: d
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
};
}
}
}));
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
} ]), hawtioPluginLoader.addModule(a);
}(), angular.module("openshiftConsole").run([ "extensionRegistry", function(a) {
a.add("nav-help-dropdown", function() {
var a = [];
if (a.push({
type: "dom",
node: '<li><a target="_blank" href="{{\'default\' | helpLink}}">Documentation</a></li>'
}), !_.get(window, "OPENSHIFT_CONSTANTS.DISABLE_SERVICE_CATALOG_LANDING_PAGE")) {
var b = _.get(window, "OPENSHIFT_CONSTANTS.GUIDED_TOURS.landing_page_tour");
b && b.enabled && b.steps && a.push({
=======
} ]), hawtioPluginLoader.addModule("javaLinkExtension"), angular.module("openshiftConsole").run([ "extensionRegistry", function(e) {
e.add("nav-help-dropdown", function() {
var e = [];
if (e.push({
type: "dom",
node: '<li><a target="_blank" href="{{\'default\' | helpLink}}">Documentation</a></li>'
}), !_.get(window, "OPENSHIFT_CONSTANTS.DISABLE_SERVICE_CATALOG_LANDING_PAGE")) {
var t = _.get(window, "OPENSHIFT_CONSTANTS.GUIDED_TOURS.landing_page_tour");
t && t.enabled && t.steps && e.push({
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
type: "dom",
node: '<li><a href="./?startTour=true">Tour Home Page</a></li>'
});
}
<<<<<<< d18baaa1da41b003bde74e653bb5a7ac8303f42a
return a.push({
type: "dom",
node: '<li><a href="command-line">Command Line Tools</a></li>'
}), a.push({
type: "dom",
node: '<li><a href="about">About</a></li>'
}), a;
});
} ]), angular.module("openshiftConsole").run([ "extensionRegistry", "$rootScope", "DataService", "AuthService", "gettext", "gettextCatalog", function(a, b, c, d, e, f) {
a.add("nav-user-dropdown", function() {
var a = [];
_.get(window, "OPENSHIFT_CONSTANTS.DISABLE_COPY_LOGIN_COMMAND") || a.push({
type: "dom",
node: '<li><copy-login-to-clipboard clipboard-text="oc login ' + _.escape(c.openshiftAPIBaseUrl()) + " --token=" + _.escape(d.UserStore().getToken()) + '"></copy-login-to-clipboard></li>'
});
var g = f.getString(e("Log Out"));
return b.user.fullName && b.user.fullName !== b.user.metadata.name && (g += " (" + b.user.metadata.name + ")"), a.push({
type: "dom",
node: '<li><a href="logout">' + _.escape(g) + "</a></li>"
}), a;
});
} ]), angular.module("openshiftConsole").run([ "extensionRegistry", "Constants", function(a, b) {
a.add("nav-dropdown-mobile", _.spread(function(a) {
var c = [], d = b.APP_LAUNCHER_NAVIGATION;
return _.each(d, function(a) {
var b = {
type: "dom",
node: [ '<li class="list-group-item">', '<a href="' + _.escape(a.href) + '">', '<span class="' + _.escape(a.iconClass) + ' fa-fw" aria-hidden="true"></span> ', '<span class="list-group-item-value">' + _.escape(a.title) + "</span>", "</a>", "</li>" ].join("")
};
c.push(b);
}), c = c.concat([ {
type: "dom",
node: [ '<li class="list-group-item">', "<a href=\"{{'default' | helpLink}}\">", '<span class="fa fa-book fa-fw" aria-hidden="true"></span> <span class="list-group-item-value">Documentation</span>', "</a>", "</li>" ].join("")
}, {
type: "dom",
node: [ '<li class="list-group-item">', '<a href="command-line">', '<span class="fa fa-terminal" aria-hidden="true"></span> <span class="list-group-item-value">Command Line Tools</span>', "</a>", "</li>" ].join("")
}, {
type: "dom",
node: [ '<li class="list-group-item">', '<a href="about">', '<span class="pficon pficon-info fa-fw" aria-hidden="true"></span> <span class="list-group-item-value">About</span>', "</a>", "</li>" ].join("")
}, {
type: "dom",
node: _.template([ '<li class="list-group-item">', '<a href="logout">', '<span class="pficon pficon-user fa-fw" aria-hidden="true"></span>', '<span class="list-group-item-value">Log out <span class="username"><%= userName %></span></span>', "</a>", "</li>" ].join(""))({
userName: a ? a.fullName || a.metadata.name : ""
=======
return e.push({
type: "dom",
node: '<li><a href="command-line">Command Line Tools</a></li>'
}), e.push({
type: "dom",
node: '<li><a href="about">About</a></li>'
}), e;
});
} ]), angular.module("openshiftConsole").run([ "extensionRegistry", "$rootScope", "DataService", "AuthService", function(e, t, n, r) {
e.add("nav-user-dropdown", function() {
var e = [];
_.get(window, "OPENSHIFT_CONSTANTS.DISABLE_COPY_LOGIN_COMMAND") || e.push({
type: "dom",
<<<<<<< 2aa1fff2409c56d6a4dce433f2d20d43487ff288
node: "<li><copy-login-to-clipboard clipboard-text=\"'oc login " + n.openshiftAPIBaseUrl() + " --token=" + a.UserStore().getToken() + "'\"></copy-login-to-clipboard></li>"
=======
node: '<li><copy-login-to-clipboard clipboard-text="oc login ' + _.escape(n.openshiftAPIBaseUrl()) + " --token=" + _.escape(r.UserStore().getToken()) + '"></copy-login-to-clipboard></li>'
>>>>>>> Update editEnvironmentVariables directive to use getPreferredVersion
});
var a = "Log Out";
return t.user.fullName && t.user.fullName !== t.user.metadata.name && (a += " (" + t.user.metadata.name + ")"), e.push({
type: "dom",
node: '<li><a href="logout">' + _.escape(a) + "</a></li>"
}), e;
});
} ]), angular.module("openshiftConsole").run([ "extensionRegistry", "Constants", function(e, t) {
e.add("nav-dropdown-mobile", _.spread(function(e) {
var n = [], r = t.APP_LAUNCHER_NAVIGATION;
return _.each(r, function(e) {
var t = {
type: "dom",
node: [ '<li class="list-group-item">', '<a href="' + _.escape(e.href) + '">', '<span class="' + _.escape(e.iconClass) + ' fa-fw" aria-hidden="true"></span> ', '<span class="list-group-item-value">' + _.escape(e.title) + "</span>", "</a>", "</li>" ].join("")
};
n.push(t);
}), n = n.concat([ {
type: "dom",
node: [ '<li class="list-group-item">', "<a href=\"{{'default' | helpLink}}\">", '<span class="fa fa-book fa-fw" aria-hidden="true"></span> <span class="list-group-item-value">Documentation</span>', "</a>", "</li>" ].join("")
}, {
type: "dom",
node: [ '<li class="list-group-item">', '<a href="command-line">', '<span class="fa fa-terminal" aria-hidden="true"></span> <span class="list-group-item-value">Command Line Tools</span>', "</a>", "</li>" ].join("")
}, {
type: "dom",
node: [ '<li class="list-group-item">', '<a href="about">', '<span class="pficon pficon-info fa-fw" aria-hidden="true"></span> <span class="list-group-item-value">About</span>', "</a>", "</li>" ].join("")
}, {
type: "dom",
node: _.template([ '<li class="list-group-item">', '<a href="logout">', '<span class="pficon pficon-user fa-fw" aria-hidden="true"></span>', '<span class="list-group-item-value">Log out <span class="username"><%= userName %></span></span>', "</a>", "</li>" ].join(""))({
userName: e ? e.fullName || e.metadata.name : ""
>>>>>>> Bump grunt-contrib-uglify to 3.0.1
})
} ]);
}));
} ]);